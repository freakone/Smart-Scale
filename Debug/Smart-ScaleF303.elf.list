
Smart-ScaleF303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  0800cbc0  0800cbc0  0001cbc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cee4  0800cee4  0001cee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ceec  0800ceec  0001ceec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cef0  0800cef0  0001cef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000069c  20000000  0800cef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002069c  2**0
                  CONTENTS
  8 .bss          00000c14  200006a0  200006a0  000206a0  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  200012b4  200012b4  000206a0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002069c  2**0
                  CONTENTS, READONLY
 11 .debug_line   00008e70  00000000  00000000  000206cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0001233c  00000000  00000000  0002953c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003044  00000000  00000000  0003b878  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  0003e8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  0003fa18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004f6a  00000000  00000000  000409b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00045922  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004d78  00000000  00000000  000459a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006a0 	.word	0x200006a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cba8 	.word	0x0800cba8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006a4 	.word	0x200006a4
 80001cc:	0800cba8 	.word	0x0800cba8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97e 	b.w	8000f54 <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460e      	mov	r6, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9d08      	ldr	r5, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d150      	bne.n	8000d22 <__udivmoddi4+0xb2>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96c      	bls.n	8000d60 <__udivmoddi4+0xf0>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0420 	rsb	r4, lr, #32
 8000c94:	fa20 f404 	lsr.w	r4, r0, r4
 8000c98:	fa01 f60e 	lsl.w	r6, r1, lr
 8000c9c:	ea44 0c06 	orr.w	ip, r4, r6
 8000ca0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cac:	0c22      	lsrs	r2, r4, #16
 8000cae:	fbbc f0f9 	udiv	r0, ip, r9
 8000cb2:	fa1f f887 	uxth.w	r8, r7
 8000cb6:	fb09 c610 	mls	r6, r9, r0, ip
 8000cba:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000cbe:	fb00 f308 	mul.w	r3, r0, r8
 8000cc2:	42b3      	cmp	r3, r6
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x6a>
 8000cc6:	19f6      	adds	r6, r6, r7
 8000cc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ccc:	f080 8122 	bcs.w	8000f14 <__udivmoddi4+0x2a4>
 8000cd0:	42b3      	cmp	r3, r6
 8000cd2:	f240 811f 	bls.w	8000f14 <__udivmoddi4+0x2a4>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	443e      	add	r6, r7
 8000cda:	1af6      	subs	r6, r6, r3
 8000cdc:	b2a2      	uxth	r2, r4
 8000cde:	fbb6 f3f9 	udiv	r3, r6, r9
 8000ce2:	fb09 6613 	mls	r6, r9, r3, r6
 8000ce6:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000cea:	fb03 f808 	mul.w	r8, r3, r8
 8000cee:	45a0      	cmp	r8, r4
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x96>
 8000cf2:	19e4      	adds	r4, r4, r7
 8000cf4:	f103 32ff 	add.w	r2, r3, #4294967295
 8000cf8:	f080 810a 	bcs.w	8000f10 <__udivmoddi4+0x2a0>
 8000cfc:	45a0      	cmp	r8, r4
 8000cfe:	f240 8107 	bls.w	8000f10 <__udivmoddi4+0x2a0>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	443c      	add	r4, r7
 8000d06:	ebc8 0404 	rsb	r4, r8, r4
 8000d0a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d062      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d14:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d18:	2300      	movs	r3, #0
 8000d1a:	602c      	str	r4, [r5, #0]
 8000d1c:	606b      	str	r3, [r5, #4]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0xc6>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d055      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000d30:	4608      	mov	r0, r1
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f183 	clz	r1, r3
 8000d3a:	2900      	cmp	r1, #0
 8000d3c:	f040 8090 	bne.w	8000e60 <__udivmoddi4+0x1f0>
 8000d40:	42b3      	cmp	r3, r6
 8000d42:	d302      	bcc.n	8000d4a <__udivmoddi4+0xda>
 8000d44:	4282      	cmp	r2, r0
 8000d46:	f200 80f8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000d4a:	1a84      	subs	r4, r0, r2
 8000d4c:	eb66 0603 	sbc.w	r6, r6, r3
 8000d50:	2001      	movs	r0, #1
 8000d52:	46b4      	mov	ip, r6
 8000d54:	2d00      	cmp	r5, #0
 8000d56:	d040      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d58:	e885 1010 	stmia.w	r5, {r4, ip}
 8000d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d60:	b912      	cbnz	r2, 8000d68 <__udivmoddi4+0xf8>
 8000d62:	2701      	movs	r7, #1
 8000d64:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d68:	fab7 fe87 	clz	lr, r7
 8000d6c:	f1be 0f00 	cmp.w	lr, #0
 8000d70:	d135      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d72:	1bf3      	subs	r3, r6, r7
 8000d74:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d82:	0c22      	lsrs	r2, r4, #16
 8000d84:	fb08 3610 	mls	r6, r8, r0, r3
 8000d88:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000d8c:	fb0c f300 	mul.w	r3, ip, r0
 8000d90:	42b3      	cmp	r3, r6
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19f6      	adds	r6, r6, r7
 8000d96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42b3      	cmp	r3, r6
 8000d9e:	f200 80ce 	bhi.w	8000f3e <__udivmoddi4+0x2ce>
 8000da2:	4610      	mov	r0, r2
 8000da4:	1af6      	subs	r6, r6, r3
 8000da6:	b2a2      	uxth	r2, r4
 8000da8:	fbb6 f3f8 	udiv	r3, r6, r8
 8000dac:	fb08 6613 	mls	r6, r8, r3, r6
 8000db0:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000db4:	fb0c fc03 	mul.w	ip, ip, r3
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f103 32ff 	add.w	r2, r3, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b5 	bhi.w	8000f34 <__udivmoddi4+0x2c4>
 8000dca:	4613      	mov	r3, r2
 8000dcc:	ebcc 0404 	rsb	r4, ip, r4
 8000dd0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dd4:	e79c      	b.n	8000d10 <__udivmoddi4+0xa0>
 8000dd6:	4629      	mov	r1, r5
 8000dd8:	4628      	mov	r0, r5
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0120 	rsb	r1, lr, #32
 8000de2:	fa06 f30e 	lsl.w	r3, r6, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f901 	lsr.w	r9, r0, r1
 8000dee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000df2:	40ce      	lsrs	r6, r1
 8000df4:	ea49 0903 	orr.w	r9, r9, r3
 8000df8:	fbb6 faf8 	udiv	sl, r6, r8
 8000dfc:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000e00:	fb08 661a 	mls	r6, r8, sl, r6
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000e0c:	fb0a f20c 	mul.w	r2, sl, ip
 8000e10:	429a      	cmp	r2, r3
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1be>
 8000e18:	19db      	adds	r3, r3, r7
 8000e1a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000e1e:	f080 8087 	bcs.w	8000f30 <__udivmoddi4+0x2c0>
 8000e22:	429a      	cmp	r2, r3
 8000e24:	f240 8084 	bls.w	8000f30 <__udivmoddi4+0x2c0>
 8000e28:	f1aa 0a02 	sub.w	sl, sl, #2
 8000e2c:	443b      	add	r3, r7
 8000e2e:	1a9b      	subs	r3, r3, r2
 8000e30:	fa1f f989 	uxth.w	r9, r9
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000e40:	fb01 f60c 	mul.w	r6, r1, ip
 8000e44:	429e      	cmp	r6, r3
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0x1e8>
 8000e48:	19db      	adds	r3, r3, r7
 8000e4a:	f101 32ff 	add.w	r2, r1, #4294967295
 8000e4e:	d26b      	bcs.n	8000f28 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d969      	bls.n	8000f28 <__udivmoddi4+0x2b8>
 8000e54:	3902      	subs	r1, #2
 8000e56:	443b      	add	r3, r7
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000e5e:	e78e      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e60:	f1c1 0e20 	rsb	lr, r1, #32
 8000e64:	fa22 f40e 	lsr.w	r4, r2, lr
 8000e68:	408b      	lsls	r3, r1
 8000e6a:	4323      	orrs	r3, r4
 8000e6c:	fa20 f70e 	lsr.w	r7, r0, lr
 8000e70:	fa06 f401 	lsl.w	r4, r6, r1
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	fa26 f60e 	lsr.w	r6, r6, lr
 8000e7c:	433c      	orrs	r4, r7
 8000e7e:	fbb6 f9fc 	udiv	r9, r6, ip
 8000e82:	0c27      	lsrs	r7, r4, #16
 8000e84:	fb0c 6619 	mls	r6, ip, r9, r6
 8000e88:	fa1f f883 	uxth.w	r8, r3
 8000e8c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000e90:	fb09 f708 	mul.w	r7, r9, r8
 8000e94:	42b7      	cmp	r7, r6
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x242>
 8000ea0:	18f6      	adds	r6, r6, r3
 8000ea2:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea6:	d241      	bcs.n	8000f2c <__udivmoddi4+0x2bc>
 8000ea8:	42b7      	cmp	r7, r6
 8000eaa:	d93f      	bls.n	8000f2c <__udivmoddi4+0x2bc>
 8000eac:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb0:	441e      	add	r6, r3
 8000eb2:	1bf6      	subs	r6, r6, r7
 8000eb4:	b2a0      	uxth	r0, r4
 8000eb6:	fbb6 f4fc 	udiv	r4, r6, ip
 8000eba:	fb0c 6614 	mls	r6, ip, r4, r6
 8000ebe:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000ec2:	fb04 f808 	mul.w	r8, r4, r8
 8000ec6:	45b8      	cmp	r8, r7
 8000ec8:	d907      	bls.n	8000eda <__udivmoddi4+0x26a>
 8000eca:	18ff      	adds	r7, r7, r3
 8000ecc:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ed0:	d228      	bcs.n	8000f24 <__udivmoddi4+0x2b4>
 8000ed2:	45b8      	cmp	r8, r7
 8000ed4:	d926      	bls.n	8000f24 <__udivmoddi4+0x2b4>
 8000ed6:	3c02      	subs	r4, #2
 8000ed8:	441f      	add	r7, r3
 8000eda:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000ede:	ebc8 0707 	rsb	r7, r8, r7
 8000ee2:	fba0 8902 	umull	r8, r9, r0, r2
 8000ee6:	454f      	cmp	r7, r9
 8000ee8:	4644      	mov	r4, r8
 8000eea:	464e      	mov	r6, r9
 8000eec:	d314      	bcc.n	8000f18 <__udivmoddi4+0x2a8>
 8000eee:	d029      	beq.n	8000f44 <__udivmoddi4+0x2d4>
 8000ef0:	b365      	cbz	r5, 8000f4c <__udivmoddi4+0x2dc>
 8000ef2:	ebba 0304 	subs.w	r3, sl, r4
 8000ef6:	eb67 0706 	sbc.w	r7, r7, r6
 8000efa:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000efe:	40cb      	lsrs	r3, r1
 8000f00:	40cf      	lsrs	r7, r1
 8000f02:	ea4e 0303 	orr.w	r3, lr, r3
 8000f06:	e885 0088 	stmia.w	r5, {r3, r7}
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	4613      	mov	r3, r2
 8000f12:	e6f8      	b.n	8000d06 <__udivmoddi4+0x96>
 8000f14:	4610      	mov	r0, r2
 8000f16:	e6e0      	b.n	8000cda <__udivmoddi4+0x6a>
 8000f18:	ebb8 0402 	subs.w	r4, r8, r2
 8000f1c:	eb69 0603 	sbc.w	r6, r9, r3
 8000f20:	3801      	subs	r0, #1
 8000f22:	e7e5      	b.n	8000ef0 <__udivmoddi4+0x280>
 8000f24:	4604      	mov	r4, r0
 8000f26:	e7d8      	b.n	8000eda <__udivmoddi4+0x26a>
 8000f28:	4611      	mov	r1, r2
 8000f2a:	e795      	b.n	8000e58 <__udivmoddi4+0x1e8>
 8000f2c:	4681      	mov	r9, r0
 8000f2e:	e7c0      	b.n	8000eb2 <__udivmoddi4+0x242>
 8000f30:	468a      	mov	sl, r1
 8000f32:	e77c      	b.n	8000e2e <__udivmoddi4+0x1be>
 8000f34:	3b02      	subs	r3, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e748      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e70a      	b.n	8000d54 <__udivmoddi4+0xe4>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	443e      	add	r6, r7
 8000f42:	e72f      	b.n	8000da4 <__udivmoddi4+0x134>
 8000f44:	45c2      	cmp	sl, r8
 8000f46:	d3e7      	bcc.n	8000f18 <__udivmoddi4+0x2a8>
 8000f48:	463e      	mov	r6, r7
 8000f4a:	e7d1      	b.n	8000ef0 <__udivmoddi4+0x280>
 8000f4c:	4629      	mov	r1, r5
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f5c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f5e:	e003      	b.n	8000f68 <LoopCopyDataInit>

08000f60 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f62:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f64:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f66:	3104      	adds	r1, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f6c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f6e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f70:	d3f6      	bcc.n	8000f60 <CopyDataInit>
	ldr	r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f74:	e002      	b.n	8000f7c <LoopFillZerobss>

08000f76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f76:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f78:	f842 3b04 	str.w	r3, [r2], #4

08000f7c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <LoopForever+0x16>)
	cmp	r2, r3
 8000f7e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f80:	d3f9      	bcc.n	8000f76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f82:	f000 f813 	bl	8000fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f008 fe7d 	bl	8009c84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f8a:	f007 fca9 	bl	80088e0 <main>

08000f8e <LoopForever>:

LoopForever:
    b LoopForever
 8000f8e:	e7fe      	b.n	8000f8e <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f90:	20008000 	.word	0x20008000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8000f94:	0800cef4 	.word	0x0800cef4
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f9c:	2000069c 	.word	0x2000069c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8000fa0:	200006a0 	.word	0x200006a0
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fa4:	200012b4 	.word	0x200012b4

08000fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC1_2_IRQHandler>
	...

08000fac <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb0:	4a1f      	ldr	r2, [pc, #124]	; (8001030 <SystemInit+0x84>)
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <SystemInit+0x84>)
 8000fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000fc0:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <SystemInit+0x88>)
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <SystemInit+0x88>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8000fcc:	4919      	ldr	r1, [pc, #100]	; (8001034 <SystemInit+0x88>)
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <SystemInit+0x88>)
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <SystemInit+0x8c>)
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000fd8:	4a16      	ldr	r2, [pc, #88]	; (8001034 <SystemInit+0x88>)
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <SystemInit+0x88>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fe8:	4a12      	ldr	r2, [pc, #72]	; (8001034 <SystemInit+0x88>)
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <SystemInit+0x88>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000ff4:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <SystemInit+0x88>)
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <SystemInit+0x88>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000ffe:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <SystemInit+0x88>)
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <SystemInit+0x88>)
 8001004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001006:	f023 030f 	bic.w	r3, r3, #15
 800100a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800100c:	4909      	ldr	r1, [pc, #36]	; (8001034 <SystemInit+0x88>)
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <SystemInit+0x88>)
 8001010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <SystemInit+0x90>)
 8001014:	4013      	ands	r3, r2
 8001016:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <SystemInit+0x88>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <SystemInit+0x84>)
 8001020:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001024:	609a      	str	r2, [r3, #8]
#endif
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00
 8001034:	40021000 	.word	0x40021000
 8001038:	f87fc00c 	.word	0xf87fc00c
 800103c:	ff00fccc 	.word	0xff00fccc

08001040 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4a08      	ldr	r2, [pc, #32]	; (8001068 <HAL_Init+0x28>)
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_Init+0x28>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f001 f8c5 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f808 	bl	800106c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f008 f880 	bl	8009160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40022000 	.word	0x40022000

0800106c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_InitTick+0x30>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <HAL_InitTick+0x34>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	099b      	lsrs	r3, r3, #6
 8001080:	4618      	mov	r0, r3
 8001082:	f001 f8e3 	bl	800224c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8001086:	2200      	movs	r2, #0
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	f04f 30ff 	mov.w	r0, #4294967295
 800108e:	f001 f8b3 	bl	80021f8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000000 	.word	0x20000000
 80010a0:	10624dd3 	.word	0x10624dd3

080010a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  uwTick++;
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <HAL_IncTick+0x18>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4a03      	ldr	r2, [pc, #12]	; (80010bc <HAL_IncTick+0x18>)
 80010b0:	6013      	str	r3, [r2, #0]
}
 80010b2:	bf00      	nop
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	20000920 	.word	0x20000920

080010c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000920 	.word	0x20000920

080010d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80010e6:	bf00      	nop
 80010e8:	f7ff ffea 	bl	80010c0 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	1ad2      	subs	r2, r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d3f7      	bcc.n	80010e8 <HAL_Delay+0x10>
  {
  }
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b09c      	sub	sp, #112	; 0x70
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e1c6      	b.n	80014ae <HAL_ADC_Init+0x3ae>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	2b00      	cmp	r3, #0
 8001130:	d175      	bne.n	800121e <HAL_ADC_Init+0x11e>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	2b00      	cmp	r3, #0
 8001138:	d152      	bne.n	80011e0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f008 f845 	bl	80091e4 <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d13b      	bne.n	80011e0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 ff0f 	bl	8001f8c <ADC_Disable>
 800116e:	4603      	mov	r3, r0
 8001170:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	f003 0310 	and.w	r3, r3, #16
 800117c:	2b00      	cmp	r3, #0
 800117e:	d12f      	bne.n	80011e0 <HAL_ADC_Init+0xe0>
 8001180:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001184:	2b00      	cmp	r3, #0
 8001186:	d12b      	bne.n	80011e0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001190:	f023 0302 	bic.w	r3, r3, #2
 8001194:	f043 0202 	orr.w	r2, r3, #2
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	6892      	ldr	r2, [r2, #8]
 80011a6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011aa:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01 */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	6892      	ldr	r2, [r2, #8]
 80011b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011ba:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80011bc:	4b85      	ldr	r3, [pc, #532]	; (80013d4 <HAL_ADC_Init+0x2d4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a85      	ldr	r2, [pc, #532]	; (80013d8 <HAL_ADC_Init+0x2d8>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	0c9a      	lsrs	r2, r3, #18
 80011c8:	4613      	mov	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0)
 80011d2:	e002      	b.n	80011da <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	60fb      	str	r3, [r7, #12]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f9      	bne.n	80011d4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d006      	beq.n	80011fc <HAL_ADC_Init+0xfc>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d010      	beq.n	800121e <HAL_ADC_Init+0x11e>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001200:	f023 0312 	bic.w	r3, r3, #18
 8001204:	f043 0210 	orr.w	r2, r3, #16
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001210:	f043 0201 	orr.w	r2, r3, #1
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	2b00      	cmp	r3, #0
 8001228:	f040 8134 	bne.w	8001494 <HAL_ADC_Init+0x394>
 800122c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001230:	2b00      	cmp	r3, #0
 8001232:	f040 812f 	bne.w	8001494 <HAL_ADC_Init+0x394>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 0304 	and.w	r3, r3, #4
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
      (tmp_hal_status == HAL_OK)                                &&
 8001240:	2b00      	cmp	r3, #0
 8001242:	f040 8127 	bne.w	8001494 <HAL_ADC_Init+0x394>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800124e:	f043 0202 	orr.w	r2, r3, #2
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800125e:	d004      	beq.n	800126a <HAL_ADC_Init+0x16a>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a5d      	ldr	r2, [pc, #372]	; (80013dc <HAL_ADC_Init+0x2dc>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_ADC_Init+0x16e>
 800126a:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <HAL_ADC_Init+0x2e0>)
 800126c:	e000      	b.n	8001270 <HAL_ADC_Init+0x170>
 800126e:	4b5d      	ldr	r3, [pc, #372]	; (80013e4 <HAL_ADC_Init+0x2e4>)
 8001270:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800127a:	d102      	bne.n	8001282 <HAL_ADC_Init+0x182>
 800127c:	4b57      	ldr	r3, [pc, #348]	; (80013dc <HAL_ADC_Init+0x2dc>)
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e01a      	b.n	80012b8 <HAL_ADC_Init+0x1b8>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a55      	ldr	r2, [pc, #340]	; (80013dc <HAL_ADC_Init+0x2dc>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d103      	bne.n	8001294 <HAL_ADC_Init+0x194>
 800128c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	e011      	b.n	80012b8 <HAL_ADC_Init+0x1b8>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a53      	ldr	r2, [pc, #332]	; (80013e8 <HAL_ADC_Init+0x2e8>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d102      	bne.n	80012a4 <HAL_ADC_Init+0x1a4>
 800129e:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_ADC_Init+0x2ec>)
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	e009      	b.n	80012b8 <HAL_ADC_Init+0x1b8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a50      	ldr	r2, [pc, #320]	; (80013ec <HAL_ADC_Init+0x2ec>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d102      	bne.n	80012b4 <HAL_ADC_Init+0x1b4>
 80012ae:	4b4e      	ldr	r3, [pc, #312]	; (80013e8 <HAL_ADC_Init+0x2e8>)
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	e001      	b.n	80012b8 <HAL_ADC_Init+0x1b8>
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d108      	bne.n	80012d8 <HAL_ADC_Init+0x1d8>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_ADC_Init+0x1d8>
 80012d4:	2301      	movs	r3, #1
 80012d6:	e000      	b.n	80012da <HAL_ADC_Init+0x1da>
 80012d8:	2300      	movs	r3, #0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d11c      	bne.n	8001318 <HAL_ADC_Init+0x218>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012de:	693b      	ldr	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d010      	beq.n	8001306 <HAL_ADC_Init+0x206>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d107      	bne.n	8001300 <HAL_ADC_Init+0x200>
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_ADC_Init+0x200>
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <HAL_ADC_Init+0x202>
 8001300:	2300      	movs	r3, #0
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001302:	2b00      	cmp	r3, #0
 8001304:	d108      	bne.n	8001318 <HAL_ADC_Init+0x218>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	431a      	orrs	r2, r3
 8001314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001316:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	035a      	lsls	r2, r3, #13
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001322:	2b01      	cmp	r3, #1
 8001324:	d002      	beq.n	800132c <HAL_ADC_Init+0x22c>
 8001326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132a:	e000      	b.n	800132e <HAL_ADC_Init+0x22e>
 800132c:	2300      	movs	r3, #0
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	4313      	orrs	r3, r2
 800133c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800133e:	4313      	orrs	r3, r2
 8001340:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	2b01      	cmp	r3, #1
 8001348:	d11b      	bne.n	8001382 <HAL_ADC_Init+0x282>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d109      	bne.n	8001366 <HAL_ADC_Init+0x266>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001356:	3b01      	subs	r3, #1
 8001358:	045a      	lsls	r2, r3, #17
 800135a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800135c:	4313      	orrs	r3, r2
 800135e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001362:	66bb      	str	r3, [r7, #104]	; 0x68
 8001364:	e00d      	b.n	8001382 <HAL_ADC_Init+0x282>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800136e:	f043 0220 	orr.w	r2, r3, #32
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	f043 0201 	orr.w	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	2b01      	cmp	r3, #1
 8001388:	d03a      	beq.n	8001400 <HAL_ADC_Init+0x300>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <HAL_ADC_Init+0x2e8>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d004      	beq.n	800139e <HAL_ADC_Init+0x29e>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <HAL_ADC_Init+0x2ec>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d128      	bne.n	80013f0 <HAL_ADC_Init+0x2f0>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80013a6:	d012      	beq.n	80013ce <HAL_ADC_Init+0x2ce>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013b0:	d00a      	beq.n	80013c8 <HAL_ADC_Init+0x2c8>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80013ba:	d002      	beq.n	80013c2 <HAL_ADC_Init+0x2c2>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c0:	e018      	b.n	80013f4 <HAL_ADC_Init+0x2f4>
 80013c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c6:	e015      	b.n	80013f4 <HAL_ADC_Init+0x2f4>
 80013c8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80013cc:	e012      	b.n	80013f4 <HAL_ADC_Init+0x2f4>
 80013ce:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80013d2:	e00f      	b.n	80013f4 <HAL_ADC_Init+0x2f4>
 80013d4:	20000000 	.word	0x20000000
 80013d8:	431bde83 	.word	0x431bde83
 80013dc:	50000100 	.word	0x50000100
 80013e0:	50000300 	.word	0x50000300
 80013e4:	50000700 	.word	0x50000700
 80013e8:	50000400 	.word	0x50000400
 80013ec:	50000500 	.word	0x50000500
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013f8:	4313      	orrs	r3, r2
 80013fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80013fc:	4313      	orrs	r3, r2
 80013fe:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b00      	cmp	r3, #0
 800140c:	d113      	bne.n	8001436 <HAL_ADC_Init+0x336>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800141c:	f023 0302 	bic.w	r3, r3, #2
 8001420:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	039a      	lsls	r2, r3, #14
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4313      	orrs	r3, r2
 8001430:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001432:	4313      	orrs	r3, r2
 8001434:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68d9      	ldr	r1, [r3, #12]
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <HAL_ADC_Init+0x3b8>)
 8001442:	400b      	ands	r3, r1
 8001444:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001446:	430b      	orrs	r3, r1
 8001448:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d10c      	bne.n	800146c <HAL_ADC_Init+0x36c>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800145c:	f022 010f 	bic.w	r1, r2, #15
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6a12      	ldr	r2, [r2, #32]
 8001464:	3a01      	subs	r2, #1
 8001466:	430a      	orrs	r2, r1
 8001468:	631a      	str	r2, [r3, #48]	; 0x30
 800146a:	e007      	b.n	800147c <HAL_ADC_Init+0x37c>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001476:	f022 020f 	bic.w	r2, r2, #15
 800147a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f023 0303 	bic.w	r3, r3, #3
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
 8001492:	e00a      	b.n	80014aa <HAL_ADC_Init+0x3aa>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001498:	f023 0312 	bic.w	r3, r3, #18
 800149c:	f043 0210 	orr.w	r2, r3, #16
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80014a4:	2301      	movs	r3, #1
 80014a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80014aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3770      	adds	r7, #112	; 0x70
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	fff0c007 	.word	0xfff0c007

080014bc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 80f8 	bne.w	80016c8 <HAL_ADC_Start+0x20c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d101      	bne.n	80014e6 <HAL_ADC_Start+0x2a>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e0f3      	b.n	80016ce <HAL_ADC_Start+0x212>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fcee 	bl	8001ed0 <ADC_Enable>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f040 80df 	bne.w	80016be <HAL_ADC_Start+0x202>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001504:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001508:	f023 0301 	bic.w	r3, r3, #1
 800150c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800151c:	d004      	beq.n	8001528 <HAL_ADC_Start+0x6c>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a6d      	ldr	r2, [pc, #436]	; (80016d8 <HAL_ADC_Start+0x21c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d106      	bne.n	8001536 <HAL_ADC_Start+0x7a>
 8001528:	4b6c      	ldr	r3, [pc, #432]	; (80016dc <HAL_ADC_Start+0x220>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	2b00      	cmp	r3, #0
 8001532:	d010      	beq.n	8001556 <HAL_ADC_Start+0x9a>
 8001534:	e005      	b.n	8001542 <HAL_ADC_Start+0x86>
 8001536:	4b6a      	ldr	r3, [pc, #424]	; (80016e0 <HAL_ADC_Start+0x224>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <HAL_ADC_Start+0x9a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800154a:	d004      	beq.n	8001556 <HAL_ADC_Start+0x9a>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a64      	ldr	r2, [pc, #400]	; (80016e4 <HAL_ADC_Start+0x228>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d115      	bne.n	8001582 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d036      	beq.n	80015de <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001574:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001578:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	645a      	str	r2, [r3, #68]	; 0x44
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001580:	e02d      	b.n	80015de <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001596:	d004      	beq.n	80015a2 <HAL_ADC_Start+0xe6>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a4e      	ldr	r2, [pc, #312]	; (80016d8 <HAL_ADC_Start+0x21c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d10a      	bne.n	80015b8 <HAL_ADC_Start+0xfc>
 80015a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf14      	ite	ne
 80015b0:	2301      	movne	r3, #1
 80015b2:	2300      	moveq	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	e008      	b.n	80015ca <HAL_ADC_Start+0x10e>
 80015b8:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <HAL_ADC_Start+0x228>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bf14      	ite	ne
 80015c4:	2301      	movne	r3, #1
 80015c6:	2300      	moveq	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d006      	beq.n	80015f8 <HAL_ADC_Start+0x13c>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ee:	f023 0206 	bic.w	r2, r3, #6
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	649a      	str	r2, [r3, #72]	; 0x48
 80015f6:	e002      	b.n	80015fe <HAL_ADC_Start+0x142>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	649a      	str	r2, [r3, #72]	; 0x48
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	221c      	movs	r2, #28
 800160c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001616:	d004      	beq.n	8001622 <HAL_ADC_Start+0x166>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a2e      	ldr	r2, [pc, #184]	; (80016d8 <HAL_ADC_Start+0x21c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d106      	bne.n	8001630 <HAL_ADC_Start+0x174>
 8001622:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <HAL_ADC_Start+0x220>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 031f 	and.w	r3, r3, #31
 800162a:	2b00      	cmp	r3, #0
 800162c:	d03e      	beq.n	80016ac <HAL_ADC_Start+0x1f0>
 800162e:	e005      	b.n	800163c <HAL_ADC_Start+0x180>
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <HAL_ADC_Start+0x224>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 031f 	and.w	r3, r3, #31
 8001638:	2b00      	cmp	r3, #0
 800163a:	d037      	beq.n	80016ac <HAL_ADC_Start+0x1f0>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001644:	d004      	beq.n	8001650 <HAL_ADC_Start+0x194>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a23      	ldr	r2, [pc, #140]	; (80016d8 <HAL_ADC_Start+0x21c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d106      	bne.n	800165e <HAL_ADC_Start+0x1a2>
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <HAL_ADC_Start+0x220>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	2b05      	cmp	r3, #5
 800165a:	d027      	beq.n	80016ac <HAL_ADC_Start+0x1f0>
 800165c:	e005      	b.n	800166a <HAL_ADC_Start+0x1ae>
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_ADC_Start+0x224>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	2b05      	cmp	r3, #5
 8001668:	d020      	beq.n	80016ac <HAL_ADC_Start+0x1f0>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001672:	d004      	beq.n	800167e <HAL_ADC_Start+0x1c2>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_ADC_Start+0x21c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d106      	bne.n	800168c <HAL_ADC_Start+0x1d0>
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_ADC_Start+0x220>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	2b09      	cmp	r3, #9
 8001688:	d010      	beq.n	80016ac <HAL_ADC_Start+0x1f0>
 800168a:	e005      	b.n	8001698 <HAL_ADC_Start+0x1dc>
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <HAL_ADC_Start+0x224>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	2b09      	cmp	r3, #9
 8001696:	d009      	beq.n	80016ac <HAL_ADC_Start+0x1f0>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016a0:	d004      	beq.n	80016ac <HAL_ADC_Start+0x1f0>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <HAL_ADC_Start+0x228>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d10f      	bne.n	80016cc <HAL_ADC_Start+0x210>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	6892      	ldr	r2, [r2, #8]
 80016b6:	f042 0204 	orr.w	r2, r2, #4
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	e006      	b.n	80016cc <HAL_ADC_Start+0x210>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016c6:	e001      	b.n	80016cc <HAL_ADC_Start+0x210>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016c8:	2302      	movs	r3, #2
 80016ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	50000100 	.word	0x50000100
 80016dc:	50000300 	.word	0x50000300
 80016e0:	50000700 	.word	0x50000700
 80016e4:	50000400 	.word	0x50000400

080016e8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d102      	bne.n	8001704 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80016fe:	2308      	movs	r3, #8
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	e03a      	b.n	800177a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800170c:	d004      	beq.n	8001718 <HAL_ADC_PollForConversion+0x30>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a6e      	ldr	r2, [pc, #440]	; (80018cc <HAL_ADC_PollForConversion+0x1e4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d101      	bne.n	800171c <HAL_ADC_PollForConversion+0x34>
 8001718:	4b6d      	ldr	r3, [pc, #436]	; (80018d0 <HAL_ADC_PollForConversion+0x1e8>)
 800171a:	e000      	b.n	800171e <HAL_ADC_PollForConversion+0x36>
 800171c:	4b6d      	ldr	r3, [pc, #436]	; (80018d4 <HAL_ADC_PollForConversion+0x1ec>)
 800171e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	2b00      	cmp	r3, #0
 800172a:	d112      	bne.n	8001752 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d01d      	beq.n	8001776 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f043 0220 	orr.w	r2, r3, #32
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0b8      	b.n	80018c4 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00b      	beq.n	8001776 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f043 0220 	orr.w	r2, r3, #32
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0a6      	b.n	80018c4 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001776:	230c      	movs	r3, #12
 8001778:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001782:	d004      	beq.n	800178e <HAL_ADC_PollForConversion+0xa6>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a50      	ldr	r2, [pc, #320]	; (80018cc <HAL_ADC_PollForConversion+0x1e4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d106      	bne.n	800179c <HAL_ADC_PollForConversion+0xb4>
 800178e:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <HAL_ADC_PollForConversion+0x1e8>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	2b00      	cmp	r3, #0
 8001798:	d010      	beq.n	80017bc <HAL_ADC_PollForConversion+0xd4>
 800179a:	e005      	b.n	80017a8 <HAL_ADC_PollForConversion+0xc0>
 800179c:	4b4d      	ldr	r3, [pc, #308]	; (80018d4 <HAL_ADC_PollForConversion+0x1ec>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d009      	beq.n	80017bc <HAL_ADC_PollForConversion+0xd4>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017b0:	d004      	beq.n	80017bc <HAL_ADC_PollForConversion+0xd4>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a48      	ldr	r2, [pc, #288]	; (80018d8 <HAL_ADC_PollForConversion+0x1f0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d104      	bne.n	80017c6 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	e00f      	b.n	80017e6 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017ce:	d004      	beq.n	80017da <HAL_ADC_PollForConversion+0xf2>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a3d      	ldr	r2, [pc, #244]	; (80018cc <HAL_ADC_PollForConversion+0x1e4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d102      	bne.n	80017e0 <HAL_ADC_PollForConversion+0xf8>
 80017da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017de:	e000      	b.n	80017e2 <HAL_ADC_PollForConversion+0xfa>
 80017e0:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <HAL_ADC_PollForConversion+0x1f0>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80017e6:	f7ff fc6b 	bl	80010c0 <HAL_GetTick>
 80017ea:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80017ec:	e01a      	b.n	8001824 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f4:	d016      	beq.n	8001824 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <HAL_ADC_PollForConversion+0x124>
 80017fc:	f7ff fc60 	bl	80010c0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad2      	subs	r2, r2, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d90b      	bls.n	8001824 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001810:	f043 0204 	orr.w	r2, r3, #4
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e04f      	b.n	80018c4 <HAL_ADC_PollForConversion+0x1dc>
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0dd      	beq.n	80017ee <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001848:	2b00      	cmp	r3, #0
 800184a:	d131      	bne.n	80018b0 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001852:	2b00      	cmp	r3, #0
 8001854:	d12c      	bne.n	80018b0 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d025      	beq.n	80018b0 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	d112      	bne.n	8001898 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	645a      	str	r2, [r3, #68]	; 0x44
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d112      	bne.n	80018b0 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	f043 0201 	orr.w	r2, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
 8001896:	e00b      	b.n	80018b0 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189c:	f043 0220 	orr.w	r2, r3, #32
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a8:	f043 0201 	orr.w	r2, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d103      	bne.n	80018c2 <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	50000100 	.word	0x50000100
 80018d0:	50000300 	.word	0x50000300
 80018d4:	50000700 	.word	0x50000700
 80018d8:	50000400 	.word	0x50000400

080018dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018f8:	b490      	push	{r4, r7}
 80018fa:	b09c      	sub	sp, #112	; 0x70
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_ADC_ConfigChannel+0x22>
 8001916:	2302      	movs	r3, #2
 8001918:	e2cd      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x5be>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	f040 82b1 	bne.w	8001e94 <HAL_ADC_ConfigChannel+0x59c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4 */
    if (sConfig->Rank < 5)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b04      	cmp	r3, #4
 8001938:	d81c      	bhi.n	8001974 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6819      	ldr	r1, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	461a      	mov	r2, r3
 8001952:	231f      	movs	r3, #31
 8001954:	4093      	lsls	r3, r2
 8001956:	43db      	mvns	r3, r3
 8001958:	4018      	ands	r0, r3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681c      	ldr	r4, [r3, #0]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	fa04 f303 	lsl.w	r3, r4, r3
 800196e:	4303      	orrs	r3, r0
 8001970:	630b      	str	r3, [r1, #48]	; 0x30
 8001972:	e063      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9 */
    else if (sConfig->Rank < 10)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b09      	cmp	r3, #9
 800197a:	d81e      	bhi.n	80019ba <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6819      	ldr	r1, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	3b1e      	subs	r3, #30
 8001994:	221f      	movs	r2, #31
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	4018      	ands	r0, r3
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681c      	ldr	r4, [r3, #0]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	3b1e      	subs	r3, #30
 80019b0:	fa04 f303 	lsl.w	r3, r4, r3
 80019b4:	4303      	orrs	r3, r0
 80019b6:	634b      	str	r3, [r1, #52]	; 0x34
 80019b8:	e040      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14 */
    else if (sConfig->Rank < 15)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b0e      	cmp	r3, #14
 80019c0:	d81e      	bhi.n	8001a00 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6819      	ldr	r1, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4413      	add	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	3b3c      	subs	r3, #60	; 0x3c
 80019da:	221f      	movs	r2, #31
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4018      	ands	r0, r3
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681c      	ldr	r4, [r3, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	3b3c      	subs	r3, #60	; 0x3c
 80019f6:	fa04 f303 	lsl.w	r3, r4, r3
 80019fa:	4303      	orrs	r3, r0
 80019fc:	638b      	str	r3, [r1, #56]	; 0x38
 80019fe:	e01d      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16 */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6819      	ldr	r1, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	3b5a      	subs	r3, #90	; 0x5a
 8001a18:	221f      	movs	r2, #31
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	4018      	ands	r0, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681c      	ldr	r4, [r3, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	3b5a      	subs	r3, #90	; 0x5a
 8001a34:	fa04 f303 	lsl.w	r3, r4, r3
 8001a38:	4303      	orrs	r3, r0
 8001a3a:	63cb      	str	r3, [r1, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 80e5 	bne.w	8001c16 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18 */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b09      	cmp	r3, #9
 8001a52:	d91c      	bls.n	8001a8e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6819      	ldr	r1, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6998      	ldr	r0, [r3, #24]
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	3b1e      	subs	r3, #30
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4018      	ands	r0, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689c      	ldr	r4, [r3, #8]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	3b1e      	subs	r3, #30
 8001a84:	fa04 f303 	lsl.w	r3, r4, r3
 8001a88:	4303      	orrs	r3, r0
 8001a8a:	618b      	str	r3, [r1, #24]
 8001a8c:	e019      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9 */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6819      	ldr	r1, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6958      	ldr	r0, [r3, #20]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	2207      	movs	r2, #7
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	4018      	ands	r0, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689c      	ldr	r4, [r3, #8]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	fa04 f303 	lsl.w	r3, r4, r3
 8001abe:	4303      	orrs	r3, r0
 8001ac0:	614b      	str	r3, [r1, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f003 0318 	and.w	r3, r3, #24
 8001ad0:	08db      	lsrs	r3, r3, #3
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d84f      	bhi.n	8001b84 <HAL_ADC_ConfigChannel+0x28c>
 8001ae4:	a201      	add	r2, pc, #4	; (adr r2, 8001aec <HAL_ADC_ConfigChannel+0x1f4>)
 8001ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aea:	bf00      	nop
 8001aec:	08001afd 	.word	0x08001afd
 8001af0:	08001b1f 	.word	0x08001b1f
 8001af4:	08001b41 	.word	0x08001b41
 8001af8:	08001b63 	.word	0x08001b63
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1 */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001b06:	4ba1      	ldr	r3, [pc, #644]	; (8001d8c <HAL_ADC_ConfigChannel+0x494>)
 8001b08:	400b      	ands	r3, r1
 8001b0a:	6839      	ldr	r1, [r7, #0]
 8001b0c:	6809      	ldr	r1, [r1, #0]
 8001b0e:	0688      	lsls	r0, r1, #26
 8001b10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001b12:	4301      	orrs	r1, r0
 8001b14:	430b      	orrs	r3, r1
 8001b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b1a:	6613      	str	r3, [r2, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b1c:	e07b      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2 */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001b28:	4b98      	ldr	r3, [pc, #608]	; (8001d8c <HAL_ADC_ConfigChannel+0x494>)
 8001b2a:	400b      	ands	r3, r1
 8001b2c:	6839      	ldr	r1, [r7, #0]
 8001b2e:	6809      	ldr	r1, [r1, #0]
 8001b30:	0688      	lsls	r0, r1, #26
 8001b32:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001b34:	4301      	orrs	r1, r0
 8001b36:	430b      	orrs	r3, r1
 8001b38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b3c:	6653      	str	r3, [r2, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b3e:	e06a      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3 */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001b4a:	4b90      	ldr	r3, [pc, #576]	; (8001d8c <HAL_ADC_ConfigChannel+0x494>)
 8001b4c:	400b      	ands	r3, r1
 8001b4e:	6839      	ldr	r1, [r7, #0]
 8001b50:	6809      	ldr	r1, [r1, #0]
 8001b52:	0688      	lsls	r0, r1, #26
 8001b54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001b56:	4301      	orrs	r1, r0
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b5e:	6693      	str	r3, [r2, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b60:	e059      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4 */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8001b6c:	4b87      	ldr	r3, [pc, #540]	; (8001d8c <HAL_ADC_ConfigChannel+0x494>)
 8001b6e:	400b      	ands	r3, r1
 8001b70:	6839      	ldr	r1, [r7, #0]
 8001b72:	6809      	ldr	r1, [r1, #0]
 8001b74:	0688      	lsls	r0, r1, #26
 8001b76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001b78:	4301      	orrs	r1, r0
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b80:	66d3      	str	r3, [r2, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b82:	e048      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	069b      	lsls	r3, r3, #26
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d107      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001ba2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ba6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	069b      	lsls	r3, r3, #26
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d107      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001bc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bca:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	069b      	lsls	r3, r3, #26
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d107      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6812      	ldr	r2, [r2, #0]
 8001be8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001bea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bee:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	069b      	lsls	r3, r3, #26
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d107      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8001c0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c12:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001c14:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d108      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x33e>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_ADC_ConfigChannel+0x33e>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x340>
 8001c36:	2300      	movs	r3, #0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f040 8136 	bne.w	8001eaa <HAL_ADC_ConfigChannel+0x5b2>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d00f      	beq.n	8001c66 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	2001      	movs	r0, #1
 8001c58:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5c:	43d2      	mvns	r2, r2
 8001c5e:	400a      	ands	r2, r1
 8001c60:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001c64:	e04a      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x404>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	2001      	movs	r0, #1
 8001c78:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18 */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b09      	cmp	r3, #9
 8001c88:	d91c      	bls.n	8001cc4 <HAL_ADC_ConfigChannel+0x3cc>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6819      	ldr	r1, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6998      	ldr	r0, [r3, #24]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3b1b      	subs	r3, #27
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	4018      	ands	r0, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689c      	ldr	r4, [r3, #8]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3b1b      	subs	r3, #27
 8001cba:	fa04 f303 	lsl.w	r3, r4, r3
 8001cbe:	4303      	orrs	r3, r0
 8001cc0:	618b      	str	r3, [r1, #24]
 8001cc2:	e01b      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x404>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1) );
      }
      else /* For channels 1 to 9 */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6819      	ldr	r1, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6958      	ldr	r0, [r3, #20]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	2207      	movs	r2, #7
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4018      	ands	r0, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689c      	ldr	r4, [r3, #8]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	4613      	mov	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	fa04 f303 	lsl.w	r3, r4, r3
 8001cf8:	4303      	orrs	r3, r0
 8001cfa:	614b      	str	r3, [r1, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d04:	d004      	beq.n	8001d10 <HAL_ADC_ConfigChannel+0x418>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a21      	ldr	r2, [pc, #132]	; (8001d90 <HAL_ADC_ConfigChannel+0x498>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x41c>
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_ADC_ConfigChannel+0x49c>)
 8001d12:	e000      	b.n	8001d16 <HAL_ADC_ConfigChannel+0x41e>
 8001d14:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_ADC_ConfigChannel+0x4a0>)
 8001d16:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b10      	cmp	r3, #16
 8001d1e:	d105      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d015      	beq.n	8001d58 <HAL_ADC_ConfigChannel+0x460>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001d30:	2b11      	cmp	r3, #17
 8001d32:	d105      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x448>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00b      	beq.n	8001d58 <HAL_ADC_ConfigChannel+0x460>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001d44:	2b12      	cmp	r3, #18
 8001d46:	f040 80b0 	bne.w	8001eaa <HAL_ADC_ConfigChannel+0x5b2>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001d4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 80a9 	bne.w	8001eaa <HAL_ADC_ConfigChannel+0x5b2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d60:	d102      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x470>
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_ADC_ConfigChannel+0x498>)
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	e027      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x4c0>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a08      	ldr	r2, [pc, #32]	; (8001d90 <HAL_ADC_ConfigChannel+0x498>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d103      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x482>
 8001d72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	e01e      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x4c0>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_ADC_ConfigChannel+0x4a4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d10f      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x4ac>
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_ADC_ConfigChannel+0x4a8>)
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	e016      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x4c0>
 8001d8a:	bf00      	nop
 8001d8c:	83fff000 	.word	0x83fff000
 8001d90:	50000100 	.word	0x50000100
 8001d94:	50000300 	.word	0x50000300
 8001d98:	50000700 	.word	0x50000700
 8001d9c:	50000400 	.word	0x50000400
 8001da0:	50000500 	.word	0x50000500
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a45      	ldr	r2, [pc, #276]	; (8001ec0 <HAL_ADC_ConfigChannel+0x5c8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d102      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x4bc>
 8001dae:	4b45      	ldr	r3, [pc, #276]	; (8001ec4 <HAL_ADC_ConfigChannel+0x5cc>)
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	e001      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x4c0>
 8001db4:	2300      	movs	r3, #0
 8001db6:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d108      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x4e0>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_ADC_ConfigChannel+0x4e0>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_ADC_ConfigChannel+0x4e2>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d150      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x588>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001dde:	693b      	ldr	r3, [r7, #16]
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d010      	beq.n	8001e06 <HAL_ADC_ConfigChannel+0x50e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d107      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x508>
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_ADC_ConfigChannel+0x508>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x50a>
 8001e00:	2300      	movs	r3, #0
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d13c      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x588>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b10      	cmp	r3, #16
 8001e0c:	d11d      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x552>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e16:	d118      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x552>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e22:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_ADC_ConfigChannel+0x5d0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a28      	ldr	r2, [pc, #160]	; (8001ecc <HAL_ADC_ConfigChannel+0x5d4>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	0c9a      	lsrs	r2, r3, #18
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0)
 8001e3a:	e002      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x54a>
          {
            wait_loop_index--;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f9      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x544>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e48:	e02e      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x5b0>
            wait_loop_index--;
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b11      	cmp	r3, #17
 8001e50:	d10b      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x572>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e5a:	d106      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x572>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e66:	609a      	str	r2, [r3, #8]
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e68:	e01e      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x5b0>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b12      	cmp	r3, #18
 8001e70:	d11a      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x5b0>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e7c:	609a      	str	r2, [r3, #8]
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001e7e:	e013      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x5b0>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e84:	f043 0220 	orr.w	r2, r3, #32
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001e92:	e00a      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x5b2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	f043 0220 	orr.w	r2, r3, #32
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001ea6:	e000      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x5b2>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ea8:	bf00      	nop
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001eb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3770      	adds	r7, #112	; 0x70
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc90      	pop	{r4, r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	50000500 	.word	0x50000500
 8001ec4:	50000400 	.word	0x50000400
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	431bde83 	.word	0x431bde83

08001ed0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d108      	bne.n	8001efc <ADC_Enable+0x2c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <ADC_Enable+0x2c>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <ADC_Enable+0x2e>
 8001efc:	2300      	movs	r3, #0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d13c      	bne.n	8001f7c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <ADC_Enable+0xb8>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00d      	beq.n	8001f2c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f14:	f043 0210 	orr.w	r2, r3, #16
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e028      	b.n	8001f7e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	6892      	ldr	r2, [r2, #8]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001f3c:	f7ff f8c0 	bl	80010c0 <HAL_GetTick>
 8001f40:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f42:	e014      	b.n	8001f6e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f44:	f7ff f8bc 	bl	80010c0 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d90d      	bls.n	8001f6e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f043 0210 	orr.w	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e007      	b.n	8001f7e <ADC_Enable+0xae>
    __HAL_ADC_ENABLE(hadc);
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0e3      	beq.n	8001f44 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	8000003f 	.word	0x8000003f

08001f8c <ADC_Disable>:
  *         stopped.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d108      	bne.n	8001fb8 <ADC_Disable+0x2c>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <ADC_Disable+0x2c>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <ADC_Disable+0x2e>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d040      	beq.n	8002040 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 030d 	and.w	r3, r3, #13
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d10f      	bne.n	8001fec <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	6892      	ldr	r2, [r2, #8]
 8001fd6:	f042 0202 	orr.w	r2, r2, #2
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001fe4:	f7ff f86c 	bl	80010c0 <HAL_GetTick>
 8001fe8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001fea:	e022      	b.n	8002032 <ADC_Disable+0xa6>
      __HAL_ADC_DISABLE(hadc);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff0:	f043 0210 	orr.w	r2, r3, #16
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffc:	f043 0201 	orr.w	r2, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e01c      	b.n	8002042 <ADC_Disable+0xb6>
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002008:	f7ff f85a 	bl	80010c0 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d90d      	bls.n	8002032 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f043 0210 	orr.w	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e007      	b.n	8002042 <ADC_Disable+0xb6>
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e3      	bne.n	8002008 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop

0800204c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <NVIC_SetPriorityGrouping+0x44>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	; (8002090 <NVIC_SetPriorityGrouping+0x44>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <NVIC_GetPriorityGrouping+0x18>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020a0:	0a1b      	lsrs	r3, r3, #8
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80020ba:	4909      	ldr	r1, [pc, #36]	; (80020e0 <NVIC_EnableIRQ+0x30>)
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	095b      	lsrs	r3, r3, #5
 80020c2:	79fa      	ldrb	r2, [r7, #7]
 80020c4:	f002 021f 	and.w	r2, r2, #31
 80020c8:	2001      	movs	r0, #1
 80020ca:	fa00 f202 	lsl.w	r2, r0, r2
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	da0b      	bge.n	8002110 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f8:	490d      	ldr	r1, [pc, #52]	; (8002130 <NVIC_SetPriority+0x4c>)
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	3b04      	subs	r3, #4
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	440b      	add	r3, r1
 800210c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800210e:	e009      	b.n	8002124 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002110:	4908      	ldr	r1, [pc, #32]	; (8002134 <NVIC_SetPriority+0x50>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	440b      	add	r3, r1
 8002120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00
 8002134:	e000e100 	.word	0xe000e100

08002138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f1c3 0307 	rsb	r3, r3, #7
 8002152:	2b04      	cmp	r3, #4
 8002154:	bf28      	it	cs
 8002156:	2304      	movcs	r3, #4
 8002158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3304      	adds	r3, #4
 800215e:	2b06      	cmp	r3, #6
 8002160:	d902      	bls.n	8002168 <NVIC_EncodePriority+0x30>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3b03      	subs	r3, #3
 8002166:	e000      	b.n	800216a <NVIC_EncodePriority+0x32>
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	2201      	movs	r2, #1
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	1e5a      	subs	r2, r3, #1
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	401a      	ands	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800217e:	2101      	movs	r1, #1
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	1e59      	subs	r1, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800218c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	; 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop

0800219c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021ac:	d301      	bcc.n	80021b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ae:	2301      	movs	r3, #1
 80021b0:	e00f      	b.n	80021d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <SysTick_Config+0x40>)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ba:	210f      	movs	r1, #15
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f7ff ff90 	bl	80020e4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <SysTick_Config+0x40>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ca:	4b04      	ldr	r3, [pc, #16]	; (80021dc <SysTick_Config+0x40>)
 80021cc:	2207      	movs	r2, #7
 80021ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	e000e010 	.word	0xe000e010

080021e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff2f 	bl	800204c <NVIC_SetPriorityGrouping>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop

080021f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800220a:	f7ff ff43 	bl	8002094 <NVIC_GetPriorityGrouping>
 800220e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	6978      	ldr	r0, [r7, #20]
 8002216:	f7ff ff8f 	bl	8002138 <NVIC_EncodePriority>
 800221a:	4602      	mov	r2, r0
 800221c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002220:	4611      	mov	r1, r2
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ff5e 	bl	80020e4 <NVIC_SetPriority>
}
 8002228:	bf00      	nop
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff36 	bl	80020b0 <NVIC_EnableIRQ>
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ffa1 	bl	800219c <SysTick_Config>
 800225a:	4603      	mov	r3, r0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b04      	cmp	r3, #4
 8002270:	d106      	bne.n	8002280 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f043 0304 	orr.w	r3, r3, #4
 800227c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800227e:	e005      	b.n	800228c <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002280:	4a05      	ldr	r2, [pc, #20]	; (8002298 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002282:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 0304 	bic.w	r3, r3, #4
 800228a:	6013      	str	r3, [r2, #0]
  }
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000e010 	.word	0xe000e010

0800229c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80022a0:	f000 f802 	bl	80022a8 <HAL_SYSTICK_Callback>
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop

080022b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc: CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e054      	b.n	8002374 <HAL_CRC_Init+0xbc>
  }
  
  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7f5b      	ldrb	r3, [r3, #29]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <HAL_CRC_Init+0x28>
  {   
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f006 ffa0 	bl	8009220 <HAL_CRC_MspInit>
  }
  
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	791b      	ldrb	r3, [r3, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10c      	bne.n	8002308 <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a22      	ldr	r2, [pc, #136]	; (800237c <HAL_CRC_Init+0xc4>)
 80022f4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	6892      	ldr	r2, [r2, #8]
 8002300:	f022 0218 	bic.w	r2, r2, #24
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	e00c      	b.n	8002322 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6899      	ldr	r1, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	461a      	mov	r2, r3
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f834 	bl	8002380 <HAL_CRCEx_Polynomial_Set>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e028      	b.n	8002374 <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	795b      	ldrb	r3, [r3, #5]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d105      	bne.n	8002336 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f04f 32ff 	mov.w	r2, #4294967295
 8002332:	611a      	str	r2, [r3, #16]
 8002334:	e004      	b.n	8002340 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6912      	ldr	r2, [r2, #16]
 800233e:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	6892      	ldr	r2, [r2, #8]
 800234a:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6952      	ldr	r2, [r2, #20]
 8002352:	430a      	orrs	r2, r1
 8002354:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	6892      	ldr	r2, [r2, #8]
 8002360:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6992      	ldr	r2, [r2, #24]
 8002368:	430a      	orrs	r2, r1
 800236a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	04c11db7 	.word	0x04c11db7

08002380 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800238c:	231f      	movs	r3, #31
 800238e:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0)){}
 8002390:	bf00      	nop
 8002392:	2201      	movs	r2, #1
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d104      	bne.n	80023aa <HAL_CRCEx_Polynomial_Set+0x2a>
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	1e5a      	subs	r2, r3, #1
 80023a4:	617a      	str	r2, [r7, #20]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f3      	bne.n	8002392 <HAL_CRCEx_Polynomial_Set+0x12>

  switch (PolyLength)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b18      	cmp	r3, #24
 80023ae:	d844      	bhi.n	800243a <HAL_CRCEx_Polynomial_Set+0xba>
 80023b0:	a201      	add	r2, pc, #4	; (adr r2, 80023b8 <HAL_CRCEx_Polynomial_Set+0x38>)
 80023b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b6:	bf00      	nop
 80023b8:	0800243b 	.word	0x0800243b
 80023bc:	0800243b 	.word	0x0800243b
 80023c0:	0800243b 	.word	0x0800243b
 80023c4:	0800243b 	.word	0x0800243b
 80023c8:	0800243b 	.word	0x0800243b
 80023cc:	0800243b 	.word	0x0800243b
 80023d0:	0800243b 	.word	0x0800243b
 80023d4:	0800243b 	.word	0x0800243b
 80023d8:	08002431 	.word	0x08002431
 80023dc:	0800243b 	.word	0x0800243b
 80023e0:	0800243b 	.word	0x0800243b
 80023e4:	0800243b 	.word	0x0800243b
 80023e8:	0800243b 	.word	0x0800243b
 80023ec:	0800243b 	.word	0x0800243b
 80023f0:	0800243b 	.word	0x0800243b
 80023f4:	0800243b 	.word	0x0800243b
 80023f8:	08002427 	.word	0x08002427
 80023fc:	0800243b 	.word	0x0800243b
 8002400:	0800243b 	.word	0x0800243b
 8002404:	0800243b 	.word	0x0800243b
 8002408:	0800243b 	.word	0x0800243b
 800240c:	0800243b 	.word	0x0800243b
 8002410:	0800243b 	.word	0x0800243b
 8002414:	0800243b 	.word	0x0800243b
 8002418:	0800241d 	.word	0x0800241d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B) 
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b06      	cmp	r3, #6
 8002420:	d90d      	bls.n	800243e <HAL_CRCEx_Polynomial_Set+0xbe>
      {
        return  HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e01f      	b.n	8002466 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b07      	cmp	r3, #7
 800242a:	d90a      	bls.n	8002442 <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e01a      	b.n	8002466 <HAL_CRCEx_Polynomial_Set+0xe6>
      }      
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	2b0f      	cmp	r3, #15
 8002434:	d907      	bls.n	8002446 <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e015      	b.n	8002466 <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break; 
    default:
      break;                  
 800243a:	bf00      	nop
 800243c:	e004      	b.n	8002448 <HAL_CRCEx_Polynomial_Set+0xc8>
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B) 
      {
        return  HAL_ERROR;
      }
      break;
 800243e:	bf00      	nop
 8002440:	e002      	b.n	8002448 <HAL_CRCEx_Polynomial_Set+0xc8>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        return  HAL_ERROR;
      }      
      break;
 8002442:	bf00      	nop
 8002444:	e000      	b.n	8002448 <HAL_CRCEx_Polynomial_Set+0xc8>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
      }      
      break;
 8002446:	bf00      	nop
    default:
      break;                  
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	6892      	ldr	r2, [r2, #8]
 800245a:	f022 0118 	bic.w	r1, r2, #24
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	430a      	orrs	r2, r1
 8002462:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	371c      	adds	r7, #28
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop

08002474 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800248e:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_FLASH_Program+0xdc>)
 8002490:	7e1b      	ldrb	r3, [r3, #24]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_FLASH_Program+0x26>
 8002496:	2302      	movs	r3, #2
 8002498:	e055      	b.n	8002546 <HAL_FLASH_Program+0xd2>
 800249a:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_FLASH_Program+0xdc>)
 800249c:	2201      	movs	r2, #1
 800249e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80024a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024a4:	f000 f8a0 	bl	80025e8 <FLASH_WaitForLastOperation>
 80024a8:	4603      	mov	r3, r0
 80024aa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d145      	bne.n	800253e <HAL_FLASH_Program+0xca>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d102      	bne.n	80024be <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1;
 80024b8:	2301      	movs	r3, #1
 80024ba:	757b      	strb	r3, [r7, #21]
 80024bc:	e007      	b.n	80024ce <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d102      	bne.n	80024ca <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2;
 80024c4:	2302      	movs	r3, #2
 80024c6:	757b      	strb	r3, [r7, #21]
 80024c8:	e001      	b.n	80024ce <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4;
 80024ca:	2304      	movs	r3, #4
 80024cc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0; index < nbiterations; index++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	75bb      	strb	r3, [r7, #22]
 80024d2:	e02e      	b.n	8002532 <HAL_FLASH_Program+0xbe>
    {
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80024d4:	7dbb      	ldrb	r3, [r7, #22]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	461a      	mov	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	eb02 0e03 	add.w	lr, r2, r3
 80024e0:	7dbb      	ldrb	r3, [r7, #22]
 80024e2:	0119      	lsls	r1, r3, #4
 80024e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024e8:	f1c1 0620 	rsb	r6, r1, #32
 80024ec:	f1a1 0020 	sub.w	r0, r1, #32
 80024f0:	fa22 f401 	lsr.w	r4, r2, r1
 80024f4:	fa03 f606 	lsl.w	r6, r3, r6
 80024f8:	4334      	orrs	r4, r6
 80024fa:	fa23 f000 	lsr.w	r0, r3, r0
 80024fe:	4304      	orrs	r4, r0
 8002500:	fa23 f501 	lsr.w	r5, r3, r1
 8002504:	b2a3      	uxth	r3, r4
 8002506:	4619      	mov	r1, r3
 8002508:	4670      	mov	r0, lr
 800250a:	f000 f851 	bl	80025b0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800250e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002512:	f000 f869 	bl	80025e8 <FLASH_WaitForLastOperation>
 8002516:	4603      	mov	r3, r0
 8002518:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800251a:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <HAL_FLASH_Program+0xe0>)
 800251c:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <HAL_FLASH_Program+0xe0>)
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002526:	7dfb      	ldrb	r3, [r7, #23]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <HAL_FLASH_Program+0xc8>
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4;
    }

    for (index = 0; index < nbiterations; index++)
 800252c:	7dbb      	ldrb	r3, [r7, #22]
 800252e:	3301      	adds	r3, #1
 8002530:	75bb      	strb	r3, [r7, #22]
 8002532:	7dba      	ldrb	r2, [r7, #22]
 8002534:	7d7b      	ldrb	r3, [r7, #21]
 8002536:	429a      	cmp	r2, r3
 8002538:	d3cc      	bcc.n	80024d4 <HAL_FLASH_Program+0x60>
 800253a:	e000      	b.n	800253e <HAL_FLASH_Program+0xca>
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
      {
        break;
 800253c:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <HAL_FLASH_Program+0xdc>)
 8002540:	2200      	movs	r2, #0
 8002542:	761a      	strb	r2, [r3, #24]

  return status;
 8002544:	7dfb      	ldrb	r3, [r7, #23]
}
 8002546:	4618      	mov	r0, r3
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800254e:	bf00      	nop
 8002550:	20000928 	.word	0x20000928
 8002554:	40022000 	.word	0x40022000

08002558 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_FLASH_Unlock+0x2c>)
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_FLASH_Unlock+0x20>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_FLASH_Unlock+0x2c>)
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <HAL_FLASH_Unlock+0x30>)
 800256c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_FLASH_Unlock+0x2c>)
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <HAL_FLASH_Unlock+0x34>)
 8002572:	605a      	str	r2, [r3, #4]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK; 
 8002574:	2300      	movs	r3, #0
 8002576:	e000      	b.n	800257a <HAL_FLASH_Unlock+0x22>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
  }
  else
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
  }

  return HAL_OK; 
}
 800257a:	4618      	mov	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	40022000 	.word	0x40022000
 8002588:	45670123 	.word	0x45670123
 800258c:	cdef89ab 	.word	0xcdef89ab

08002590 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002594:	4a05      	ldr	r2, [pc, #20]	; (80025ac <HAL_FLASH_Lock+0x1c>)
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <HAL_FLASH_Lock+0x1c>)
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	40022000 	.word	0x40022000

080025b0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <FLASH_Program_HalfWord+0x30>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80025c2:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <FLASH_Program_HalfWord+0x34>)
 80025c4:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <FLASH_Program_HalfWord+0x34>)
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	887a      	ldrh	r2, [r7, #2]
 80025d2:	801a      	strh	r2, [r3, #0]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	20000928 	.word	0x20000928
 80025e4:	40022000 	.word	0x40022000

080025e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80025f0:	f7fe fd66 	bl	80010c0 <HAL_GetTick>
 80025f4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80025f6:	e010      	b.n	800261a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d00c      	beq.n	800261a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <FLASH_WaitForLastOperation+0x2e>
 8002606:	f7fe fd5b 	bl	80010c0 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1ad2      	subs	r2, r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	d901      	bls.n	800261a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e01f      	b.n	800265a <FLASH_WaitForLastOperation+0x72>
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <FLASH_WaitForLastOperation+0x7c>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1e8      	bne.n	80025f8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002626:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <FLASH_WaitForLastOperation+0x7c>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <FLASH_WaitForLastOperation+0x7c>)
 8002634:	2220      	movs	r2, #32
 8002636:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <FLASH_WaitForLastOperation+0x7c>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	2b00      	cmp	r3, #0
 8002642:	d105      	bne.n	8002650 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <FLASH_WaitForLastOperation+0x7c>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0304 	and.w	r3, r3, #4
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <FLASH_WaitForLastOperation+0x70>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002650:	f000 f80a 	bl	8002668 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40022000 	.word	0x40022000

08002668 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002672:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <FLASH_SetErrorCode+0x5c>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <FLASH_SetErrorCode+0x60>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f043 0302 	orr.w	r3, r3, #2
 8002686:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <FLASH_SetErrorCode+0x60>)
 8002688:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f043 0310 	orr.w	r3, r3, #16
 8002690:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <FLASH_SetErrorCode+0x5c>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	2b00      	cmp	r3, #0
 800269c:	d009      	beq.n	80026b2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <FLASH_SetErrorCode+0x60>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <FLASH_SetErrorCode+0x60>)
 80026a8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80026b2:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <FLASH_SetErrorCode+0x5c>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	60d3      	str	r3, [r2, #12]
}  
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	40022000 	.word	0x40022000
 80026c8:	20000928 	.word	0x20000928

080026cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80026e2:	e154      	b.n	800298e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	2101      	movs	r1, #1
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	4013      	ands	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8146 	beq.w	8002988 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0x40>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b12      	cmp	r3, #18
 800270a:	d123      	bne.n	8002754 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	08da      	lsrs	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3208      	adds	r2, #8
 8002714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002718:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	220f      	movs	r2, #15
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	08da      	lsrs	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3208      	adds	r2, #8
 800274e:	6939      	ldr	r1, [r7, #16]
 8002750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0203 	and.w	r2, r3, #3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d00b      	beq.n	80027a8 <HAL_GPIO_Init+0xdc>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d007      	beq.n	80027a8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800279c:	2b11      	cmp	r3, #17
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b12      	cmp	r3, #18
 80027a6:	d130      	bne.n	800280a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	2203      	movs	r2, #3
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027de:	2201      	movs	r2, #1
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	f003 0201 	and.w	r2, r3, #1
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80a0 	beq.w	8002988 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002848:	4a58      	ldr	r2, [pc, #352]	; (80029ac <HAL_GPIO_Init+0x2e0>)
 800284a:	4b58      	ldr	r3, [pc, #352]	; (80029ac <HAL_GPIO_Init+0x2e0>)
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6193      	str	r3, [r2, #24]
 8002854:	4b55      	ldr	r3, [pc, #340]	; (80029ac <HAL_GPIO_Init+0x2e0>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002860:	4a53      	ldr	r2, [pc, #332]	; (80029b0 <HAL_GPIO_Init+0x2e4>)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	089b      	lsrs	r3, r3, #2
 8002866:	3302      	adds	r3, #2
 8002868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	220f      	movs	r2, #15
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4013      	ands	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800288a:	d019      	beq.n	80028c0 <HAL_GPIO_Init+0x1f4>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a49      	ldr	r2, [pc, #292]	; (80029b4 <HAL_GPIO_Init+0x2e8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d013      	beq.n	80028bc <HAL_GPIO_Init+0x1f0>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a48      	ldr	r2, [pc, #288]	; (80029b8 <HAL_GPIO_Init+0x2ec>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00d      	beq.n	80028b8 <HAL_GPIO_Init+0x1ec>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a47      	ldr	r2, [pc, #284]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d007      	beq.n	80028b4 <HAL_GPIO_Init+0x1e8>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a46      	ldr	r2, [pc, #280]	; (80029c0 <HAL_GPIO_Init+0x2f4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d101      	bne.n	80028b0 <HAL_GPIO_Init+0x1e4>
 80028ac:	2304      	movs	r3, #4
 80028ae:	e008      	b.n	80028c2 <HAL_GPIO_Init+0x1f6>
 80028b0:	2305      	movs	r3, #5
 80028b2:	e006      	b.n	80028c2 <HAL_GPIO_Init+0x1f6>
 80028b4:	2303      	movs	r3, #3
 80028b6:	e004      	b.n	80028c2 <HAL_GPIO_Init+0x1f6>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e002      	b.n	80028c2 <HAL_GPIO_Init+0x1f6>
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <HAL_GPIO_Init+0x1f6>
 80028c0:	2300      	movs	r3, #0
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	f002 0203 	and.w	r2, r2, #3
 80028c8:	0092      	lsls	r2, r2, #2
 80028ca:	4093      	lsls	r3, r2
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80028d2:	4937      	ldr	r1, [pc, #220]	; (80029b0 <HAL_GPIO_Init+0x2e4>)
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	089b      	lsrs	r3, r3, #2
 80028d8:	3302      	adds	r3, #2
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e0:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <HAL_GPIO_Init+0x2f8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002904:	4a2f      	ldr	r2, [pc, #188]	; (80029c4 <HAL_GPIO_Init+0x2f8>)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800290a:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_GPIO_Init+0x2f8>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	43db      	mvns	r3, r3
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4013      	ands	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800292e:	4a25      	ldr	r2, [pc, #148]	; (80029c4 <HAL_GPIO_Init+0x2f8>)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002934:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <HAL_GPIO_Init+0x2f8>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	43db      	mvns	r3, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002958:	4a1a      	ldr	r2, [pc, #104]	; (80029c4 <HAL_GPIO_Init+0x2f8>)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800295e:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_GPIO_Init+0x2f8>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	43db      	mvns	r3, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002982:	4a10      	ldr	r2, [pc, #64]	; (80029c4 <HAL_GPIO_Init+0x2f8>)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	3301      	adds	r3, #1
 800298c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	f47f aea3 	bne.w	80026e4 <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40010000 	.word	0x40010000
 80029b4:	48000400 	.word	0x48000400
 80029b8:	48000800 	.word	0x48000800
 80029bc:	48000c00 	.word	0x48000c00
 80029c0:	48001000 	.word	0x48001000
 80029c4:	40010400 	.word	0x40010400

080029c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	887b      	ldrh	r3, [r7, #2]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
 80029e4:	e001      	b.n	80029ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]
 8002a04:	4613      	mov	r3, r2
 8002a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a08:	787b      	ldrb	r3, [r7, #1]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a0e:	887a      	ldrh	r2, [r7, #2]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a14:	e002      	b.n	8002a1c <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a16:	887a      	ldrh	r2, [r7, #2]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	405a      	eors	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	615a      	str	r2, [r3, #20]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e0ce      	b.n	8002c04 <HAL_PCD_Init+0x1b8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_PCD_Init+0x34>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f006 fd48 	bl	8009510 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2203      	movs	r2, #3
 8002a84:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 
 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e040      	b.n	8002b10 <HAL_PCD_Init+0xc4>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3329      	adds	r3, #41	; 0x29
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	b2d8      	uxtb	r0, r3
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3328      	adds	r3, #40	; 0x28
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	332b      	adds	r3, #43	; 0x2b
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	3334      	adds	r3, #52	; 0x34
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0;
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	3338      	adds	r3, #56	; 0x38
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0;
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	1a9b      	subs	r3, r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	333c      	adds	r3, #60	; 0x3c
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 
 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d8b9      	bhi.n	8002a8e <HAL_PCD_Init+0x42>
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	e046      	b.n	8002bae <HAL_PCD_Init+0x162>
 {
   hpcd->OUT_ep[i].is_in = 0;
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	f203 13cd 	addw	r3, r3, #461	; 0x1cd
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	b2d8      	uxtb	r0, r3
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0;
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0;
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3301      	adds	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d8b3      	bhi.n	8002b20 <HAL_PCD_Init+0xd4>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8002be0:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8002be4:	60bb      	str	r3, [r7, #8]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	b292      	uxth	r2, r2
 8002bee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371

 return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8002c14:	2101      	movs	r1, #1
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f006 feb2 	bl	8009980 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop

08002c28 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b089      	sub	sp, #36	; 0x24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count=0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	83fb      	strh	r3, [r7, #30]
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8002c38:	e318      	b.n	800326c <PCD_EP_ISR_Handler+0x644>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002c3a:	89fb      	ldrh	r3, [r7, #14]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	76fb      	strb	r3, [r7, #27]
    
    if (EPindex == 0)
 8002c46:	7efb      	ldrb	r3, [r7, #27]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f040 812c 	bne.w	8002ea6 <PCD_EP_ISR_Handler+0x27e>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8002c4e:	89fb      	ldrh	r3, [r7, #14]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d14d      	bne.n	8002cf6 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3328      	adds	r3, #40	; 0x28
 8002c76:	617b      	str	r3, [r7, #20]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	461a      	mov	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	441a      	add	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f006 fc90 	bl	80095dc <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 82d1 	beq.w	800326c <PCD_EP_ISR_Handler+0x644>
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 82cc 	bne.w	800326c <PCD_EP_ISR_Handler+0x644>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	b292      	uxth	r2, r2
 8002ce8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cf4:	e2ba      	b.n	800326c <PCD_EP_ISR_Handler+0x644>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8002cfc:	617b      	str	r3, [r7, #20]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	881b      	ldrh	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8002d08:	89bb      	ldrh	r3, [r7, #12]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d031      	beq.n	8002d78 <PCD_EP_ISR_Handler+0x150>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4413      	add	r3, r2
 8002d28:	3306      	adds	r3, #6
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	619a      	str	r2, [r3, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f503 715d 	add.w	r1, r3, #884	; 0x374
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	889a      	ldrh	r2, [r3, #4]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	f001 fd8f 	bl	8004878 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	b299      	uxth	r1, r3
 8002d66:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d6a:	400b      	ands	r3, r1
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f006 fc05 	bl	8009580 <HAL_PCD_SetupStageCallback>
 8002d76:	e279      	b.n	800326c <PCD_EP_ISR_Handler+0x644>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8002d78:	89bb      	ldrh	r3, [r7, #12]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	b21b      	sxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f280 8274 	bge.w	800326c <PCD_EP_ISR_Handler+0x644>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b299      	uxth	r1, r3
 8002d90:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d94:	400b      	ands	r3, r1
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	461a      	mov	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	3306      	adds	r3, #6
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	461a      	mov	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0)
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d011      	beq.n	8002df4 <PCD_EP_ISR_Handler+0x1cc>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	6919      	ldr	r1, [r3, #16]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	889a      	ldrh	r2, [r3, #4]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f001 fd49 	bl	8004878 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	691a      	ldr	r2, [r3, #16]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	441a      	add	r2, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8002df4:	2100      	movs	r1, #0
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f006 fbd4 	bl	80095a4 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3306      	adds	r3, #6
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b3e      	cmp	r3, #62	; 0x3e
 8002e1e:	d919      	bls.n	8002e54 <PCD_EP_ISR_Handler+0x22c>
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	83bb      	strh	r3, [r7, #28]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <PCD_EP_ISR_Handler+0x212>
 8002e34:	8bbb      	ldrh	r3, [r7, #28]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	83bb      	strh	r3, [r7, #28]
 8002e3a:	8bbb      	ldrh	r3, [r7, #28]
 8002e3c:	029b      	lsls	r3, r3, #10
 8002e3e:	b21b      	sxth	r3, r3
 8002e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e48:	b21b      	sxth	r3, r3
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e012      	b.n	8002e7a <PCD_EP_ISR_Handler+0x252>
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	83bb      	strh	r3, [r7, #28]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <PCD_EP_ISR_Handler+0x246>
 8002e68:	8bbb      	ldrh	r3, [r7, #28]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	83bb      	strh	r3, [r7, #28]
 8002e6e:	8bbb      	ldrh	r3, [r7, #28]
 8002e70:	029b      	lsls	r3, r3, #10
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8a:	b29c      	uxth	r4, r3
 8002e8c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002e90:	b29c      	uxth	r4, r3
 8002e92:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002e96:	b29c      	uxth	r4, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b9e      	ldr	r3, [pc, #632]	; (8003118 <PCD_EP_ISR_Handler+0x4f0>)
 8002e9e:	4323      	orrs	r3, r4
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	8013      	strh	r3, [r2, #0]
 8002ea4:	e1e2      	b.n	800326c <PCD_EP_ISR_Handler+0x644>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	7efb      	ldrb	r3, [r7, #27]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8002eb8:	89bb      	ldrh	r3, [r7, #12]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	b21b      	sxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f280 80d9 	bge.w	8003076 <PCD_EP_ISR_Handler+0x44e>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	461a      	mov	r2, r3
 8002eca:	7efb      	ldrb	r3, [r7, #27]
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	441a      	add	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	7efb      	ldrb	r3, [r7, #27]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	b299      	uxth	r1, r3
 8002ee0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002ee4:	400b      	ands	r3, r1
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[EPindex];
 8002eea:	7efa      	ldrb	r2, [r7, #27]
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	3304      	adds	r3, #4
 8002efe:	617b      	str	r3, [r7, #20]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	7a9b      	ldrb	r3, [r3, #10]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d123      	bne.n	8002f50 <PCD_EP_ISR_Handler+0x328>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	461a      	mov	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3306      	adds	r3, #6
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	461a      	mov	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f34:	83fb      	strh	r3, [r7, #30]
          if (count != 0)
 8002f36:	8bfb      	ldrh	r3, [r7, #30]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d077      	beq.n	800302c <PCD_EP_ISR_Handler+0x404>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	6919      	ldr	r1, [r3, #16]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	889a      	ldrh	r2, [r3, #4]
 8002f48:	8bfb      	ldrh	r3, [r7, #30]
 8002f4a:	f001 fc95 	bl	8004878 <PCD_ReadPMA>
 8002f4e:	e06d      	b.n	800302c <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d023      	beq.n	8002fb2 <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	3302      	adds	r3, #2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	461a      	mov	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f96:	83fb      	strh	r3, [r7, #30]
            if (count != 0)
 8002f98:	8bfb      	ldrh	r3, [r7, #30]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d02c      	beq.n	8002ff8 <PCD_EP_ISR_Handler+0x3d0>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	6919      	ldr	r1, [r3, #16]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	88da      	ldrh	r2, [r3, #6]
 8002faa:	8bfb      	ldrh	r3, [r7, #30]
 8002fac:	f001 fc64 	bl	8004878 <PCD_ReadPMA>
 8002fb0:	e022      	b.n	8002ff8 <PCD_EP_ISR_Handler+0x3d0>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3306      	adds	r3, #6
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	461a      	mov	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fde:	83fb      	strh	r3, [r7, #30]
            if (count != 0)
 8002fe0:	8bfb      	ldrh	r3, [r7, #30]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <PCD_EP_ISR_Handler+0x3d0>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	6919      	ldr	r1, [r3, #16]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	891a      	ldrh	r2, [r3, #8]
 8002ff2:	8bfb      	ldrh	r3, [r7, #30]
 8002ff4:	f001 fc40 	bl	8004878 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	441a      	add	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4619      	mov	r1, r3
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	b29b      	uxth	r3, r3
 8003018:	b219      	sxth	r1, r3
 800301a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800301e:	400b      	ands	r3, r1
 8003020:	b219      	sxth	r1, r3
 8003022:	4b3e      	ldr	r3, [pc, #248]	; (800311c <PCD_EP_ISR_Handler+0x4f4>)
 8003024:	430b      	orrs	r3, r1
 8003026:	b21b      	sxth	r3, r3
 8003028:	b29b      	uxth	r3, r3
 800302a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	699a      	ldr	r2, [r3, #24]
 8003030:	8bfb      	ldrh	r3, [r7, #30]
 8003032:	441a      	add	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	8bfb      	ldrh	r3, [r7, #30]
 800303e:	441a      	add	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d004      	beq.n	8003056 <PCD_EP_ISR_Handler+0x42e>
 800304c:	8bfa      	ldrh	r2, [r7, #30]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	429a      	cmp	r2, r3
 8003054:	d206      	bcs.n	8003064 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	4619      	mov	r1, r3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f006 faa1 	bl	80095a4 <HAL_PCD_DataOutStageCallback>
 8003062:	e008      	b.n	8003076 <PCD_EP_ISR_Handler+0x44e>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	7819      	ldrb	r1, [r3, #0]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 ffd5 	bl	8004020 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8003076:	89bb      	ldrh	r3, [r7, #12]
 8003078:	b29b      	uxth	r3, r3
 800307a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 80f4 	beq.w	800326c <PCD_EP_ISR_Handler+0x644>
      {
        ep = &hpcd->IN_ep[EPindex];
 8003084:	7efa      	ldrb	r2, [r7, #27]
 8003086:	4613      	mov	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	3328      	adds	r3, #40	; 0x28
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4413      	add	r3, r2
 8003094:	617b      	str	r3, [r7, #20]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	7efb      	ldrb	r3, [r7, #27]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	441a      	add	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4619      	mov	r1, r3
 80030a8:	7efb      	ldrb	r3, [r7, #27]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	7a9b      	ldrb	r3, [r3, #10]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d12c      	bne.n	8003120 <PCD_EP_ISR_Handler+0x4f8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	3302      	adds	r3, #2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	461a      	mov	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8085 	beq.w	8003208 <PCD_EP_ISR_Handler+0x5e0>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	6919      	ldr	r1, [r3, #16]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	889a      	ldrh	r2, [r3, #4]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	b29b      	uxth	r3, r3
 8003110:	f001 fb72 	bl	80047f8 <PCD_WritePMA>
 8003114:	e078      	b.n	8003208 <PCD_EP_ISR_Handler+0x5e0>
 8003116:	bf00      	nop
 8003118:	ffff8080 	.word	0xffff8080
 800311c:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b29b      	uxth	r3, r3
 8003132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d026      	beq.n	8003188 <PCD_EP_ISR_Handler+0x560>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003142:	b29b      	uxth	r3, r3
 8003144:	461a      	mov	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	3302      	adds	r3, #2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	461a      	mov	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4413      	add	r3, r2
 800315a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0)
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d031      	beq.n	80031d4 <PCD_EP_ISR_Handler+0x5ac>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	6919      	ldr	r1, [r3, #16]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	88da      	ldrh	r2, [r3, #6]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	b29b      	uxth	r3, r3
 8003182:	f001 fb39 	bl	80047f8 <PCD_WritePMA>
 8003186:	e025      	b.n	80031d4 <PCD_EP_ISR_Handler+0x5ac>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003190:	b29b      	uxth	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	3306      	adds	r3, #6
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	461a      	mov	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <PCD_EP_ISR_Handler+0x5ac>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	6919      	ldr	r1, [r3, #16]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	891a      	ldrh	r2, [r3, #8]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f001 fb12 	bl	80047f8 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	441a      	add	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4619      	mov	r1, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	b219      	sxth	r1, r3
 80031f6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80031fa:	400b      	ands	r3, r1
 80031fc:	b219      	sxth	r1, r3
 80031fe:	4b23      	ldr	r3, [pc, #140]	; (800328c <PCD_EP_ISR_Handler+0x664>)
 8003200:	430b      	orrs	r3, r1
 8003202:	b21b      	sxth	r3, r3
 8003204:	b29b      	uxth	r3, r3
 8003206:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003210:	b29b      	uxth	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4413      	add	r3, r2
 800321c:	3302      	adds	r3, #2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	461a      	mov	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	441a      	add	r2, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d106      	bne.n	800325a <PCD_EP_ISR_Handler+0x632>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	4619      	mov	r1, r3
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f006 f9c2 	bl	80095dc <HAL_PCD_DataInStageCallback>
 8003258:	e008      	b.n	800326c <PCD_EP_ISR_Handler+0x644>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	7819      	ldrb	r1, [r3, #0]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f001 f808 	bl	800427c <HAL_PCD_EP_Transmit>
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003274:	b29b      	uxth	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	81fa      	strh	r2, [r7, #14]
 800327a:	b21b      	sxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	f6ff acdc 	blt.w	8002c3a <PCD_EP_ISR_Handler+0x12>
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
      } 
    }
  }
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3724      	adds	r7, #36	; 0x24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd90      	pop	{r4, r7, pc}
 800328c:	ffffc080 	.word	0xffffc080

08003290 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t wInterrupt_Mask = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	b21b      	sxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	da02      	bge.n	80032b2 <HAL_PCD_IRQHandler+0x22>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff fcbb 	bl	8002c28 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d012      	beq.n	80032ea <HAL_PCD_IRQHandler+0x5a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80032d0:	b292      	uxth	r2, r2
 80032d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d6:	b292      	uxth	r2, r2
 80032d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f006 f9a5 	bl	800962c <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 80032e2:	2100      	movs	r1, #0
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f8c1 	bl	800346c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00b      	beq.n	8003314 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8003308:	b292      	uxth	r2, r2
 800330a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800330e:	b292      	uxth	r2, r2
 8003310:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800331c:	b29b      	uxth	r3, r3
 800331e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_PCD_IRQHandler+0xae>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8003332:	b292      	uxth	r2, r2
 8003334:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003338:	b292      	uxth	r2, r2
 800333a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003346:	b29b      	uxth	r3, r3
 8003348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d023      	beq.n	8003398 <HAL_PCD_IRQHandler+0x108>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LPMODE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800335c:	b292      	uxth	r2, r2
 800335e:	f022 0204 	bic.w	r2, r2, #4
 8003362:	b292      	uxth	r2, r2
 8003364:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8003368:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 800336c:	60fb      	str	r3, [r7, #12]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	b292      	uxth	r2, r2
 8003376:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f006 f992 	bl	80096a4 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800338c:	b292      	uxth	r2, r2
 800338e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003392:	b292      	uxth	r2, r2
 8003394:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d02f      	beq.n	800340a <HAL_PCD_IRQHandler+0x17a>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80033b6:	b292      	uxth	r2, r2
 80033b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033bc:	b292      	uxth	r2, r2
 80033be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80033ce:	b292      	uxth	r2, r2
 80033d0:	f042 0208 	orr.w	r2, r2, #8
 80033d4:	b292      	uxth	r2, r2
 80033d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80033e6:	b292      	uxth	r2, r2
 80033e8:	f042 0204 	orr.w	r2, r2, #4
 80033ec:	b292      	uxth	r2, r2
 80033ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <HAL_PCD_IRQHandler+0x17a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f006 f933 	bl	8009670 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003412:	b29b      	uxth	r3, r3
 8003414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00e      	beq.n	800343a <HAL_PCD_IRQHandler+0x1aa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8003428:	b292      	uxth	r2, r2
 800342a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800342e:	b292      	uxth	r2, r2
 8003430:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f006 f8eb 	bl	8009610 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003442:	b29b      	uxth	r3, r3
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00b      	beq.n	8003464 <HAL_PCD_IRQHandler+0x1d4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8003458:	b292      	uxth	r2, r2
 800345a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800345e:	b292      	uxth	r2, r2
 8003460:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003464:	bf00      	nop
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
   __HAL_LOCK(hpcd); 
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_PCD_SetAddress+0x1a>
 8003482:	2302      	movs	r3, #2
 8003484:	e015      	b.n	80034b2 <HAL_PCD_SetAddress+0x46>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

   if(address == 0) 
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_PCD_SetAddress+0x34>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800349e:	e003      	b.n	80034a8 <HAL_PCD_SetAddress+0x3c>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop

080034c0 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80034c0:	b490      	push	{r4, r7}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	4608      	mov	r0, r1
 80034ca:	4611      	mov	r1, r2
 80034cc:	461a      	mov	r2, r3
 80034ce:	4603      	mov	r3, r0
 80034d0:	70fb      	strb	r3, [r7, #3]
 80034d2:	460b      	mov	r3, r1
 80034d4:	803b      	strh	r3, [r7, #0]
 80034d6:	4613      	mov	r3, r2
 80034d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	747b      	strb	r3, [r7, #17]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80034de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	da0b      	bge.n	80034fe <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	3328      	adds	r3, #40	; 0x28
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e00c      	b.n	8003518 <HAL_PCD_EP_Open+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4413      	add	r3, r2
 8003514:	3304      	adds	r3, #4
 8003516:	617b      	str	r3, [r7, #20]
  }
  ep->num   = ep_addr & 0x7F;
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800351e:	b2da      	uxtb	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8003524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	09db      	lsrs	r3, r3, #7
 800352c:	b2db      	uxtb	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8003534:	883a      	ldrh	r2, [r7, #0]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	78ba      	ldrb	r2, [r7, #2]
 800353e:	70da      	strb	r2, [r3, #3]
  
  __HAL_LOCK(hpcd); 
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_PCD_EP_Open+0x8e>
 800354a:	2302      	movs	r3, #2
 800354c:	e345      	b.n	8003bda <HAL_PCD_EP_Open+0x71a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

  /* initialize Endpoint */
  switch (ep->type)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	78db      	ldrb	r3, [r3, #3]
 800355a:	2b03      	cmp	r3, #3
 800355c:	d875      	bhi.n	800364a <HAL_PCD_EP_Open+0x18a>
 800355e:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <HAL_PCD_EP_Open+0xa4>)
 8003560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003564:	08003575 	.word	0x08003575
 8003568:	08003613 	.word	0x08003613
 800356c:	080035ad 	.word	0x080035ad
 8003570:	080035db 	.word	0x080035db
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	441a      	add	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4619      	mov	r1, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	b21b      	sxth	r3, r3
 8003596:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800359a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359e:	b21b      	sxth	r3, r3
 80035a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a4:	b21b      	sxth	r3, r3
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	8013      	strh	r3, [r2, #0]
    break;
 80035aa:	e04e      	b.n	800364a <HAL_PCD_EP_Open+0x18a>
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	441a      	add	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4619      	mov	r1, r3
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80035d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	8013      	strh	r3, [r2, #0]
    break;
 80035d8:	e037      	b.n	800364a <HAL_PCD_EP_Open+0x18a>
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	441a      	add	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4619      	mov	r1, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	b21b      	sxth	r3, r3
 80035fc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003604:	b21b      	sxth	r3, r3
 8003606:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800360a:	b21b      	sxth	r3, r3
 800360c:	b29b      	uxth	r3, r3
 800360e:	8013      	strh	r3, [r2, #0]
    break;
 8003610:	e01b      	b.n	800364a <HAL_PCD_EP_Open+0x18a>
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	441a      	add	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4619      	mov	r1, r3
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b29b      	uxth	r3, r3
 8003632:	b21b      	sxth	r3, r3
 8003634:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363c:	b21b      	sxth	r3, r3
 800363e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003642:	b21b      	sxth	r3, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	8013      	strh	r3, [r2, #0]
    break;
 8003648:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	441a      	add	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4619      	mov	r1, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	881b      	ldrh	r3, [r3, #0]
 8003668:	b29b      	uxth	r3, r3
 800366a:	b219      	sxth	r1, r3
 800366c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003670:	400b      	ands	r3, r1
 8003672:	b219      	sxth	r1, r3
 8003674:	4b89      	ldr	r3, [pc, #548]	; (800389c <HAL_PCD_EP_Open+0x3dc>)
 8003676:	430b      	orrs	r3, r1
 8003678:	b219      	sxth	r1, r3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	b21b      	sxth	r3, r3
 8003680:	430b      	orrs	r3, r1
 8003682:	b21b      	sxth	r3, r3
 8003684:	b29b      	uxth	r3, r3
 8003686:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	7a9b      	ldrb	r3, [r3, #10]
 800368c:	2b00      	cmp	r3, #0
 800368e:	f040 810b 	bne.w	80038a8 <HAL_PCD_EP_Open+0x3e8>
  {
    if (ep->is_in)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	785b      	ldrb	r3, [r3, #1]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d05b      	beq.n	8003752 <HAL_PCD_EP_Open+0x292>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4413      	add	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	461a      	mov	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036bc:	461a      	mov	r2, r3
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	889b      	ldrh	r3, [r3, #4]
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d019      	beq.n	8003718 <HAL_PCD_EP_Open+0x258>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	441a      	add	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4619      	mov	r1, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	b29b      	uxth	r3, r3
 8003704:	b219      	sxth	r1, r3
 8003706:	f640 730f 	movw	r3, #3855	; 0xf0f
 800370a:	400b      	ands	r3, r1
 800370c:	b219      	sxth	r1, r3
 800370e:	4b64      	ldr	r3, [pc, #400]	; (80038a0 <HAL_PCD_EP_Open+0x3e0>)
 8003710:	430b      	orrs	r3, r1
 8003712:	b21b      	sxth	r3, r3
 8003714:	b29b      	uxth	r3, r3
 8003716:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003732:	b29c      	uxth	r4, r3
 8003734:	f084 0320 	eor.w	r3, r4, #32
 8003738:	b29c      	uxth	r4, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	441a      	add	r2, r3
 8003748:	4b54      	ldr	r3, [pc, #336]	; (800389c <HAL_PCD_EP_Open+0x3dc>)
 800374a:	4323      	orrs	r3, r4
 800374c:	b29b      	uxth	r3, r3
 800374e:	8013      	strh	r3, [r2, #0]
 8003750:	e23e      	b.n	8003bd0 <HAL_PCD_EP_Open+0x710>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800375a:	b29b      	uxth	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4413      	add	r3, r2
 8003766:	3304      	adds	r3, #4
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	461a      	mov	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4413      	add	r3, r2
 8003772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003776:	461a      	mov	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	889b      	ldrh	r3, [r3, #4]
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	b29b      	uxth	r3, r3
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	6013      	str	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800378c:	b29b      	uxth	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4413      	add	r3, r2
 8003798:	3306      	adds	r3, #6
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	461a      	mov	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	2b3e      	cmp	r3, #62	; 0x3e
 80037b0:	d919      	bls.n	80037e6 <HAL_PCD_EP_Open+0x326>
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	827b      	strh	r3, [r7, #18]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <HAL_PCD_EP_Open+0x30c>
 80037c6:	8a7b      	ldrh	r3, [r7, #18]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	827b      	strh	r3, [r7, #18]
 80037cc:	8a7b      	ldrh	r3, [r7, #18]
 80037ce:	029b      	lsls	r3, r3, #10
 80037d0:	b21b      	sxth	r3, r3
 80037d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037da:	b21b      	sxth	r3, r3
 80037dc:	b29b      	uxth	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	e012      	b.n	800380c <HAL_PCD_EP_Open+0x34c>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	085b      	lsrs	r3, r3, #1
 80037ec:	827b      	strh	r3, [r7, #18]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_PCD_EP_Open+0x340>
 80037fa:	8a7b      	ldrh	r3, [r7, #18]
 80037fc:	3301      	adds	r3, #1
 80037fe:	827b      	strh	r3, [r7, #18]
 8003800:	8a7b      	ldrh	r3, [r7, #18]
 8003802:	029b      	lsls	r3, r3, #10
 8003804:	b29b      	uxth	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d019      	beq.n	800385a <HAL_PCD_EP_Open+0x39a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	441a      	add	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4619      	mov	r1, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	b219      	sxth	r1, r3
 8003848:	f640 730f 	movw	r3, #3855	; 0xf0f
 800384c:	400b      	ands	r3, r1
 800384e:	b219      	sxth	r1, r3
 8003850:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <HAL_PCD_EP_Open+0x3e4>)
 8003852:	430b      	orrs	r3, r1
 8003854:	b21b      	sxth	r3, r3
 8003856:	b29b      	uxth	r3, r3
 8003858:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003874:	b29c      	uxth	r4, r3
 8003876:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800387a:	b29c      	uxth	r4, r3
 800387c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003880:	b29c      	uxth	r4, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	441a      	add	r2, r3
 8003890:	4b02      	ldr	r3, [pc, #8]	; (800389c <HAL_PCD_EP_Open+0x3dc>)
 8003892:	4323      	orrs	r3, r4
 8003894:	b29b      	uxth	r3, r3
 8003896:	8013      	strh	r3, [r2, #0]
 8003898:	e19a      	b.n	8003bd0 <HAL_PCD_EP_Open+0x710>
 800389a:	bf00      	nop
 800389c:	ffff8080 	.word	0xffff8080
 80038a0:	ffff80c0 	.word	0xffff80c0
 80038a4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	441a      	add	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	b219      	sxth	r1, r3
 80038d0:	f640 730f 	movw	r3, #3855	; 0xf0f
 80038d4:	400b      	ands	r3, r1
 80038d6:	b219      	sxth	r1, r3
 80038d8:	4b6d      	ldr	r3, [pc, #436]	; (8003a90 <HAL_PCD_EP_Open+0x5d0>)
 80038da:	430b      	orrs	r3, r1
 80038dc:	b21b      	sxth	r3, r3
 80038de:	b29b      	uxth	r3, r3
 80038e0:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	461a      	mov	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003904:	461a      	mov	r2, r3
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	88db      	ldrh	r3, [r3, #6]
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	b29b      	uxth	r3, r3
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800391a:	b29b      	uxth	r3, r3
 800391c:	461a      	mov	r2, r3
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	3304      	adds	r3, #4
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	461a      	mov	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003936:	461a      	mov	r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	891b      	ldrh	r3, [r3, #8]
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	b29b      	uxth	r3, r3
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	6013      	str	r3, [r2, #0]
    
    if (ep->is_in==0)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	785b      	ldrb	r3, [r3, #1]
 8003948:	2b00      	cmp	r3, #0
 800394a:	f040 80a7 	bne.w	8003a9c <HAL_PCD_EP_Open+0x5dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d019      	beq.n	800399c <HAL_PCD_EP_Open+0x4dc>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	441a      	add	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4619      	mov	r1, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	b219      	sxth	r1, r3
 800398a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800398e:	400b      	ands	r3, r1
 8003990:	b219      	sxth	r1, r3
 8003992:	4b40      	ldr	r3, [pc, #256]	; (8003a94 <HAL_PCD_EP_Open+0x5d4>)
 8003994:	430b      	orrs	r3, r1
 8003996:	b21b      	sxth	r3, r3
 8003998:	b29b      	uxth	r3, r3
 800399a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d019      	beq.n	80039ea <HAL_PCD_EP_Open+0x52a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	441a      	add	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4619      	mov	r1, r3
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	b219      	sxth	r1, r3
 80039d8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80039dc:	400b      	ands	r3, r1
 80039de:	b219      	sxth	r1, r3
 80039e0:	4b2d      	ldr	r3, [pc, #180]	; (8003a98 <HAL_PCD_EP_Open+0x5d8>)
 80039e2:	430b      	orrs	r3, r1
 80039e4:	b21b      	sxth	r3, r3
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	441a      	add	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4619      	mov	r1, r3
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	b219      	sxth	r1, r3
 8003a0c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003a10:	400b      	ands	r3, r1
 8003a12:	b219      	sxth	r1, r3
 8003a14:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_PCD_EP_Open+0x5d8>)
 8003a16:	430b      	orrs	r3, r1
 8003a18:	b21b      	sxth	r3, r3
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a38:	b29c      	uxth	r4, r3
 8003a3a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003a3e:	b29c      	uxth	r4, r3
 8003a40:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003a44:	b29c      	uxth	r4, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	441a      	add	r2, r3
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <HAL_PCD_EP_Open+0x5d0>)
 8003a56:	4323      	orrs	r3, r4
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a76:	b29c      	uxth	r4, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	441a      	add	r2, r3
 8003a86:	4b02      	ldr	r3, [pc, #8]	; (8003a90 <HAL_PCD_EP_Open+0x5d0>)
 8003a88:	4323      	orrs	r3, r4
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	8013      	strh	r3, [r2, #0]
 8003a8e:	e09f      	b.n	8003bd0 <HAL_PCD_EP_Open+0x710>
 8003a90:	ffff8080 	.word	0xffff8080
 8003a94:	ffffc080 	.word	0xffffc080
 8003a98:	ffff80c0 	.word	0xffff80c0
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d019      	beq.n	8003aea <HAL_PCD_EP_Open+0x62a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	441a      	add	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	b219      	sxth	r1, r3
 8003ad8:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003adc:	400b      	ands	r3, r1
 8003ade:	b219      	sxth	r1, r3
 8003ae0:	4b40      	ldr	r3, [pc, #256]	; (8003be4 <HAL_PCD_EP_Open+0x724>)
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	b21b      	sxth	r3, r3
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d019      	beq.n	8003b38 <HAL_PCD_EP_Open+0x678>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	441a      	add	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4619      	mov	r1, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	b219      	sxth	r1, r3
 8003b26:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003b2a:	400b      	ands	r3, r1
 8003b2c:	b219      	sxth	r1, r3
 8003b2e:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <HAL_PCD_EP_Open+0x728>)
 8003b30:	430b      	orrs	r3, r1
 8003b32:	b21b      	sxth	r3, r3
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	441a      	add	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	b219      	sxth	r1, r3
 8003b5a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003b5e:	400b      	ands	r3, r1
 8003b60:	b219      	sxth	r1, r3
 8003b62:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <HAL_PCD_EP_Open+0x724>)
 8003b64:	430b      	orrs	r3, r1
 8003b66:	b21b      	sxth	r3, r3
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b86:	b29c      	uxth	r4, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	441a      	add	r2, r3
 8003b96:	4b15      	ldr	r3, [pc, #84]	; (8003bec <HAL_PCD_EP_Open+0x72c>)
 8003b98:	4323      	orrs	r3, r4
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb8:	b29c      	uxth	r4, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	441a      	add	r2, r3
 8003bc8:	4b08      	ldr	r3, [pc, #32]	; (8003bec <HAL_PCD_EP_Open+0x72c>)
 8003bca:	4323      	orrs	r3, r4
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	8013      	strh	r3, [r2, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return ret;
 8003bd8:	7c7b      	ldrb	r3, [r7, #17]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc90      	pop	{r4, r7}
 8003be2:	4770      	bx	lr
 8003be4:	ffffc080 	.word	0xffffc080
 8003be8:	ffff80c0 	.word	0xffff80c0
 8003bec:	ffff8080 	.word	0xffff8080

08003bf0 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8003bf0:	b490      	push	{r4, r7}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8003bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	da0b      	bge.n	8003c1c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	3328      	adds	r3, #40	; 0x28
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	4413      	add	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	e00c      	b.n	8003c36 <HAL_PCD_EP_Close+0x46>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	3304      	adds	r3, #4
 8003c34:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8003c42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	09db      	lsrs	r3, r3, #7
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_PCD_EP_Close+0x70>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e1d4      	b.n	800400a <HAL_PCD_EP_Close+0x41a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

  if (ep->doublebuffer == 0) 
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	7a9b      	ldrb	r3, [r3, #10]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f040 8086 	bne.w	8003d7e <HAL_PCD_EP_Close+0x18e>
  {
    if (ep->is_in)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d040      	beq.n	8003cfc <HAL_PCD_EP_Close+0x10c>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d019      	beq.n	8003cc8 <HAL_PCD_EP_Close+0xd8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	441a      	add	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	b219      	sxth	r1, r3
 8003cb6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003cba:	400b      	ands	r3, r1
 8003cbc:	b219      	sxth	r1, r3
 8003cbe:	4b80      	ldr	r3, [pc, #512]	; (8003ec0 <HAL_PCD_EP_Close+0x2d0>)
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	b21b      	sxth	r3, r3
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce2:	b29c      	uxth	r4, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	441a      	add	r2, r3
 8003cf2:	4b74      	ldr	r3, [pc, #464]	; (8003ec4 <HAL_PCD_EP_Close+0x2d4>)
 8003cf4:	4323      	orrs	r3, r4
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	8013      	strh	r3, [r2, #0]
 8003cfa:	e181      	b.n	8004000 <HAL_PCD_EP_Close+0x410>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d019      	beq.n	8003d4a <HAL_PCD_EP_Close+0x15a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	441a      	add	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	b219      	sxth	r1, r3
 8003d38:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003d3c:	400b      	ands	r3, r1
 8003d3e:	b219      	sxth	r1, r3
 8003d40:	4b61      	ldr	r3, [pc, #388]	; (8003ec8 <HAL_PCD_EP_Close+0x2d8>)
 8003d42:	430b      	orrs	r3, r1
 8003d44:	b21b      	sxth	r3, r3
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d64:	b29c      	uxth	r4, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	441a      	add	r2, r3
 8003d74:	4b53      	ldr	r3, [pc, #332]	; (8003ec4 <HAL_PCD_EP_Close+0x2d4>)
 8003d76:	4323      	orrs	r3, r4
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	8013      	strh	r3, [r2, #0]
 8003d7c:	e140      	b.n	8004000 <HAL_PCD_EP_Close+0x410>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f040 80a2 	bne.w	8003ecc <HAL_PCD_EP_Close+0x2dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d019      	beq.n	8003dd6 <HAL_PCD_EP_Close+0x1e6>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	441a      	add	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4619      	mov	r1, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	b219      	sxth	r1, r3
 8003dc4:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003dc8:	400b      	ands	r3, r1
 8003dca:	b219      	sxth	r1, r3
 8003dcc:	4b3e      	ldr	r3, [pc, #248]	; (8003ec8 <HAL_PCD_EP_Close+0x2d8>)
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	b21b      	sxth	r3, r3
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d019      	beq.n	8003e24 <HAL_PCD_EP_Close+0x234>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	441a      	add	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4619      	mov	r1, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	b219      	sxth	r1, r3
 8003e12:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003e16:	400b      	ands	r3, r1
 8003e18:	b219      	sxth	r1, r3
 8003e1a:	4b29      	ldr	r3, [pc, #164]	; (8003ec0 <HAL_PCD_EP_Close+0x2d0>)
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	b21b      	sxth	r3, r3
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	441a      	add	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4619      	mov	r1, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	b219      	sxth	r1, r3
 8003e46:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003e4a:	400b      	ands	r3, r1
 8003e4c:	b219      	sxth	r1, r3
 8003e4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <HAL_PCD_EP_Close+0x2d0>)
 8003e50:	430b      	orrs	r3, r1
 8003e52:	b21b      	sxth	r3, r3
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e72:	b29c      	uxth	r4, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	441a      	add	r2, r3
 8003e82:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <HAL_PCD_EP_Close+0x2d4>)
 8003e84:	4323      	orrs	r3, r4
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ea4:	b29c      	uxth	r4, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	441a      	add	r2, r3
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <HAL_PCD_EP_Close+0x2d4>)
 8003eb6:	4323      	orrs	r3, r4
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	8013      	strh	r3, [r2, #0]
 8003ebc:	e0a0      	b.n	8004000 <HAL_PCD_EP_Close+0x410>
 8003ebe:	bf00      	nop
 8003ec0:	ffff80c0 	.word	0xffff80c0
 8003ec4:	ffff8080 	.word	0xffff8080
 8003ec8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d019      	beq.n	8003f1a <HAL_PCD_EP_Close+0x32a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	441a      	add	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	b219      	sxth	r1, r3
 8003f08:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003f0c:	400b      	ands	r3, r1
 8003f0e:	b219      	sxth	r1, r3
 8003f10:	4b40      	ldr	r3, [pc, #256]	; (8004014 <HAL_PCD_EP_Close+0x424>)
 8003f12:	430b      	orrs	r3, r1
 8003f14:	b21b      	sxth	r3, r3
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d019      	beq.n	8003f68 <HAL_PCD_EP_Close+0x378>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	441a      	add	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4619      	mov	r1, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	b219      	sxth	r1, r3
 8003f56:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003f5a:	400b      	ands	r3, r1
 8003f5c:	b219      	sxth	r1, r3
 8003f5e:	4b2e      	ldr	r3, [pc, #184]	; (8004018 <HAL_PCD_EP_Close+0x428>)
 8003f60:	430b      	orrs	r3, r1
 8003f62:	b21b      	sxth	r3, r3
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	441a      	add	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	b219      	sxth	r1, r3
 8003f8a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003f8e:	400b      	ands	r3, r1
 8003f90:	b219      	sxth	r1, r3
 8003f92:	4b20      	ldr	r3, [pc, #128]	; (8004014 <HAL_PCD_EP_Close+0x424>)
 8003f94:	430b      	orrs	r3, r1
 8003f96:	b21b      	sxth	r3, r3
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fb6:	b29c      	uxth	r4, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	441a      	add	r2, r3
 8003fc6:	4b15      	ldr	r3, [pc, #84]	; (800401c <HAL_PCD_EP_Close+0x42c>)
 8003fc8:	4323      	orrs	r3, r4
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe8:	b29c      	uxth	r4, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	441a      	add	r2, r3
 8003ff8:	4b08      	ldr	r3, [pc, #32]	; (800401c <HAL_PCD_EP_Close+0x42c>)
 8003ffa:	4323      	orrs	r3, r4
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	8013      	strh	r3, [r2, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bc90      	pop	{r4, r7}
 8004012:	4770      	bx	lr
 8004014:	ffffc080 	.word	0xffffc080
 8004018:	ffff80c0 	.word	0xffff80c0
 800401c:	ffff8080 	.word	0xffff8080

08004020 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004020:	b490      	push	{r4, r7}
 8004022:	b088      	sub	sp, #32
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	460b      	mov	r3, r1
 800402e:	72fb      	strb	r3, [r7, #11]
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8004030:	7afb      	ldrb	r3, [r7, #11]
 8004032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4413      	add	r3, r2
 8004046:	3304      	adds	r3, #4
 8004048:	61bb      	str	r3, [r7, #24]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2200      	movs	r2, #0
 800405a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2200      	movs	r2, #0
 8004060:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8004062:	7afb      	ldrb	r3, [r7, #11]
 8004064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004068:	b2da      	uxtb	r2, r3
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	701a      	strb	r2, [r3, #0]
   
  __HAL_LOCK(hpcd); 
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_PCD_EP_Receive+0x5c>
 8004078:	2302      	movs	r3, #2
 800407a:	e0de      	b.n	800423a <HAL_PCD_EP_Receive+0x21a>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	429a      	cmp	r2, r3
 800408e:	d909      	bls.n	80040a4 <HAL_PCD_EP_Receive+0x84>
  {
    len=ep->maxpacket;
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	1ad2      	subs	r2, r2, r3
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	615a      	str	r2, [r3, #20]
 80040a2:	e005      	b.n	80040b0 <HAL_PCD_EP_Receive+0x90>
  }
  else
  {
    len=ep->xfer_len;
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0;
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2200      	movs	r2, #0
 80040ae:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	7a9b      	ldrb	r3, [r3, #10]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d13f      	bne.n	8004138 <HAL_PCD_EP_Receive+0x118>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	4413      	add	r3, r2
 80040cc:	3306      	adds	r3, #6
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	461a      	mov	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b3e      	cmp	r3, #62	; 0x3e
 80040e2:	d917      	bls.n	8004114 <HAL_PCD_EP_Receive+0xf4>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	83fb      	strh	r3, [r7, #30]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <HAL_PCD_EP_Receive+0xda>
 80040f4:	8bfb      	ldrh	r3, [r7, #30]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	83fb      	strh	r3, [r7, #30]
 80040fa:	8bfb      	ldrh	r3, [r7, #30]
 80040fc:	029b      	lsls	r3, r3, #10
 80040fe:	b21b      	sxth	r3, r3
 8004100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004108:	b21b      	sxth	r3, r3
 800410a:	b29b      	uxth	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	e06e      	b.n	80041f2 <HAL_PCD_EP_Receive+0x1d2>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	085b      	lsrs	r3, r3, #1
 8004118:	83fb      	strh	r3, [r7, #30]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_PCD_EP_Receive+0x10a>
 8004124:	8bfb      	ldrh	r3, [r7, #30]
 8004126:	3301      	adds	r3, #1
 8004128:	83fb      	strh	r3, [r7, #30]
 800412a:	8bfb      	ldrh	r3, [r7, #30]
 800412c:	029b      	lsls	r3, r3, #10
 800412e:	b29b      	uxth	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	e05c      	b.n	80041f2 <HAL_PCD_EP_Receive+0x1d2>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	785b      	ldrb	r3, [r3, #1]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d13f      	bne.n	80041c0 <HAL_PCD_EP_Receive+0x1a0>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004148:	b29b      	uxth	r3, r3
 800414a:	461a      	mov	r2, r3
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4413      	add	r3, r2
 8004154:	3306      	adds	r3, #6
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	461a      	mov	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b3e      	cmp	r3, #62	; 0x3e
 800416a:	d917      	bls.n	800419c <HAL_PCD_EP_Receive+0x17c>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	83bb      	strh	r3, [r7, #28]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <HAL_PCD_EP_Receive+0x162>
 800417c:	8bbb      	ldrh	r3, [r7, #28]
 800417e:	3b01      	subs	r3, #1
 8004180:	83bb      	strh	r3, [r7, #28]
 8004182:	8bbb      	ldrh	r3, [r7, #28]
 8004184:	029b      	lsls	r3, r3, #10
 8004186:	b21b      	sxth	r3, r3
 8004188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800418c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004190:	b21b      	sxth	r3, r3
 8004192:	b29b      	uxth	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e02a      	b.n	80041f2 <HAL_PCD_EP_Receive+0x1d2>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	83bb      	strh	r3, [r7, #28]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <HAL_PCD_EP_Receive+0x192>
 80041ac:	8bbb      	ldrh	r3, [r7, #28]
 80041ae:	3301      	adds	r3, #1
 80041b0:	83bb      	strh	r3, [r7, #28]
 80041b2:	8bbb      	ldrh	r3, [r7, #28]
 80041b4:	029b      	lsls	r3, r3, #10
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e018      	b.n	80041f2 <HAL_PCD_EP_Receive+0x1d2>
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	785b      	ldrb	r3, [r3, #1]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d114      	bne.n	80041f2 <HAL_PCD_EP_Receive+0x1d2>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4413      	add	r3, r2
 80041dc:	3306      	adds	r3, #6
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	461a      	mov	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ec:	461a      	mov	r2, r3
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	6013      	str	r3, [r2, #0]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420c:	b29c      	uxth	r4, r3
 800420e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004212:	b29c      	uxth	r4, r3
 8004214:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004218:	b29c      	uxth	r4, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	441a      	add	r2, r3
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <HAL_PCD_EP_Receive+0x224>)
 800422a:	4323      	orrs	r3, r4
 800422c:	b29b      	uxth	r3, r3
 800422e:	8013      	strh	r3, [r2, #0]
  
  __HAL_UNLOCK(hpcd); 
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3720      	adds	r7, #32
 800423e:	46bd      	mov	sp, r7
 8004240:	bc90      	pop	{r4, r7}
 8004242:	4770      	bx	lr
 8004244:	ffff8080 	.word	0xffff8080

08004248 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	b29b      	uxth	r3, r3
}
 800426e:	4618      	mov	r0, r3
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop

0800427c <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	460b      	mov	r3, r1
 800428a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	82fb      	strh	r3, [r7, #22]
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8004290:	7afb      	ldrb	r3, [r7, #11]
 8004292:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	3328      	adds	r3, #40	; 0x28
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2200      	movs	r2, #0
 80042b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2201      	movs	r2, #1
 80042bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 80042be:	7afb      	ldrb	r3, [r7, #11]
 80042c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	701a      	strb	r2, [r3, #0]
  
  __HAL_LOCK(hpcd); 
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_PCD_EP_Transmit+0x5c>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e0bb      	b.n	8004450 <HAL_PCD_EP_Transmit+0x1d4>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d909      	bls.n	8004300 <HAL_PCD_EP_Transmit+0x84>
  {
    len=ep->maxpacket;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	1ad2      	subs	r2, r2, r3
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	615a      	str	r2, [r3, #20]
 80042fe:	e005      	b.n	800430c <HAL_PCD_EP_Transmit+0x90>
  }
  else
  {  
    len=ep->xfer_len;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	2200      	movs	r2, #0
 800430a:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	7a9b      	ldrb	r3, [r3, #10]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d11f      	bne.n	8004354 <HAL_PCD_EP_Transmit+0xd8>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	6919      	ldr	r1, [r3, #16]
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	889a      	ldrh	r2, [r3, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	f000 fa68 	bl	80047f8 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004330:	b29b      	uxth	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4413      	add	r3, r2
 800433c:	3302      	adds	r3, #2
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	461a      	mov	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800434c:	461a      	mov	r2, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e059      	b.n	8004408 <HAL_PCD_EP_Transmit+0x18c>
  }
  else
  {
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_PCD_EP_Transmit+0xfa>
    {
      pmabuffer = ep->pmaaddr1;
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	891b      	ldrh	r3, [r3, #8]
 8004372:	82fb      	strh	r3, [r7, #22]
 8004374:	e002      	b.n	800437c <HAL_PCD_EP_Transmit+0x100>
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	88db      	ldrh	r3, [r3, #6]
 800437a:	82fb      	strh	r3, [r7, #22]
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	6919      	ldr	r1, [r3, #16]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	b29b      	uxth	r3, r3
 8004388:	8afa      	ldrh	r2, [r7, #22]
 800438a:	f000 fa35 	bl	80047f8 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d11a      	bne.n	80043cc <HAL_PCD_EP_Transmit+0x150>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	441a      	add	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4619      	mov	r1, r3
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	b219      	sxth	r1, r3
 80043b8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80043bc:	400b      	ands	r3, r1
 80043be:	b219      	sxth	r1, r3
 80043c0:	4b25      	ldr	r3, [pc, #148]	; (8004458 <HAL_PCD_EP_Transmit+0x1dc>)
 80043c2:	430b      	orrs	r3, r1
 80043c4:	b21b      	sxth	r3, r3
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	8013      	strh	r3, [r2, #0]
 80043ca:	e01d      	b.n	8004408 <HAL_PCD_EP_Transmit+0x18c>
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	785b      	ldrb	r3, [r3, #1]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d119      	bne.n	8004408 <HAL_PCD_EP_Transmit+0x18c>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	441a      	add	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4619      	mov	r1, r3
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	b219      	sxth	r1, r3
 80043f6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80043fa:	400b      	ands	r3, r1
 80043fc:	b219      	sxth	r1, r3
 80043fe:	4b17      	ldr	r3, [pc, #92]	; (800445c <HAL_PCD_EP_Transmit+0x1e0>)
 8004400:	430b      	orrs	r3, r1
 8004402:	b21b      	sxth	r3, r3
 8004404:	b29b      	uxth	r3, r3
 8004406:	8013      	strh	r3, [r2, #0]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	b29b      	uxth	r3, r3
 800441a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800441e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004422:	b29c      	uxth	r4, r3
 8004424:	f084 0310 	eor.w	r3, r4, #16
 8004428:	b29c      	uxth	r4, r3
 800442a:	f084 0320 	eor.w	r3, r4, #32
 800442e:	b29c      	uxth	r4, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	441a      	add	r2, r3
 800443e:	4b08      	ldr	r3, [pc, #32]	; (8004460 <HAL_PCD_EP_Transmit+0x1e4>)
 8004440:	4323      	orrs	r3, r4
 8004442:	b29b      	uxth	r3, r3
 8004444:	8013      	strh	r3, [r2, #0]
  
  __HAL_UNLOCK(hpcd);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
     
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	371c      	adds	r7, #28
 8004454:	46bd      	mov	sp, r7
 8004456:	bd90      	pop	{r4, r7, pc}
 8004458:	ffff80c0 	.word	0xffff80c0
 800445c:	ffffc080 	.word	0xffffc080
 8004460:	ffff8080 	.word	0xffff8080

08004464 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004464:	b490      	push	{r4, r7}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_PCD_EP_SetStall+0x1a>
 800447a:	2302      	movs	r3, #2
 800447c:	e092      	b.n	80045a4 <HAL_PCD_EP_SetStall+0x140>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
   
  if ((0x80 & ep_addr) == 0x80)
 8004486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800448a:	2b00      	cmp	r3, #0
 800448c:	da0b      	bge.n	80044a6 <HAL_PCD_EP_SetStall+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004494:	4613      	mov	r3, r2
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	3328      	adds	r3, #40	; 0x28
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	e00a      	b.n	80044bc <HAL_PCD_EP_SetStall+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	4413      	add	r3, r2
 80044b8:	3304      	adds	r3, #4
 80044ba:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 80044c2:	78fb      	ldrb	r3, [r7, #3]
 80044c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80044ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	09db      	lsrs	r3, r3, #7
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	705a      	strb	r2, [r3, #1]
  
  if (ep->num == 0)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d11c      	bne.n	8004520 <HAL_PCD_EP_SetStall+0xbc>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 80044fc:	401c      	ands	r4, r3
 80044fe:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 8004502:	f084 0410 	eor.w	r4, r4, #16
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	441a      	add	r2, r3
 8004514:	b2a1      	uxth	r1, r4
 8004516:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <HAL_PCD_EP_SetStall+0x14c>)
 8004518:	430b      	orrs	r3, r1
 800451a:	b29b      	uxth	r3, r3
 800451c:	8013      	strh	r3, [r2, #0]
 800451e:	e03c      	b.n	800459a <HAL_PCD_EP_SetStall+0x136>
  }
  else
  {
    if (ep->is_in)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	785b      	ldrb	r3, [r3, #1]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01c      	beq.n	8004562 <HAL_PCD_EP_SetStall+0xfe>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	b29b      	uxth	r3, r3
 800453a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004542:	b29c      	uxth	r4, r3
 8004544:	f084 0310 	eor.w	r3, r4, #16
 8004548:	b29c      	uxth	r4, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	441a      	add	r2, r3
 8004558:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <HAL_PCD_EP_SetStall+0x14c>)
 800455a:	4323      	orrs	r3, r4
 800455c:	b29b      	uxth	r3, r3
 800455e:	8013      	strh	r3, [r2, #0]
 8004560:	e01b      	b.n	800459a <HAL_PCD_EP_SetStall+0x136>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457c:	b29c      	uxth	r4, r3
 800457e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004582:	b29c      	uxth	r4, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <HAL_PCD_EP_SetStall+0x14c>)
 8004594:	4323      	orrs	r3, r4
 8004596:	b29b      	uxth	r3, r3
 8004598:	8013      	strh	r3, [r2, #0]
    }
  }
  __HAL_UNLOCK(hpcd); 
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc90      	pop	{r4, r7}
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	ffff8080 	.word	0xffff8080

080045b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045b4:	b490      	push	{r4, r7}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 80045c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	da0b      	bge.n	80045e0 <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80045c8:	78fb      	ldrb	r3, [r7, #3]
 80045ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045ce:	4613      	mov	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	3328      	adds	r3, #40	; 0x28
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	4413      	add	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	e00a      	b.n	80045f6 <HAL_PCD_EP_ClrStall+0x42>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045e0:	78fa      	ldrb	r2, [r7, #3]
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	4413      	add	r3, r2
 80045f2:	3304      	adds	r3, #4
 80045f4:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004602:	b2da      	uxtb	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8004608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800460c:	b2db      	uxtb	r3, r3
 800460e:	09db      	lsrs	r3, r3, #7
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 800461e:	2b01      	cmp	r3, #1
 8004620:	d101      	bne.n	8004626 <HAL_PCD_EP_ClrStall+0x72>
 8004622:	2302      	movs	r3, #2
 8004624:	e099      	b.n	800475a <HAL_PCD_EP_ClrStall+0x1a6>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  if (ep->is_in)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	785b      	ldrb	r3, [r3, #1]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d046      	beq.n	80046c4 <HAL_PCD_EP_ClrStall+0x110>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464c:	2b00      	cmp	r3, #0
 800464e:	d019      	beq.n	8004684 <HAL_PCD_EP_ClrStall+0xd0>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	441a      	add	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4619      	mov	r1, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	b219      	sxth	r1, r3
 8004672:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004676:	400b      	ands	r3, r1
 8004678:	b219      	sxth	r1, r3
 800467a:	4b3a      	ldr	r3, [pc, #232]	; (8004764 <HAL_PCD_EP_ClrStall+0x1b0>)
 800467c:	430b      	orrs	r3, r1
 800467e:	b21b      	sxth	r3, r3
 8004680:	b29b      	uxth	r3, r3
 8004682:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	461a      	mov	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800469a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800469e:	b29c      	uxth	r4, r3
 80046a0:	f084 0310 	eor.w	r3, r4, #16
 80046a4:	b29c      	uxth	r4, r3
 80046a6:	f084 0320 	eor.w	r3, r4, #32
 80046aa:	b29c      	uxth	r4, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	441a      	add	r2, r3
 80046ba:	4b2b      	ldr	r3, [pc, #172]	; (8004768 <HAL_PCD_EP_ClrStall+0x1b4>)
 80046bc:	4323      	orrs	r3, r4
 80046be:	b29b      	uxth	r3, r3
 80046c0:	8013      	strh	r3, [r2, #0]
 80046c2:	e045      	b.n	8004750 <HAL_PCD_EP_ClrStall+0x19c>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d019      	beq.n	8004712 <HAL_PCD_EP_ClrStall+0x15e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	441a      	add	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4619      	mov	r1, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	b219      	sxth	r1, r3
 8004700:	f640 730f 	movw	r3, #3855	; 0xf0f
 8004704:	400b      	ands	r3, r1
 8004706:	b219      	sxth	r1, r3
 8004708:	4b18      	ldr	r3, [pc, #96]	; (800476c <HAL_PCD_EP_ClrStall+0x1b8>)
 800470a:	430b      	orrs	r3, r1
 800470c:	b21b      	sxth	r3, r3
 800470e:	b29b      	uxth	r3, r3
 8004710:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472c:	b29c      	uxth	r4, r3
 800472e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004732:	b29c      	uxth	r4, r3
 8004734:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004738:	b29c      	uxth	r4, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	441a      	add	r2, r3
 8004748:	4b07      	ldr	r3, [pc, #28]	; (8004768 <HAL_PCD_EP_ClrStall+0x1b4>)
 800474a:	4323      	orrs	r3, r4
 800474c:	b29b      	uxth	r3, r3
 800474e:	8013      	strh	r3, [r2, #0]
  }
  __HAL_UNLOCK(hpcd); 
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
    
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bc90      	pop	{r4, r7}
 8004762:	4770      	bx	lr
 8004764:	ffff80c0 	.word	0xffff80c0
 8004768:	ffff8080 	.word	0xffff8080
 800476c:	ffffc080 	.word	0xffffc080

08004770 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	607b      	str	r3, [r7, #4]
 800477a:	460b      	mov	r3, r1
 800477c:	817b      	strh	r3, [r7, #10]
 800477e:	4613      	mov	r3, r2
 8004780:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8004782:	897b      	ldrh	r3, [r7, #10]
 8004784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800478e:	897b      	ldrh	r3, [r7, #10]
 8004790:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	3328      	adds	r3, #40	; 0x28
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	4413      	add	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e00a      	b.n	80047bc <HAL_PCDEx_PMAConfig+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80047a6:	897a      	ldrh	r2, [r7, #10]
 80047a8:	4613      	mov	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	3304      	adds	r3, #4
 80047ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80047bc:	893b      	ldrh	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d107      	bne.n	80047d2 <HAL_PCDEx_PMAConfig+0x62>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2200      	movs	r2, #0
 80047c6:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	809a      	strh	r2, [r3, #4]
 80047d0:	e00b      	b.n	80047ea <HAL_PCDEx_PMAConfig+0x7a>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2201      	movs	r2, #1
 80047d6:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	b29a      	uxth	r2, r3
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	0c1b      	lsrs	r3, r3, #16
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <PCD_WritePMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b08b      	sub	sp, #44	; 0x2c
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	4611      	mov	r1, r2
 8004804:	461a      	mov	r2, r3
 8004806:	460b      	mov	r3, r1
 8004808:	80fb      	strh	r3, [r7, #6]
 800480a:	4613      	mov	r3, r2
 800480c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800480e:	88bb      	ldrh	r3, [r7, #4]
 8004810:	3301      	adds	r3, #1
 8004812:	105b      	asrs	r3, r3, #1
 8004814:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	461a      	mov	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004824:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0; i--)
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
 800482a:	e01b      	b.n	8004864 <PCD_WritePMA+0x6c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	3301      	adds	r3, #1
 8004836:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	461a      	mov	r2, r3
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	4313      	orrs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	1c9a      	adds	r2, r3, #2
 800484a:	623a      	str	r2, [r7, #32]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	b292      	uxth	r2, r2
 8004850:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	3302      	adds	r3, #2
 8004856:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	3301      	adds	r3, #1
 800485c:	60bb      	str	r3, [r7, #8]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	3b01      	subs	r3, #1
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
 8004864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e0      	bne.n	800482c <PCD_WritePMA+0x34>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800486a:	bf00      	nop
 800486c:	372c      	adds	r7, #44	; 0x2c
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop

08004878 <PCD_ReadPMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004878:	b480      	push	{r7}
 800487a:	b089      	sub	sp, #36	; 0x24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	4611      	mov	r1, r2
 8004884:	461a      	mov	r2, r3
 8004886:	460b      	mov	r3, r1
 8004888:	80fb      	strh	r3, [r7, #6]
 800488a:	4613      	mov	r3, r2
 800488c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800488e:	88bb      	ldrh	r3, [r7, #4]
 8004890:	3301      	adds	r3, #1
 8004892:	105b      	asrs	r3, r3, #1
 8004894:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	461a      	mov	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048a4:	61bb      	str	r3, [r7, #24]
  for (i = n; i != 0; i--)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	e00e      	b.n	80048ca <PCD_ReadPMA+0x52>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	60ba      	str	r2, [r7, #8]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	1d11      	adds	r1, r2, #4
 80048b6:	61b9      	str	r1, [r7, #24]
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	b292      	uxth	r2, r2
 80048bc:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	3301      	adds	r3, #1
 80048c2:	60bb      	str	r3, [r7, #8]
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ed      	bne.n	80048ac <PCD_ReadPMA+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 80048d0:	bf00      	nop
 80048d2:	3724      	adds	r7, #36	; 0x24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048dc:	b590      	push	{r4, r7, lr}
 80048de:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	1d3b      	adds	r3, r7, #4
 80048e6:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ee:	1d3b      	adds	r3, r7, #4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 81e8 	beq.w	8004cce <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80048fe:	4bb8      	ldr	r3, [pc, #736]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	2b04      	cmp	r3, #4
 8004908:	d00c      	beq.n	8004924 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800490a:	4bb5      	ldr	r3, [pc, #724]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b08      	cmp	r3, #8
 8004914:	f040 8082 	bne.w	8004a1c <HAL_RCC_OscConfig+0x140>
 8004918:	4bb1      	ldr	r3, [pc, #708]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d07b      	beq.n	8004a1c <HAL_RCC_OscConfig+0x140>
 8004924:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004928:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004930:	fa93 f2a3 	rbit	r2, r3
 8004934:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004938:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800493a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800493e:	681b      	ldr	r3, [r3, #0]
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	fab3 f383 	clz	r3, r3
 8004944:	b25b      	sxtb	r3, r3
 8004946:	f043 0320 	orr.w	r3, r3, #32
 800494a:	b25b      	sxtb	r3, r3
 800494c:	b2db      	uxtb	r3, r3
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b01      	cmp	r3, #1
 8004954:	d102      	bne.n	800495c <HAL_RCC_OscConfig+0x80>
 8004956:	4ba2      	ldr	r3, [pc, #648]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	e039      	b.n	80049d0 <HAL_RCC_OscConfig+0xf4>
 800495c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004960:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004964:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004968:	fa93 f2a3 	rbit	r2, r3
 800496c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004970:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004972:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	fab3 f383 	clz	r3, r3
 800497c:	b25b      	sxtb	r3, r3
 800497e:	f043 0320 	orr.w	r3, r3, #32
 8004982:	b25b      	sxtb	r3, r3
 8004984:	b2db      	uxtb	r3, r3
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d102      	bne.n	8004994 <HAL_RCC_OscConfig+0xb8>
 800498e:	4b94      	ldr	r3, [pc, #592]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	e01d      	b.n	80049d0 <HAL_RCC_OscConfig+0xf4>
 8004994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004998:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80049a0:	fa93 f2a3 	rbit	r2, r3
 80049a4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80049a8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80049aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	fab3 f383 	clz	r3, r3
 80049b4:	b25b      	sxtb	r3, r3
 80049b6:	f043 0320 	orr.w	r3, r3, #32
 80049ba:	b25b      	sxtb	r3, r3
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d102      	bne.n	80049cc <HAL_RCC_OscConfig+0xf0>
 80049c6:	4b86      	ldr	r3, [pc, #536]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	e001      	b.n	80049d0 <HAL_RCC_OscConfig+0xf4>
 80049cc:	4b84      	ldr	r3, [pc, #528]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049d4:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d8:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80049dc:	fa92 f1a2 	rbit	r1, r2
 80049e0:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80049e4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80049e6:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	fab2 f282 	clz	r2, r2
 80049f0:	b252      	sxtb	r2, r2
 80049f2:	f042 0220 	orr.w	r2, r2, #32
 80049f6:	b252      	sxtb	r2, r2
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	f002 021f 	and.w	r2, r2, #31
 80049fe:	40d3      	lsrs	r3, r2
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 8161 	beq.w	8004ccc <HAL_RCC_OscConfig+0x3f0>
 8004a0a:	1d3b      	adds	r3, r7, #4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f040 815b 	bne.w	8004ccc <HAL_RCC_OscConfig+0x3f0>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f001 b81a 	b.w	8005a50 <HAL_RCC_OscConfig+0x1174>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a1c:	1d3b      	adds	r3, r7, #4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a26:	d106      	bne.n	8004a36 <HAL_RCC_OscConfig+0x15a>
 8004a28:	4a6d      	ldr	r2, [pc, #436]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a2a:	4b6d      	ldr	r3, [pc, #436]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	e030      	b.n	8004a98 <HAL_RCC_OscConfig+0x1bc>
 8004a36:	1d3b      	adds	r3, r7, #4
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10c      	bne.n	8004a5a <HAL_RCC_OscConfig+0x17e>
 8004a40:	4a67      	ldr	r2, [pc, #412]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a42:	4b67      	ldr	r3, [pc, #412]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	4a64      	ldr	r2, [pc, #400]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a4e:	4b64      	ldr	r3, [pc, #400]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	e01e      	b.n	8004a98 <HAL_RCC_OscConfig+0x1bc>
 8004a5a:	1d3b      	adds	r3, r7, #4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x1a4>
 8004a66:	4a5e      	ldr	r2, [pc, #376]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a68:	4b5d      	ldr	r3, [pc, #372]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	4a5b      	ldr	r2, [pc, #364]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a74:	4b5a      	ldr	r3, [pc, #360]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e00b      	b.n	8004a98 <HAL_RCC_OscConfig+0x1bc>
 8004a80:	4a57      	ldr	r2, [pc, #348]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a82:	4b57      	ldr	r3, [pc, #348]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	4a54      	ldr	r2, [pc, #336]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a8e:	4b54      	ldr	r3, [pc, #336]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a96:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a98:	4951      	ldr	r1, [pc, #324]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a9a:	4b51      	ldr	r3, [pc, #324]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	f023 020f 	bic.w	r2, r3, #15
 8004aa2:	1d3b      	adds	r3, r7, #4
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aac:	1d3b      	adds	r3, r7, #4
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 8083 	beq.w	8004bbe <HAL_RCC_OscConfig+0x2e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab8:	f7fc fb02 	bl	80010c0 <HAL_GetTick>
 8004abc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac0:	e00a      	b.n	8004ad8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac2:	f7fc fafd 	bl	80010c0 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	; 0x64
 8004ad0:	d902      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	f000 bfbc 	b.w	8005a50 <HAL_RCC_OscConfig+0x1174>
 8004ad8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004adc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004ae4:	fa93 f2a3 	rbit	r2, r3
 8004ae8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004aec:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004aee:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004af2:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af4:	fab3 f383 	clz	r3, r3
 8004af8:	b25b      	sxtb	r3, r3
 8004afa:	f043 0320 	orr.w	r3, r3, #32
 8004afe:	b25b      	sxtb	r3, r3
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d102      	bne.n	8004b10 <HAL_RCC_OscConfig+0x234>
 8004b0a:	4b35      	ldr	r3, [pc, #212]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	e039      	b.n	8004b84 <HAL_RCC_OscConfig+0x2a8>
 8004b10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b14:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b18:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004b1c:	fa93 f2a3 	rbit	r2, r3
 8004b20:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004b24:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004b26:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	fab3 f383 	clz	r3, r3
 8004b30:	b25b      	sxtb	r3, r3
 8004b32:	f043 0320 	orr.w	r3, r3, #32
 8004b36:	b25b      	sxtb	r3, r3
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d102      	bne.n	8004b48 <HAL_RCC_OscConfig+0x26c>
 8004b42:	4b27      	ldr	r3, [pc, #156]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	e01d      	b.n	8004b84 <HAL_RCC_OscConfig+0x2a8>
 8004b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b4c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b50:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004b54:	fa93 f2a3 	rbit	r2, r3
 8004b58:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004b5c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004b5e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	fab3 f383 	clz	r3, r3
 8004b68:	b25b      	sxtb	r3, r3
 8004b6a:	f043 0320 	orr.w	r3, r3, #32
 8004b6e:	b25b      	sxtb	r3, r3
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d102      	bne.n	8004b80 <HAL_RCC_OscConfig+0x2a4>
 8004b7a:	4b19      	ldr	r3, [pc, #100]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	e001      	b.n	8004b84 <HAL_RCC_OscConfig+0x2a8>
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <HAL_RCC_OscConfig+0x304>)
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b88:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b8c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8004b90:	fa92 f1a2 	rbit	r1, r2
 8004b94:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8004b98:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004b9a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	fab2 f282 	clz	r2, r2
 8004ba4:	b252      	sxtb	r2, r2
 8004ba6:	f042 0220 	orr.w	r2, r2, #32
 8004baa:	b252      	sxtb	r2, r2
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	f002 021f 	and.w	r2, r2, #31
 8004bb2:	40d3      	lsrs	r3, r2
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d082      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x1e6>
 8004bbc:	e087      	b.n	8004cce <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbe:	f7fc fa7f 	bl	80010c0 <HAL_GetTick>
 8004bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc6:	e00d      	b.n	8004be4 <HAL_RCC_OscConfig+0x308>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc8:	f7fc fa7a 	bl	80010c0 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b64      	cmp	r3, #100	; 0x64
 8004bd6:	d905      	bls.n	8004be4 <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	f000 bf39 	b.w	8005a50 <HAL_RCC_OscConfig+0x1174>
 8004bde:	bf00      	nop
 8004be0:	40021000 	.word	0x40021000
 8004be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004be8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bec:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8004bf0:	fa93 f2a3 	rbit	r2, r3
 8004bf4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004bf8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004bfa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004bfe:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c00:	fab3 f383 	clz	r3, r3
 8004c04:	b25b      	sxtb	r3, r3
 8004c06:	f043 0320 	orr.w	r3, r3, #32
 8004c0a:	b25b      	sxtb	r3, r3
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d102      	bne.n	8004c1c <HAL_RCC_OscConfig+0x340>
 8004c16:	4bb6      	ldr	r3, [pc, #728]	; (8004ef0 <HAL_RCC_OscConfig+0x614>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	e039      	b.n	8004c90 <HAL_RCC_OscConfig+0x3b4>
 8004c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c20:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c24:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004c28:	fa93 f2a3 	rbit	r2, r3
 8004c2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004c30:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004c32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	fab3 f383 	clz	r3, r3
 8004c3c:	b25b      	sxtb	r3, r3
 8004c3e:	f043 0320 	orr.w	r3, r3, #32
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d102      	bne.n	8004c54 <HAL_RCC_OscConfig+0x378>
 8004c4e:	4ba8      	ldr	r3, [pc, #672]	; (8004ef0 <HAL_RCC_OscConfig+0x614>)
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	e01d      	b.n	8004c90 <HAL_RCC_OscConfig+0x3b4>
 8004c54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c58:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c5c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004c60:	fa93 f2a3 	rbit	r2, r3
 8004c64:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004c68:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004c6a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	fab3 f383 	clz	r3, r3
 8004c74:	b25b      	sxtb	r3, r3
 8004c76:	f043 0320 	orr.w	r3, r3, #32
 8004c7a:	b25b      	sxtb	r3, r3
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d102      	bne.n	8004c8c <HAL_RCC_OscConfig+0x3b0>
 8004c86:	4b9a      	ldr	r3, [pc, #616]	; (8004ef0 <HAL_RCC_OscConfig+0x614>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	e001      	b.n	8004c90 <HAL_RCC_OscConfig+0x3b4>
 8004c8c:	4b98      	ldr	r3, [pc, #608]	; (8004ef0 <HAL_RCC_OscConfig+0x614>)
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c94:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c98:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004c9c:	fa92 f1a2 	rbit	r1, r2
 8004ca0:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8004ca4:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004ca6:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	fab2 f282 	clz	r2, r2
 8004cb0:	b252      	sxtb	r2, r2
 8004cb2:	f042 0220 	orr.w	r2, r2, #32
 8004cb6:	b252      	sxtb	r2, r2
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	f002 021f 	and.w	r2, r2, #31
 8004cbe:	40d3      	lsrs	r3, r2
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f47f af7f 	bne.w	8004bc8 <HAL_RCC_OscConfig+0x2ec>
 8004cca:	e000      	b.n	8004cce <HAL_RCC_OscConfig+0x3f2>
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cce:	1d3b      	adds	r3, r7, #4
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 81f4 	beq.w	80050c6 <HAL_RCC_OscConfig+0x7ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004cde:	4b84      	ldr	r3, [pc, #528]	; (8004ef0 <HAL_RCC_OscConfig+0x614>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00d      	beq.n	8004d06 <HAL_RCC_OscConfig+0x42a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004cea:	4b81      	ldr	r3, [pc, #516]	; (8004ef0 <HAL_RCC_OscConfig+0x614>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f003 030c 	and.w	r3, r3, #12
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	f040 8099 	bne.w	8004e2a <HAL_RCC_OscConfig+0x54e>
 8004cf8:	4b7d      	ldr	r3, [pc, #500]	; (8004ef0 <HAL_RCC_OscConfig+0x614>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f040 8092 	bne.w	8004e2a <HAL_RCC_OscConfig+0x54e>
 8004d06:	2302      	movs	r3, #2
 8004d08:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8004d10:	fa93 f2a3 	rbit	r2, r3
 8004d14:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004d18:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004d1a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004d1e:	681b      	ldr	r3, [r3, #0]
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d20:	fab3 f383 	clz	r3, r3
 8004d24:	b25b      	sxtb	r3, r3
 8004d26:	f043 0320 	orr.w	r3, r3, #32
 8004d2a:	b25b      	sxtb	r3, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d102      	bne.n	8004d3c <HAL_RCC_OscConfig+0x460>
 8004d36:	4b6e      	ldr	r3, [pc, #440]	; (8004ef0 <HAL_RCC_OscConfig+0x614>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	e037      	b.n	8004dac <HAL_RCC_OscConfig+0x4d0>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d42:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8004d46:	fa93 f2a3 	rbit	r2, r3
 8004d4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004d4e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004d50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	fab3 f383 	clz	r3, r3
 8004d5a:	b25b      	sxtb	r3, r3
 8004d5c:	f043 0320 	orr.w	r3, r3, #32
 8004d60:	b25b      	sxtb	r3, r3
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d102      	bne.n	8004d72 <HAL_RCC_OscConfig+0x496>
 8004d6c:	4b60      	ldr	r3, [pc, #384]	; (8004ef0 <HAL_RCC_OscConfig+0x614>)
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	e01c      	b.n	8004dac <HAL_RCC_OscConfig+0x4d0>
 8004d72:	2302      	movs	r3, #2
 8004d74:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d78:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004d7c:	fa93 f2a3 	rbit	r2, r3
 8004d80:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004d84:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004d86:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	fab3 f383 	clz	r3, r3
 8004d90:	b25b      	sxtb	r3, r3
 8004d92:	f043 0320 	orr.w	r3, r3, #32
 8004d96:	b25b      	sxtb	r3, r3
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d102      	bne.n	8004da8 <HAL_RCC_OscConfig+0x4cc>
 8004da2:	4b53      	ldr	r3, [pc, #332]	; (8004ef0 <HAL_RCC_OscConfig+0x614>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	e001      	b.n	8004dac <HAL_RCC_OscConfig+0x4d0>
 8004da8:	4b51      	ldr	r3, [pc, #324]	; (8004ef0 <HAL_RCC_OscConfig+0x614>)
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	2202      	movs	r2, #2
 8004dae:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db2:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8004db6:	fa92 f1a2 	rbit	r1, r2
 8004dba:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8004dbe:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004dc0:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	fab2 f282 	clz	r2, r2
 8004dca:	b252      	sxtb	r2, r2
 8004dcc:	f042 0220 	orr.w	r2, r2, #32
 8004dd0:	b252      	sxtb	r2, r2
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	f002 021f 	and.w	r2, r2, #31
 8004dd8:	40d3      	lsrs	r3, r2
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d007      	beq.n	8004df2 <HAL_RCC_OscConfig+0x516>
 8004de2:	1d3b      	adds	r3, r7, #4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d002      	beq.n	8004df2 <HAL_RCC_OscConfig+0x516>
      {
        return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f000 be2f 	b.w	8005a50 <HAL_RCC_OscConfig+0x1174>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df2:	4c3f      	ldr	r4, [pc, #252]	; (8004ef0 <HAL_RCC_OscConfig+0x614>)
 8004df4:	4b3e      	ldr	r3, [pc, #248]	; (8004ef0 <HAL_RCC_OscConfig+0x614>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dfc:	1d3b      	adds	r3, r7, #4
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6959      	ldr	r1, [r3, #20]
 8004e02:	23f8      	movs	r3, #248	; 0xf8
 8004e04:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e08:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004e0c:	fa93 f0a3 	rbit	r0, r3
 8004e10:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004e14:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004e16:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	fab3 f383 	clz	r3, r3
 8004e20:	fa01 f303 	lsl.w	r3, r1, r3
 8004e24:	4313      	orrs	r3, r2
 8004e26:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e28:	e14d      	b.n	80050c6 <HAL_RCC_OscConfig+0x7ea>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e2a:	1d3b      	adds	r3, r7, #4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 80b3 	beq.w	8004f9c <HAL_RCC_OscConfig+0x6c0>
 8004e36:	2301      	movs	r3, #1
 8004e38:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004e40:	fa93 f2a3 	rbit	r2, r3
 8004e44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004e48:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004e4a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004e4e:	681b      	ldr	r3, [r3, #0]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e50:	fab3 f383 	clz	r3, r3
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004e5a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004e5e:	461a      	mov	r2, r3
 8004e60:	2301      	movs	r3, #1
 8004e62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fc f92c 	bl	80010c0 <HAL_GetTick>
 8004e68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6c:	e00a      	b.n	8004e84 <HAL_RCC_OscConfig+0x5a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e6e:	f7fc f927 	bl	80010c0 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d902      	bls.n	8004e84 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	f000 bde6 	b.w	8005a50 <HAL_RCC_OscConfig+0x1174>
 8004e84:	2302      	movs	r3, #2
 8004e86:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004e8e:	fa93 f2a3 	rbit	r2, r3
 8004e92:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004e96:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004e98:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004e9c:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9e:	fab3 f383 	clz	r3, r3
 8004ea2:	b25b      	sxtb	r3, r3
 8004ea4:	f043 0320 	orr.w	r3, r3, #32
 8004ea8:	b25b      	sxtb	r3, r3
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d102      	bne.n	8004eba <HAL_RCC_OscConfig+0x5de>
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <HAL_RCC_OscConfig+0x614>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	e039      	b.n	8004f2e <HAL_RCC_OscConfig+0x652>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004ec4:	fa93 f2a3 	rbit	r2, r3
 8004ec8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004ecc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004ece:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	fab3 f383 	clz	r3, r3
 8004ed8:	b25b      	sxtb	r3, r3
 8004eda:	f043 0320 	orr.w	r3, r3, #32
 8004ede:	b25b      	sxtb	r3, r3
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d104      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x618>
 8004eea:	4b01      	ldr	r3, [pc, #4]	; (8004ef0 <HAL_RCC_OscConfig+0x614>)
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	e01e      	b.n	8004f2e <HAL_RCC_OscConfig+0x652>
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8004efe:	fa93 f2a3 	rbit	r2, r3
 8004f02:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f06:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004f08:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	fab3 f383 	clz	r3, r3
 8004f12:	b25b      	sxtb	r3, r3
 8004f14:	f043 0320 	orr.w	r3, r3, #32
 8004f18:	b25b      	sxtb	r3, r3
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	095b      	lsrs	r3, r3, #5
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d102      	bne.n	8004f2a <HAL_RCC_OscConfig+0x64e>
 8004f24:	4bb9      	ldr	r3, [pc, #740]	; (800520c <HAL_RCC_OscConfig+0x930>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	e001      	b.n	8004f2e <HAL_RCC_OscConfig+0x652>
 8004f2a:	4bb8      	ldr	r3, [pc, #736]	; (800520c <HAL_RCC_OscConfig+0x930>)
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f34:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004f38:	fa92 f1a2 	rbit	r1, r2
 8004f3c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004f40:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004f42:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004f46:	6812      	ldr	r2, [r2, #0]
 8004f48:	fab2 f282 	clz	r2, r2
 8004f4c:	b252      	sxtb	r2, r2
 8004f4e:	f042 0220 	orr.w	r2, r2, #32
 8004f52:	b252      	sxtb	r2, r2
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	f002 021f 	and.w	r2, r2, #31
 8004f5a:	40d3      	lsrs	r3, r2
 8004f5c:	f003 0301 	and.w	r3, r3, #1
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d084      	beq.n	8004e6e <HAL_RCC_OscConfig+0x592>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f64:	4ca9      	ldr	r4, [pc, #676]	; (800520c <HAL_RCC_OscConfig+0x930>)
 8004f66:	4ba9      	ldr	r3, [pc, #676]	; (800520c <HAL_RCC_OscConfig+0x930>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6959      	ldr	r1, [r3, #20]
 8004f74:	23f8      	movs	r3, #248	; 0xf8
 8004f76:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004f7e:	fa93 f0a3 	rbit	r0, r3
 8004f82:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004f86:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004f88:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	fab3 f383 	clz	r3, r3
 8004f92:	fa01 f303 	lsl.w	r3, r1, r3
 8004f96:	4313      	orrs	r3, r2
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	e094      	b.n	80050c6 <HAL_RCC_OscConfig+0x7ea>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004fa6:	fa93 f2a3 	rbit	r2, r3
 8004faa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004fae:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004fb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004fb4:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fb6:	fab3 f383 	clz	r3, r3
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004fc0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fca:	f7fc f879 	bl	80010c0 <HAL_GetTick>
 8004fce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd2:	e00a      	b.n	8004fea <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fd4:	f7fc f874 	bl	80010c0 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d902      	bls.n	8004fea <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	f000 bd33 	b.w	8005a50 <HAL_RCC_OscConfig+0x1174>
 8004fea:	2302      	movs	r3, #2
 8004fec:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004ff4:	fa93 f2a3 	rbit	r2, r3
 8004ff8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004ffc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004ffe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005002:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005004:	fab3 f383 	clz	r3, r3
 8005008:	b25b      	sxtb	r3, r3
 800500a:	f043 0320 	orr.w	r3, r3, #32
 800500e:	b25b      	sxtb	r3, r3
 8005010:	b2db      	uxtb	r3, r3
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b01      	cmp	r3, #1
 8005018:	d102      	bne.n	8005020 <HAL_RCC_OscConfig+0x744>
 800501a:	4b7c      	ldr	r3, [pc, #496]	; (800520c <HAL_RCC_OscConfig+0x930>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	e037      	b.n	8005090 <HAL_RCC_OscConfig+0x7b4>
 8005020:	2302      	movs	r3, #2
 8005022:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005026:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800502a:	fa93 f2a3 	rbit	r2, r3
 800502e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005032:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005034:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	fab3 f383 	clz	r3, r3
 800503e:	b25b      	sxtb	r3, r3
 8005040:	f043 0320 	orr.w	r3, r3, #32
 8005044:	b25b      	sxtb	r3, r3
 8005046:	b2db      	uxtb	r3, r3
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d102      	bne.n	8005056 <HAL_RCC_OscConfig+0x77a>
 8005050:	4b6e      	ldr	r3, [pc, #440]	; (800520c <HAL_RCC_OscConfig+0x930>)
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	e01c      	b.n	8005090 <HAL_RCC_OscConfig+0x7b4>
 8005056:	2302      	movs	r3, #2
 8005058:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005060:	fa93 f2a3 	rbit	r2, r3
 8005064:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005068:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800506a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	fab3 f383 	clz	r3, r3
 8005074:	b25b      	sxtb	r3, r3
 8005076:	f043 0320 	orr.w	r3, r3, #32
 800507a:	b25b      	sxtb	r3, r3
 800507c:	b2db      	uxtb	r3, r3
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b04      	cmp	r3, #4
 8005084:	d102      	bne.n	800508c <HAL_RCC_OscConfig+0x7b0>
 8005086:	4b61      	ldr	r3, [pc, #388]	; (800520c <HAL_RCC_OscConfig+0x930>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	e001      	b.n	8005090 <HAL_RCC_OscConfig+0x7b4>
 800508c:	4b5f      	ldr	r3, [pc, #380]	; (800520c <HAL_RCC_OscConfig+0x930>)
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	2202      	movs	r2, #2
 8005092:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800509a:	fa92 f1a2 	rbit	r1, r2
 800509e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80050a2:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80050a4:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	fab2 f282 	clz	r2, r2
 80050ae:	b252      	sxtb	r2, r2
 80050b0:	f042 0220 	orr.w	r2, r2, #32
 80050b4:	b252      	sxtb	r2, r2
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	f002 021f 	and.w	r2, r2, #31
 80050bc:	40d3      	lsrs	r3, r2
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d186      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x6f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050c6:	1d3b      	adds	r3, r7, #4
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8132 	beq.w	800533a <HAL_RCC_OscConfig+0xa5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050d6:	1d3b      	adds	r3, r7, #4
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8099 	beq.w	8005214 <HAL_RCC_OscConfig+0x938>
 80050e2:	2301      	movs	r3, #1
 80050e4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80050ec:	fa93 f2a3 	rbit	r2, r3
 80050f0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80050f4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80050f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80050fa:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050fc:	fab3 f383 	clz	r3, r3
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	461a      	mov	r2, r3
 8005104:	4b42      	ldr	r3, [pc, #264]	; (8005210 <HAL_RCC_OscConfig+0x934>)
 8005106:	4413      	add	r3, r2
 8005108:	461a      	mov	r2, r3
 800510a:	2301      	movs	r3, #1
 800510c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800510e:	f7fb ffd7 	bl	80010c0 <HAL_GetTick>
 8005112:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005116:	e00a      	b.n	800512e <HAL_RCC_OscConfig+0x852>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005118:	f7fb ffd2 	bl	80010c0 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d902      	bls.n	800512e <HAL_RCC_OscConfig+0x852>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	f000 bc91 	b.w	8005a50 <HAL_RCC_OscConfig+0x1174>
 800512e:	2302      	movs	r3, #2
 8005130:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005134:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005138:	fa93 f2a3 	rbit	r2, r3
 800513c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005140:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005142:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005146:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005148:	fab3 f383 	clz	r3, r3
 800514c:	b25b      	sxtb	r3, r3
 800514e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005152:	b25b      	sxtb	r3, r3
 8005154:	b2db      	uxtb	r3, r3
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b01      	cmp	r3, #1
 800515c:	d102      	bne.n	8005164 <HAL_RCC_OscConfig+0x888>
 800515e:	4b2b      	ldr	r3, [pc, #172]	; (800520c <HAL_RCC_OscConfig+0x930>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	e037      	b.n	80051d4 <HAL_RCC_OscConfig+0x8f8>
 8005164:	2302      	movs	r3, #2
 8005166:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800516e:	fa93 f2a3 	rbit	r2, r3
 8005172:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005176:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005178:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	fab3 f383 	clz	r3, r3
 8005182:	b25b      	sxtb	r3, r3
 8005184:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005188:	b25b      	sxtb	r3, r3
 800518a:	b2db      	uxtb	r3, r3
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d102      	bne.n	800519a <HAL_RCC_OscConfig+0x8be>
 8005194:	4b1d      	ldr	r3, [pc, #116]	; (800520c <HAL_RCC_OscConfig+0x930>)
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	e01c      	b.n	80051d4 <HAL_RCC_OscConfig+0x8f8>
 800519a:	2302      	movs	r3, #2
 800519c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80051a4:	fa93 f2a3 	rbit	r2, r3
 80051a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80051ac:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80051ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	fab3 f383 	clz	r3, r3
 80051b8:	b25b      	sxtb	r3, r3
 80051ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051be:	b25b      	sxtb	r3, r3
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d102      	bne.n	80051d0 <HAL_RCC_OscConfig+0x8f4>
 80051ca:	4b10      	ldr	r3, [pc, #64]	; (800520c <HAL_RCC_OscConfig+0x930>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	e001      	b.n	80051d4 <HAL_RCC_OscConfig+0x8f8>
 80051d0:	4b0e      	ldr	r3, [pc, #56]	; (800520c <HAL_RCC_OscConfig+0x930>)
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	2202      	movs	r2, #2
 80051d6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051da:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80051de:	fa92 f1a2 	rbit	r1, r2
 80051e2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80051e6:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80051e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	fab2 f282 	clz	r2, r2
 80051f2:	b252      	sxtb	r2, r2
 80051f4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80051f8:	b252      	sxtb	r2, r2
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	f002 021f 	and.w	r2, r2, #31
 8005200:	40d3      	lsrs	r3, r2
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d086      	beq.n	8005118 <HAL_RCC_OscConfig+0x83c>
 800520a:	e096      	b.n	800533a <HAL_RCC_OscConfig+0xa5e>
 800520c:	40021000 	.word	0x40021000
 8005210:	42420480 	.word	0x42420480
 8005214:	2301      	movs	r3, #1
 8005216:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800521e:	fa93 f2a3 	rbit	r2, r3
 8005222:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005226:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005228:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800522c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800522e:	fab3 f383 	clz	r3, r3
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	461a      	mov	r2, r3
 8005236:	4bb5      	ldr	r3, [pc, #724]	; (800550c <HAL_RCC_OscConfig+0xc30>)
 8005238:	4413      	add	r3, r2
 800523a:	461a      	mov	r2, r3
 800523c:	2300      	movs	r3, #0
 800523e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005240:	f7fb ff3e 	bl	80010c0 <HAL_GetTick>
 8005244:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005248:	e009      	b.n	800525e <HAL_RCC_OscConfig+0x982>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800524a:	f7fb ff39 	bl	80010c0 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e3f8      	b.n	8005a50 <HAL_RCC_OscConfig+0x1174>
 800525e:	2302      	movs	r3, #2
 8005260:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005264:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8005268:	fa93 f2a3 	rbit	r2, r3
 800526c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005270:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005272:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005276:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005278:	fab3 f383 	clz	r3, r3
 800527c:	b25b      	sxtb	r3, r3
 800527e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005282:	b25b      	sxtb	r3, r3
 8005284:	b2db      	uxtb	r3, r3
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b01      	cmp	r3, #1
 800528c:	d102      	bne.n	8005294 <HAL_RCC_OscConfig+0x9b8>
 800528e:	4ba0      	ldr	r3, [pc, #640]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	e037      	b.n	8005304 <HAL_RCC_OscConfig+0xa28>
 8005294:	2302      	movs	r3, #2
 8005296:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800529e:	fa93 f2a3 	rbit	r2, r3
 80052a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80052a6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80052a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	fab3 f383 	clz	r3, r3
 80052b2:	b25b      	sxtb	r3, r3
 80052b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80052b8:	b25b      	sxtb	r3, r3
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	095b      	lsrs	r3, r3, #5
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d102      	bne.n	80052ca <HAL_RCC_OscConfig+0x9ee>
 80052c4:	4b92      	ldr	r3, [pc, #584]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	e01c      	b.n	8005304 <HAL_RCC_OscConfig+0xa28>
 80052ca:	2302      	movs	r3, #2
 80052cc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80052d4:	fa93 f2a3 	rbit	r2, r3
 80052d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80052dc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80052de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	fab3 f383 	clz	r3, r3
 80052e8:	b25b      	sxtb	r3, r3
 80052ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80052ee:	b25b      	sxtb	r3, r3
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d102      	bne.n	8005300 <HAL_RCC_OscConfig+0xa24>
 80052fa:	4b85      	ldr	r3, [pc, #532]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	e001      	b.n	8005304 <HAL_RCC_OscConfig+0xa28>
 8005300:	4b83      	ldr	r3, [pc, #524]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	2202      	movs	r2, #2
 8005306:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800530e:	fa92 f1a2 	rbit	r1, r2
 8005312:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005316:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005318:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	fab2 f282 	clz	r2, r2
 8005322:	b252      	sxtb	r2, r2
 8005324:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005328:	b252      	sxtb	r2, r2
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	f002 021f 	and.w	r2, r2, #31
 8005330:	40d3      	lsrs	r3, r2
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d187      	bne.n	800524a <HAL_RCC_OscConfig+0x96e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800533a:	1d3b      	adds	r3, r7, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 818f 	beq.w	8005668 <HAL_RCC_OscConfig+0xd8c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800534a:	2300      	movs	r3, #0
 800534c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005350:	4b6f      	ldr	r3, [pc, #444]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d112      	bne.n	8005382 <HAL_RCC_OscConfig+0xaa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800535c:	4a6c      	ldr	r2, [pc, #432]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 800535e:	4b6c      	ldr	r3, [pc, #432]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005366:	61d3      	str	r3, [r2, #28]
 8005368:	4b69      	ldr	r3, [pc, #420]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005370:	f107 030c 	add.w	r3, r7, #12
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	f107 030c 	add.w	r3, r7, #12
 800537a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800537c:	2301      	movs	r3, #1
 800537e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005382:	4b64      	ldr	r3, [pc, #400]	; (8005514 <HAL_RCC_OscConfig+0xc38>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d11a      	bne.n	80053c4 <HAL_RCC_OscConfig+0xae8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800538e:	4a61      	ldr	r2, [pc, #388]	; (8005514 <HAL_RCC_OscConfig+0xc38>)
 8005390:	4b60      	ldr	r3, [pc, #384]	; (8005514 <HAL_RCC_OscConfig+0xc38>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005398:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800539a:	f7fb fe91 	bl	80010c0 <HAL_GetTick>
 800539e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a2:	e009      	b.n	80053b8 <HAL_RCC_OscConfig+0xadc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a4:	f7fb fe8c 	bl	80010c0 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b64      	cmp	r3, #100	; 0x64
 80053b2:	d901      	bls.n	80053b8 <HAL_RCC_OscConfig+0xadc>
        {
          return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e34b      	b.n	8005a50 <HAL_RCC_OscConfig+0x1174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b8:	4b56      	ldr	r3, [pc, #344]	; (8005514 <HAL_RCC_OscConfig+0xc38>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0ef      	beq.n	80053a4 <HAL_RCC_OscConfig+0xac8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053c4:	1d3b      	adds	r3, r7, #4
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d106      	bne.n	80053dc <HAL_RCC_OscConfig+0xb00>
 80053ce:	4a50      	ldr	r2, [pc, #320]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 80053d0:	4b4f      	ldr	r3, [pc, #316]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	6213      	str	r3, [r2, #32]
 80053da:	e02f      	b.n	800543c <HAL_RCC_OscConfig+0xb60>
 80053dc:	1d3b      	adds	r3, r7, #4
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10c      	bne.n	8005400 <HAL_RCC_OscConfig+0xb24>
 80053e6:	4a4a      	ldr	r2, [pc, #296]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 80053e8:	4b49      	ldr	r3, [pc, #292]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	f023 0301 	bic.w	r3, r3, #1
 80053f0:	6213      	str	r3, [r2, #32]
 80053f2:	4a47      	ldr	r2, [pc, #284]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 80053f4:	4b46      	ldr	r3, [pc, #280]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	f023 0304 	bic.w	r3, r3, #4
 80053fc:	6213      	str	r3, [r2, #32]
 80053fe:	e01d      	b.n	800543c <HAL_RCC_OscConfig+0xb60>
 8005400:	1d3b      	adds	r3, r7, #4
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	2b05      	cmp	r3, #5
 8005408:	d10c      	bne.n	8005424 <HAL_RCC_OscConfig+0xb48>
 800540a:	4a41      	ldr	r2, [pc, #260]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 800540c:	4b40      	ldr	r3, [pc, #256]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f043 0304 	orr.w	r3, r3, #4
 8005414:	6213      	str	r3, [r2, #32]
 8005416:	4a3e      	ldr	r2, [pc, #248]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 8005418:	4b3d      	ldr	r3, [pc, #244]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	6213      	str	r3, [r2, #32]
 8005422:	e00b      	b.n	800543c <HAL_RCC_OscConfig+0xb60>
 8005424:	4a3a      	ldr	r2, [pc, #232]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 8005426:	4b3a      	ldr	r3, [pc, #232]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	f023 0301 	bic.w	r3, r3, #1
 800542e:	6213      	str	r3, [r2, #32]
 8005430:	4a37      	ldr	r2, [pc, #220]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 8005432:	4b37      	ldr	r3, [pc, #220]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f023 0304 	bic.w	r3, r3, #4
 800543a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800543c:	1d3b      	adds	r3, r7, #4
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 8087 	beq.w	8005556 <HAL_RCC_OscConfig+0xc7a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005448:	f7fb fe3a 	bl	80010c0 <HAL_GetTick>
 800544c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005450:	e00b      	b.n	800546a <HAL_RCC_OscConfig+0xb8e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005452:	f7fb fe35 	bl	80010c0 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005462:	4293      	cmp	r3, r2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0xb8e>
        {
          return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e2f2      	b.n	8005a50 <HAL_RCC_OscConfig+0x1174>
 800546a:	2302      	movs	r3, #2
 800546c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005470:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005474:	fa93 f2a3 	rbit	r2, r3
 8005478:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800547c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800547e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005482:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005484:	fab3 f383 	clz	r3, r3
 8005488:	b25b      	sxtb	r3, r3
 800548a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800548e:	b25b      	sxtb	r3, r3
 8005490:	b2db      	uxtb	r3, r3
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b01      	cmp	r3, #1
 8005498:	d102      	bne.n	80054a0 <HAL_RCC_OscConfig+0xbc4>
 800549a:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	e03d      	b.n	800551c <HAL_RCC_OscConfig+0xc40>
 80054a0:	2302      	movs	r3, #2
 80054a2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80054aa:	fa93 f2a3 	rbit	r2, r3
 80054ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80054b2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80054b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	fab3 f383 	clz	r3, r3
 80054be:	b25b      	sxtb	r3, r3
 80054c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054c4:	b25b      	sxtb	r3, r3
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d102      	bne.n	80054d6 <HAL_RCC_OscConfig+0xbfa>
 80054d0:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	e022      	b.n	800551c <HAL_RCC_OscConfig+0xc40>
 80054d6:	2302      	movs	r3, #2
 80054d8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054dc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80054e0:	fa93 f2a3 	rbit	r2, r3
 80054e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80054e8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80054ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	fab3 f383 	clz	r3, r3
 80054f4:	b25b      	sxtb	r3, r3
 80054f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054fa:	b25b      	sxtb	r3, r3
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b04      	cmp	r3, #4
 8005504:	d108      	bne.n	8005518 <HAL_RCC_OscConfig+0xc3c>
 8005506:	4b02      	ldr	r3, [pc, #8]	; (8005510 <HAL_RCC_OscConfig+0xc34>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	e007      	b.n	800551c <HAL_RCC_OscConfig+0xc40>
 800550c:	42420480 	.word	0x42420480
 8005510:	40021000 	.word	0x40021000
 8005514:	40007000 	.word	0x40007000
 8005518:	4bbf      	ldr	r3, [pc, #764]	; (8005818 <HAL_RCC_OscConfig+0xf3c>)
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	2202      	movs	r2, #2
 800551e:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005522:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8005526:	fa92 f1a2 	rbit	r1, r2
 800552a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800552e:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005530:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005534:	6812      	ldr	r2, [r2, #0]
 8005536:	fab2 f282 	clz	r2, r2
 800553a:	b252      	sxtb	r2, r2
 800553c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005540:	b252      	sxtb	r2, r2
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	f002 021f 	and.w	r2, r2, #31
 8005548:	40d3      	lsrs	r3, r2
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	f43f af7f 	beq.w	8005452 <HAL_RCC_OscConfig+0xb76>
 8005554:	e07e      	b.n	8005654 <HAL_RCC_OscConfig+0xd78>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005556:	f7fb fdb3 	bl	80010c0 <HAL_GetTick>
 800555a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800555e:	e00b      	b.n	8005578 <HAL_RCC_OscConfig+0xc9c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005560:	f7fb fdae 	bl	80010c0 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005570:	4293      	cmp	r3, r2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0xc9c>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e26b      	b.n	8005a50 <HAL_RCC_OscConfig+0x1174>
 8005578:	2302      	movs	r3, #2
 800557a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005582:	fa93 f2a3 	rbit	r2, r3
 8005586:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800558a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800558c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005590:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005592:	fab3 f383 	clz	r3, r3
 8005596:	b25b      	sxtb	r3, r3
 8005598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800559c:	b25b      	sxtb	r3, r3
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d102      	bne.n	80055ae <HAL_RCC_OscConfig+0xcd2>
 80055a8:	4b9b      	ldr	r3, [pc, #620]	; (8005818 <HAL_RCC_OscConfig+0xf3c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	e037      	b.n	800561e <HAL_RCC_OscConfig+0xd42>
 80055ae:	2302      	movs	r3, #2
 80055b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055b8:	fa93 f2a3 	rbit	r2, r3
 80055bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055c0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80055c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	fab3 f383 	clz	r3, r3
 80055cc:	b25b      	sxtb	r3, r3
 80055ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d2:	b25b      	sxtb	r3, r3
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	095b      	lsrs	r3, r3, #5
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d102      	bne.n	80055e4 <HAL_RCC_OscConfig+0xd08>
 80055de:	4b8e      	ldr	r3, [pc, #568]	; (8005818 <HAL_RCC_OscConfig+0xf3c>)
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	e01c      	b.n	800561e <HAL_RCC_OscConfig+0xd42>
 80055e4:	2302      	movs	r3, #2
 80055e6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ea:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80055ee:	fa93 f2a3 	rbit	r2, r3
 80055f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055f6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80055f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	fab3 f383 	clz	r3, r3
 8005602:	b25b      	sxtb	r3, r3
 8005604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005608:	b25b      	sxtb	r3, r3
 800560a:	b2db      	uxtb	r3, r3
 800560c:	095b      	lsrs	r3, r3, #5
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b04      	cmp	r3, #4
 8005612:	d102      	bne.n	800561a <HAL_RCC_OscConfig+0xd3e>
 8005614:	4b80      	ldr	r3, [pc, #512]	; (8005818 <HAL_RCC_OscConfig+0xf3c>)
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	e001      	b.n	800561e <HAL_RCC_OscConfig+0xd42>
 800561a:	4b7f      	ldr	r3, [pc, #508]	; (8005818 <HAL_RCC_OscConfig+0xf3c>)
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2202      	movs	r2, #2
 8005620:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005628:	fa92 f1a2 	rbit	r1, r2
 800562c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005630:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005632:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005636:	6812      	ldr	r2, [r2, #0]
 8005638:	fab2 f282 	clz	r2, r2
 800563c:	b252      	sxtb	r2, r2
 800563e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005642:	b252      	sxtb	r2, r2
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	f002 021f 	and.w	r2, r2, #31
 800564a:	40d3      	lsrs	r3, r2
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d185      	bne.n	8005560 <HAL_RCC_OscConfig+0xc84>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005654:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005658:	2b01      	cmp	r3, #1
 800565a:	d105      	bne.n	8005668 <HAL_RCC_OscConfig+0xd8c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800565c:	4a6e      	ldr	r2, [pc, #440]	; (8005818 <HAL_RCC_OscConfig+0xf3c>)
 800565e:	4b6e      	ldr	r3, [pc, #440]	; (8005818 <HAL_RCC_OscConfig+0xf3c>)
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005666:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005668:	1d3b      	adds	r3, r7, #4
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 81ed 	beq.w	8005a4e <HAL_RCC_OscConfig+0x1172>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005674:	4b68      	ldr	r3, [pc, #416]	; (8005818 <HAL_RCC_OscConfig+0xf3c>)
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f003 030c 	and.w	r3, r3, #12
 800567c:	2b08      	cmp	r3, #8
 800567e:	f000 81e4 	beq.w	8005a4a <HAL_RCC_OscConfig+0x116e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005682:	1d3b      	adds	r3, r7, #4
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	2b02      	cmp	r3, #2
 800568a:	f040 8144 	bne.w	8005916 <HAL_RCC_OscConfig+0x103a>
 800568e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005692:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005696:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800569a:	fa93 f2a3 	rbit	r2, r3
 800569e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80056a2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80056a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80056a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056aa:	fab3 f383 	clz	r3, r3
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80056b4:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80056b8:	461a      	mov	r2, r3
 80056ba:	2300      	movs	r3, #0
 80056bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056be:	f7fb fcff 	bl	80010c0 <HAL_GetTick>
 80056c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056c6:	e009      	b.n	80056dc <HAL_RCC_OscConfig+0xe00>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c8:	f7fb fcfa 	bl	80010c0 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0xe00>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e1b9      	b.n	8005a50 <HAL_RCC_OscConfig+0x1174>
 80056dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056e0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80056e8:	fa93 f2a3 	rbit	r2, r3
 80056ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80056f0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80056f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80056f6:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056f8:	fab3 f383 	clz	r3, r3
 80056fc:	b25b      	sxtb	r3, r3
 80056fe:	f043 0320 	orr.w	r3, r3, #32
 8005702:	b25b      	sxtb	r3, r3
 8005704:	b2db      	uxtb	r3, r3
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	d102      	bne.n	8005714 <HAL_RCC_OscConfig+0xe38>
 800570e:	4b42      	ldr	r3, [pc, #264]	; (8005818 <HAL_RCC_OscConfig+0xf3c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	e039      	b.n	8005788 <HAL_RCC_OscConfig+0xeac>
 8005714:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005718:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800571c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005720:	fa93 f2a3 	rbit	r2, r3
 8005724:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005728:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800572a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	fab3 f383 	clz	r3, r3
 8005734:	b25b      	sxtb	r3, r3
 8005736:	f043 0320 	orr.w	r3, r3, #32
 800573a:	b25b      	sxtb	r3, r3
 800573c:	b2db      	uxtb	r3, r3
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d102      	bne.n	800574c <HAL_RCC_OscConfig+0xe70>
 8005746:	4b34      	ldr	r3, [pc, #208]	; (8005818 <HAL_RCC_OscConfig+0xf3c>)
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	e01d      	b.n	8005788 <HAL_RCC_OscConfig+0xeac>
 800574c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005750:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005754:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005758:	fa93 f2a3 	rbit	r2, r3
 800575c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005760:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005762:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	fab3 f383 	clz	r3, r3
 800576c:	b25b      	sxtb	r3, r3
 800576e:	f043 0320 	orr.w	r3, r3, #32
 8005772:	b25b      	sxtb	r3, r3
 8005774:	b2db      	uxtb	r3, r3
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b04      	cmp	r3, #4
 800577c:	d102      	bne.n	8005784 <HAL_RCC_OscConfig+0xea8>
 800577e:	4b26      	ldr	r3, [pc, #152]	; (8005818 <HAL_RCC_OscConfig+0xf3c>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	e001      	b.n	8005788 <HAL_RCC_OscConfig+0xeac>
 8005784:	4b24      	ldr	r3, [pc, #144]	; (8005818 <HAL_RCC_OscConfig+0xf3c>)
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800578c:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005790:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005794:	fa92 f1a2 	rbit	r1, r2
 8005798:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800579c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800579e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	fab2 f282 	clz	r2, r2
 80057a8:	b252      	sxtb	r2, r2
 80057aa:	f042 0220 	orr.w	r2, r2, #32
 80057ae:	b252      	sxtb	r2, r2
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	f002 021f 	and.w	r2, r2, #31
 80057b6:	40d3      	lsrs	r3, r2
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d183      	bne.n	80056c8 <HAL_RCC_OscConfig+0xdec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057c0:	4815      	ldr	r0, [pc, #84]	; (8005818 <HAL_RCC_OscConfig+0xf3c>)
 80057c2:	4b15      	ldr	r3, [pc, #84]	; (8005818 <HAL_RCC_OscConfig+0xf3c>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80057ca:	1d3b      	adds	r3, r7, #4
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80057d0:	1d3b      	adds	r3, r7, #4
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	430b      	orrs	r3, r1
 80057d8:	4313      	orrs	r3, r2
 80057da:	6043      	str	r3, [r0, #4]
 80057dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e8:	fa93 f2a3 	rbit	r2, r3
 80057ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80057f0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80057f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80057f6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057f8:	fab3 f383 	clz	r3, r3
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8005802:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8005806:	461a      	mov	r2, r3
 8005808:	2301      	movs	r3, #1
 800580a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580c:	f7fb fc58 	bl	80010c0 <HAL_GetTick>
 8005810:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005814:	e00c      	b.n	8005830 <HAL_RCC_OscConfig+0xf54>
 8005816:	bf00      	nop
 8005818:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800581c:	f7fb fc50 	bl	80010c0 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e10f      	b.n	8005a50 <HAL_RCC_OscConfig+0x1174>
 8005830:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005834:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005838:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800583c:	fa93 f2a3 	rbit	r2, r3
 8005840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005844:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800584a:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800584c:	fab3 f383 	clz	r3, r3
 8005850:	b25b      	sxtb	r3, r3
 8005852:	f043 0320 	orr.w	r3, r3, #32
 8005856:	b25b      	sxtb	r3, r3
 8005858:	b2db      	uxtb	r3, r3
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b01      	cmp	r3, #1
 8005860:	d102      	bne.n	8005868 <HAL_RCC_OscConfig+0xf8c>
 8005862:	4b7e      	ldr	r3, [pc, #504]	; (8005a5c <HAL_RCC_OscConfig+0x1180>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	e039      	b.n	80058dc <HAL_RCC_OscConfig+0x1000>
 8005868:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800586c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005870:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005874:	fa93 f2a3 	rbit	r2, r3
 8005878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800587c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800587e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	fab3 f383 	clz	r3, r3
 8005888:	b25b      	sxtb	r3, r3
 800588a:	f043 0320 	orr.w	r3, r3, #32
 800588e:	b25b      	sxtb	r3, r3
 8005890:	b2db      	uxtb	r3, r3
 8005892:	095b      	lsrs	r3, r3, #5
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d102      	bne.n	80058a0 <HAL_RCC_OscConfig+0xfc4>
 800589a:	4b70      	ldr	r3, [pc, #448]	; (8005a5c <HAL_RCC_OscConfig+0x1180>)
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	e01d      	b.n	80058dc <HAL_RCC_OscConfig+0x1000>
 80058a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058ac:	fa93 f2a3 	rbit	r2, r3
 80058b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058b4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80058b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	fab3 f383 	clz	r3, r3
 80058c0:	b25b      	sxtb	r3, r3
 80058c2:	f043 0320 	orr.w	r3, r3, #32
 80058c6:	b25b      	sxtb	r3, r3
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d102      	bne.n	80058d8 <HAL_RCC_OscConfig+0xffc>
 80058d2:	4b62      	ldr	r3, [pc, #392]	; (8005a5c <HAL_RCC_OscConfig+0x1180>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	e001      	b.n	80058dc <HAL_RCC_OscConfig+0x1000>
 80058d8:	4b60      	ldr	r3, [pc, #384]	; (8005a5c <HAL_RCC_OscConfig+0x1180>)
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80058e0:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80058e8:	fa92 f1a2 	rbit	r1, r2
 80058ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80058f0:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80058f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	fab2 f282 	clz	r2, r2
 80058fc:	b252      	sxtb	r2, r2
 80058fe:	f042 0220 	orr.w	r2, r2, #32
 8005902:	b252      	sxtb	r2, r2
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	f002 021f 	and.w	r2, r2, #31
 800590a:	40d3      	lsrs	r3, r2
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d083      	beq.n	800581c <HAL_RCC_OscConfig+0xf40>
 8005914:	e09b      	b.n	8005a4e <HAL_RCC_OscConfig+0x1172>
 8005916:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800591a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005922:	fa93 f2a3 	rbit	r2, r3
 8005926:	f107 0320 	add.w	r3, r7, #32
 800592a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800592c:	f107 0320 	add.w	r3, r7, #32
 8005930:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005932:	fab3 f383 	clz	r3, r3
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800593c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8005940:	461a      	mov	r2, r3
 8005942:	2300      	movs	r3, #0
 8005944:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005946:	f7fb fbbb 	bl	80010c0 <HAL_GetTick>
 800594a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800594e:	e009      	b.n	8005964 <HAL_RCC_OscConfig+0x1088>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005950:	f7fb fbb6 	bl	80010c0 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x1088>
          {
            return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e075      	b.n	8005a50 <HAL_RCC_OscConfig+0x1174>
 8005964:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005968:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800596c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005970:	fa93 f2a3 	rbit	r2, r3
 8005974:	f107 031c 	add.w	r3, r7, #28
 8005978:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800597a:	f107 031c 	add.w	r3, r7, #28
 800597e:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005980:	fab3 f383 	clz	r3, r3
 8005984:	b25b      	sxtb	r3, r3
 8005986:	f043 0320 	orr.w	r3, r3, #32
 800598a:	b25b      	sxtb	r3, r3
 800598c:	b2db      	uxtb	r3, r3
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b01      	cmp	r3, #1
 8005994:	d102      	bne.n	800599c <HAL_RCC_OscConfig+0x10c0>
 8005996:	4b31      	ldr	r3, [pc, #196]	; (8005a5c <HAL_RCC_OscConfig+0x1180>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	e039      	b.n	8005a10 <HAL_RCC_OscConfig+0x1134>
 800599c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80059a8:	fa93 f2a3 	rbit	r2, r3
 80059ac:	f107 0318 	add.w	r3, r7, #24
 80059b0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80059b2:	f107 0318 	add.w	r3, r7, #24
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	fab3 f383 	clz	r3, r3
 80059bc:	b25b      	sxtb	r3, r3
 80059be:	f043 0320 	orr.w	r3, r3, #32
 80059c2:	b25b      	sxtb	r3, r3
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d102      	bne.n	80059d4 <HAL_RCC_OscConfig+0x10f8>
 80059ce:	4b23      	ldr	r3, [pc, #140]	; (8005a5c <HAL_RCC_OscConfig+0x1180>)
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	e01d      	b.n	8005a10 <HAL_RCC_OscConfig+0x1134>
 80059d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e0:	fa93 f2a3 	rbit	r2, r3
 80059e4:	f107 0314 	add.w	r3, r7, #20
 80059e8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80059ea:	f107 0314 	add.w	r3, r7, #20
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	fab3 f383 	clz	r3, r3
 80059f4:	b25b      	sxtb	r3, r3
 80059f6:	f043 0320 	orr.w	r3, r3, #32
 80059fa:	b25b      	sxtb	r3, r3
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d102      	bne.n	8005a0c <HAL_RCC_OscConfig+0x1130>
 8005a06:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <HAL_RCC_OscConfig+0x1180>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	e001      	b.n	8005a10 <HAL_RCC_OscConfig+0x1134>
 8005a0c:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <HAL_RCC_OscConfig+0x1180>)
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a14:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a18:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005a1c:	fa92 f1a2 	rbit	r1, r2
 8005a20:	f107 0210 	add.w	r2, r7, #16
 8005a24:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005a26:	f107 0210 	add.w	r2, r7, #16
 8005a2a:	6812      	ldr	r2, [r2, #0]
 8005a2c:	fab2 f282 	clz	r2, r2
 8005a30:	b252      	sxtb	r2, r2
 8005a32:	f042 0220 	orr.w	r2, r2, #32
 8005a36:	b252      	sxtb	r2, r2
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	f002 021f 	and.w	r2, r2, #31
 8005a3e:	40d3      	lsrs	r3, r2
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d183      	bne.n	8005950 <HAL_RCC_OscConfig+0x1074>
 8005a48:	e001      	b.n	8005a4e <HAL_RCC_OscConfig+0x1172>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <HAL_RCC_OscConfig+0x1174>
    }
  }
  
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd90      	pop	{r4, r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40021000 	.word	0x40021000

08005a60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b09e      	sub	sp, #120	; 0x78
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005a6e:	4ba3      	ldr	r3, [pc, #652]	; (8005cfc <HAL_RCC_ClockConfig+0x29c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0207 	and.w	r2, r3, #7
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d210      	bcs.n	8005a9e <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7c:	499f      	ldr	r1, [pc, #636]	; (8005cfc <HAL_RCC_ClockConfig+0x29c>)
 8005a7e:	4b9f      	ldr	r3, [pc, #636]	; (8005cfc <HAL_RCC_ClockConfig+0x29c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f023 0207 	bic.w	r2, r3, #7
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a8c:	4b9b      	ldr	r3, [pc, #620]	; (8005cfc <HAL_RCC_ClockConfig+0x29c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0207 	and.w	r2, r3, #7
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d001      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e1d0      	b.n	8005e40 <HAL_RCC_ClockConfig+0x3e0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d008      	beq.n	8005abc <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aaa:	4995      	ldr	r1, [pc, #596]	; (8005d00 <HAL_RCC_ClockConfig+0x2a0>)
 8005aac:	4b94      	ldr	r3, [pc, #592]	; (8005d00 <HAL_RCC_ClockConfig+0x2a0>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 8168 	beq.w	8005d9a <HAL_RCC_ClockConfig+0x33a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d15c      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x12c>
 8005ad2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ad6:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ada:	fa93 f3a3 	rbit	r3, r3
 8005ade:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae2:	fab3 f383 	clz	r3, r3
 8005ae6:	b25b      	sxtb	r3, r3
 8005ae8:	f043 0320 	orr.w	r3, r3, #32
 8005aec:	b25b      	sxtb	r3, r3
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d102      	bne.n	8005afe <HAL_RCC_ClockConfig+0x9e>
 8005af8:	4b81      	ldr	r3, [pc, #516]	; (8005d00 <HAL_RCC_ClockConfig+0x2a0>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	e02d      	b.n	8005b5a <HAL_RCC_ClockConfig+0xfa>
 8005afe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b02:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b06:	fa93 f3a3 	rbit	r3, r3
 8005b0a:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	fab3 f383 	clz	r3, r3
 8005b12:	b25b      	sxtb	r3, r3
 8005b14:	f043 0320 	orr.w	r3, r3, #32
 8005b18:	b25b      	sxtb	r3, r3
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	095b      	lsrs	r3, r3, #5
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d102      	bne.n	8005b2a <HAL_RCC_ClockConfig+0xca>
 8005b24:	4b76      	ldr	r3, [pc, #472]	; (8005d00 <HAL_RCC_ClockConfig+0x2a0>)
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	e017      	b.n	8005b5a <HAL_RCC_ClockConfig+0xfa>
 8005b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b32:	fa93 f3a3 	rbit	r3, r3
 8005b36:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3a:	fab3 f383 	clz	r3, r3
 8005b3e:	b25b      	sxtb	r3, r3
 8005b40:	f043 0320 	orr.w	r3, r3, #32
 8005b44:	b25b      	sxtb	r3, r3
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	095b      	lsrs	r3, r3, #5
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d102      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xf6>
 8005b50:	4b6b      	ldr	r3, [pc, #428]	; (8005d00 <HAL_RCC_ClockConfig+0x2a0>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	e001      	b.n	8005b5a <HAL_RCC_ClockConfig+0xfa>
 8005b56:	4b6a      	ldr	r3, [pc, #424]	; (8005d00 <HAL_RCC_ClockConfig+0x2a0>)
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b5e:	66ba      	str	r2, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b62:	fa92 f2a2 	rbit	r2, r2
 8005b66:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b6a:	fab2 f282 	clz	r2, r2
 8005b6e:	b252      	sxtb	r2, r2
 8005b70:	f042 0220 	orr.w	r2, r2, #32
 8005b74:	b252      	sxtb	r2, r2
 8005b76:	b2d2      	uxtb	r2, r2
 8005b78:	f002 021f 	and.w	r2, r2, #31
 8005b7c:	40d3      	lsrs	r3, r2
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f040 80be 	bne.w	8005d04 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e159      	b.n	8005e40 <HAL_RCC_ClockConfig+0x3e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d15b      	bne.n	8005c4c <HAL_RCC_ClockConfig+0x1ec>
 8005b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b98:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b9c:	fa93 f3a3 	rbit	r3, r3
 8005ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba4:	fab3 f383 	clz	r3, r3
 8005ba8:	b25b      	sxtb	r3, r3
 8005baa:	f043 0320 	orr.w	r3, r3, #32
 8005bae:	b25b      	sxtb	r3, r3
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d102      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x160>
 8005bba:	4b51      	ldr	r3, [pc, #324]	; (8005d00 <HAL_RCC_ClockConfig+0x2a0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	e02d      	b.n	8005c1c <HAL_RCC_ClockConfig+0x1bc>
 8005bc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bc4:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bc8:	fa93 f3a3 	rbit	r3, r3
 8005bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	fab3 f383 	clz	r3, r3
 8005bd4:	b25b      	sxtb	r3, r3
 8005bd6:	f043 0320 	orr.w	r3, r3, #32
 8005bda:	b25b      	sxtb	r3, r3
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d102      	bne.n	8005bec <HAL_RCC_ClockConfig+0x18c>
 8005be6:	4b46      	ldr	r3, [pc, #280]	; (8005d00 <HAL_RCC_ClockConfig+0x2a0>)
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	e017      	b.n	8005c1c <HAL_RCC_ClockConfig+0x1bc>
 8005bec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf4:	fa93 f3a3 	rbit	r3, r3
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	fab3 f383 	clz	r3, r3
 8005c00:	b25b      	sxtb	r3, r3
 8005c02:	f043 0320 	orr.w	r3, r3, #32
 8005c06:	b25b      	sxtb	r3, r3
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d102      	bne.n	8005c18 <HAL_RCC_ClockConfig+0x1b8>
 8005c12:	4b3b      	ldr	r3, [pc, #236]	; (8005d00 <HAL_RCC_ClockConfig+0x2a0>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	e001      	b.n	8005c1c <HAL_RCC_ClockConfig+0x1bc>
 8005c18:	4b39      	ldr	r3, [pc, #228]	; (8005d00 <HAL_RCC_ClockConfig+0x2a0>)
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c20:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c24:	fa92 f2a2 	rbit	r2, r2
 8005c28:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005c2a:	6a3a      	ldr	r2, [r7, #32]
 8005c2c:	fab2 f282 	clz	r2, r2
 8005c30:	b252      	sxtb	r2, r2
 8005c32:	f042 0220 	orr.w	r2, r2, #32
 8005c36:	b252      	sxtb	r2, r2
 8005c38:	b2d2      	uxtb	r2, r2
 8005c3a:	f002 021f 	and.w	r2, r2, #31
 8005c3e:	40d3      	lsrs	r3, r2
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d15d      	bne.n	8005d04 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e0f9      	b.n	8005e40 <HAL_RCC_ClockConfig+0x3e0>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c52:	fa93 f3a3 	rbit	r3, r3
 8005c56:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005c58:	69fb      	ldr	r3, [r7, #28]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c5a:	fab3 f383 	clz	r3, r3
 8005c5e:	b25b      	sxtb	r3, r3
 8005c60:	f043 0320 	orr.w	r3, r3, #32
 8005c64:	b25b      	sxtb	r3, r3
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d102      	bne.n	8005c76 <HAL_RCC_ClockConfig+0x216>
 8005c70:	4b23      	ldr	r3, [pc, #140]	; (8005d00 <HAL_RCC_ClockConfig+0x2a0>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	e02b      	b.n	8005cce <HAL_RCC_ClockConfig+0x26e>
 8005c76:	2302      	movs	r3, #2
 8005c78:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c7c:	fa93 f3a3 	rbit	r3, r3
 8005c80:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	fab3 f383 	clz	r3, r3
 8005c88:	b25b      	sxtb	r3, r3
 8005c8a:	f043 0320 	orr.w	r3, r3, #32
 8005c8e:	b25b      	sxtb	r3, r3
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d102      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x240>
 8005c9a:	4b19      	ldr	r3, [pc, #100]	; (8005d00 <HAL_RCC_ClockConfig+0x2a0>)
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	e016      	b.n	8005cce <HAL_RCC_ClockConfig+0x26e>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca6:	fa93 f3a3 	rbit	r3, r3
 8005caa:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	fab3 f383 	clz	r3, r3
 8005cb2:	b25b      	sxtb	r3, r3
 8005cb4:	f043 0320 	orr.w	r3, r3, #32
 8005cb8:	b25b      	sxtb	r3, r3
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	095b      	lsrs	r3, r3, #5
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d102      	bne.n	8005cca <HAL_RCC_ClockConfig+0x26a>
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <HAL_RCC_ClockConfig+0x2a0>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	e001      	b.n	8005cce <HAL_RCC_ClockConfig+0x26e>
 8005cca:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <HAL_RCC_ClockConfig+0x2a0>)
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2202      	movs	r2, #2
 8005cd0:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cd4:	fa92 f2a2 	rbit	r2, r2
 8005cd8:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	fab2 f282 	clz	r2, r2
 8005ce0:	b252      	sxtb	r2, r2
 8005ce2:	f042 0220 	orr.w	r2, r2, #32
 8005ce6:	b252      	sxtb	r2, r2
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	f002 021f 	and.w	r2, r2, #31
 8005cee:	40d3      	lsrs	r3, r2
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d105      	bne.n	8005d04 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e0a1      	b.n	8005e40 <HAL_RCC_ClockConfig+0x3e0>
 8005cfc:	40022000 	.word	0x40022000
 8005d00:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d04:	4950      	ldr	r1, [pc, #320]	; (8005e48 <HAL_RCC_ClockConfig+0x3e8>)
 8005d06:	4b50      	ldr	r3, [pc, #320]	; (8005e48 <HAL_RCC_ClockConfig+0x3e8>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f023 0203 	bic.w	r2, r3, #3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d16:	f7fb f9d3 	bl	80010c0 <HAL_GetTick>
 8005d1a:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d112      	bne.n	8005d4a <HAL_RCC_ClockConfig+0x2ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d24:	e00a      	b.n	8005d3c <HAL_RCC_ClockConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d26:	f7fb f9cb 	bl	80010c0 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_ClockConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e081      	b.n	8005e40 <HAL_RCC_ClockConfig+0x3e0>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d3c:	4b42      	ldr	r3, [pc, #264]	; (8005e48 <HAL_RCC_ClockConfig+0x3e8>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f003 030c 	and.w	r3, r3, #12
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d1ee      	bne.n	8005d26 <HAL_RCC_ClockConfig+0x2c6>
 8005d48:	e027      	b.n	8005d9a <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d11d      	bne.n	8005d8e <HAL_RCC_ClockConfig+0x32e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d52:	e00a      	b.n	8005d6a <HAL_RCC_ClockConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d54:	f7fb f9b4 	bl	80010c0 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_ClockConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e06a      	b.n	8005e40 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d6a:	4b37      	ldr	r3, [pc, #220]	; (8005e48 <HAL_RCC_ClockConfig+0x3e8>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f003 030c 	and.w	r3, r3, #12
 8005d72:	2b08      	cmp	r3, #8
 8005d74:	d1ee      	bne.n	8005d54 <HAL_RCC_ClockConfig+0x2f4>
 8005d76:	e010      	b.n	8005d9a <HAL_RCC_ClockConfig+0x33a>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d78:	f7fb f9a2 	bl	80010c0 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_ClockConfig+0x32e>
        {
          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e058      	b.n	8005e40 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d8e:	4b2e      	ldr	r3, [pc, #184]	; (8005e48 <HAL_RCC_ClockConfig+0x3e8>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 030c 	and.w	r3, r3, #12
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1ee      	bne.n	8005d78 <HAL_RCC_ClockConfig+0x318>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8005d9a:	4b2c      	ldr	r3, [pc, #176]	; (8005e4c <HAL_RCC_ClockConfig+0x3ec>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0207 	and.w	r2, r3, #7
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d910      	bls.n	8005dca <HAL_RCC_ClockConfig+0x36a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da8:	4928      	ldr	r1, [pc, #160]	; (8005e4c <HAL_RCC_ClockConfig+0x3ec>)
 8005daa:	4b28      	ldr	r3, [pc, #160]	; (8005e4c <HAL_RCC_ClockConfig+0x3ec>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f023 0207 	bic.w	r2, r3, #7
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005db8:	4b24      	ldr	r3, [pc, #144]	; (8005e4c <HAL_RCC_ClockConfig+0x3ec>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0207 	and.w	r2, r3, #7
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d001      	beq.n	8005dca <HAL_RCC_ClockConfig+0x36a>
    {
      return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e03a      	b.n	8005e40 <HAL_RCC_ClockConfig+0x3e0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0304 	and.w	r3, r3, #4
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d008      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x388>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dd6:	491c      	ldr	r1, [pc, #112]	; (8005e48 <HAL_RCC_ClockConfig+0x3e8>)
 8005dd8:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <HAL_RCC_ClockConfig+0x3e8>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d009      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x3a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005df4:	4914      	ldr	r1, [pc, #80]	; (8005e48 <HAL_RCC_ClockConfig+0x3e8>)
 8005df6:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <HAL_RCC_ClockConfig+0x3e8>)
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	4313      	orrs	r3, r2
 8005e06:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005e08:	f000 f826 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8005e0c:	4601      	mov	r1, r0
 8005e0e:	4b0e      	ldr	r3, [pc, #56]	; (8005e48 <HAL_RCC_ClockConfig+0x3e8>)
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e16:	23f0      	movs	r3, #240	; 0xf0
 8005e18:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1c:	fa93 f3a3 	rbit	r3, r3
 8005e20:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	fab3 f383 	clz	r3, r3
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2c:	4a08      	ldr	r2, [pc, #32]	; (8005e50 <HAL_RCC_ClockConfig+0x3f0>)
 8005e2e:	5cd3      	ldrb	r3, [r2, r3]
 8005e30:	fa21 f303 	lsr.w	r3, r1, r3
 8005e34:	4a07      	ldr	r2, [pc, #28]	; (8005e54 <HAL_RCC_ClockConfig+0x3f4>)
 8005e36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005e38:	2000      	movs	r0, #0
 8005e3a:	f7fb f917 	bl	800106c <HAL_InitTick>
  
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3778      	adds	r7, #120	; 0x78
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40021000 	.word	0x40021000
 8005e4c:	40022000 	.word	0x40022000
 8005e50:	0800cc48 	.word	0x0800cc48
 8005e54:	20000000 	.word	0x20000000

08005e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b08b      	sub	sp, #44	; 0x2c
 8005e5c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	2300      	movs	r3, #0
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	2300      	movs	r3, #0
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005e72:	4b29      	ldr	r3, [pc, #164]	; (8005f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f003 030c 	and.w	r3, r3, #12
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d002      	beq.n	8005e88 <HAL_RCC_GetSysClockFreq+0x30>
 8005e82:	2b08      	cmp	r3, #8
 8005e84:	d003      	beq.n	8005e8e <HAL_RCC_GetSysClockFreq+0x36>
 8005e86:	e03c      	b.n	8005f02 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e88:	4b24      	ldr	r3, [pc, #144]	; (8005f1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005e8a:	623b      	str	r3, [r7, #32]
      break;
 8005e8c:	e03c      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005e94:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8005e98:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	fa93 f3a3 	rbit	r3, r3
 8005ea0:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	fab3 f383 	clz	r3, r3
 8005ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8005eac:	4a1c      	ldr	r2, [pc, #112]	; (8005f20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005eae:	5cd3      	ldrb	r3, [r2, r3]
 8005eb0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005eb2:	4b19      	ldr	r3, [pc, #100]	; (8005f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb6:	f003 020f 	and.w	r2, r3, #15
 8005eba:	230f      	movs	r3, #15
 8005ebc:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	fa93 f3a3 	rbit	r3, r3
 8005ec4:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	fab3 f383 	clz	r3, r3
 8005ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed0:	4a14      	ldr	r2, [pc, #80]	; (8005f24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005ed2:	5cd3      	ldrb	r3, [r2, r3]
 8005ed4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d008      	beq.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8005ee0:	4a0e      	ldr	r2, [pc, #56]	; (8005f1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	fb02 f303 	mul.w	r3, r2, r3
 8005eee:	627b      	str	r3, [r7, #36]	; 0x24
 8005ef0:	e004      	b.n	8005efc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	4a0c      	ldr	r2, [pc, #48]	; (8005f28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ef6:	fb02 f303 	mul.w	r3, r2, r3
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	623b      	str	r3, [r7, #32]
      break;
 8005f00:	e002      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f02:	4b06      	ldr	r3, [pc, #24]	; (8005f1c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005f04:	623b      	str	r3, [r7, #32]
      break;
 8005f06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f08:	6a3b      	ldr	r3, [r7, #32]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	372c      	adds	r7, #44	; 0x2c
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	007a1200 	.word	0x007a1200
 8005f20:	0800cc58 	.word	0x0800cc58
 8005f24:	0800cc68 	.word	0x0800cc68
 8005f28:	003d0900 	.word	0x003d0900

08005f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f30:	4b03      	ldr	r3, [pc, #12]	; (8005f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f32:	681b      	ldr	r3, [r3, #0]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	20000000 	.word	0x20000000

08005f44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b092      	sub	sp, #72	; 0x48
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 80f5 	beq.w	800614c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005f62:	2300      	movs	r3, #0
 8005f64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f68:	4b60      	ldr	r3, [pc, #384]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10e      	bne.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f74:	4a5d      	ldr	r2, [pc, #372]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005f76:	4b5d      	ldr	r3, [pc, #372]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f7e:	61d3      	str	r3, [r2, #28]
 8005f80:	4b5a      	ldr	r3, [pc, #360]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f92:	4b57      	ldr	r3, [pc, #348]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d118      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f9e:	4a54      	ldr	r2, [pc, #336]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fa0:	4b53      	ldr	r3, [pc, #332]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005faa:	f7fb f889 	bl	80010c0 <HAL_GetTick>
 8005fae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb2:	f7fb f885 	bl	80010c0 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b64      	cmp	r3, #100	; 0x64
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e187      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc4:	4b4a      	ldr	r3, [pc, #296]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0f0      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fd0:	4b46      	ldr	r3, [pc, #280]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 80a2 	beq.w	8006126 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fec:	429a      	cmp	r2, r3
 8005fee:	f000 809a 	beq.w	8006126 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ff2:	4b3e      	ldr	r3, [pc, #248]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006000:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006004:	fa93 f3a3 	rbit	r3, r3
 8006008:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800600a:	69fb      	ldr	r3, [r7, #28]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800600c:	fab3 f383 	clz	r3, r3
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	461a      	mov	r2, r3
 8006014:	4b37      	ldr	r3, [pc, #220]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006016:	4413      	add	r3, r2
 8006018:	461a      	mov	r2, r3
 800601a:	2301      	movs	r3, #1
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	fa93 f3a3 	rbit	r3, r3
 800602a:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800602c:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800602e:	fab3 f383 	clz	r3, r3
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	461a      	mov	r2, r3
 8006036:	4b2f      	ldr	r3, [pc, #188]	; (80060f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006038:	4413      	add	r3, r2
 800603a:	461a      	mov	r2, r3
 800603c:	2300      	movs	r3, #0
 800603e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006040:	4a2a      	ldr	r2, [pc, #168]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006044:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d06a      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006050:	f7fb f836 	bl	80010c0 <HAL_GetTick>
 8006054:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006056:	e00a      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006058:	f7fb f832 	bl	80010c0 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	f241 3288 	movw	r2, #5000	; 0x1388
 8006066:	4293      	cmp	r3, r2
 8006068:	d901      	bls.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e132      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800606e:	2302      	movs	r3, #2
 8006070:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	fa93 f3a3 	rbit	r3, r3
 8006078:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800607a:	69bb      	ldr	r3, [r7, #24]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800607c:	fab3 f383 	clz	r3, r3
 8006080:	b25b      	sxtb	r3, r3
 8006082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006086:	b25b      	sxtb	r3, r3
 8006088:	b2db      	uxtb	r3, r3
 800608a:	095b      	lsrs	r3, r3, #5
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b01      	cmp	r3, #1
 8006090:	d102      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006092:	4b16      	ldr	r3, [pc, #88]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	e031      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006098:	2302      	movs	r3, #2
 800609a:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	fa93 f3a3 	rbit	r3, r3
 80060a2:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	fab3 f383 	clz	r3, r3
 80060aa:	b25b      	sxtb	r3, r3
 80060ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060b0:	b25b      	sxtb	r3, r3
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	095b      	lsrs	r3, r3, #5
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d102      	bne.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 80060bc:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	e01c      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80060c2:	2302      	movs	r3, #2
 80060c4:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c8:	fa93 f3a3 	rbit	r3, r3
 80060cc:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	fab3 f383 	clz	r3, r3
 80060d4:	b25b      	sxtb	r3, r3
 80060d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060da:	b25b      	sxtb	r3, r3
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d108      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80060e6:	4b01      	ldr	r3, [pc, #4]	; (80060ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	e007      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80060ec:	40021000 	.word	0x40021000
 80060f0:	40007000 	.word	0x40007000
 80060f4:	42420400 	.word	0x42420400
 80060f8:	4b78      	ldr	r3, [pc, #480]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	2202      	movs	r2, #2
 80060fe:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006102:	fa92 f2a2 	rbit	r2, r2
 8006106:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	fab2 f282 	clz	r2, r2
 800610e:	b252      	sxtb	r2, r2
 8006110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006114:	b252      	sxtb	r2, r2
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	f002 021f 	and.w	r2, r2, #31
 800611c:	40d3      	lsrs	r3, r2
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d098      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006126:	496d      	ldr	r1, [pc, #436]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006128:	4b6c      	ldr	r3, [pc, #432]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	4313      	orrs	r3, r2
 8006136:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006138:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800613c:	2b01      	cmp	r3, #1
 800613e:	d105      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x208>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006140:	4a66      	ldr	r2, [pc, #408]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006142:	4b66      	ldr	r3, [pc, #408]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800614a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d008      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006158:	4960      	ldr	r1, [pc, #384]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800615a:	4b60      	ldr	r3, [pc, #384]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615e:	f023 0203 	bic.w	r2, r3, #3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	4313      	orrs	r3, r2
 8006168:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d008      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006176:	4959      	ldr	r1, [pc, #356]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006178:	4b58      	ldr	r3, [pc, #352]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	4313      	orrs	r3, r2
 8006186:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b00      	cmp	r3, #0
 8006192:	d008      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006194:	4951      	ldr	r1, [pc, #324]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006196:	4b51      	ldr	r3, [pc, #324]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d008      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061b2:	494a      	ldr	r1, [pc, #296]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80061b4:	4b49      	ldr	r3, [pc, #292]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80061b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b8:	f023 0210 	bic.w	r2, r3, #16
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d008      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80061d0:	4942      	ldr	r1, [pc, #264]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80061d2:	4b42      	ldr	r3, [pc, #264]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061de:	4313      	orrs	r3, r2
 80061e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d008      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061ee:	493b      	ldr	r1, [pc, #236]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80061f0:	4b3a      	ldr	r3, [pc, #232]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80061f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f4:	f023 0220 	bic.w	r2, r3, #32
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d008      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800620c:	4933      	ldr	r1, [pc, #204]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800620e:	4b33      	ldr	r3, [pc, #204]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0310 	and.w	r3, r3, #16
 8006226:	2b00      	cmp	r3, #0
 8006228:	d008      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800622a:	492c      	ldr	r1, [pc, #176]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800622c:	4b2b      	ldr	r3, [pc, #172]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800622e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006230:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	4313      	orrs	r3, r2
 800623a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006244:	2b00      	cmp	r3, #0
 8006246:	d008      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006248:	4924      	ldr	r1, [pc, #144]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800624a:	4b24      	ldr	r3, [pc, #144]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	4313      	orrs	r3, r2
 8006258:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006262:	2b00      	cmp	r3, #0
 8006264:	d008      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006266:	491d      	ldr	r1, [pc, #116]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006268:	4b1c      	ldr	r3, [pc, #112]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	4313      	orrs	r3, r2
 8006276:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006280:	2b00      	cmp	r3, #0
 8006282:	d008      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006284:	4915      	ldr	r1, [pc, #84]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006286:	4b15      	ldr	r3, [pc, #84]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8006288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006292:	4313      	orrs	r3, r2
 8006294:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d008      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80062a2:	490e      	ldr	r1, [pc, #56]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80062a4:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b0:	4313      	orrs	r3, r2
 80062b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d008      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80062c0:	4906      	ldr	r1, [pc, #24]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80062c2:	4b06      	ldr	r3, [pc, #24]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80062c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ce:	4313      	orrs	r3, r2
 80062d0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3748      	adds	r7, #72	; 0x48
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40021000 	.word	0x40021000

080062e0 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e01d      	b.n	800632e <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f002 ffaa 	bl	8009260 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3304      	adds	r3, #4
 800631c:	4619      	mov	r1, r3
 800631e:	4610      	mov	r0, r2
 8006320:	f000 f854 	bl	80063cc <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop

08006338 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2201      	movs	r2, #1
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f000 faec 	bl	8006928 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a18      	ldr	r2, [pc, #96]	; (80063b8 <HAL_TIM_PWM_Start+0x80>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d013      	beq.n	8006382 <HAL_TIM_PWM_Start+0x4a>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a17      	ldr	r2, [pc, #92]	; (80063bc <HAL_TIM_PWM_Start+0x84>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00e      	beq.n	8006382 <HAL_TIM_PWM_Start+0x4a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a15      	ldr	r2, [pc, #84]	; (80063c0 <HAL_TIM_PWM_Start+0x88>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d009      	beq.n	8006382 <HAL_TIM_PWM_Start+0x4a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a14      	ldr	r2, [pc, #80]	; (80063c4 <HAL_TIM_PWM_Start+0x8c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d004      	beq.n	8006382 <HAL_TIM_PWM_Start+0x4a>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a12      	ldr	r2, [pc, #72]	; (80063c8 <HAL_TIM_PWM_Start+0x90>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d101      	bne.n	8006386 <HAL_TIM_PWM_Start+0x4e>
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <HAL_TIM_PWM_Start+0x50>
 8006386:	2300      	movs	r3, #0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800639a:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6812      	ldr	r2, [r2, #0]
 80063a4:	6812      	ldr	r2, [r2, #0]
 80063a6:	f042 0201 	orr.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
} 
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	40013400 	.word	0x40013400
 80063c0:	40014000 	.word	0x40014000
 80063c4:	40014400 	.word	0x40014400
 80063c8:	40014800 	.word	0x40014800

080063cc <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a38      	ldr	r2, [pc, #224]	; (80064c4 <TIM_Base_SetConfig+0xf8>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00f      	beq.n	8006408 <TIM_Base_SetConfig+0x3c>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ee:	d00b      	beq.n	8006408 <TIM_Base_SetConfig+0x3c>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a35      	ldr	r2, [pc, #212]	; (80064c8 <TIM_Base_SetConfig+0xfc>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d007      	beq.n	8006408 <TIM_Base_SetConfig+0x3c>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a34      	ldr	r2, [pc, #208]	; (80064cc <TIM_Base_SetConfig+0x100>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d003      	beq.n	8006408 <TIM_Base_SetConfig+0x3c>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a33      	ldr	r2, [pc, #204]	; (80064d0 <TIM_Base_SetConfig+0x104>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d108      	bne.n	800641a <TIM_Base_SetConfig+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a29      	ldr	r2, [pc, #164]	; (80064c4 <TIM_Base_SetConfig+0xf8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d01b      	beq.n	800645a <TIM_Base_SetConfig+0x8e>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006428:	d017      	beq.n	800645a <TIM_Base_SetConfig+0x8e>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a26      	ldr	r2, [pc, #152]	; (80064c8 <TIM_Base_SetConfig+0xfc>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d013      	beq.n	800645a <TIM_Base_SetConfig+0x8e>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a25      	ldr	r2, [pc, #148]	; (80064cc <TIM_Base_SetConfig+0x100>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00f      	beq.n	800645a <TIM_Base_SetConfig+0x8e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a24      	ldr	r2, [pc, #144]	; (80064d0 <TIM_Base_SetConfig+0x104>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00b      	beq.n	800645a <TIM_Base_SetConfig+0x8e>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a23      	ldr	r2, [pc, #140]	; (80064d4 <TIM_Base_SetConfig+0x108>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d007      	beq.n	800645a <TIM_Base_SetConfig+0x8e>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a22      	ldr	r2, [pc, #136]	; (80064d8 <TIM_Base_SetConfig+0x10c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d003      	beq.n	800645a <TIM_Base_SetConfig+0x8e>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a21      	ldr	r2, [pc, #132]	; (80064dc <TIM_Base_SetConfig+0x110>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d108      	bne.n	800646c <TIM_Base_SetConfig+0xa0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a0f      	ldr	r2, [pc, #60]	; (80064c4 <TIM_Base_SetConfig+0xf8>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d00f      	beq.n	80064aa <TIM_Base_SetConfig+0xde>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a10      	ldr	r2, [pc, #64]	; (80064d0 <TIM_Base_SetConfig+0x104>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00b      	beq.n	80064aa <TIM_Base_SetConfig+0xde>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a0f      	ldr	r2, [pc, #60]	; (80064d4 <TIM_Base_SetConfig+0x108>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d007      	beq.n	80064aa <TIM_Base_SetConfig+0xde>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a0e      	ldr	r2, [pc, #56]	; (80064d8 <TIM_Base_SetConfig+0x10c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d003      	beq.n	80064aa <TIM_Base_SetConfig+0xde>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a0d      	ldr	r2, [pc, #52]	; (80064dc <TIM_Base_SetConfig+0x110>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d103      	bne.n	80064b2 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	691a      	ldr	r2, [r3, #16]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	615a      	str	r2, [r3, #20]
}
 80064b8:	bf00      	nop
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	40012c00 	.word	0x40012c00
 80064c8:	40000400 	.word	0x40000400
 80064cc:	40000800 	.word	0x40000800
 80064d0:	40013400 	.word	0x40013400
 80064d4:	40014000 	.word	0x40014000
 80064d8:	40014400 	.word	0x40014400
 80064dc:	40014800 	.word	0x40014800

080064e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 80064f2:	2300      	movs	r3, #0
 80064f4:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f023 0201 	bic.w	r2, r3, #1
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800651a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0303 	bic.w	r3, r3, #3
 8006526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f023 0302 	bic.w	r3, r3, #2
 8006538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a2c      	ldr	r2, [pc, #176]	; (80065f8 <TIM_OC1_SetConfig+0x118>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00f      	beq.n	800656c <TIM_OC1_SetConfig+0x8c>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a2b      	ldr	r2, [pc, #172]	; (80065fc <TIM_OC1_SetConfig+0x11c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d00b      	beq.n	800656c <TIM_OC1_SetConfig+0x8c>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a2a      	ldr	r2, [pc, #168]	; (8006600 <TIM_OC1_SetConfig+0x120>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d007      	beq.n	800656c <TIM_OC1_SetConfig+0x8c>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a29      	ldr	r2, [pc, #164]	; (8006604 <TIM_OC1_SetConfig+0x124>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d003      	beq.n	800656c <TIM_OC1_SetConfig+0x8c>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a28      	ldr	r2, [pc, #160]	; (8006608 <TIM_OC1_SetConfig+0x128>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d10c      	bne.n	8006586 <TIM_OC1_SetConfig+0xa6>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f023 0308 	bic.w	r3, r3, #8
 8006572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f023 0304 	bic.w	r3, r3, #4
 8006584:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a1b      	ldr	r2, [pc, #108]	; (80065f8 <TIM_OC1_SetConfig+0x118>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00f      	beq.n	80065ae <TIM_OC1_SetConfig+0xce>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a1a      	ldr	r2, [pc, #104]	; (80065fc <TIM_OC1_SetConfig+0x11c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00b      	beq.n	80065ae <TIM_OC1_SetConfig+0xce>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a19      	ldr	r2, [pc, #100]	; (8006600 <TIM_OC1_SetConfig+0x120>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d007      	beq.n	80065ae <TIM_OC1_SetConfig+0xce>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a18      	ldr	r2, [pc, #96]	; (8006604 <TIM_OC1_SetConfig+0x124>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d003      	beq.n	80065ae <TIM_OC1_SetConfig+0xce>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a17      	ldr	r2, [pc, #92]	; (8006608 <TIM_OC1_SetConfig+0x128>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d111      	bne.n	80065d2 <TIM_OC1_SetConfig+0xf2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	693a      	ldr	r2, [r7, #16]
 80065d6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	621a      	str	r2, [r3, #32]
} 
 80065ec:	bf00      	nop
 80065ee:	371c      	adds	r7, #28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	40012c00 	.word	0x40012c00
 80065fc:	40013400 	.word	0x40013400
 8006600:	40014000 	.word	0x40014000
 8006604:	40014400 	.word	0x40014400
 8006608:	40014800 	.word	0x40014800

0800660c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 800661e:	2300      	movs	r3, #0
 8006620:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	f023 0210 	bic.w	r2, r3, #16
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800664a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006652:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	4313      	orrs	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f023 0320 	bic.w	r3, r3, #32
 8006666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a28      	ldr	r2, [pc, #160]	; (8006718 <TIM_OC2_SetConfig+0x10c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <TIM_OC2_SetConfig+0x78>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a27      	ldr	r2, [pc, #156]	; (800671c <TIM_OC2_SetConfig+0x110>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d10d      	bne.n	80066a0 <TIM_OC2_SetConfig+0x94>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800668a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800669e:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a1d      	ldr	r2, [pc, #116]	; (8006718 <TIM_OC2_SetConfig+0x10c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00f      	beq.n	80066c8 <TIM_OC2_SetConfig+0xbc>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a1c      	ldr	r2, [pc, #112]	; (800671c <TIM_OC2_SetConfig+0x110>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00b      	beq.n	80066c8 <TIM_OC2_SetConfig+0xbc>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a1b      	ldr	r2, [pc, #108]	; (8006720 <TIM_OC2_SetConfig+0x114>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d007      	beq.n	80066c8 <TIM_OC2_SetConfig+0xbc>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a1a      	ldr	r2, [pc, #104]	; (8006724 <TIM_OC2_SetConfig+0x118>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d003      	beq.n	80066c8 <TIM_OC2_SetConfig+0xbc>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a19      	ldr	r2, [pc, #100]	; (8006728 <TIM_OC2_SetConfig+0x11c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d113      	bne.n	80066f0 <TIM_OC2_SetConfig+0xe4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	621a      	str	r2, [r3, #32]
}
 800670a:	bf00      	nop
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	40012c00 	.word	0x40012c00
 800671c:	40013400 	.word	0x40013400
 8006720:	40014000 	.word	0x40014000
 8006724:	40014400 	.word	0x40014400
 8006728:	40014800 	.word	0x40014800

0800672c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 800673e:	2300      	movs	r3, #0
 8006740:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 0303 	bic.w	r3, r3, #3
 8006772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a27      	ldr	r2, [pc, #156]	; (8006834 <TIM_OC3_SetConfig+0x108>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d003      	beq.n	80067a2 <TIM_OC3_SetConfig+0x76>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a26      	ldr	r2, [pc, #152]	; (8006838 <TIM_OC3_SetConfig+0x10c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d10d      	bne.n	80067be <TIM_OC3_SetConfig+0x92>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067bc:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a1c      	ldr	r2, [pc, #112]	; (8006834 <TIM_OC3_SetConfig+0x108>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00f      	beq.n	80067e6 <TIM_OC3_SetConfig+0xba>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a1b      	ldr	r2, [pc, #108]	; (8006838 <TIM_OC3_SetConfig+0x10c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00b      	beq.n	80067e6 <TIM_OC3_SetConfig+0xba>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a1a      	ldr	r2, [pc, #104]	; (800683c <TIM_OC3_SetConfig+0x110>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d007      	beq.n	80067e6 <TIM_OC3_SetConfig+0xba>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a19      	ldr	r2, [pc, #100]	; (8006840 <TIM_OC3_SetConfig+0x114>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d003      	beq.n	80067e6 <TIM_OC3_SetConfig+0xba>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a18      	ldr	r2, [pc, #96]	; (8006844 <TIM_OC3_SetConfig+0x118>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d113      	bne.n	800680e <TIM_OC3_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	621a      	str	r2, [r3, #32]
}
 8006828:	bf00      	nop
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	40012c00 	.word	0x40012c00
 8006838:	40013400 	.word	0x40013400
 800683c:	40014000 	.word	0x40014000
 8006840:	40014400 	.word	0x40014400
 8006844:	40014800 	.word	0x40014800

08006848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 800685a:	2300      	movs	r3, #0
 800685c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006886:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800688e:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	031b      	lsls	r3, r3, #12
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a18      	ldr	r2, [pc, #96]	; (8006914 <TIM_OC4_SetConfig+0xcc>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00f      	beq.n	80068d8 <TIM_OC4_SetConfig+0x90>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a17      	ldr	r2, [pc, #92]	; (8006918 <TIM_OC4_SetConfig+0xd0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00b      	beq.n	80068d8 <TIM_OC4_SetConfig+0x90>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a16      	ldr	r2, [pc, #88]	; (800691c <TIM_OC4_SetConfig+0xd4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d007      	beq.n	80068d8 <TIM_OC4_SetConfig+0x90>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a15      	ldr	r2, [pc, #84]	; (8006920 <TIM_OC4_SetConfig+0xd8>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_OC4_SetConfig+0x90>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a14      	ldr	r2, [pc, #80]	; (8006924 <TIM_OC4_SetConfig+0xdc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d109      	bne.n	80068ec <TIM_OC4_SetConfig+0xa4>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	019b      	lsls	r3, r3, #6
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40012c00 	.word	0x40012c00
 8006918:	40013400 	.word	0x40013400
 800691c:	40014000 	.word	0x40014000
 8006920:	40014400 	.word	0x40014400
 8006924:	40014800 	.word	0x40014800

08006928 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8006938:	2201      	movs	r2, #1
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	fa02 f303 	lsl.w	r3, r2, r3
 8006940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a1a      	ldr	r2, [r3, #32]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	43db      	mvns	r3, r3
 800694a:	401a      	ands	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a1a      	ldr	r2, [r3, #32]
 8006954:	6879      	ldr	r1, [r7, #4]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	fa01 f303 	lsl.w	r3, r1, r3
 800695c:	431a      	orrs	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop

08006970 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006986:	2302      	movs	r3, #2
 8006988:	e105      	b.n	8006b96 <HAL_TIM_PWM_ConfigChannel+0x226>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2202      	movs	r2, #2
 8006996:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b14      	cmp	r3, #20
 800699e:	f200 80f0 	bhi.w	8006b82 <HAL_TIM_PWM_ConfigChannel+0x212>
 80069a2:	a201      	add	r2, pc, #4	; (adr r2, 80069a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80069a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a8:	080069fd 	.word	0x080069fd
 80069ac:	08006b83 	.word	0x08006b83
 80069b0:	08006b83 	.word	0x08006b83
 80069b4:	08006b83 	.word	0x08006b83
 80069b8:	08006a3d 	.word	0x08006a3d
 80069bc:	08006b83 	.word	0x08006b83
 80069c0:	08006b83 	.word	0x08006b83
 80069c4:	08006b83 	.word	0x08006b83
 80069c8:	08006a7f 	.word	0x08006a7f
 80069cc:	08006b83 	.word	0x08006b83
 80069d0:	08006b83 	.word	0x08006b83
 80069d4:	08006b83 	.word	0x08006b83
 80069d8:	08006abf 	.word	0x08006abf
 80069dc:	08006b83 	.word	0x08006b83
 80069e0:	08006b83 	.word	0x08006b83
 80069e4:	08006b83 	.word	0x08006b83
 80069e8:	08006b01 	.word	0x08006b01
 80069ec:	08006b83 	.word	0x08006b83
 80069f0:	08006b83 	.word	0x08006b83
 80069f4:	08006b83 	.word	0x08006b83
 80069f8:	08006b41 	.word	0x08006b41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68b9      	ldr	r1, [r7, #8]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff fd6c 	bl	80064e0 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	6812      	ldr	r2, [r2, #0]
 8006a10:	6992      	ldr	r2, [r2, #24]
 8006a12:	f042 0208 	orr.w	r2, r2, #8
 8006a16:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	6992      	ldr	r2, [r2, #24]
 8006a22:	f022 0204 	bic.w	r2, r2, #4
 8006a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	6812      	ldr	r2, [r2, #0]
 8006a30:	6991      	ldr	r1, [r2, #24]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	6912      	ldr	r2, [r2, #16]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	619a      	str	r2, [r3, #24]
    }
    break;
 8006a3a:	e0a3      	b.n	8006b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7ff fde2 	bl	800660c <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	6812      	ldr	r2, [r2, #0]
 8006a50:	6992      	ldr	r2, [r2, #24]
 8006a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a56:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	6812      	ldr	r2, [r2, #0]
 8006a60:	6992      	ldr	r2, [r2, #24]
 8006a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	6812      	ldr	r2, [r2, #0]
 8006a70:	6991      	ldr	r1, [r2, #24]
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	6912      	ldr	r2, [r2, #16]
 8006a76:	0212      	lsls	r2, r2, #8
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	619a      	str	r2, [r3, #24]
    }
    break;
 8006a7c:	e082      	b.n	8006b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68b9      	ldr	r1, [r7, #8]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff fe51 	bl	800672c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	6812      	ldr	r2, [r2, #0]
 8006a92:	69d2      	ldr	r2, [r2, #28]
 8006a94:	f042 0208 	orr.w	r2, r2, #8
 8006a98:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	6812      	ldr	r2, [r2, #0]
 8006aa2:	69d2      	ldr	r2, [r2, #28]
 8006aa4:	f022 0204 	bic.w	r2, r2, #4
 8006aa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	6812      	ldr	r2, [r2, #0]
 8006ab2:	69d1      	ldr	r1, [r2, #28]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	6912      	ldr	r2, [r2, #16]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	61da      	str	r2, [r3, #28]
    }
    break;
 8006abc:	e062      	b.n	8006b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68b9      	ldr	r1, [r7, #8]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff febf 	bl	8006848 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	6812      	ldr	r2, [r2, #0]
 8006ad2:	69d2      	ldr	r2, [r2, #28]
 8006ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ad8:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	6812      	ldr	r2, [r2, #0]
 8006ae2:	69d2      	ldr	r2, [r2, #28]
 8006ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	6812      	ldr	r2, [r2, #0]
 8006af2:	69d1      	ldr	r1, [r2, #28]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	6912      	ldr	r2, [r2, #16]
 8006af8:	0212      	lsls	r2, r2, #8
 8006afa:	430a      	orrs	r2, r1
 8006afc:	61da      	str	r2, [r3, #28]
    }
    break;
 8006afe:	e041      	b.n	8006b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 f938 	bl	8006d7c <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b16:	f042 0208 	orr.w	r2, r2, #8
 8006b1a:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b26:	f022 0204 	bic.w	r2, r2, #4
 8006b2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	6812      	ldr	r2, [r2, #0]
 8006b34:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	6912      	ldr	r2, [r2, #16]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8006b3e:	e021      	b.n	8006b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 f982 	bl	8006e50 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	6812      	ldr	r2, [r2, #0]
 8006b54:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b5a:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	6812      	ldr	r2, [r2, #0]
 8006b64:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	6912      	ldr	r2, [r2, #16]
 8006b7a:	0212      	lsls	r2, r2, #8
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8006b80:	e000      	b.n	8006b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 8006b82:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop

08006ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e03d      	b.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a1a      	ldr	r2, [pc, #104]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d004      	beq.n	8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a19      	ldr	r2, [pc, #100]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d108      	bne.n	8006bf6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c0e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
} 
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	40012c00 	.word	0x40012c00
 8006c44:	40013400 	.word	0x40013400

08006c48 <HAL_TIMEx_ConfigBreakDeadTime>:
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d101      	bne.n	8006c64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c60:	2302      	movs	r3, #2
 8006c62:	e081      	b.n	8006d68 <HAL_TIMEx_ConfigBreakDeadTime+0x120>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a40      	ldr	r2, [pc, #256]	; (8006d74 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d004      	beq.n	8006c80 <HAL_TIMEx_ConfigBreakDeadTime+0x38>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a3f      	ldr	r2, [pc, #252]	; (8006d78 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d13d      	bne.n	8006cfc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Clear the BDTR bits */
    tmpbdtr &= ~(TIM_BDTR_DTG | TIM_BDTR_LOCK |  TIM_BDTR_OSSI | 
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 8006c86:	60fb      	str	r3, [r7, #12]
                 TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
                 TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF |
                 TIM_BDTR_BK2F | TIM_BDTR_BK2E | TIM_BDTR_BK2P);

    /* Set the BDTR bits */
    tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	041b      	lsls	r3, r3, #16
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT);
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	051b      	lsls	r3, r3, #20
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->Break2State;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->Break2Polarity;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	e02c      	b.n	8006d56 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
  }
  else
  {
    /* Clear the BDTR bits */
    tmpbdtr &= ~(TIM_BDTR_DTG | TIM_BDTR_LOCK |  TIM_BDTR_OSSI | 
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	0d1b      	lsrs	r3, r3, #20
 8006d00:	051b      	lsls	r3, r3, #20
 8006d02:	60fb      	str	r3, [r7, #12]
                 TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
                 TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF);
    
    /* Set the BDTR bits */
    tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	041b      	lsls	r3, r3, #16
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	40012c00 	.word	0x40012c00
 8006d78:	40013400 	.word	0x40013400

08006d7c <TIM_OC5_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dae:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dba:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	041b      	lsls	r3, r3, #16
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a17      	ldr	r2, [pc, #92]	; (8006e3c <TIM_OC5_SetConfig+0xc0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d00f      	beq.n	8006e02 <TIM_OC5_SetConfig+0x86>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a16      	ldr	r2, [pc, #88]	; (8006e40 <TIM_OC5_SetConfig+0xc4>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d00b      	beq.n	8006e02 <TIM_OC5_SetConfig+0x86>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a15      	ldr	r2, [pc, #84]	; (8006e44 <TIM_OC5_SetConfig+0xc8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d007      	beq.n	8006e02 <TIM_OC5_SetConfig+0x86>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a14      	ldr	r2, [pc, #80]	; (8006e48 <TIM_OC5_SetConfig+0xcc>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d003      	beq.n	8006e02 <TIM_OC5_SetConfig+0x86>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a13      	ldr	r2, [pc, #76]	; (8006e4c <TIM_OC5_SetConfig+0xd0>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d109      	bne.n	8006e16 <TIM_OC5_SetConfig+0x9a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e08:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	021b      	lsls	r3, r3, #8
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	621a      	str	r2, [r3, #32]
}
 8006e30:	bf00      	nop
 8006e32:	371c      	adds	r7, #28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	40012c00 	.word	0x40012c00
 8006e40:	40013400 	.word	0x40013400
 8006e44:	40014000 	.word	0x40014000
 8006e48:	40014400 	.word	0x40014400
 8006e4c:	40014800 	.word	0x40014800

08006e50 <TIM_OC6_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8006e62:	2300      	movs	r3, #0
 8006e64:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e82:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e8e:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	021b      	lsls	r3, r3, #8
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ea2:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	051b      	lsls	r3, r3, #20
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a18      	ldr	r2, [pc, #96]	; (8006f14 <TIM_OC6_SetConfig+0xc4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00f      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x88>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a17      	ldr	r2, [pc, #92]	; (8006f18 <TIM_OC6_SetConfig+0xc8>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d00b      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x88>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a16      	ldr	r2, [pc, #88]	; (8006f1c <TIM_OC6_SetConfig+0xcc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d007      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x88>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <TIM_OC6_SetConfig+0xd0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d003      	beq.n	8006ed8 <TIM_OC6_SetConfig+0x88>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a14      	ldr	r2, [pc, #80]	; (8006f24 <TIM_OC6_SetConfig+0xd4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d109      	bne.n	8006eec <TIM_OC6_SetConfig+0x9c>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ede:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	029b      	lsls	r3, r3, #10
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	621a      	str	r2, [r3, #32]
} 
 8006f06:	bf00      	nop
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	40013400 	.word	0x40013400
 8006f1c:	40014000 	.word	0x40014000
 8006f20:	40014400 	.word	0x40014400
 8006f24:	40014800 	.word	0x40014800

08006f28 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	7c1b      	ldrb	r3, [r3, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10e      	bne.n	8006f5e <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8006f40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f44:	2202      	movs	r2, #2
 8006f46:	2181      	movs	r1, #129	; 0x81
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f002 fc25 	bl	8009798 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8006f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f52:	2202      	movs	r2, #2
 8006f54:	2101      	movs	r1, #1
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f002 fc1e 	bl	8009798 <USBD_LL_OpenEP>
 8006f5c:	e00b      	b.n	8006f76 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8006f5e:	2340      	movs	r3, #64	; 0x40
 8006f60:	2202      	movs	r2, #2
 8006f62:	2181      	movs	r1, #129	; 0x81
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f002 fc17 	bl	8009798 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8006f6a:	2340      	movs	r3, #64	; 0x40
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	2101      	movs	r1, #1
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f002 fc11 	bl	8009798 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8006f76:	2308      	movs	r3, #8
 8006f78:	2203      	movs	r2, #3
 8006f7a:	2182      	movs	r1, #130	; 0x82
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f002 fc0b 	bl	8009798 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006f82:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006f86:	f002 fce1 	bl	800994c <USBD_static_malloc>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	73fb      	strb	r3, [r7, #15]
 8006fa0:	e026      	b.n	8006ff0 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8006fa8:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	7c1b      	ldrb	r3, [r3, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d109      	bne.n	8006fe0 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f002 fc8b 	bl	80098f4 <USBD_LL_PrepareReceive>
 8006fde:	e007      	b.n	8006ff0 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fe6:	2340      	movs	r3, #64	; 0x40
 8006fe8:	2101      	movs	r1, #1
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f002 fc82 	bl	80098f4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop

08006ffc <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 800700c:	2181      	movs	r1, #129	; 0x81
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f002 fbdc 	bl	80097cc <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8007014:	2101      	movs	r1, #1
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f002 fbd8 	bl	80097cc <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 800701c:	2182      	movs	r1, #130	; 0x82
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f002 fbd4 	bl	80097cc <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00e      	beq.n	800704c <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800703e:	4618      	mov	r0, r3
 8007040:	f002 fc92 	bl	8009968 <USBD_static_free>
    pdev->pClassData = NULL;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800704c:	7bfb      	ldrb	r3, [r7, #15]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop

08007058 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007068:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007072:	2b00      	cmp	r3, #0
 8007074:	d03a      	beq.n	80070ec <USBD_CDC_Setup+0x94>
 8007076:	2b20      	cmp	r3, #32
 8007078:	d000      	beq.n	800707c <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 800707a:	e043      	b.n	8007104 <USBD_CDC_Setup+0xac>
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	88db      	ldrh	r3, [r3, #6]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d029      	beq.n	80070d8 <USBD_CDC_Setup+0x80>
    {
      if (req->bmRequest & 0x80)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	b25b      	sxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	da11      	bge.n	80070b2 <USBD_CDC_Setup+0x5a>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800709a:	68f9      	ldr	r1, [r7, #12]
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
    {
      if (req->bmRequest & 0x80)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	88d2      	ldrh	r2, [r2, #6]
 80070a0:	4798      	blx	r3
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 80070a2:	68f9      	ldr	r1, [r7, #12]
      if (req->bmRequest & 0x80)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	88db      	ldrh	r3, [r3, #6]
 80070a8:	461a      	mov	r2, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 f828 	bl	8008100 <USBD_CtlSendData>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 80070b0:	e029      	b.n	8007106 <USBD_CDC_Setup+0xae>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	785a      	ldrb	r2, [r3, #1]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	88db      	ldrh	r3, [r3, #6]
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
                           (uint8_t *)hcdc->data,
 80070c8:	68f9      	ldr	r1, [r7, #12]
      else
      {
        hcdc->CmdOpCode = req->bRequest;
        hcdc->CmdLength = req->wLength;
        
        USBD_CtlPrepareRx (pdev, 
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	88db      	ldrh	r3, [r3, #6]
 80070ce:	461a      	mov	r2, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 f843 	bl	800815c <USBD_CtlPrepareRx>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 80070d6:	e016      	b.n	8007106 <USBD_CDC_Setup+0xae>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	7850      	ldrb	r0, [r2, #1]
 80070e4:	2200      	movs	r2, #0
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	4798      	blx	r3
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 80070ea:	e00c      	b.n	8007106 <USBD_CDC_Setup+0xae>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	785b      	ldrb	r3, [r3, #1]
 80070f0:	2b0a      	cmp	r3, #10
 80070f2:	d001      	beq.n	80070f8 <USBD_CDC_Setup+0xa0>
 80070f4:	2b0b      	cmp	r3, #11
                        &ifalt,
                        1);
      break;
      
    case USB_REQ_SET_INTERFACE :
      break;
 80070f6:	e005      	b.n	8007104 <USBD_CDC_Setup+0xac>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 80070f8:	2201      	movs	r2, #1
 80070fa:	4905      	ldr	r1, [pc, #20]	; (8007110 <USBD_CDC_Setup+0xb8>)
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 ffff 	bl	8008100 <USBD_CtlSendData>
                        &ifalt,
                        1);
      break;
 8007102:	bf00      	nop
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8007104:	bf00      	nop
  }
  return USBD_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	200006bc 	.word	0x200006bc

08007114 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007126:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	e000      	b.n	8007140 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 800713e:	2302      	movs	r3, #2
  }
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800715e:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f002 fbdd 	bl	8009924 <USBD_LL_GetRxDataSize>
 800716a:	4602      	mov	r2, r0
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00d      	beq.n	8007198 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007190:	4611      	mov	r1, r2
 8007192:	4798      	blx	r3

    return USBD_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	e000      	b.n	800719a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007198:	2302      	movs	r3, #2
  }
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop

080071a4 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80071b2:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d015      	beq.n	80071ea <USBD_CDC_EP0_RxReady+0x46>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80071c4:	2bff      	cmp	r3, #255	; 0xff
 80071c6:	d010      	beq.n	80071ea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80071d6:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80071de:	b292      	uxth	r2, r2
 80071e0:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	22ff      	movs	r2, #255	; 0xff
 80071e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2243      	movs	r2, #67	; 0x43
 8007200:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007202:	4b03      	ldr	r3, [pc, #12]	; (8007210 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007204:	4618      	mov	r0, r3
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	2000008c 	.word	0x2000008c

08007214 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2243      	movs	r2, #67	; 0x43
 8007220:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007222:	4b03      	ldr	r3, [pc, #12]	; (8007230 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007224:	4618      	mov	r0, r3
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	20000048 	.word	0x20000048

08007234 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2243      	movs	r2, #67	; 0x43
 8007240:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007242:	4b03      	ldr	r3, [pc, #12]	; (8007250 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	200000d0 	.word	0x200000d0

08007254 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	220a      	movs	r2, #10
 8007260:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007262:	4b03      	ldr	r3, [pc, #12]	; (8007270 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	20000004 	.word	0x20000004

08007274 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800727e:	2302      	movs	r3, #2
 8007280:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8007290:	2300      	movs	r3, #0
 8007292:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8007294:	7bfb      	ldrb	r3, [r7, #15]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop

080072a4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	4613      	mov	r3, r2
 80072b0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80072b8:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80072c2:	88fa      	ldrh	r2, [r7, #6]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80072e8:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800730e:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007316:	2b00      	cmp	r3, #0
 8007318:	d017      	beq.n	800734a <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007320:	2b00      	cmp	r3, #0
 8007322:	d110      	bne.n	8007346 <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2201      	movs	r2, #1
 8007328:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8007338:	b29b      	uxth	r3, r3
 800733a:	2181      	movs	r1, #129	; 0x81
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f002 fac1 	bl	80098c4 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	e002      	b.n	800734c <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 8007346:	2301      	movs	r3, #1
 8007348:	e000      	b.n	800734c <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 800734a:	2302      	movs	r3, #2
  }
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007362:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800736a:	2b00      	cmp	r3, #0
 800736c:	d017      	beq.n	800739e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	7c1b      	ldrb	r3, [r3, #16]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d109      	bne.n	800738a <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800737c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007380:	2101      	movs	r1, #1
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f002 fab6 	bl	80098f4 <USBD_LL_PrepareReceive>
 8007388:	e007      	b.n	800739a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007390:	2340      	movs	r3, #64	; 0x40
 8007392:	2101      	movs	r1, #1
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f002 faad 	bl	80098f4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	e000      	b.n	80073a0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800739e:	2302      	movs	r3, #2
  }
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	4613      	mov	r3, r2
 80073b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80073bc:	2302      	movs	r3, #2
 80073be:	e01a      	b.n	80073f6 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	79fa      	ldrb	r2, [r7, #7]
 80073ec:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f002 f966 	bl	80096c0 <USBD_LL_Init>
  
  return USBD_OK; 
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop

08007400 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d006      	beq.n	8007422 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	73fb      	strb	r3, [r7, #15]
 8007420:	e001      	b.n	8007426 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8007422:	2302      	movs	r3, #2
 8007424:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8007426:	7bfb      	ldrb	r3, [r7, #15]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f002 f99b 	bl	8009778 <USBD_LL_Start>
  
  return USBD_OK;  
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop

08007464 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007470:	2302      	movs	r3, #2
 8007472:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00c      	beq.n	8007498 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	78fa      	ldrb	r2, [r7, #3]
 8007488:	4611      	mov	r1, r2
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	4798      	blx	r3
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop

080074a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	78fa      	ldrb	r2, [r7, #3]
 80074ba:	4611      	mov	r1, r2
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3
  return USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop

080074cc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fd62 	bl	8007fa8 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80074f2:	461a      	mov	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	2b01      	cmp	r3, #1
 8007506:	d00b      	beq.n	8007520 <USBD_LL_SetupStage+0x54>
 8007508:	2b02      	cmp	r3, #2
 800750a:	d011      	beq.n	8007530 <USBD_LL_SetupStage+0x64>
 800750c:	2b00      	cmp	r3, #0
 800750e:	d117      	bne.n	8007540 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f98f 	bl	800783c <USBD_StdDevReq>
    break;
 800751e:	e01a      	b.n	8007556 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f9d7 	bl	80078dc <USBD_StdItfReq>
    break;
 800752e:	e012      	b.n	8007556 <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007536:	4619      	mov	r1, r3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fa03 	bl	8007944 <USBD_StdEPReq>
    break;
 800753e:	e00a      	b.n	8007556 <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8007546:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800754a:	b2db      	uxtb	r3, r3
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f002 f950 	bl	80097f4 <USBD_LL_StallEP>
    break;
 8007554:	bf00      	nop
  }  
  return USBD_OK;  
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	460b      	mov	r3, r1
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800756e:	7afb      	ldrb	r3, [r7, #11]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d138      	bne.n	80075e6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800757a:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8007582:	2b03      	cmp	r3, #3
 8007584:	d142      	bne.n	800760c <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	429a      	cmp	r2, r3
 8007590:	d914      	bls.n	80075bc <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	689a      	ldr	r2, [r3, #8]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	1ad2      	subs	r2, r2, r3
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	4293      	cmp	r3, r2
 80075aa:	bf28      	it	cs
 80075ac:	4613      	movcs	r3, r2
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
       
        USBD_CtlContinueRx (pdev, 
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	6879      	ldr	r1, [r7, #4]
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 fdef 	bl	8008198 <USBD_CtlContinueRx>
 80075ba:	e027      	b.n	800760c <USBD_LL_DataOutStage+0xac>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00a      	beq.n	80075de <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d105      	bne.n	80075de <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 fdec 	bl	80081bc <USBD_CtlSendStatus>
 80075e4:	e012      	b.n	800760c <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00c      	beq.n	800760c <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80075f8:	2b03      	cmp	r3, #3
 80075fa:	d107      	bne.n	800760c <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	7afa      	ldrb	r2, [r7, #11]
 8007606:	4611      	mov	r1, r2
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	4798      	blx	r3
  }  
  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3718      	adds	r7, #24
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop

08007618 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	460b      	mov	r3, r1
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8007626:	7afb      	ldrb	r3, [r7, #11]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d16c      	bne.n	8007706 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	3314      	adds	r3, #20
 8007630:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8007638:	2b02      	cmp	r3, #2
 800763a:	d157      	bne.n	80076ec <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	689a      	ldr	r2, [r3, #8]
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	429a      	cmp	r2, r3
 8007646:	d915      	bls.n	8007674 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	1ad2      	subs	r2, r2, r3
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	689b      	ldr	r3, [r3, #8]
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
        
        USBD_CtlContinueSendData (pdev, 
 800765a:	b29b      	uxth	r3, r3
 800765c:	461a      	mov	r2, r3
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 fd69 	bl	8008138 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8007666:	2300      	movs	r3, #0
 8007668:	2200      	movs	r2, #0
 800766a:	2100      	movs	r1, #0
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f002 f941 	bl	80098f4 <USBD_LL_PrepareReceive>
 8007672:	e03b      	b.n	80076ec <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	68d2      	ldr	r2, [r2, #12]
 800767c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007680:	fb02 f201 	mul.w	r2, r2, r1
 8007684:	1a9b      	subs	r3, r3, r2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d11c      	bne.n	80076c4 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	68db      	ldr	r3, [r3, #12]
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8007692:	429a      	cmp	r2, r3
 8007694:	d316      	bcc.n	80076c4 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
           (pep->total_length >= pep->maxpacket) &&
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d20f      	bcs.n	80076c4 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80076a4:	2200      	movs	r2, #0
 80076a6:	2100      	movs	r1, #0
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f000 fd45 	bl	8008138 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80076b6:	2300      	movs	r3, #0
 80076b8:	2200      	movs	r2, #0
 80076ba:	2100      	movs	r1, #0
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f002 f919 	bl	80098f4 <USBD_LL_PrepareReceive>
 80076c2:	e013      	b.n	80076ec <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d105      	bne.n	80076e6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 fd7c 	bl	80081e4 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d11a      	bne.n	800772c <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f7ff fea8 	bl	800744c <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8007704:	e012      	b.n	800772c <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00c      	beq.n	800772c <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8007718:	2b03      	cmp	r3, #3
 800771a:	d107      	bne.n	800772c <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	7afa      	ldrb	r2, [r7, #11]
 8007726:	4611      	mov	r1, r2
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	4798      	blx	r3
  }  
  return USBD_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop

08007738 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8007740:	2340      	movs	r3, #64	; 0x40
 8007742:	2200      	movs	r2, #0
 8007744:	2100      	movs	r1, #0
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f002 f826 	bl	8009798 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2240      	movs	r2, #64	; 0x40
 8007750:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8007754:	2340      	movs	r3, #64	; 0x40
 8007756:	2200      	movs	r2, #0
 8007758:	2180      	movs	r1, #128	; 0x80
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f002 f81c 	bl	8009798 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2240      	movs	r2, #64	; 0x40
 8007764:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007774:	2b00      	cmp	r3, #0
 8007776:	d009      	beq.n	800778c <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	6852      	ldr	r2, [r2, #4]
 8007784:	b2d2      	uxtb	r2, r2
 8007786:	4611      	mov	r1, r2
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	4798      	blx	r3
 
  
  return USBD_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop

08007798 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	460b      	mov	r3, r1
 80077a2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	78fa      	ldrb	r2, [r7, #3]
 80077a8:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2204      	movs	r2, #4
 80077d0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop

080077e4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop

08007808 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007816:	2b03      	cmp	r3, #3
 8007818:	d10b      	bne.n	8007832 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d005      	beq.n	8007832 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8007846:	2300      	movs	r3, #0
 8007848:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	2b09      	cmp	r3, #9
 8007850:	d839      	bhi.n	80078c6 <USBD_StdDevReq+0x8a>
 8007852:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <USBD_StdDevReq+0x1c>)
 8007854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007858:	080078a9 	.word	0x080078a9
 800785c:	080078bd 	.word	0x080078bd
 8007860:	080078c7 	.word	0x080078c7
 8007864:	080078b3 	.word	0x080078b3
 8007868:	080078c7 	.word	0x080078c7
 800786c:	0800788b 	.word	0x0800788b
 8007870:	08007881 	.word	0x08007881
 8007874:	080078c7 	.word	0x080078c7
 8007878:	0800789f 	.word	0x0800789f
 800787c:	08007895 	.word	0x08007895
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f936 	bl	8007af4 <USBD_GetDescriptor>
    break;
 8007888:	e022      	b.n	80078d0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fa25 	bl	8007cdc <USBD_SetAddress>
    break;
 8007892:	e01d      	b.n	80078d0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa5e 	bl	8007d58 <USBD_SetConfig>
    break;
 800789c:	e018      	b.n	80078d0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fae1 	bl	8007e68 <USBD_GetConfig>
    break;
 80078a6:	e013      	b.n	80078d0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fb0e 	bl	8007ecc <USBD_GetStatus>
    break;
 80078b0:	e00e      	b.n	80078d0 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fb33 	bl	8007f20 <USBD_SetFeature>
    break;
 80078ba:	e009      	b.n	80078d0 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fb4a 	bl	8007f58 <USBD_ClrFeature>
    break;
 80078c4:	e004      	b.n	80078d0 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fbab 	bl	8008024 <USBD_CtlError>
    break;
 80078ce:	bf00      	nop
  }
  
  return ret;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop

080078dc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80078f0:	2b03      	cmp	r3, #3
 80078f2:	d11b      	bne.n	800792c <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	889b      	ldrh	r3, [r3, #4]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d811      	bhi.n	8007922 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	88db      	ldrh	r3, [r3, #6]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d110      	bne.n	8007936 <USBD_StdItfReq+0x5a>
 8007914:	7bfb      	ldrb	r3, [r7, #15]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10d      	bne.n	8007936 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fc4e 	bl	80081bc <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8007920:	e009      	b.n	8007936 <USBD_StdItfReq+0x5a>
         USBD_CtlSendStatus(pdev);
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fb7d 	bl	8008024 <USBD_CtlError>
    }
    break;
 800792a:	e004      	b.n	8007936 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fb78 	bl	8008024 <USBD_CtlError>
    break;
 8007934:	e000      	b.n	8007938 <USBD_StdItfReq+0x5c>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8007936:	bf00      	nop
    
  default:
     USBD_CtlError(pdev , req);
    break;
  }
  return USBD_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop

08007944 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	889b      	ldrh	r3, [r3, #4]
 8007956:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007960:	2b20      	cmp	r3, #32
 8007962:	d108      	bne.n	8007976 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	6839      	ldr	r1, [r7, #0]
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	4798      	blx	r3
    
    return USBD_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	e0ba      	b.n	8007aec <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	785b      	ldrb	r3, [r3, #1]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d039      	beq.n	80079f2 <USBD_StdEPReq+0xae>
 800797e:	2b03      	cmp	r3, #3
 8007980:	d002      	beq.n	8007988 <USBD_StdEPReq+0x44>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d06b      	beq.n	8007a5e <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8007986:	e0b0      	b.n	8007aea <USBD_StdEPReq+0x1a6>
  switch (req->bRequest) 
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800798e:	2b02      	cmp	r3, #2
 8007990:	d002      	beq.n	8007998 <USBD_StdEPReq+0x54>
 8007992:	2b03      	cmp	r3, #3
 8007994:	d00c      	beq.n	80079b0 <USBD_StdEPReq+0x6c>
 8007996:	e025      	b.n	80079e4 <USBD_StdEPReq+0xa0>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d027      	beq.n	80079ee <USBD_StdEPReq+0xaa>
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b80      	cmp	r3, #128	; 0x80
 80079a2:	d024      	beq.n	80079ee <USBD_StdEPReq+0xaa>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 ff23 	bl	80097f4 <USBD_LL_StallEP>
      }
      break;	
 80079ae:	e01e      	b.n	80079ee <USBD_StdEPReq+0xaa>
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	885b      	ldrh	r3, [r3, #2]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <USBD_StdEPReq+0x8a>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d007      	beq.n	80079ce <USBD_StdEPReq+0x8a>
 80079be:	7bbb      	ldrb	r3, [r7, #14]
 80079c0:	2b80      	cmp	r3, #128	; 0x80
 80079c2:	d004      	beq.n	80079ce <USBD_StdEPReq+0x8a>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 80079c4:	7bbb      	ldrb	r3, [r7, #14]
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 ff13 	bl	80097f4 <USBD_LL_StallEP>
          
        }
      }
      pdev->pClass->Setup (pdev, req);   
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fbed 	bl	80081bc <USBD_CtlSendStatus>
      
      break;
 80079e2:	e005      	b.n	80079f0 <USBD_StdEPReq+0xac>
      
    default:                         
      USBD_CtlError(pdev , req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fb1c 	bl	8008024 <USBD_CtlError>
      break;    
 80079ec:	e000      	b.n	80079f0 <USBD_StdEPReq+0xac>
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
 80079ee:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;    
    }
    break;
 80079f0:	e07b      	b.n	8007aea <USBD_StdEPReq+0x1a6>
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d002      	beq.n	8007a02 <USBD_StdEPReq+0xbe>
 80079fc:	2b03      	cmp	r3, #3
 80079fe:	d00c      	beq.n	8007a1a <USBD_StdEPReq+0xd6>
 8007a00:	e024      	b.n	8007a4c <USBD_StdEPReq+0x108>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8007a02:	7bbb      	ldrb	r3, [r7, #14]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d026      	beq.n	8007a56 <USBD_StdEPReq+0x112>
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	2b80      	cmp	r3, #128	; 0x80
 8007a0c:	d023      	beq.n	8007a56 <USBD_StdEPReq+0x112>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 feee 	bl	80097f4 <USBD_LL_StallEP>
      }
      break;	
 8007a18:	e01d      	b.n	8007a56 <USBD_StdEPReq+0x112>
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	885b      	ldrh	r3, [r3, #2]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d11b      	bne.n	8007a5a <USBD_StdEPReq+0x116>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00b      	beq.n	8007a44 <USBD_StdEPReq+0x100>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f001 fef3 	bl	800981c <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fbb9 	bl	80081bc <USBD_CtlSendStatus>
      }
      break;
 8007a4a:	e006      	b.n	8007a5a <USBD_StdEPReq+0x116>
      
    default:                         
      USBD_CtlError(pdev , req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fae8 	bl	8008024 <USBD_CtlError>
      break;    
 8007a54:	e002      	b.n	8007a5c <USBD_StdEPReq+0x118>
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
 8007a56:	bf00      	nop
 8007a58:	e047      	b.n	8007aea <USBD_StdEPReq+0x1a6>
          USBD_LL_ClearStallEP(pdev , ep_addr);
          pdev->pClass->Setup (pdev, req);
        }
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007a5a:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;    
    }
    break;
 8007a5c:	e045      	b.n	8007aea <USBD_StdEPReq+0x1a6>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d002      	beq.n	8007a6e <USBD_StdEPReq+0x12a>
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d00b      	beq.n	8007a84 <USBD_StdEPReq+0x140>
 8007a6c:	e036      	b.n	8007adc <USBD_StdEPReq+0x198>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d036      	beq.n	8007ae6 <USBD_StdEPReq+0x1a2>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 feb9 	bl	80097f4 <USBD_LL_StallEP>
      }
      break;	
 8007a82:	e030      	b.n	8007ae6 <USBD_StdEPReq+0x1a2>
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8007a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	da08      	bge.n	8007a9e <USBD_StdEPReq+0x15a>
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a92:	3301      	adds	r3, #1
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	4413      	add	r3, r2
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	e007      	b.n	8007aae <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8007aa4:	3310      	adds	r3, #16
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	4413      	add	r3, r2
 8007aac:	3304      	adds	r3, #4
 8007aae:	60bb      	str	r3, [r7, #8]
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 fec5 	bl	8009844 <USBD_LL_IsStallEP>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d003      	beq.n	8007ac8 <USBD_StdEPReq+0x184>
      {
        pep->status = 0x0001;     
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	601a      	str	r2, [r3, #0]
 8007ac6:	e002      	b.n	8007ace <USBD_StdEPReq+0x18a>
      }
      else
      {
        pep->status = 0x0000;  
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
      }
      
      USBD_CtlSendData (pdev,
                        (uint8_t *)&pep->status,
 8007ace:	68bb      	ldr	r3, [r7, #8]
      else
      {
        pep->status = 0x0000;  
      }
      
      USBD_CtlSendData (pdev,
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fb13 	bl	8008100 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 8007ada:	e005      	b.n	8007ae8 <USBD_StdEPReq+0x1a4>
      
    default:                         
      USBD_CtlError(pdev , req);
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 faa0 	bl	8008024 <USBD_CtlError>
      break;
 8007ae4:	e000      	b.n	8007ae8 <USBD_StdEPReq+0x1a4>
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
      {
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
 8007ae6:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;
    }
    break;
 8007ae8:	bf00      	nop
    
  default:
    break;
  }
  return ret;
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	885b      	ldrh	r3, [r3, #2]
 8007b02:	0a1b      	lsrs	r3, r3, #8
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	3b01      	subs	r3, #1
 8007b08:	2b06      	cmp	r3, #6
 8007b0a:	f200 80c9 	bhi.w	8007ca0 <USBD_GetDescriptor+0x1ac>
 8007b0e:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <USBD_GetDescriptor+0x20>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b31 	.word	0x08007b31
 8007b18:	08007b49 	.word	0x08007b49
 8007b1c:	08007b89 	.word	0x08007b89
 8007b20:	08007ca1 	.word	0x08007ca1
 8007b24:	08007ca1 	.word	0x08007ca1
 8007b28:	08007c4d 	.word	0x08007c4d
 8007b2c:	08007c73 	.word	0x08007c73
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	7c12      	ldrb	r2, [r2, #16]
 8007b3c:	f107 010a 	add.w	r1, r7, #10
 8007b40:	4610      	mov	r0, r2
 8007b42:	4798      	blx	r3
 8007b44:	60f8      	str	r0, [r7, #12]
    break;
 8007b46:	e0b0      	b.n	8007caa <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	7c1b      	ldrb	r3, [r3, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10d      	bne.n	8007b6c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b58:	f107 020a 	add.w	r2, r7, #10
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	4798      	blx	r3
 8007b60:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3301      	adds	r3, #1
 8007b66:	2202      	movs	r2, #2
 8007b68:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007b6a:	e09e      	b.n	8007caa <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	f107 020a 	add.w	r2, r7, #10
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3301      	adds	r3, #1
 8007b82:	2202      	movs	r2, #2
 8007b84:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007b86:	e090      	b.n	8007caa <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	885b      	ldrh	r3, [r3, #2]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b05      	cmp	r3, #5
 8007b90:	d856      	bhi.n	8007c40 <USBD_GetDescriptor+0x14c>
 8007b92:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <USBD_GetDescriptor+0xa4>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bb1 	.word	0x08007bb1
 8007b9c:	08007bc9 	.word	0x08007bc9
 8007ba0:	08007be1 	.word	0x08007be1
 8007ba4:	08007bf9 	.word	0x08007bf9
 8007ba8:	08007c11 	.word	0x08007c11
 8007bac:	08007c29 	.word	0x08007c29
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	7c12      	ldrb	r2, [r2, #16]
 8007bbc:	f107 010a 	add.w	r1, r7, #10
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	4798      	blx	r3
 8007bc4:	60f8      	str	r0, [r7, #12]
      break;
 8007bc6:	e040      	b.n	8007c4a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	7c12      	ldrb	r2, [r2, #16]
 8007bd4:	f107 010a 	add.w	r1, r7, #10
 8007bd8:	4610      	mov	r0, r2
 8007bda:	4798      	blx	r3
 8007bdc:	60f8      	str	r0, [r7, #12]
      break;
 8007bde:	e034      	b.n	8007c4a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	7c12      	ldrb	r2, [r2, #16]
 8007bec:	f107 010a 	add.w	r1, r7, #10
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	4798      	blx	r3
 8007bf4:	60f8      	str	r0, [r7, #12]
      break;
 8007bf6:	e028      	b.n	8007c4a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	7c12      	ldrb	r2, [r2, #16]
 8007c04:	f107 010a 	add.w	r1, r7, #10
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4798      	blx	r3
 8007c0c:	60f8      	str	r0, [r7, #12]
      break;
 8007c0e:	e01c      	b.n	8007c4a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	7c12      	ldrb	r2, [r2, #16]
 8007c1c:	f107 010a 	add.w	r1, r7, #10
 8007c20:	4610      	mov	r0, r2
 8007c22:	4798      	blx	r3
 8007c24:	60f8      	str	r0, [r7, #12]
      break;
 8007c26:	e010      	b.n	8007c4a <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	7c12      	ldrb	r2, [r2, #16]
 8007c34:	f107 010a 	add.w	r1, r7, #10
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
 8007c3c:	60f8      	str	r0, [r7, #12]
      break;
 8007c3e:	e004      	b.n	8007c4a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f9ee 	bl	8008024 <USBD_CtlError>
      return;
 8007c48:	e044      	b.n	8007cd4 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8007c4a:	e02e      	b.n	8007caa <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	7c1b      	ldrb	r3, [r3, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5c:	f107 020a 	add.w	r2, r7, #10
 8007c60:	4610      	mov	r0, r2
 8007c62:	4798      	blx	r3
 8007c64:	60f8      	str	r0, [r7, #12]
      break;
 8007c66:	e020      	b.n	8007caa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f9da 	bl	8008024 <USBD_CtlError>
      return;
 8007c70:	e030      	b.n	8007cd4 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	7c1b      	ldrb	r3, [r3, #16]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10d      	bne.n	8007c96 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c82:	f107 020a 	add.w	r2, r7, #10
 8007c86:	4610      	mov	r0, r2
 8007c88:	4798      	blx	r3
 8007c8a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	2207      	movs	r2, #7
 8007c92:	701a      	strb	r2, [r3, #0]
      break; 
 8007c94:	e009      	b.n	8007caa <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f9c3 	bl	8008024 <USBD_CtlError>
      return;
 8007c9e:	e019      	b.n	8007cd4 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f9be 	bl	8008024 <USBD_CtlError>
    return;
 8007ca8:	e014      	b.n	8007cd4 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8007caa:	897b      	ldrh	r3, [r7, #10]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d011      	beq.n	8007cd4 <USBD_GetDescriptor+0x1e0>
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	88db      	ldrh	r3, [r3, #6]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00d      	beq.n	8007cd4 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	88da      	ldrh	r2, [r3, #6]
 8007cbc:	897b      	ldrh	r3, [r7, #10]
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	bf28      	it	cs
 8007cc2:	4613      	movcs	r3, r2
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8007cc8:	897b      	ldrh	r3, [r7, #10]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	68f9      	ldr	r1, [r7, #12]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fa16 	bl	8008100 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop

08007cdc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	889b      	ldrh	r3, [r3, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d12c      	bne.n	8007d48 <USBD_SetAddress+0x6c>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	88db      	ldrh	r3, [r3, #6]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d128      	bne.n	8007d48 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	885b      	ldrh	r3, [r3, #2]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d00:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007d08:	2b03      	cmp	r3, #3
 8007d0a:	d104      	bne.n	8007d16 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f988 	bl	8008024 <USBD_CtlError>
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007d14:	e01c      	b.n	8007d50 <USBD_SetAddress+0x74>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	7bfa      	ldrb	r2, [r7, #15]
 8007d1a:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f001 fdba 	bl	800989c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fa47 	bl	80081bc <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d004      	beq.n	8007d3e <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007d3c:	e008      	b.n	8007d50 <USBD_SetAddress+0x74>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8007d46:	e003      	b.n	8007d50 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f96a 	bl	8008024 <USBD_CtlError>
  } 
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	885b      	ldrh	r3, [r3, #2]
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	4b3e      	ldr	r3, [pc, #248]	; (8007e64 <USBD_SetConfig+0x10c>)
 8007d6a:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8007d6c:	4b3d      	ldr	r3, [pc, #244]	; (8007e64 <USBD_SetConfig+0x10c>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d904      	bls.n	8007d7e <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f954 	bl	8008024 <USBD_CtlError>
 8007d7c:	e06f      	b.n	8007e5e <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d002      	beq.n	8007d8e <USBD_SetConfig+0x36>
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d023      	beq.n	8007dd4 <USBD_SetConfig+0x7c>
 8007d8c:	e062      	b.n	8007e54 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 8007d8e:	4b35      	ldr	r3, [pc, #212]	; (8007e64 <USBD_SetConfig+0x10c>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d01a      	beq.n	8007dcc <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8007d96:	4b33      	ldr	r3, [pc, #204]	; (8007e64 <USBD_SetConfig+0x10c>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2203      	movs	r2, #3
 8007da4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007da8:	4b2e      	ldr	r3, [pc, #184]	; (8007e64 <USBD_SetConfig+0x10c>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7ff fb58 	bl	8007464 <USBD_SetClassConfig>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d104      	bne.n	8007dc4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f931 	bl	8008024 <USBD_CtlError>
          return;
 8007dc2:	e04c      	b.n	8007e5e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f9f9 	bl	80081bc <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8007dca:	e048      	b.n	8007e5e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f9f5 	bl	80081bc <USBD_CtlSendStatus>
      }
      break;
 8007dd2:	e044      	b.n	8007e5e <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8007dd4:	4b23      	ldr	r3, [pc, #140]	; (8007e64 <USBD_SetConfig+0x10c>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d112      	bne.n	8007e02 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8007de4:	4b1f      	ldr	r3, [pc, #124]	; (8007e64 <USBD_SetConfig+0x10c>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8007dee:	4b1d      	ldr	r3, [pc, #116]	; (8007e64 <USBD_SetConfig+0x10c>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	4619      	mov	r1, r3
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7ff fb55 	bl	80074a4 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f9de 	bl	80081bc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007e00:	e02d      	b.n	8007e5e <USBD_SetConfig+0x106>
        pdev->dev_config = cfgidx;          
        USBD_ClrClassConfig(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 8007e02:	4b18      	ldr	r3, [pc, #96]	; (8007e64 <USBD_SetConfig+0x10c>)
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d01d      	beq.n	8007e4c <USBD_SetConfig+0xf4>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7ff fb43 	bl	80074a4 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 8007e1e:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <USBD_SetConfig+0x10c>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	461a      	mov	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8007e28:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <USBD_SetConfig+0x10c>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff fb18 	bl	8007464 <USBD_SetClassConfig>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d104      	bne.n	8007e44 <USBD_SetConfig+0xec>
        {
          USBD_CtlError(pdev , req);  
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f8f1 	bl	8008024 <USBD_CtlError>
          return;
 8007e42:	e00c      	b.n	8007e5e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f9b9 	bl	80081bc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007e4a:	e008      	b.n	8007e5e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f9b5 	bl	80081bc <USBD_CtlSendStatus>
      }
      break;
 8007e52:	e004      	b.n	8007e5e <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f8e4 	bl	8008024 <USBD_CtlError>
      break;
 8007e5c:	bf00      	nop
    }
  }
}
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	200006bd 	.word	0x200006bd

08007e68 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	88db      	ldrh	r3, [r3, #6]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d004      	beq.n	8007e84 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f8d1 	bl	8008024 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8007e82:	e01f      	b.n	8007ec4 <USBD_GetConfig+0x5c>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d002      	beq.n	8007e94 <USBD_GetConfig+0x2c>
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d00b      	beq.n	8007eaa <USBD_GetConfig+0x42>
 8007e92:	e012      	b.n	8007eba <USBD_GetConfig+0x52>
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&pdev->dev_default_config,
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3308      	adds	r3, #8
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
      USBD_CtlSendData (pdev, 
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f92c 	bl	8008100 <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_default_config,
                        1);
      break;
 8007ea8:	e00c      	b.n	8007ec4 <USBD_GetConfig+0x5c>
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&pdev->dev_config,
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3304      	adds	r3, #4
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8007eae:	2201      	movs	r2, #1
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f924 	bl	8008100 <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_config,
                        1);
      break;
 8007eb8:	e004      	b.n	8007ec4 <USBD_GetConfig+0x5c>
      
    default:
       USBD_CtlError(pdev , req);
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f8b1 	bl	8008024 <USBD_CtlError>
      break;
 8007ec2:	bf00      	nop
    }
  }
}
 8007ec4:	bf00      	nop
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007edc:	3b02      	subs	r3, #2
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d815      	bhi.n	8007f0e <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	f043 0202 	orr.w	r2, r3, #2
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	330c      	adds	r3, #12
    if (pdev->dev_remote_wakeup) 
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
    }
    
    USBD_CtlSendData (pdev, 
 8007f02:	2202      	movs	r2, #2
 8007f04:	4619      	mov	r1, r3
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f8fa 	bl	8008100 <USBD_CtlSendData>
                      (uint8_t *)& pdev->dev_config_status,
                      2);
    break;
 8007f0c:	e004      	b.n	8007f18 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f887 	bl	8008024 <USBD_CtlError>
    break;
 8007f16:	bf00      	nop
  }
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	885b      	ldrh	r3, [r3, #2]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d10d      	bne.n	8007f4e <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f937 	bl	80081bc <USBD_CtlSendStatus>
  }

}
 8007f4e:	bf00      	nop
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop

08007f58 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8007f68:	3b02      	subs	r3, #2
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d812      	bhi.n	8007f94 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	885b      	ldrh	r3, [r3, #2]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d113      	bne.n	8007f9e <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f915 	bl	80081bc <USBD_CtlSendStatus>
    }
    break;
 8007f92:	e004      	b.n	8007f9e <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f844 	bl	8008024 <USBD_CtlError>
    break;
 8007f9c:	e000      	b.n	8007fa0 <USBD_ClrFeature+0x48>
    {
      pdev->dev_remote_wakeup = 0; 
      pdev->pClass->Setup (pdev, req);   
      USBD_CtlSendStatus(pdev);
    }
    break;
 8007f9e:	bf00      	nop
    
  default :
     USBD_CtlError(pdev , req);
    break;
  }
}
 8007fa0:	bf00      	nop
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781a      	ldrb	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	785a      	ldrb	r2, [r3, #1]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	3302      	adds	r3, #2
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	3303      	adds	r3, #3
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	021b      	lsls	r3, r3, #8
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	4413      	add	r3, r2
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	3305      	adds	r3, #5
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	021b      	lsls	r3, r3, #8
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	4413      	add	r3, r2
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	3306      	adds	r3, #6
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	b29a      	uxth	r2, r3
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	3307      	adds	r3, #7
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	b29b      	uxth	r3, r3
 800800a:	021b      	lsls	r3, r3, #8
 800800c:	b29b      	uxth	r3, r3
 800800e:	4413      	add	r3, r2
 8008010:	b29a      	uxth	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	80da      	strh	r2, [r3, #6]

}
 8008016:	bf00      	nop
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop

08008024 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800802e:	2180      	movs	r1, #128	; 0x80
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 fbdf 	bl	80097f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8008036:	2100      	movs	r1, #0
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f001 fbdb 	bl	80097f4 <USBD_LL_StallEP>
}
 800803e:	bf00      	nop
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop

08008048 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d033      	beq.n	80080c6 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 f836 	bl	80080d0 <USBD_GetLen>
 8008064:	4603      	mov	r3, r0
 8008066:	3301      	adds	r3, #1
 8008068:	b29b      	uxth	r3, r3
 800806a:	005b      	lsls	r3, r3, #1
 800806c:	b29a      	uxth	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	75fa      	strb	r2, [r7, #23]
 8008078:	461a      	mov	r2, r3
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	4413      	add	r3, r2
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	8812      	ldrh	r2, [r2, #0]
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	75fa      	strb	r2, [r7, #23]
 800808c:	461a      	mov	r2, r3
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	4413      	add	r3, r2
 8008092:	2203      	movs	r2, #3
 8008094:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8008096:	e012      	b.n	80080be <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8008098:	7dfb      	ldrb	r3, [r7, #23]
 800809a:	1c5a      	adds	r2, r3, #1
 800809c:	75fa      	strb	r2, [r7, #23]
 800809e:	461a      	mov	r2, r3
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	441a      	add	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	1c59      	adds	r1, r3, #1
 80080a8:	60f9      	str	r1, [r7, #12]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
 80080b0:	1c5a      	adds	r2, r3, #1
 80080b2:	75fa      	strb	r2, [r7, #23]
 80080b4:	461a      	mov	r2, r3
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	4413      	add	r3, r2
 80080ba:	2200      	movs	r2, #0
 80080bc:	701a      	strb	r2, [r3, #0]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != '\0') 
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1e8      	bne.n	8008098 <USBD_GetString+0x50>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 80080c6:	bf00      	nop
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop

080080d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 80080d8:	2300      	movs	r3, #0
 80080da:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 80080dc:	e005      	b.n	80080ea <USBD_GetLen+0x1a>
    {
        len++;
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	3301      	adds	r3, #1
 80080e2:	73fb      	strb	r3, [r7, #15]
        buf++;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	3301      	adds	r3, #1
 80080e8:	607b      	str	r3, [r7, #4]
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1f5      	bne.n	80080de <USBD_GetLen+0xe>
    {
        len++;
        buf++;
    }

    return len;
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	4613      	mov	r3, r2
 800810c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2202      	movs	r2, #2
 8008112:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8008116:	88fa      	ldrh	r2, [r7, #6]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800811c:	88fa      	ldrh	r2, [r7, #6]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8008122:	88fb      	ldrh	r3, [r7, #6]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	2100      	movs	r1, #0
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f001 fbcb 	bl	80098c4 <USBD_LL_Transmit>
  
  return USBD_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	4613      	mov	r3, r2
 8008144:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8008146:	88fb      	ldrh	r3, [r7, #6]
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	2100      	movs	r1, #0
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f001 fbb9 	bl	80098c4 <USBD_LL_Transmit>
  
  return USBD_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4613      	mov	r3, r2
 8008168:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2203      	movs	r2, #3
 800816e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8008172:	88fa      	ldrh	r2, [r7, #6]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 800817a:	88fa      	ldrh	r2, [r7, #6]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8008182:	88fb      	ldrh	r3, [r7, #6]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	2100      	movs	r1, #0
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f001 fbb3 	bl	80098f4 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80081a6:	88fb      	ldrh	r3, [r7, #6]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	2100      	movs	r1, #0
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f001 fba1 	bl	80098f4 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2204      	movs	r2, #4
 80081c8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80081cc:	2300      	movs	r3, #0
 80081ce:	2200      	movs	r2, #0
 80081d0:	2100      	movs	r1, #0
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f001 fb76 	bl	80098c4 <USBD_LL_Transmit>
  
  return USBD_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop

080081e4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2205      	movs	r2, #5
 80081f0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80081f4:	2300      	movs	r3, #0
 80081f6:	2200      	movs	r2, #0
 80081f8:	2100      	movs	r1, #0
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f001 fb7a 	bl	80098f4 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop

0800820c <writeFlash>:
uint8_t iDFU = 0;

uint32_t startAddress = 0x8010000;//starting from 64KB

void writeFlash(void)
{
 800820c:	b598      	push	{r3, r4, r7, lr}
 800820e:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();//unlock flash writing
 8008210:	f7fa f9a2 	bl	8002558 <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, startAddress, iCalibration);
 8008214:	4b07      	ldr	r3, [pc, #28]	; (8008234 <writeFlash+0x28>)
 8008216:	6819      	ldr	r1, [r3, #0]
 8008218:	4b07      	ldr	r3, [pc, #28]	; (8008238 <writeFlash+0x2c>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	b2db      	uxtb	r3, r3
 800821e:	f04f 0400 	mov.w	r4, #0
 8008222:	461a      	mov	r2, r3
 8008224:	4623      	mov	r3, r4
 8008226:	2001      	movs	r0, #1
 8008228:	f7fa f924 	bl	8002474 <HAL_FLASH_Program>
    HAL_FLASH_Lock();//lock the flash for writing
 800822c:	f7fa f9b0 	bl	8002590 <HAL_FLASH_Lock>
}
 8008230:	bf00      	nop
 8008232:	bd98      	pop	{r3, r4, r7, pc}
 8008234:	20000114 	.word	0x20000114
 8008238:	20000113 	.word	0x20000113

0800823c <readFlash>:

void readFlash(void)
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
	iCalibration = *(uint16_t *)(startAddress);
 8008240:	4b05      	ldr	r3, [pc, #20]	; (8008258 <readFlash+0x1c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	b2da      	uxtb	r2, r3
 8008248:	4b04      	ldr	r3, [pc, #16]	; (800825c <readFlash+0x20>)
 800824a:	701a      	strb	r2, [r3, #0]
}
 800824c:	bf00      	nop
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	20000114 	.word	0x20000114
 800825c:	20000113 	.word	0x20000113

08008260 <Move_Array>:

void Move_Array(int* arr, int n)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
	for(int i = 1; i < n; i++)
 800826a:	2301      	movs	r3, #1
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	e00f      	b.n	8008290 <Move_Array+0x30>
	{
		arr[i-1] = arr[i];
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008276:	3b01      	subs	r3, #1
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	4413      	add	r3, r2
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	0092      	lsls	r2, r2, #2
 8008282:	6879      	ldr	r1, [r7, #4]
 8008284:	440a      	add	r2, r1
 8008286:	6812      	ldr	r2, [r2, #0]
 8008288:	601a      	str	r2, [r3, #0]
	iCalibration = *(uint16_t *)(startAddress);
}

void Move_Array(int* arr, int n)
{
	for(int i = 1; i < n; i++)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	3301      	adds	r3, #1
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	429a      	cmp	r2, r3
 8008296:	dbeb      	blt.n	8008270 <Move_Array+0x10>
	{
		arr[i-1] = arr[i];
	}
}
 8008298:	bf00      	nop
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <median>:
    for(i=0; i<m; i++)
        sum+=a[i];
    return((float)sum/m);
}

float median(int n, int* src) {
 80082a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a8:	b088      	sub	sp, #32
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	6039      	str	r1, [r7, #0]
 80082b0:	466a      	mov	r2, sp
 80082b2:	4690      	mov	r8, r2
    float temp;
    int x[n];
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	1e42      	subs	r2, r0, #1
 80082b8:	617a      	str	r2, [r7, #20]
 80082ba:	4602      	mov	r2, r0
 80082bc:	4611      	mov	r1, r2
 80082be:	f04f 0200 	mov.w	r2, #0
 80082c2:	0156      	lsls	r6, r2, #5
 80082c4:	ea46 66d1 	orr.w	r6, r6, r1, lsr #27
 80082c8:	014d      	lsls	r5, r1, #5
 80082ca:	4602      	mov	r2, r0
 80082cc:	4611      	mov	r1, r2
 80082ce:	f04f 0200 	mov.w	r2, #0
 80082d2:	0154      	lsls	r4, r2, #5
 80082d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80082d8:	014b      	lsls	r3, r1, #5
 80082da:	4603      	mov	r3, r0
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	3303      	adds	r3, #3
 80082e0:	3307      	adds	r3, #7
 80082e2:	08db      	lsrs	r3, r3, #3
 80082e4:	00db      	lsls	r3, r3, #3
 80082e6:	ebad 0d03 	sub.w	sp, sp, r3
 80082ea:	466b      	mov	r3, sp
 80082ec:	3303      	adds	r3, #3
 80082ee:	089b      	lsrs	r3, r3, #2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	613b      	str	r3, [r7, #16]
    memcpy(x, src, sizeof x);
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	4602      	mov	r2, r0
 80082f8:	0092      	lsls	r2, r2, #2
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 ff17 	bl	800a130 <memcpy>
    int i, j;
    // the following two loops sort the array x in ascending order
    for(i=0; i<n-1; i++) {
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]
 8008306:	e033      	b.n	8008370 <median+0xcc>
        for(j=i+1; j<n; j++) {
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	3301      	adds	r3, #1
 800830c:	61bb      	str	r3, [r7, #24]
 800830e:	e028      	b.n	8008362 <median+0xbe>
            if(x[j] < x[i]) {
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	69f9      	ldr	r1, [r7, #28]
 800831c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008320:	429a      	cmp	r2, r3
 8008322:	da1b      	bge.n	800835c <median+0xb8>
                // swap elements
                temp = x[i];
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	69fa      	ldr	r2, [r7, #28]
 8008328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800832c:	ee07 3a90 	vmov	s15, r3
 8008330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008334:	edc7 7a03 	vstr	s15, [r7, #12]
                x[i] = x[j];
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	69fa      	ldr	r2, [r7, #28]
 8008344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                x[j] = temp;
 8008348:	edd7 7a03 	vldr	s15, [r7, #12]
 800834c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008350:	ee17 1a90 	vmov	r1, s15
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	69ba      	ldr	r2, [r7, #24]
 8008358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    int x[n];
    memcpy(x, src, sizeof x);
    int i, j;
    // the following two loops sort the array x in ascending order
    for(i=0; i<n-1; i++) {
        for(j=i+1; j<n; j++) {
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	3301      	adds	r3, #1
 8008360:	61bb      	str	r3, [r7, #24]
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	429a      	cmp	r2, r3
 8008368:	dbd2      	blt.n	8008310 <median+0x6c>
    float temp;
    int x[n];
    memcpy(x, src, sizeof x);
    int i, j;
    // the following two loops sort the array x in ascending order
    for(i=0; i<n-1; i++) {
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	3301      	adds	r3, #1
 800836e:	61fb      	str	r3, [r7, #28]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	1e5a      	subs	r2, r3, #1
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	429a      	cmp	r2, r3
 8008378:	dcc6      	bgt.n	8008308 <median+0x64>
                x[j] = temp;
            }
        }
    }

    if(n%2==0) {
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b00      	cmp	r3, #0
 8008382:	d122      	bne.n	80083ca <median+0x126>
        // if there is an even number of elements, return mean of the two elements in the middle
        return((x[n/2] + x[n/2 - 1]) / 2.0);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	0fda      	lsrs	r2, r3, #31
 8008388:	4413      	add	r3, r2
 800838a:	105b      	asrs	r3, r3, #1
 800838c:	461a      	mov	r2, r3
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	0fd9      	lsrs	r1, r3, #31
 8008398:	440b      	add	r3, r1
 800839a:	105b      	asrs	r3, r3, #1
 800839c:	1e59      	subs	r1, r3, #1
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80083a4:	4413      	add	r3, r2
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7f8 f8bc 	bl	8000524 <__aeabi_i2d>
 80083ac:	f04f 0200 	mov.w	r2, #0
 80083b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083b4:	f7f8 fa46 	bl	8000844 <__aeabi_ddiv>
 80083b8:	4603      	mov	r3, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	4618      	mov	r0, r3
 80083be:	4621      	mov	r1, r4
 80083c0:	f7f8 fbee 	bl	8000ba0 <__aeabi_d2f>
 80083c4:	ee07 0a90 	vmov	s15, r0
 80083c8:	e00b      	b.n	80083e2 <median+0x13e>
    } else {
        // else return the element in the middle
        return x[n/2];
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	0fda      	lsrs	r2, r3, #31
 80083ce:	4413      	add	r3, r2
 80083d0:	105b      	asrs	r3, r3, #1
 80083d2:	461a      	mov	r2, r3
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083da:	ee07 3a90 	vmov	s15, r3
 80083de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083e2:	46c5      	mov	sp, r8
    }
}
 80083e4:	eeb0 0a67 	vmov.f32	s0, s15
 80083e8:	3720      	adds	r7, #32
 80083ea:	46bd      	mov	sp, r7
 80083ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080083f0 <HX711_Process_Values>:

void HX711_Process_Values()
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	af00      	add	r7, sp, #0

	if(hx1.readingA < 0)
 80083f4:	4b44      	ldr	r3, [pc, #272]	; (8008508 <HX711_Process_Values+0x118>)
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	da02      	bge.n	8008402 <HX711_Process_Values+0x12>
	{
		hx1.readingA = 0;
 80083fc:	4b42      	ldr	r3, [pc, #264]	; (8008508 <HX711_Process_Values+0x118>)
 80083fe:	2200      	movs	r2, #0
 8008400:	615a      	str	r2, [r3, #20]
	}

	if(hx1.readingB < 0)
 8008402:	4b41      	ldr	r3, [pc, #260]	; (8008508 <HX711_Process_Values+0x118>)
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	2b00      	cmp	r3, #0
 8008408:	da02      	bge.n	8008410 <HX711_Process_Values+0x20>
	{
		hx1.readingB = 0;
 800840a:	4b3f      	ldr	r3, [pc, #252]	; (8008508 <HX711_Process_Values+0x118>)
 800840c:	2200      	movs	r2, #0
 800840e:	619a      	str	r2, [r3, #24]
	}

	if(hx2.readingA < 0)
 8008410:	4b3e      	ldr	r3, [pc, #248]	; (800850c <HX711_Process_Values+0x11c>)
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	2b00      	cmp	r3, #0
 8008416:	da02      	bge.n	800841e <HX711_Process_Values+0x2e>
	{
		hx2.readingA = 0;
 8008418:	4b3c      	ldr	r3, [pc, #240]	; (800850c <HX711_Process_Values+0x11c>)
 800841a:	2200      	movs	r2, #0
 800841c:	615a      	str	r2, [r3, #20]
	}

	if(hx2.readingB < 0)
 800841e:	4b3b      	ldr	r3, [pc, #236]	; (800850c <HX711_Process_Values+0x11c>)
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	2b00      	cmp	r3, #0
 8008424:	da02      	bge.n	800842c <HX711_Process_Values+0x3c>
	{
		hx2.readingB = 0;
 8008426:	4b39      	ldr	r3, [pc, #228]	; (800850c <HX711_Process_Values+0x11c>)
 8008428:	2200      	movs	r2, #0
 800842a:	619a      	str	r2, [r3, #24]
	}

	Move_Array(hx1.historyA, FLT);
 800842c:	2106      	movs	r1, #6
 800842e:	4838      	ldr	r0, [pc, #224]	; (8008510 <HX711_Process_Values+0x120>)
 8008430:	f7ff ff16 	bl	8008260 <Move_Array>
	Move_Array(hx1.historyB, FLT);
 8008434:	2106      	movs	r1, #6
 8008436:	4837      	ldr	r0, [pc, #220]	; (8008514 <HX711_Process_Values+0x124>)
 8008438:	f7ff ff12 	bl	8008260 <Move_Array>
	Move_Array(hx2.historyA, FLT);
 800843c:	2106      	movs	r1, #6
 800843e:	4836      	ldr	r0, [pc, #216]	; (8008518 <HX711_Process_Values+0x128>)
 8008440:	f7ff ff0e 	bl	8008260 <Move_Array>
	Move_Array(hx2.historyB, FLT);
 8008444:	2106      	movs	r1, #6
 8008446:	4835      	ldr	r0, [pc, #212]	; (800851c <HX711_Process_Values+0x12c>)
 8008448:	f7ff ff0a 	bl	8008260 <Move_Array>
	hx1.historyA[FLT-1] = hx1.readingA;
 800844c:	4b2e      	ldr	r3, [pc, #184]	; (8008508 <HX711_Process_Values+0x118>)
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	4a2d      	ldr	r2, [pc, #180]	; (8008508 <HX711_Process_Values+0x118>)
 8008452:	6313      	str	r3, [r2, #48]	; 0x30
	hx1.historyB[FLT-1] = hx1.readingB;
 8008454:	4b2c      	ldr	r3, [pc, #176]	; (8008508 <HX711_Process_Values+0x118>)
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	4a2b      	ldr	r2, [pc, #172]	; (8008508 <HX711_Process_Values+0x118>)
 800845a:	6493      	str	r3, [r2, #72]	; 0x48
	hx2.historyA[FLT-1] = hx2.readingA;
 800845c:	4b2b      	ldr	r3, [pc, #172]	; (800850c <HX711_Process_Values+0x11c>)
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	4a2a      	ldr	r2, [pc, #168]	; (800850c <HX711_Process_Values+0x11c>)
 8008462:	6313      	str	r3, [r2, #48]	; 0x30
	hx2.historyB[FLT-1] = hx2.readingB;
 8008464:	4b29      	ldr	r3, [pc, #164]	; (800850c <HX711_Process_Values+0x11c>)
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	4a28      	ldr	r2, [pc, #160]	; (800850c <HX711_Process_Values+0x11c>)
 800846a:	6493      	str	r3, [r2, #72]	; 0x48

	hx1.valueA = median(FLT, hx1.historyA);
 800846c:	4928      	ldr	r1, [pc, #160]	; (8008510 <HX711_Process_Values+0x120>)
 800846e:	2006      	movs	r0, #6
 8008470:	f7ff ff18 	bl	80082a4 <median>
 8008474:	eef0 7a40 	vmov.f32	s15, s0
 8008478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800847c:	ee17 2a90 	vmov	r2, s15
 8008480:	4b21      	ldr	r3, [pc, #132]	; (8008508 <HX711_Process_Values+0x118>)
 8008482:	64da      	str	r2, [r3, #76]	; 0x4c
	hx1.valueB = median(FLT, hx1.historyB);
 8008484:	4923      	ldr	r1, [pc, #140]	; (8008514 <HX711_Process_Values+0x124>)
 8008486:	2006      	movs	r0, #6
 8008488:	f7ff ff0c 	bl	80082a4 <median>
 800848c:	eef0 7a40 	vmov.f32	s15, s0
 8008490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008494:	ee17 2a90 	vmov	r2, s15
 8008498:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <HX711_Process_Values+0x118>)
 800849a:	651a      	str	r2, [r3, #80]	; 0x50
	hx2.valueA = median(FLT, hx2.historyA);
 800849c:	491e      	ldr	r1, [pc, #120]	; (8008518 <HX711_Process_Values+0x128>)
 800849e:	2006      	movs	r0, #6
 80084a0:	f7ff ff00 	bl	80082a4 <median>
 80084a4:	eef0 7a40 	vmov.f32	s15, s0
 80084a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084ac:	ee17 2a90 	vmov	r2, s15
 80084b0:	4b16      	ldr	r3, [pc, #88]	; (800850c <HX711_Process_Values+0x11c>)
 80084b2:	64da      	str	r2, [r3, #76]	; 0x4c
	hx2.valueB = median(FLT, hx2.historyB);
 80084b4:	4919      	ldr	r1, [pc, #100]	; (800851c <HX711_Process_Values+0x12c>)
 80084b6:	2006      	movs	r0, #6
 80084b8:	f7ff fef4 	bl	80082a4 <median>
 80084bc:	eef0 7a40 	vmov.f32	s15, s0
 80084c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084c4:	ee17 2a90 	vmov	r2, s15
 80084c8:	4b10      	ldr	r3, [pc, #64]	; (800850c <HX711_Process_Values+0x11c>)
 80084ca:	651a      	str	r2, [r3, #80]	; 0x50

	if(hx1.valueA < 10 || hx2.valueA < 10 || hx1.valueB < 10 || hx2.valueB < 10)
 80084cc:	4b0e      	ldr	r3, [pc, #56]	; (8008508 <HX711_Process_Values+0x118>)
 80084ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d0:	2b09      	cmp	r3, #9
 80084d2:	dd0b      	ble.n	80084ec <HX711_Process_Values+0xfc>
 80084d4:	4b0d      	ldr	r3, [pc, #52]	; (800850c <HX711_Process_Values+0x11c>)
 80084d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d8:	2b09      	cmp	r3, #9
 80084da:	dd07      	ble.n	80084ec <HX711_Process_Values+0xfc>
 80084dc:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <HX711_Process_Values+0x118>)
 80084de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e0:	2b09      	cmp	r3, #9
 80084e2:	dd03      	ble.n	80084ec <HX711_Process_Values+0xfc>
 80084e4:	4b09      	ldr	r3, [pc, #36]	; (800850c <HX711_Process_Values+0x11c>)
 80084e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084e8:	2b09      	cmp	r3, #9
 80084ea:	dc0b      	bgt.n	8008504 <HX711_Process_Values+0x114>
	{
		hx1.valueA = 0;
 80084ec:	4b06      	ldr	r3, [pc, #24]	; (8008508 <HX711_Process_Values+0x118>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	64da      	str	r2, [r3, #76]	; 0x4c
		hx2.valueA = 0;
 80084f2:	4b06      	ldr	r3, [pc, #24]	; (800850c <HX711_Process_Values+0x11c>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	64da      	str	r2, [r3, #76]	; 0x4c
		hx1.valueB = 0;
 80084f8:	4b03      	ldr	r3, [pc, #12]	; (8008508 <HX711_Process_Values+0x118>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	651a      	str	r2, [r3, #80]	; 0x50
		hx2.valueB = 0;
 80084fe:	4b03      	ldr	r3, [pc, #12]	; (800850c <HX711_Process_Values+0x11c>)
 8008500:	2200      	movs	r2, #0
 8008502:	651a      	str	r2, [r3, #80]	; 0x50
	}
}
 8008504:	bf00      	nop
 8008506:	bd80      	pop	{r7, pc}
 8008508:	200009c0 	.word	0x200009c0
 800850c:	20000968 	.word	0x20000968
 8008510:	200009dc 	.word	0x200009dc
 8008514:	200009f4 	.word	0x200009f4
 8008518:	20000984 	.word	0x20000984
 800851c:	2000099c 	.word	0x2000099c

08008520 <Commands_BufferHandle>:

void Commands_BufferHandle(uint8_t* Buf, uint32_t *Len)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
	if (status == 0 && Buf[0] == '|')
 800852a:	4b23      	ldr	r3, [pc, #140]	; (80085b8 <Commands_BufferHandle+0x98>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d109      	bne.n	8008546 <Commands_BufferHandle+0x26>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b7c      	cmp	r3, #124	; 0x7c
 8008538:	d105      	bne.n	8008546 <Commands_BufferHandle+0x26>
	{
	  status = 1;
 800853a:	4b1f      	ldr	r3, [pc, #124]	; (80085b8 <Commands_BufferHandle+0x98>)
 800853c:	2201      	movs	r2, #1
 800853e:	701a      	strb	r2, [r3, #0]
	  length = 0;
 8008540:	4b1e      	ldr	r3, [pc, #120]	; (80085bc <Commands_BufferHandle+0x9c>)
 8008542:	2200      	movs	r2, #0
 8008544:	801a      	strh	r2, [r3, #0]
	}

	if (status == 1)
 8008546:	4b1c      	ldr	r3, [pc, #112]	; (80085b8 <Commands_BufferHandle+0x98>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d119      	bne.n	8008582 <Commands_BufferHandle+0x62>
	{
	  for (int i = 0; i < *Len; i++)
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]
 8008552:	e011      	b.n	8008578 <Commands_BufferHandle+0x58>
	  {
		  command[length] = Buf[i];
 8008554:	4b19      	ldr	r3, [pc, #100]	; (80085bc <Commands_BufferHandle+0x9c>)
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	4619      	mov	r1, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	4413      	add	r3, r2
 8008560:	781a      	ldrb	r2, [r3, #0]
 8008562:	4b17      	ldr	r3, [pc, #92]	; (80085c0 <Commands_BufferHandle+0xa0>)
 8008564:	545a      	strb	r2, [r3, r1]
		  length++;
 8008566:	4b15      	ldr	r3, [pc, #84]	; (80085bc <Commands_BufferHandle+0x9c>)
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	3301      	adds	r3, #1
 800856c:	b29a      	uxth	r2, r3
 800856e:	4b13      	ldr	r3, [pc, #76]	; (80085bc <Commands_BufferHandle+0x9c>)
 8008570:	801a      	strh	r2, [r3, #0]
	  length = 0;
	}

	if (status == 1)
	{
	  for (int i = 0; i < *Len; i++)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3301      	adds	r3, #1
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	429a      	cmp	r2, r3
 8008580:	d8e8      	bhi.n	8008554 <Commands_BufferHandle+0x34>
		  command[length] = Buf[i];
		  length++;
	  }
	}

	if (status == 1 && Buf[*Len-1] == '\n')
 8008582:	4b0d      	ldr	r3, [pc, #52]	; (80085b8 <Commands_BufferHandle+0x98>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d111      	bne.n	80085ae <Commands_BufferHandle+0x8e>
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3b01      	subs	r3, #1
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	4413      	add	r3, r2
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	2b0a      	cmp	r3, #10
 8008598:	d109      	bne.n	80085ae <Commands_BufferHandle+0x8e>
	{
		status = 0;
 800859a:	4b07      	ldr	r3, [pc, #28]	; (80085b8 <Commands_BufferHandle+0x98>)
 800859c:	2200      	movs	r2, #0
 800859e:	701a      	strb	r2, [r3, #0]
		Commands_Parse(command, length);
 80085a0:	4b06      	ldr	r3, [pc, #24]	; (80085bc <Commands_BufferHandle+0x9c>)
 80085a2:	881b      	ldrh	r3, [r3, #0]
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	4619      	mov	r1, r3
 80085a8:	4805      	ldr	r0, [pc, #20]	; (80085c0 <Commands_BufferHandle+0xa0>)
 80085aa:	f000 f839 	bl	8008620 <Commands_Parse>
	}

}
 80085ae:	bf00      	nop
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	200006c0 	.word	0x200006c0
 80085bc:	200006be 	.word	0x200006be
 80085c0:	20000948 	.word	0x20000948

080085c4 <_cmd_check>:

uint8_t _cmd_check(uint8_t* buf, uint8_t bufsize, uint8_t* cmd, uint8_t cmdsize)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	607a      	str	r2, [r7, #4]
 80085ce:	461a      	mov	r2, r3
 80085d0:	460b      	mov	r3, r1
 80085d2:	72fb      	strb	r3, [r7, #11]
 80085d4:	4613      	mov	r3, r2
 80085d6:	72bb      	strb	r3, [r7, #10]
	if(cmdsize >= bufsize)
 80085d8:	7aba      	ldrb	r2, [r7, #10]
 80085da:	7afb      	ldrb	r3, [r7, #11]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d301      	bcc.n	80085e4 <_cmd_check+0x20>
	{
		return 0;
 80085e0:	2300      	movs	r3, #0
 80085e2:	e017      	b.n	8008614 <_cmd_check+0x50>
	}

	for(int i = 1; i <= cmdsize; i++)
 80085e4:	2301      	movs	r3, #1
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	e00f      	b.n	800860a <_cmd_check+0x46>
	{
		if(buf[i] != cmd[i-1])
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	4413      	add	r3, r2
 80085f0:	781a      	ldrb	r2, [r3, #0]
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	3b01      	subs	r3, #1
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	440b      	add	r3, r1
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d001      	beq.n	8008604 <_cmd_check+0x40>
		{
			return 0;
 8008600:	2300      	movs	r3, #0
 8008602:	e007      	b.n	8008614 <_cmd_check+0x50>
	if(cmdsize >= bufsize)
	{
		return 0;
	}

	for(int i = 1; i <= cmdsize; i++)
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	3301      	adds	r3, #1
 8008608:	617b      	str	r3, [r7, #20]
 800860a:	7aba      	ldrb	r2, [r7, #10]
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	429a      	cmp	r2, r3
 8008610:	daeb      	bge.n	80085ea <_cmd_check+0x26>
		{
			return 0;
		}
	}

	return 1;
 8008612:	2301      	movs	r3, #1
}
 8008614:	4618      	mov	r0, r3
 8008616:	371c      	adds	r7, #28
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <Commands_Parse>:

void Commands_Parse(uint8_t* buf, uint8_t len)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b090      	sub	sp, #64	; 0x40
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	460b      	mov	r3, r1
 800862a:	70fb      	strb	r3, [r7, #3]
	uint8_t msg[30];
	msg[0] = '|';
 800862c:	237c      	movs	r3, #124	; 0x7c
 800862e:	743b      	strb	r3, [r7, #16]
	uint16_t offset = 1;
 8008630:	2301      	movs	r3, #1
 8008632:	87fb      	strh	r3, [r7, #62]	; 0x3e

	if(_cmd_check(buf, len, "id", 2))
 8008634:	78f9      	ldrb	r1, [r7, #3]
 8008636:	2302      	movs	r3, #2
 8008638:	4a8f      	ldr	r2, [pc, #572]	; (8008878 <Commands_Parse+0x258>)
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7ff ffc2 	bl	80085c4 <_cmd_check>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d02d      	beq.n	80086a2 <Commands_Parse+0x82>
	{
	  unsigned long *id = (unsigned long *)0x1FFFF7AC;
 8008646:	4b8d      	ldr	r3, [pc, #564]	; (800887c <Commands_Parse+0x25c>)
 8008648:	637b      	str	r3, [r7, #52]	; 0x34
	  for( int i = 0; i < 3; i++)
 800864a:	2300      	movs	r3, #0
 800864c:	63bb      	str	r3, [r7, #56]	; 0x38
 800864e:	e014      	b.n	800867a <Commands_Parse+0x5a>
	  {
		  offset += sprintf(&msg[offset], "%08X", id[i]);
 8008650:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008652:	f107 0210 	add.w	r2, r7, #16
 8008656:	18d0      	adds	r0, r2, r3
 8008658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800865e:	4413      	add	r3, r2
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	4986      	ldr	r1, [pc, #536]	; (8008880 <Commands_Parse+0x260>)
 8008666:	f001 fd89 	bl	800a17c <sprintf>
 800866a:	4603      	mov	r3, r0
 800866c:	b29a      	uxth	r2, r3
 800866e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008670:	4413      	add	r3, r2
 8008672:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint16_t offset = 1;

	if(_cmd_check(buf, len, "id", 2))
	{
	  unsigned long *id = (unsigned long *)0x1FFFF7AC;
	  for( int i = 0; i < 3; i++)
 8008674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008676:	3301      	adds	r3, #1
 8008678:	63bb      	str	r3, [r7, #56]	; 0x38
 800867a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867c:	2b02      	cmp	r3, #2
 800867e:	dde7      	ble.n	8008650 <Commands_Parse+0x30>
	  {
		  offset += sprintf(&msg[offset], "%08X", id[i]);
	  }
	  msg[offset++] = '\n';
 8008680:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008682:	1c5a      	adds	r2, r3, #1
 8008684:	87fa      	strh	r2, [r7, #62]	; 0x3e
 8008686:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800868a:	4413      	add	r3, r2
 800868c:	220a      	movs	r2, #10
 800868e:	f803 2c30 	strb.w	r2, [r3, #-48]
	  CDC_Transmit_FS(msg, offset);
 8008692:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8008694:	f107 0310 	add.w	r3, r7, #16
 8008698:	4611      	mov	r1, r2
 800869a:	4618      	mov	r0, r3
 800869c:	f000 ff12 	bl	80094c4 <CDC_Transmit_FS>
	else if(_cmd_check(buf, len, "dfu", 3))
	{
		iDFU = 1;
	}

}
 80086a0:	e0e5      	b.n	800886e <Commands_Parse+0x24e>
		  offset += sprintf(&msg[offset], "%08X", id[i]);
	  }
	  msg[offset++] = '\n';
	  CDC_Transmit_FS(msg, offset);
	}
	else if(_cmd_check(buf, len, "val", 3))
 80086a2:	78f9      	ldrb	r1, [r7, #3]
 80086a4:	2303      	movs	r3, #3
 80086a6:	4a77      	ldr	r2, [pc, #476]	; (8008884 <Commands_Parse+0x264>)
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7ff ff8b 	bl	80085c4 <_cmd_check>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d05b      	beq.n	800876c <Commands_Parse+0x14c>
	{
	  offset += sprintf(&msg[offset], ":%03d", hx1.valueA);
 80086b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80086b6:	f107 0210 	add.w	r2, r7, #16
 80086ba:	18d0      	adds	r0, r2, r3
 80086bc:	4b72      	ldr	r3, [pc, #456]	; (8008888 <Commands_Parse+0x268>)
 80086be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c0:	461a      	mov	r2, r3
 80086c2:	4972      	ldr	r1, [pc, #456]	; (800888c <Commands_Parse+0x26c>)
 80086c4:	f001 fd5a 	bl	800a17c <sprintf>
 80086c8:	4603      	mov	r3, r0
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80086ce:	4413      	add	r3, r2
 80086d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  offset += sprintf(&msg[offset], ":%03d", hx1.valueB);
 80086d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80086d4:	f107 0210 	add.w	r2, r7, #16
 80086d8:	18d0      	adds	r0, r2, r3
 80086da:	4b6b      	ldr	r3, [pc, #428]	; (8008888 <Commands_Parse+0x268>)
 80086dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086de:	461a      	mov	r2, r3
 80086e0:	496a      	ldr	r1, [pc, #424]	; (800888c <Commands_Parse+0x26c>)
 80086e2:	f001 fd4b 	bl	800a17c <sprintf>
 80086e6:	4603      	mov	r3, r0
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80086ec:	4413      	add	r3, r2
 80086ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  offset += sprintf(&msg[offset], ":%03d", hx2.valueA);
 80086f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80086f2:	f107 0210 	add.w	r2, r7, #16
 80086f6:	18d0      	adds	r0, r2, r3
 80086f8:	4b65      	ldr	r3, [pc, #404]	; (8008890 <Commands_Parse+0x270>)
 80086fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086fc:	461a      	mov	r2, r3
 80086fe:	4963      	ldr	r1, [pc, #396]	; (800888c <Commands_Parse+0x26c>)
 8008700:	f001 fd3c 	bl	800a17c <sprintf>
 8008704:	4603      	mov	r3, r0
 8008706:	b29a      	uxth	r2, r3
 8008708:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800870a:	4413      	add	r3, r2
 800870c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  offset += sprintf(&msg[offset], ":%03d", hx2.valueB);
 800870e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008710:	f107 0210 	add.w	r2, r7, #16
 8008714:	18d0      	adds	r0, r2, r3
 8008716:	4b5e      	ldr	r3, [pc, #376]	; (8008890 <Commands_Parse+0x270>)
 8008718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800871a:	461a      	mov	r2, r3
 800871c:	495b      	ldr	r1, [pc, #364]	; (800888c <Commands_Parse+0x26c>)
 800871e:	f001 fd2d 	bl	800a17c <sprintf>
 8008722:	4603      	mov	r3, r0
 8008724:	b29a      	uxth	r2, r3
 8008726:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008728:	4413      	add	r3, r2
 800872a:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  offset += sprintf(&msg[offset], ":%03d", temperature);
 800872c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800872e:	f107 0210 	add.w	r2, r7, #16
 8008732:	18d0      	adds	r0, r2, r3
 8008734:	4b57      	ldr	r3, [pc, #348]	; (8008894 <Commands_Parse+0x274>)
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	4954      	ldr	r1, [pc, #336]	; (800888c <Commands_Parse+0x26c>)
 800873c:	f001 fd1e 	bl	800a17c <sprintf>
 8008740:	4603      	mov	r3, r0
 8008742:	b29a      	uxth	r2, r3
 8008744:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008746:	4413      	add	r3, r2
 8008748:	87fb      	strh	r3, [r7, #62]	; 0x3e

	  msg[offset++] = '\n';
 800874a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800874c:	1c5a      	adds	r2, r3, #1
 800874e:	87fa      	strh	r2, [r7, #62]	; 0x3e
 8008750:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008754:	4413      	add	r3, r2
 8008756:	220a      	movs	r2, #10
 8008758:	f803 2c30 	strb.w	r2, [r3, #-48]
	  CDC_Transmit_FS(msg, offset);
 800875c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800875e:	f107 0310 	add.w	r3, r7, #16
 8008762:	4611      	mov	r1, r2
 8008764:	4618      	mov	r0, r3
 8008766:	f000 fead 	bl	80094c4 <CDC_Transmit_FS>
	else if(_cmd_check(buf, len, "dfu", 3))
	{
		iDFU = 1;
	}

}
 800876a:	e080      	b.n	800886e <Commands_Parse+0x24e>
	  offset += sprintf(&msg[offset], ":%03d", hx2.valueB);
	  offset += sprintf(&msg[offset], ":%03d", temperature);

	  msg[offset++] = '\n';
	  CDC_Transmit_FS(msg, offset);
	} else if(_cmd_check(buf, len, "cal", 3))
 800876c:	78f9      	ldrb	r1, [r7, #3]
 800876e:	2303      	movs	r3, #3
 8008770:	4a49      	ldr	r2, [pc, #292]	; (8008898 <Commands_Parse+0x278>)
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7ff ff26 	bl	80085c4 <_cmd_check>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d042      	beq.n	8008804 <Commands_Parse+0x1e4>
	{

	  char num[] = {buf[4], buf[5]};
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	3304      	adds	r3, #4
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	733b      	strb	r3, [r7, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	3305      	adds	r3, #5
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	737b      	strb	r3, [r7, #13]
	  int param = strtol(num, NULL, 10);
 800878e:	f107 030c 	add.w	r3, r7, #12
 8008792:	220a      	movs	r2, #10
 8008794:	2100      	movs	r1, #0
 8008796:	4618      	mov	r0, r3
 8008798:	f001 fd9a 	bl	800a2d0 <strtol>
 800879c:	6338      	str	r0, [r7, #48]	; 0x30

	  if(param > 30 && param < 100)
 800879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a0:	2b1e      	cmp	r3, #30
 80087a2:	dd12      	ble.n	80087ca <Commands_Parse+0x1aa>
 80087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a6:	2b63      	cmp	r3, #99	; 0x63
 80087a8:	dc0f      	bgt.n	80087ca <Commands_Parse+0x1aa>
	  {
		  iCalibration = param;
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	4b3b      	ldr	r3, [pc, #236]	; (800889c <Commands_Parse+0x27c>)
 80087b0:	701a      	strb	r2, [r3, #0]
		  writeFlash();
 80087b2:	f7ff fd2b 	bl	800820c <writeFlash>
		  memcpy(&msg[offset], "OK", 2);
 80087b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80087b8:	f107 0210 	add.w	r2, r7, #16
 80087bc:	4413      	add	r3, r2
 80087be:	2202      	movs	r2, #2
 80087c0:	4937      	ldr	r1, [pc, #220]	; (80088a0 <Commands_Parse+0x280>)
 80087c2:	4618      	mov	r0, r3
 80087c4:	f001 fcb4 	bl	800a130 <memcpy>

	  char num[] = {buf[4], buf[5]};
	  int param = strtol(num, NULL, 10);

	  if(param > 30 && param < 100)
	  {
 80087c8:	e008      	b.n	80087dc <Commands_Parse+0x1bc>
		  writeFlash();
		  memcpy(&msg[offset], "OK", 2);
	  }
	  else
	  {
		  memcpy(&msg[offset], "ER", 2);
 80087ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80087cc:	f107 0210 	add.w	r2, r7, #16
 80087d0:	4413      	add	r3, r2
 80087d2:	2202      	movs	r2, #2
 80087d4:	4933      	ldr	r1, [pc, #204]	; (80088a4 <Commands_Parse+0x284>)
 80087d6:	4618      	mov	r0, r3
 80087d8:	f001 fcaa 	bl	800a130 <memcpy>
	  }
	  offset += 2;
 80087dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80087de:	3302      	adds	r3, #2
 80087e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  msg[offset++] = '\n';
 80087e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	87fa      	strh	r2, [r7, #62]	; 0x3e
 80087e8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80087ec:	4413      	add	r3, r2
 80087ee:	220a      	movs	r2, #10
 80087f0:	f803 2c30 	strb.w	r2, [r3, #-48]

	  CDC_Transmit_FS(msg, offset);
 80087f4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80087f6:	f107 0310 	add.w	r3, r7, #16
 80087fa:	4611      	mov	r1, r2
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 fe61 	bl	80094c4 <CDC_Transmit_FS>
	else if(_cmd_check(buf, len, "dfu", 3))
	{
		iDFU = 1;
	}

}
 8008802:	e034      	b.n	800886e <Commands_Parse+0x24e>
	  }
	  offset += 2;
	  msg[offset++] = '\n';

	  CDC_Transmit_FS(msg, offset);
	} else if(_cmd_check(buf, len, "tare", 4))
 8008804:	78f9      	ldrb	r1, [r7, #3]
 8008806:	2304      	movs	r3, #4
 8008808:	4a27      	ldr	r2, [pc, #156]	; (80088a8 <Commands_Parse+0x288>)
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7ff feda 	bl	80085c4 <_cmd_check>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d01f      	beq.n	8008856 <Commands_Parse+0x236>
	{
	  iTare = 1;
 8008816:	4b25      	ldr	r3, [pc, #148]	; (80088ac <Commands_Parse+0x28c>)
 8008818:	2201      	movs	r2, #1
 800881a:	701a      	strb	r2, [r3, #0]
	  memcpy(&msg[offset], "OK", 2);
 800881c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800881e:	f107 0210 	add.w	r2, r7, #16
 8008822:	4413      	add	r3, r2
 8008824:	2202      	movs	r2, #2
 8008826:	491e      	ldr	r1, [pc, #120]	; (80088a0 <Commands_Parse+0x280>)
 8008828:	4618      	mov	r0, r3
 800882a:	f001 fc81 	bl	800a130 <memcpy>
	  offset += 2;
 800882e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008830:	3302      	adds	r3, #2
 8008832:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  msg[offset++] = '\n';
 8008834:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	87fa      	strh	r2, [r7, #62]	; 0x3e
 800883a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800883e:	4413      	add	r3, r2
 8008840:	220a      	movs	r2, #10
 8008842:	f803 2c30 	strb.w	r2, [r3, #-48]

	  CDC_Transmit_FS(msg, offset);
 8008846:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8008848:	f107 0310 	add.w	r3, r7, #16
 800884c:	4611      	mov	r1, r2
 800884e:	4618      	mov	r0, r3
 8008850:	f000 fe38 	bl	80094c4 <CDC_Transmit_FS>
	else if(_cmd_check(buf, len, "dfu", 3))
	{
		iDFU = 1;
	}

}
 8008854:	e00b      	b.n	800886e <Commands_Parse+0x24e>
	  offset += 2;
	  msg[offset++] = '\n';

	  CDC_Transmit_FS(msg, offset);
	}
	else if(_cmd_check(buf, len, "dfu", 3))
 8008856:	78f9      	ldrb	r1, [r7, #3]
 8008858:	2303      	movs	r3, #3
 800885a:	4a15      	ldr	r2, [pc, #84]	; (80088b0 <Commands_Parse+0x290>)
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7ff feb1 	bl	80085c4 <_cmd_check>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <Commands_Parse+0x24e>
	{
		iDFU = 1;
 8008868:	4b12      	ldr	r3, [pc, #72]	; (80088b4 <Commands_Parse+0x294>)
 800886a:	2201      	movs	r2, #1
 800886c:	701a      	strb	r2, [r3, #0]
	}

}
 800886e:	bf00      	nop
 8008870:	3740      	adds	r7, #64	; 0x40
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	0800cbc0 	.word	0x0800cbc0
 800887c:	1ffff7ac 	.word	0x1ffff7ac
 8008880:	0800cbc4 	.word	0x0800cbc4
 8008884:	0800cbcc 	.word	0x0800cbcc
 8008888:	200009c0 	.word	0x200009c0
 800888c:	0800cbd0 	.word	0x0800cbd0
 8008890:	20000968 	.word	0x20000968
 8008894:	200006c2 	.word	0x200006c2
 8008898:	0800cbd8 	.word	0x0800cbd8
 800889c:	20000113 	.word	0x20000113
 80088a0:	0800cbdc 	.word	0x0800cbdc
 80088a4:	0800cbe0 	.word	0x0800cbe0
 80088a8:	0800cbe4 	.word	0x0800cbe4
 80088ac:	200006c1 	.word	0x200006c1
 80088b0:	0800cbec 	.word	0x0800cbec
 80088b4:	200006c4 	.word	0x200006c4

080088b8 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 80088b8:	b480      	push	{r7}
 80088ba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80088bc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80088c0:	4905      	ldr	r1, [pc, #20]	; (80088d8 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80088c2:	4b05      	ldr	r3, [pc, #20]	; (80088d8 <NVIC_SystemReset+0x20>)
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80088ca:	4b04      	ldr	r3, [pc, #16]	; (80088dc <NVIC_SystemReset+0x24>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	60cb      	str	r3, [r1, #12]
 80088d0:	f3bf 8f4f 	dsb	sy
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80088d4:	bf00      	nop
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
  }
 80088d6:	e7fd      	b.n	80088d4 <NVIC_SystemReset+0x1c>
 80088d8:	e000ed00 	.word	0xe000ed00
 80088dc:	05fa0004 	.word	0x05fa0004

080088e0 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80088e0:	b5b0      	push	{r4, r5, r7, lr}
 80088e2:	b0a4      	sub	sp, #144	; 0x90
 80088e4:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80088e6:	f7f8 fbab 	bl	8001040 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80088ea:	f000 fa93 	bl	8008e14 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80088ee:	f000 fbc9 	bl	8009084 <MX_GPIO_Init>
  MX_CRC_Init();
 80088f2:	f000 fb39 	bl	8008f68 <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 80088f6:	f000 fd37 	bl	8009368 <MX_USB_DEVICE_Init>
  MX_TIM15_Init();
 80088fa:	f000 fb57 	bl	8008fac <MX_TIM15_Init>
  MX_ADC1_Init();
 80088fe:	f000 fae3 	bl	8008ec8 <MX_ADC1_Init>

  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8008902:	2104      	movs	r1, #4
 8008904:	48b3      	ldr	r0, [pc, #716]	; (8008bd4 <main+0x2f4>)
 8008906:	f7fd fd17 	bl	8006338 <HAL_TIM_PWM_Start>
	HAL_ADC_Start(&hadc1);
 800890a:	48b3      	ldr	r0, [pc, #716]	; (8008bd8 <main+0x2f8>)
 800890c:	f7f8 fdd6 	bl	80014bc <HAL_ADC_Start>

	uint16_t ts_cal1 = *((uint16_t*)0x1FFFF7B8);
 8008910:	4bb2      	ldr	r3, [pc, #712]	; (8008bdc <main+0x2fc>)
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint16_t ts_cal2 = *((uint16_t*)0x1FFFF7C2);
 8008916:	4bb2      	ldr	r3, [pc, #712]	; (8008be0 <main+0x300>)
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	87bb      	strh	r3, [r7, #60]	; 0x3c
	float Avg_Slope = ((float)(ts_cal1 - ts_cal2)) / (110 - 30);
 800891c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800891e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	ee07 3a90 	vmov	s15, r3
 8008926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800892a:	eddf 6aae 	vldr	s13, [pc, #696]	; 8008be4 <main+0x304>
 800892e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008932:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	uint16_t v25 = 1774;
 8008936:	f240 63ee 	movw	r3, #1774	; 0x6ee
 800893a:	86fb      	strh	r3, [r7, #54]	; 0x36

	int empty[] = {0,0,0,0,0,0,0,0,0,0};
 800893c:	f107 030c 	add.w	r3, r7, #12
 8008940:	2228      	movs	r2, #40	; 0x28
 8008942:	2100      	movs	r1, #0
 8008944:	4618      	mov	r0, r3
 8008946:	f001 fbfe 	bl	800a146 <memset>

	//IC3
	hx1.gpioSck = DO_SCK_1_GPIO_Port;
 800894a:	4ba7      	ldr	r3, [pc, #668]	; (8008be8 <main+0x308>)
 800894c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008950:	601a      	str	r2, [r3, #0]
	hx1.gpioData = DI_DATA_1_GPIO_Port;
 8008952:	4ba5      	ldr	r3, [pc, #660]	; (8008be8 <main+0x308>)
 8008954:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8008958:	605a      	str	r2, [r3, #4]
	hx1.pinSck = DO_SCK_1_Pin;
 800895a:	4ba3      	ldr	r3, [pc, #652]	; (8008be8 <main+0x308>)
 800895c:	2202      	movs	r2, #2
 800895e:	811a      	strh	r2, [r3, #8]
	hx1.pinData = DI_DATA_1_Pin;
 8008960:	4ba1      	ldr	r3, [pc, #644]	; (8008be8 <main+0x308>)
 8008962:	2204      	movs	r2, #4
 8008964:	815a      	strh	r2, [r3, #10]
	hx1.gain = 3;
 8008966:	4ba0      	ldr	r3, [pc, #640]	; (8008be8 <main+0x308>)
 8008968:	2203      	movs	r2, #3
 800896a:	655a      	str	r2, [r3, #84]	; 0x54
	hx1.offsetA = 0;
 800896c:	4b9e      	ldr	r3, [pc, #632]	; (8008be8 <main+0x308>)
 800896e:	2200      	movs	r2, #0
 8008970:	60da      	str	r2, [r3, #12]
	hx1.offsetB = 0;
 8008972:	4b9d      	ldr	r3, [pc, #628]	; (8008be8 <main+0x308>)
 8008974:	2200      	movs	r2, #0
 8008976:	611a      	str	r2, [r3, #16]
	hx1.readingA = 0;
 8008978:	4b9b      	ldr	r3, [pc, #620]	; (8008be8 <main+0x308>)
 800897a:	2200      	movs	r2, #0
 800897c:	615a      	str	r2, [r3, #20]
	hx1.readingB = 0;
 800897e:	4b9a      	ldr	r3, [pc, #616]	; (8008be8 <main+0x308>)
 8008980:	2200      	movs	r2, #0
 8008982:	619a      	str	r2, [r3, #24]
	memcpy(hx1.historyA, empty, sizeof hx1.historyA);
 8008984:	4b98      	ldr	r3, [pc, #608]	; (8008be8 <main+0x308>)
 8008986:	f103 041c 	add.w	r4, r3, #28
 800898a:	f107 050c 	add.w	r5, r7, #12
 800898e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008992:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008996:	e884 0003 	stmia.w	r4, {r0, r1}
	memcpy(hx1.historyB, empty, sizeof hx1.historyB);
 800899a:	4b93      	ldr	r3, [pc, #588]	; (8008be8 <main+0x308>)
 800899c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80089a0:	f107 050c 	add.w	r5, r7, #12
 80089a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80089ac:	e884 0003 	stmia.w	r4, {r0, r1}
	HX711_Init(hx1);
 80089b0:	4c8d      	ldr	r4, [pc, #564]	; (8008be8 <main+0x308>)
 80089b2:	4668      	mov	r0, sp
 80089b4:	f104 0310 	add.w	r3, r4, #16
 80089b8:	2248      	movs	r2, #72	; 0x48
 80089ba:	4619      	mov	r1, r3
 80089bc:	f001 fbb8 	bl	800a130 <memcpy>
 80089c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80089c4:	f001 f898 	bl	8009af8 <HX711_Init>

	//IC2
	hx2.gpioSck = DO_SCK_2_GPIO_Port;
 80089c8:	4b88      	ldr	r3, [pc, #544]	; (8008bec <main+0x30c>)
 80089ca:	4a89      	ldr	r2, [pc, #548]	; (8008bf0 <main+0x310>)
 80089cc:	601a      	str	r2, [r3, #0]
	hx2.gpioData = DI_DATA_2_GPIO_Port;
 80089ce:	4b87      	ldr	r3, [pc, #540]	; (8008bec <main+0x30c>)
 80089d0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80089d4:	605a      	str	r2, [r3, #4]
	hx2.pinSck = DO_SCK_2_Pin;
 80089d6:	4b85      	ldr	r3, [pc, #532]	; (8008bec <main+0x30c>)
 80089d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80089dc:	811a      	strh	r2, [r3, #8]
	hx2.pinData = DI_DATA_2_Pin;
 80089de:	4b83      	ldr	r3, [pc, #524]	; (8008bec <main+0x30c>)
 80089e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089e4:	815a      	strh	r2, [r3, #10]
	hx2.gain = 3;
 80089e6:	4b81      	ldr	r3, [pc, #516]	; (8008bec <main+0x30c>)
 80089e8:	2203      	movs	r2, #3
 80089ea:	655a      	str	r2, [r3, #84]	; 0x54
	hx2.offsetA = 0;
 80089ec:	4b7f      	ldr	r3, [pc, #508]	; (8008bec <main+0x30c>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	60da      	str	r2, [r3, #12]
	hx2.offsetB = 0;
 80089f2:	4b7e      	ldr	r3, [pc, #504]	; (8008bec <main+0x30c>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	611a      	str	r2, [r3, #16]
	hx2.readingA = 0;
 80089f8:	4b7c      	ldr	r3, [pc, #496]	; (8008bec <main+0x30c>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	615a      	str	r2, [r3, #20]
	hx2.readingB = 0;
 80089fe:	4b7b      	ldr	r3, [pc, #492]	; (8008bec <main+0x30c>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	619a      	str	r2, [r3, #24]
	memcpy(hx2.historyA, empty, sizeof hx2.historyA);
 8008a04:	4b79      	ldr	r3, [pc, #484]	; (8008bec <main+0x30c>)
 8008a06:	f103 041c 	add.w	r4, r3, #28
 8008a0a:	f107 050c 	add.w	r5, r7, #12
 8008a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008a16:	e884 0003 	stmia.w	r4, {r0, r1}
	memcpy(hx2.historyB, empty, sizeof hx2.historyB);
 8008a1a:	4b74      	ldr	r3, [pc, #464]	; (8008bec <main+0x30c>)
 8008a1c:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8008a20:	f107 050c 	add.w	r5, r7, #12
 8008a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008a2c:	e884 0003 	stmia.w	r4, {r0, r1}
	HX711_Init(hx2);
 8008a30:	4c6e      	ldr	r4, [pc, #440]	; (8008bec <main+0x30c>)
 8008a32:	4668      	mov	r0, sp
 8008a34:	f104 0310 	add.w	r3, r4, #16
 8008a38:	2248      	movs	r2, #72	; 0x48
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	f001 fb78 	bl	800a130 <memcpy>
 8008a40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008a44:	f001 f858 	bl	8009af8 <HX711_Init>
	readFlash();
 8008a48:	f7ff fbf8 	bl	800823c <readFlash>

	iTare = 1;
 8008a4c:	4b69      	ldr	r3, [pc, #420]	; (8008bf4 <main+0x314>)
 8008a4e:	2201      	movs	r2, #1
 8008a50:	701a      	strb	r2, [r3, #0]
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  if(iDFU)
 8008a52:	4b69      	ldr	r3, [pc, #420]	; (8008bf8 <main+0x318>)
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <main+0x190>
	  {
		HAL_GPIO_WritePin(DO_BOOT_SET_GPIO_Port, DO_BOOT_SET_Pin, GPIO_PIN_SET);
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	2180      	movs	r1, #128	; 0x80
 8008a5e:	4864      	ldr	r0, [pc, #400]	; (8008bf0 <main+0x310>)
 8008a60:	f7f9 ffca 	bl	80029f8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8008a64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008a68:	f7f8 fb36 	bl	80010d8 <HAL_Delay>
		NVIC_SystemReset();
 8008a6c:	f7ff ff24 	bl	80088b8 <NVIC_SystemReset>
	  }

	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8008a70:	210a      	movs	r1, #10
 8008a72:	4859      	ldr	r0, [pc, #356]	; (8008bd8 <main+0x2f8>)
 8008a74:	f7f8 fe38 	bl	80016e8 <HAL_ADC_PollForConversion>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d11e      	bne.n	8008abc <main+0x1dc>
	  {
		  temperature = HAL_ADC_GetValue(&hadc1);
 8008a7e:	4856      	ldr	r0, [pc, #344]	; (8008bd8 <main+0x2f8>)
 8008a80:	f7f8 ff2c 	bl	80018dc <HAL_ADC_GetValue>
 8008a84:	4603      	mov	r3, r0
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	4b5c      	ldr	r3, [pc, #368]	; (8008bfc <main+0x31c>)
 8008a8a:	801a      	strh	r2, [r3, #0]
		  temperature = ((v25 - temperature)/Avg_Slope) + 25;
 8008a8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008a8e:	4a5b      	ldr	r2, [pc, #364]	; (8008bfc <main+0x31c>)
 8008a90:	8812      	ldrh	r2, [r2, #0]
 8008a92:	1a9b      	subs	r3, r3, r2
 8008a94:	ee07 3a90 	vmov	s15, r3
 8008a98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008a9c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008aa4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8008aa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ab0:	edc7 7a01 	vstr	s15, [r7, #4]
 8008ab4:	88bb      	ldrh	r3, [r7, #4]
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	4b50      	ldr	r3, [pc, #320]	; (8008bfc <main+0x31c>)
 8008aba:	801a      	strh	r2, [r3, #0]
	  }
	  if (iTare)
 8008abc:	4b4d      	ldr	r3, [pc, #308]	; (8008bf4 <main+0x314>)
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 809d 	beq.w	8008c00 <main+0x320>
	  {
		HX711_Average_Value(hx1, 100);
 8008ac6:	4c48      	ldr	r4, [pc, #288]	; (8008be8 <main+0x308>)
 8008ac8:	2364      	movs	r3, #100	; 0x64
 8008aca:	9312      	str	r3, [sp, #72]	; 0x48
 8008acc:	4668      	mov	r0, sp
 8008ace:	f104 0310 	add.w	r3, r4, #16
 8008ad2:	2248      	movs	r2, #72	; 0x48
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	f001 fb2b 	bl	800a130 <memcpy>
 8008ada:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008ade:	f001 f845 	bl	8009b6c <HX711_Average_Value>
		HX711_Average_Value(hx2, 100);
 8008ae2:	4c42      	ldr	r4, [pc, #264]	; (8008bec <main+0x30c>)
 8008ae4:	2364      	movs	r3, #100	; 0x64
 8008ae6:	9312      	str	r3, [sp, #72]	; 0x48
 8008ae8:	4668      	mov	r0, sp
 8008aea:	f104 0310 	add.w	r3, r4, #16
 8008aee:	2248      	movs	r2, #72	; 0x48
 8008af0:	4619      	mov	r1, r3
 8008af2:	f001 fb1d 	bl	800a130 <memcpy>
 8008af6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008afa:	f001 f837 	bl	8009b6c <HX711_Average_Value>

		hx1.offsetA = HX711_Average_Value(hx1, 20);
 8008afe:	4c3a      	ldr	r4, [pc, #232]	; (8008be8 <main+0x308>)
 8008b00:	2314      	movs	r3, #20
 8008b02:	9312      	str	r3, [sp, #72]	; 0x48
 8008b04:	4668      	mov	r0, sp
 8008b06:	f104 0310 	add.w	r3, r4, #16
 8008b0a:	2248      	movs	r2, #72	; 0x48
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	f001 fb0f 	bl	800a130 <memcpy>
 8008b12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008b16:	f001 f829 	bl	8009b6c <HX711_Average_Value>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	4b32      	ldr	r3, [pc, #200]	; (8008be8 <main+0x308>)
 8008b1e:	60da      	str	r2, [r3, #12]
		hx2.offsetA = HX711_Average_Value(hx2, 20);
 8008b20:	4c32      	ldr	r4, [pc, #200]	; (8008bec <main+0x30c>)
 8008b22:	2314      	movs	r3, #20
 8008b24:	9312      	str	r3, [sp, #72]	; 0x48
 8008b26:	4668      	mov	r0, sp
 8008b28:	f104 0310 	add.w	r3, r4, #16
 8008b2c:	2248      	movs	r2, #72	; 0x48
 8008b2e:	4619      	mov	r1, r3
 8008b30:	f001 fafe 	bl	800a130 <memcpy>
 8008b34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008b38:	f001 f818 	bl	8009b6c <HX711_Average_Value>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	4b2b      	ldr	r3, [pc, #172]	; (8008bec <main+0x30c>)
 8008b40:	60da      	str	r2, [r3, #12]

		hx1.gain = 2;
 8008b42:	4b29      	ldr	r3, [pc, #164]	; (8008be8 <main+0x308>)
 8008b44:	2202      	movs	r2, #2
 8008b46:	655a      	str	r2, [r3, #84]	; 0x54
		hx2.gain = 2;
 8008b48:	4b28      	ldr	r3, [pc, #160]	; (8008bec <main+0x30c>)
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	655a      	str	r2, [r3, #84]	; 0x54

		HX711_Average_Value(hx1, 100);
 8008b4e:	4c26      	ldr	r4, [pc, #152]	; (8008be8 <main+0x308>)
 8008b50:	2364      	movs	r3, #100	; 0x64
 8008b52:	9312      	str	r3, [sp, #72]	; 0x48
 8008b54:	4668      	mov	r0, sp
 8008b56:	f104 0310 	add.w	r3, r4, #16
 8008b5a:	2248      	movs	r2, #72	; 0x48
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	f001 fae7 	bl	800a130 <memcpy>
 8008b62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008b66:	f001 f801 	bl	8009b6c <HX711_Average_Value>
		HX711_Average_Value(hx2, 100);
 8008b6a:	4c20      	ldr	r4, [pc, #128]	; (8008bec <main+0x30c>)
 8008b6c:	2364      	movs	r3, #100	; 0x64
 8008b6e:	9312      	str	r3, [sp, #72]	; 0x48
 8008b70:	4668      	mov	r0, sp
 8008b72:	f104 0310 	add.w	r3, r4, #16
 8008b76:	2248      	movs	r2, #72	; 0x48
 8008b78:	4619      	mov	r1, r3
 8008b7a:	f001 fad9 	bl	800a130 <memcpy>
 8008b7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008b82:	f000 fff3 	bl	8009b6c <HX711_Average_Value>

		hx1.offsetB = HX711_Average_Value(hx1, 20);
 8008b86:	4c18      	ldr	r4, [pc, #96]	; (8008be8 <main+0x308>)
 8008b88:	2314      	movs	r3, #20
 8008b8a:	9312      	str	r3, [sp, #72]	; 0x48
 8008b8c:	4668      	mov	r0, sp
 8008b8e:	f104 0310 	add.w	r3, r4, #16
 8008b92:	2248      	movs	r2, #72	; 0x48
 8008b94:	4619      	mov	r1, r3
 8008b96:	f001 facb 	bl	800a130 <memcpy>
 8008b9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008b9e:	f000 ffe5 	bl	8009b6c <HX711_Average_Value>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	4b10      	ldr	r3, [pc, #64]	; (8008be8 <main+0x308>)
 8008ba6:	611a      	str	r2, [r3, #16]
		hx2.offsetB = HX711_Average_Value(hx2, 20);
 8008ba8:	4c10      	ldr	r4, [pc, #64]	; (8008bec <main+0x30c>)
 8008baa:	2314      	movs	r3, #20
 8008bac:	9312      	str	r3, [sp, #72]	; 0x48
 8008bae:	4668      	mov	r0, sp
 8008bb0:	f104 0310 	add.w	r3, r4, #16
 8008bb4:	2248      	movs	r2, #72	; 0x48
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	f001 faba 	bl	800a130 <memcpy>
 8008bbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008bc0:	f000 ffd4 	bl	8009b6c <HX711_Average_Value>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	4b09      	ldr	r3, [pc, #36]	; (8008bec <main+0x30c>)
 8008bc8:	611a      	str	r2, [r3, #16]
		iTare = 0;
 8008bca:	4b0a      	ldr	r3, [pc, #40]	; (8008bf4 <main+0x314>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	701a      	strb	r2, [r3, #0]
 8008bd0:	e10c      	b.n	8008dec <main+0x50c>
 8008bd2:	bf00      	nop
 8008bd4:	20000a18 	.word	0x20000a18
 8008bd8:	20000a78 	.word	0x20000a78
 8008bdc:	1ffff7b8 	.word	0x1ffff7b8
 8008be0:	1ffff7c2 	.word	0x1ffff7c2
 8008be4:	42a00000 	.word	0x42a00000
 8008be8:	200009c0 	.word	0x200009c0
 8008bec:	20000968 	.word	0x20000968
 8008bf0:	48000400 	.word	0x48000400
 8008bf4:	200006c1 	.word	0x200006c1
 8008bf8:	200006c4 	.word	0x200006c4
 8008bfc:	200006c2 	.word	0x200006c2
	  }
	  else
	  {
		  hx1.gain = 2;
 8008c00:	4b7d      	ldr	r3, [pc, #500]	; (8008df8 <main+0x518>)
 8008c02:	2202      	movs	r2, #2
 8008c04:	655a      	str	r2, [r3, #84]	; 0x54
		  hx2.gain = 2;
 8008c06:	4b7d      	ldr	r3, [pc, #500]	; (8008dfc <main+0x51c>)
 8008c08:	2202      	movs	r2, #2
 8008c0a:	655a      	str	r2, [r3, #84]	; 0x54
		  HX711_Average_Value(hx1, 1);
 8008c0c:	4c7a      	ldr	r4, [pc, #488]	; (8008df8 <main+0x518>)
 8008c0e:	2301      	movs	r3, #1
 8008c10:	9312      	str	r3, [sp, #72]	; 0x48
 8008c12:	4668      	mov	r0, sp
 8008c14:	f104 0310 	add.w	r3, r4, #16
 8008c18:	2248      	movs	r2, #72	; 0x48
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	f001 fa88 	bl	800a130 <memcpy>
 8008c20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008c24:	f000 ffa2 	bl	8009b6c <HX711_Average_Value>
		  HX711_Average_Value(hx2, 1);
 8008c28:	4c74      	ldr	r4, [pc, #464]	; (8008dfc <main+0x51c>)
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	9312      	str	r3, [sp, #72]	; 0x48
 8008c2e:	4668      	mov	r0, sp
 8008c30:	f104 0310 	add.w	r3, r4, #16
 8008c34:	2248      	movs	r2, #72	; 0x48
 8008c36:	4619      	mov	r1, r3
 8008c38:	f001 fa7a 	bl	800a130 <memcpy>
 8008c3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008c40:	f000 ff94 	bl	8009b6c <HX711_Average_Value>
		  hx1.readingB = (-(HX711_Average_Value(hx1, 2) - hx1.offsetB) * ((float)iCalibration/100))/1000;
 8008c44:	4b6c      	ldr	r3, [pc, #432]	; (8008df8 <main+0x518>)
 8008c46:	691d      	ldr	r5, [r3, #16]
 8008c48:	4c6b      	ldr	r4, [pc, #428]	; (8008df8 <main+0x518>)
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	9312      	str	r3, [sp, #72]	; 0x48
 8008c4e:	4668      	mov	r0, sp
 8008c50:	f104 0310 	add.w	r3, r4, #16
 8008c54:	2248      	movs	r2, #72	; 0x48
 8008c56:	4619      	mov	r1, r3
 8008c58:	f001 fa6a 	bl	800a130 <memcpy>
 8008c5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008c60:	f000 ff84 	bl	8009b6c <HX711_Average_Value>
 8008c64:	4603      	mov	r3, r0
 8008c66:	1aeb      	subs	r3, r5, r3
 8008c68:	ee07 3a90 	vmov	s15, r3
 8008c6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c70:	4b63      	ldr	r3, [pc, #396]	; (8008e00 <main+0x520>)
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	ee07 3a90 	vmov	s15, r3
 8008c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c7c:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8008e04 <main+0x524>
 8008c80:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c88:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e08 <main+0x528>
 8008c8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c94:	ee17 2a90 	vmov	r2, s15
 8008c98:	4b57      	ldr	r3, [pc, #348]	; (8008df8 <main+0x518>)
 8008c9a:	619a      	str	r2, [r3, #24]
		  hx2.readingB = (-(HX711_Average_Value(hx2, 2) - hx2.offsetB) * ((float)iCalibration/100))/1000;
 8008c9c:	4b57      	ldr	r3, [pc, #348]	; (8008dfc <main+0x51c>)
 8008c9e:	691d      	ldr	r5, [r3, #16]
 8008ca0:	4c56      	ldr	r4, [pc, #344]	; (8008dfc <main+0x51c>)
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	9312      	str	r3, [sp, #72]	; 0x48
 8008ca6:	4668      	mov	r0, sp
 8008ca8:	f104 0310 	add.w	r3, r4, #16
 8008cac:	2248      	movs	r2, #72	; 0x48
 8008cae:	4619      	mov	r1, r3
 8008cb0:	f001 fa3e 	bl	800a130 <memcpy>
 8008cb4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008cb8:	f000 ff58 	bl	8009b6c <HX711_Average_Value>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	1aeb      	subs	r3, r5, r3
 8008cc0:	ee07 3a90 	vmov	s15, r3
 8008cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008cc8:	4b4d      	ldr	r3, [pc, #308]	; (8008e00 <main+0x520>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	ee07 3a90 	vmov	s15, r3
 8008cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd4:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 8008e04 <main+0x524>
 8008cd8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ce0:	eddf 6a49 	vldr	s13, [pc, #292]	; 8008e08 <main+0x528>
 8008ce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008ce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cec:	ee17 2a90 	vmov	r2, s15
 8008cf0:	4b42      	ldr	r3, [pc, #264]	; (8008dfc <main+0x51c>)
 8008cf2:	619a      	str	r2, [r3, #24]
		  hx1.gain = 3;
 8008cf4:	4b40      	ldr	r3, [pc, #256]	; (8008df8 <main+0x518>)
 8008cf6:	2203      	movs	r2, #3
 8008cf8:	655a      	str	r2, [r3, #84]	; 0x54
		  hx2.gain = 3;
 8008cfa:	4b40      	ldr	r3, [pc, #256]	; (8008dfc <main+0x51c>)
 8008cfc:	2203      	movs	r2, #3
 8008cfe:	655a      	str	r2, [r3, #84]	; 0x54
		  HX711_Average_Value(hx1, 1);
 8008d00:	4c3d      	ldr	r4, [pc, #244]	; (8008df8 <main+0x518>)
 8008d02:	2301      	movs	r3, #1
 8008d04:	9312      	str	r3, [sp, #72]	; 0x48
 8008d06:	4668      	mov	r0, sp
 8008d08:	f104 0310 	add.w	r3, r4, #16
 8008d0c:	2248      	movs	r2, #72	; 0x48
 8008d0e:	4619      	mov	r1, r3
 8008d10:	f001 fa0e 	bl	800a130 <memcpy>
 8008d14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008d18:	f000 ff28 	bl	8009b6c <HX711_Average_Value>
		  HX711_Average_Value(hx2, 1);
 8008d1c:	4c37      	ldr	r4, [pc, #220]	; (8008dfc <main+0x51c>)
 8008d1e:	2301      	movs	r3, #1
 8008d20:	9312      	str	r3, [sp, #72]	; 0x48
 8008d22:	4668      	mov	r0, sp
 8008d24:	f104 0310 	add.w	r3, r4, #16
 8008d28:	2248      	movs	r2, #72	; 0x48
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	f001 fa00 	bl	800a130 <memcpy>
 8008d30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008d34:	f000 ff1a 	bl	8009b6c <HX711_Average_Value>
		  hx1.readingA = (-(HX711_Average_Value(hx1, 2) - hx1.offsetA) * ((float)iCalibration/100))/2000;
 8008d38:	4b2f      	ldr	r3, [pc, #188]	; (8008df8 <main+0x518>)
 8008d3a:	68dd      	ldr	r5, [r3, #12]
 8008d3c:	4c2e      	ldr	r4, [pc, #184]	; (8008df8 <main+0x518>)
 8008d3e:	2302      	movs	r3, #2
 8008d40:	9312      	str	r3, [sp, #72]	; 0x48
 8008d42:	4668      	mov	r0, sp
 8008d44:	f104 0310 	add.w	r3, r4, #16
 8008d48:	2248      	movs	r2, #72	; 0x48
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	f001 f9f0 	bl	800a130 <memcpy>
 8008d50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008d54:	f000 ff0a 	bl	8009b6c <HX711_Average_Value>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	1aeb      	subs	r3, r5, r3
 8008d5c:	ee07 3a90 	vmov	s15, r3
 8008d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d64:	4b26      	ldr	r3, [pc, #152]	; (8008e00 <main+0x520>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	ee07 3a90 	vmov	s15, r3
 8008d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d70:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8008e04 <main+0x524>
 8008d74:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008d7c:	eddf 6a23 	vldr	s13, [pc, #140]	; 8008e0c <main+0x52c>
 8008d80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d88:	ee17 2a90 	vmov	r2, s15
 8008d8c:	4b1a      	ldr	r3, [pc, #104]	; (8008df8 <main+0x518>)
 8008d8e:	615a      	str	r2, [r3, #20]
		  hx2.readingA = (-(HX711_Average_Value(hx2, 2) - hx2.offsetA) * ((float)iCalibration/100))/2000;
 8008d90:	4b1a      	ldr	r3, [pc, #104]	; (8008dfc <main+0x51c>)
 8008d92:	68dd      	ldr	r5, [r3, #12]
 8008d94:	4c19      	ldr	r4, [pc, #100]	; (8008dfc <main+0x51c>)
 8008d96:	2302      	movs	r3, #2
 8008d98:	9312      	str	r3, [sp, #72]	; 0x48
 8008d9a:	4668      	mov	r0, sp
 8008d9c:	f104 0310 	add.w	r3, r4, #16
 8008da0:	2248      	movs	r2, #72	; 0x48
 8008da2:	4619      	mov	r1, r3
 8008da4:	f001 f9c4 	bl	800a130 <memcpy>
 8008da8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008dac:	f000 fede 	bl	8009b6c <HX711_Average_Value>
 8008db0:	4603      	mov	r3, r0
 8008db2:	1aeb      	subs	r3, r5, r3
 8008db4:	ee07 3a90 	vmov	s15, r3
 8008db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008dbc:	4b10      	ldr	r3, [pc, #64]	; (8008e00 <main+0x520>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	ee07 3a90 	vmov	s15, r3
 8008dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc8:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8008e04 <main+0x524>
 8008dcc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008dd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008dd4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8008e0c <main+0x52c>
 8008dd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008de0:	ee17 2a90 	vmov	r2, s15
 8008de4:	4b05      	ldr	r3, [pc, #20]	; (8008dfc <main+0x51c>)
 8008de6:	615a      	str	r2, [r3, #20]
		  HX711_Process_Values();
 8008de8:	f7ff fb02 	bl	80083f0 <HX711_Process_Values>

	  }
	  HAL_GPIO_TogglePin(DO_LED_1_GPIO_Port, DO_LED_1_Pin);
 8008dec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008df0:	4807      	ldr	r0, [pc, #28]	; (8008e10 <main+0x530>)
 8008df2:	f7f9 fe19 	bl	8002a28 <HAL_GPIO_TogglePin>
  }
 8008df6:	e62c      	b.n	8008a52 <main+0x172>
 8008df8:	200009c0 	.word	0x200009c0
 8008dfc:	20000968 	.word	0x20000968
 8008e00:	20000113 	.word	0x20000113
 8008e04:	42c80000 	.word	0x42c80000
 8008e08:	447a0000 	.word	0x447a0000
 8008e0c:	44fa0000 	.word	0x44fa0000
 8008e10:	48000400 	.word	0x48000400

08008e14 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b09e      	sub	sp, #120	; 0x78
 8008e18:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008e1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e22:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008e24:	2300      	movs	r3, #0
 8008e26:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008e28:	2302      	movs	r3, #2
 8008e2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008e30:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8008e32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e36:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008e38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7fb fd4d 	bl	80048dc <HAL_RCC_OscConfig>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <SystemClock_Config+0x38>
  {
    Error_Handler();
 8008e48:	f000 f986 	bl	8009158 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008e4c:	230f      	movs	r3, #15
 8008e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008e50:	2302      	movs	r3, #2
 8008e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008e54:	2300      	movs	r3, #0
 8008e56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008e62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008e66:	2101      	movs	r1, #1
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7fc fdf9 	bl	8005a60 <HAL_RCC_ClockConfig>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8008e74:	f000 f970 	bl	8009158 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008e78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e7c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8008e7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008e82:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008e84:	463b      	mov	r3, r7
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fd f85c 	bl	8005f44 <HAL_RCCEx_PeriphCLKConfig>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008e92:	f000 f961 	bl	8009158 <Error_Handler>
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8008e96:	f7fd f849 	bl	8005f2c <HAL_RCC_GetHCLKFreq>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <SystemClock_Config+0xb0>)
 8008e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8008ea2:	099b      	lsrs	r3, r3, #6
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7f9 f9d1 	bl	800224c <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8008eaa:	2004      	movs	r0, #4
 8008eac:	f7f9 f9da 	bl	8002264 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb8:	f7f9 f99e 	bl	80021f8 <HAL_NVIC_SetPriority>
}
 8008ebc:	bf00      	nop
 8008ebe:	3778      	adds	r7, #120	; 0x78
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	10624dd3 	.word	0x10624dd3

08008ec8 <MX_ADC1_Init>:

/* ADC1 init function */
static void MX_ADC1_Init(void)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8008ece:	4b25      	ldr	r3, [pc, #148]	; (8008f64 <MX_ADC1_Init+0x9c>)
 8008ed0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ed4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8008ed6:	4b23      	ldr	r3, [pc, #140]	; (8008f64 <MX_ADC1_Init+0x9c>)
 8008ed8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008edc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008ede:	4b21      	ldr	r3, [pc, #132]	; (8008f64 <MX_ADC1_Init+0x9c>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8008ee4:	4b1f      	ldr	r3, [pc, #124]	; (8008f64 <MX_ADC1_Init+0x9c>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008eea:	4b1e      	ldr	r3, [pc, #120]	; (8008f64 <MX_ADC1_Init+0x9c>)
 8008eec:	2201      	movs	r2, #1
 8008eee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008ef0:	4b1c      	ldr	r3, [pc, #112]	; (8008f64 <MX_ADC1_Init+0x9c>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008ef6:	4b1b      	ldr	r3, [pc, #108]	; (8008f64 <MX_ADC1_Init+0x9c>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008efc:	4b19      	ldr	r3, [pc, #100]	; (8008f64 <MX_ADC1_Init+0x9c>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8008f02:	4b18      	ldr	r3, [pc, #96]	; (8008f64 <MX_ADC1_Init+0x9c>)
 8008f04:	2201      	movs	r2, #1
 8008f06:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008f08:	4b16      	ldr	r3, [pc, #88]	; (8008f64 <MX_ADC1_Init+0x9c>)
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008f0e:	4b15      	ldr	r3, [pc, #84]	; (8008f64 <MX_ADC1_Init+0x9c>)
 8008f10:	2204      	movs	r2, #4
 8008f12:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008f14:	4b13      	ldr	r3, [pc, #76]	; (8008f64 <MX_ADC1_Init+0x9c>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	619a      	str	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8008f1a:	4b12      	ldr	r3, [pc, #72]	; (8008f64 <MX_ADC1_Init+0x9c>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008f20:	4810      	ldr	r0, [pc, #64]	; (8008f64 <MX_ADC1_Init+0x9c>)
 8008f22:	f7f8 f8ed 	bl	8001100 <HAL_ADC_Init>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d001      	beq.n	8008f30 <MX_ADC1_Init+0x68>
  {
    Error_Handler();
 8008f2c:	f000 f914 	bl	8009158 <Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008f30:	2310      	movs	r3, #16
 8008f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008f34:	2301      	movs	r3, #1
 8008f36:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008f40:	2300      	movs	r3, #0
 8008f42:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008f48:	463b      	mov	r3, r7
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4805      	ldr	r0, [pc, #20]	; (8008f64 <MX_ADC1_Init+0x9c>)
 8008f4e:	f7f8 fcd3 	bl	80018f8 <HAL_ADC_ConfigChannel>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8008f58:	f000 f8fe 	bl	8009158 <Error_Handler>
  }

}
 8008f5c:	bf00      	nop
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	20000a78 	.word	0x20000a78

08008f68 <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8008f6c:	4b0d      	ldr	r3, [pc, #52]	; (8008fa4 <MX_CRC_Init+0x3c>)
 8008f6e:	4a0e      	ldr	r2, [pc, #56]	; (8008fa8 <MX_CRC_Init+0x40>)
 8008f70:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8008f72:	4b0c      	ldr	r3, [pc, #48]	; (8008fa4 <MX_CRC_Init+0x3c>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008f78:	4b0a      	ldr	r3, [pc, #40]	; (8008fa4 <MX_CRC_Init+0x3c>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8008f7e:	4b09      	ldr	r3, [pc, #36]	; (8008fa4 <MX_CRC_Init+0x3c>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8008f84:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <MX_CRC_Init+0x3c>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008f8a:	4b06      	ldr	r3, [pc, #24]	; (8008fa4 <MX_CRC_Init+0x3c>)
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008f90:	4804      	ldr	r0, [pc, #16]	; (8008fa4 <MX_CRC_Init+0x3c>)
 8008f92:	f7f9 f991 	bl	80022b8 <HAL_CRC_Init>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8008f9c:	f000 f8dc 	bl	8009158 <Error_Handler>
  }

}
 8008fa0:	bf00      	nop
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20000a54 	.word	0x20000a54
 8008fa8:	40023000 	.word	0x40023000

08008fac <MX_TIM15_Init>:

/* TIM15 init function */
static void MX_TIM15_Init(void)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b096      	sub	sp, #88	; 0x58
 8008fb0:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim15.Instance = TIM15;
 8008fb2:	4b32      	ldr	r3, [pc, #200]	; (800907c <MX_TIM15_Init+0xd0>)
 8008fb4:	4a32      	ldr	r2, [pc, #200]	; (8009080 <MX_TIM15_Init+0xd4>)
 8008fb6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 30000;
 8008fb8:	4b30      	ldr	r3, [pc, #192]	; (800907c <MX_TIM15_Init+0xd0>)
 8008fba:	f247 5230 	movw	r2, #30000	; 0x7530
 8008fbe:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fc0:	4b2e      	ldr	r3, [pc, #184]	; (800907c <MX_TIM15_Init+0xd0>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 255;
 8008fc6:	4b2d      	ldr	r3, [pc, #180]	; (800907c <MX_TIM15_Init+0xd0>)
 8008fc8:	22ff      	movs	r2, #255	; 0xff
 8008fca:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008fcc:	4b2b      	ldr	r3, [pc, #172]	; (800907c <MX_TIM15_Init+0xd0>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8008fd2:	4b2a      	ldr	r3, [pc, #168]	; (800907c <MX_TIM15_Init+0xd0>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8008fd8:	4828      	ldr	r0, [pc, #160]	; (800907c <MX_TIM15_Init+0xd0>)
 8008fda:	f7fd f981 	bl	80062e0 <HAL_TIM_PWM_Init>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <MX_TIM15_Init+0x3c>
  {
    Error_Handler();
 8008fe4:	f000 f8b8 	bl	8009158 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008fec:	2300      	movs	r3, #0
 8008fee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008ff0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	4821      	ldr	r0, [pc, #132]	; (800907c <MX_TIM15_Init+0xd0>)
 8008ff8:	f7fd fdd2 	bl	8006ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d001      	beq.n	8009006 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8009002:	f000 f8a9 	bl	8009158 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009006:	2300      	movs	r3, #0
 8009008:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800900a:	2300      	movs	r3, #0
 800900c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009012:	2300      	movs	r3, #0
 8009014:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009016:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800901a:	637b      	str	r3, [r7, #52]	; 0x34
  sBreakDeadTimeConfig.BreakFilter = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	63bb      	str	r3, [r7, #56]	; 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009020:	2300      	movs	r3, #0
 8009022:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8009024:	f107 0320 	add.w	r3, r7, #32
 8009028:	4619      	mov	r1, r3
 800902a:	4814      	ldr	r0, [pc, #80]	; (800907c <MX_TIM15_Init+0xd0>)
 800902c:	f7fd fe0c 	bl	8006c48 <HAL_TIMEx_ConfigBreakDeadTime>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8009036:	f000 f88f 	bl	8009158 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800903a:	2360      	movs	r3, #96	; 0x60
 800903c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800903e:	2364      	movs	r3, #100	; 0x64
 8009040:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009042:	2300      	movs	r3, #0
 8009044:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009046:	2300      	movs	r3, #0
 8009048:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800904a:	2300      	movs	r3, #0
 800904c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800904e:	2300      	movs	r3, #0
 8009050:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009052:	2300      	movs	r3, #0
 8009054:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009056:	1d3b      	adds	r3, r7, #4
 8009058:	2204      	movs	r2, #4
 800905a:	4619      	mov	r1, r3
 800905c:	4807      	ldr	r0, [pc, #28]	; (800907c <MX_TIM15_Init+0xd0>)
 800905e:	f7fd fc87 	bl	8006970 <HAL_TIM_PWM_ConfigChannel>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8009068:	f000 f876 	bl	8009158 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim15);
 800906c:	4803      	ldr	r0, [pc, #12]	; (800907c <MX_TIM15_Init+0xd0>)
 800906e:	f000 f917 	bl	80092a0 <HAL_TIM_MspPostInit>

}
 8009072:	bf00      	nop
 8009074:	3758      	adds	r7, #88	; 0x58
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	20000a18 	.word	0x20000a18
 8009080:	40014000 	.word	0x40014000

08009084 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800908a:	4a31      	ldr	r2, [pc, #196]	; (8009150 <MX_GPIO_Init+0xcc>)
 800908c:	4b30      	ldr	r3, [pc, #192]	; (8009150 <MX_GPIO_Init+0xcc>)
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009094:	6153      	str	r3, [r2, #20]
 8009096:	4b2e      	ldr	r3, [pc, #184]	; (8009150 <MX_GPIO_Init+0xcc>)
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800909e:	60bb      	str	r3, [r7, #8]
 80090a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80090a2:	4a2b      	ldr	r2, [pc, #172]	; (8009150 <MX_GPIO_Init+0xcc>)
 80090a4:	4b2a      	ldr	r3, [pc, #168]	; (8009150 <MX_GPIO_Init+0xcc>)
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090ac:	6153      	str	r3, [r2, #20]
 80090ae:	4b28      	ldr	r3, [pc, #160]	; (8009150 <MX_GPIO_Init+0xcc>)
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090b6:	607b      	str	r3, [r7, #4]
 80090b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80090ba:	4a25      	ldr	r2, [pc, #148]	; (8009150 <MX_GPIO_Init+0xcc>)
 80090bc:	4b24      	ldr	r3, [pc, #144]	; (8009150 <MX_GPIO_Init+0xcc>)
 80090be:	695b      	ldr	r3, [r3, #20]
 80090c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090c4:	6153      	str	r3, [r2, #20]
 80090c6:	4b22      	ldr	r3, [pc, #136]	; (8009150 <MX_GPIO_Init+0xcc>)
 80090c8:	695b      	ldr	r3, [r3, #20]
 80090ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090ce:	603b      	str	r3, [r7, #0]
 80090d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DO_SCK_1_Pin|DO_USBPWREN_Pin, GPIO_PIN_RESET);
 80090d2:	2200      	movs	r2, #0
 80090d4:	f248 0102 	movw	r1, #32770	; 0x8002
 80090d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80090dc:	f7f9 fc8c 	bl	80029f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|DO_LED_1_Pin|DO_SCK_2_Pin|DO_BOOT_SET_Pin, GPIO_PIN_RESET);
 80090e0:	2200      	movs	r2, #0
 80090e2:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 80090e6:	481b      	ldr	r0, [pc, #108]	; (8009154 <MX_GPIO_Init+0xd0>)
 80090e8:	f7f9 fc86 	bl	80029f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DO_SCK_1_Pin DO_USBPWREN_Pin */
  GPIO_InitStruct.Pin = DO_SCK_1_Pin|DO_USBPWREN_Pin;
 80090ec:	f248 0302 	movw	r3, #32770	; 0x8002
 80090f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090f2:	2301      	movs	r3, #1
 80090f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090f6:	2300      	movs	r3, #0
 80090f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090fa:	2300      	movs	r3, #0
 80090fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090fe:	f107 030c 	add.w	r3, r7, #12
 8009102:	4619      	mov	r1, r3
 8009104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009108:	f7f9 fae0 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_DATA_1_Pin DI_DATA_2_Pin */
  GPIO_InitStruct.Pin = DI_DATA_1_Pin|DI_DATA_2_Pin;
 800910c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009110:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009112:	2300      	movs	r3, #0
 8009114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009116:	2300      	movs	r3, #0
 8009118:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800911a:	f107 030c 	add.w	r3, r7, #12
 800911e:	4619      	mov	r1, r3
 8009120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009124:	f7f9 fad2 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin DO_LED_1_Pin DO_SCK_2_Pin DO_BOOT_SET_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|DO_LED_1_Pin|DO_SCK_2_Pin|DO_BOOT_SET_Pin;
 8009128:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 800912c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800912e:	2301      	movs	r3, #1
 8009130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009132:	2300      	movs	r3, #0
 8009134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009136:	2300      	movs	r3, #0
 8009138:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800913a:	f107 030c 	add.w	r3, r7, #12
 800913e:	4619      	mov	r1, r3
 8009140:	4804      	ldr	r0, [pc, #16]	; (8009154 <MX_GPIO_Init+0xd0>)
 8009142:	f7f9 fac3 	bl	80026cc <HAL_GPIO_Init>

}
 8009146:	bf00      	nop
 8009148:	3720      	adds	r7, #32
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	40021000 	.word	0x40021000
 8009154:	48000400 	.word	0x48000400

08009158 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8009158:	b480      	push	{r7}
 800915a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 800915c:	e7fe      	b.n	800915c <Error_Handler+0x4>
 800915e:	bf00      	nop

08009160 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009166:	4a1e      	ldr	r2, [pc, #120]	; (80091e0 <HAL_MspInit+0x80>)
 8009168:	4b1d      	ldr	r3, [pc, #116]	; (80091e0 <HAL_MspInit+0x80>)
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	f043 0301 	orr.w	r3, r3, #1
 8009170:	6193      	str	r3, [r2, #24]
 8009172:	4b1b      	ldr	r3, [pc, #108]	; (80091e0 <HAL_MspInit+0x80>)
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	607b      	str	r3, [r7, #4]
 800917c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800917e:	2003      	movs	r0, #3
 8009180:	f7f9 f82e 	bl	80021e0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8009184:	2200      	movs	r2, #0
 8009186:	2100      	movs	r1, #0
 8009188:	f06f 000b 	mvn.w	r0, #11
 800918c:	f7f9 f834 	bl	80021f8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8009190:	2200      	movs	r2, #0
 8009192:	2100      	movs	r1, #0
 8009194:	f06f 000a 	mvn.w	r0, #10
 8009198:	f7f9 f82e 	bl	80021f8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800919c:	2200      	movs	r2, #0
 800919e:	2100      	movs	r1, #0
 80091a0:	f06f 0009 	mvn.w	r0, #9
 80091a4:	f7f9 f828 	bl	80021f8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80091a8:	2200      	movs	r2, #0
 80091aa:	2100      	movs	r1, #0
 80091ac:	f06f 0004 	mvn.w	r0, #4
 80091b0:	f7f9 f822 	bl	80021f8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80091b4:	2200      	movs	r2, #0
 80091b6:	2100      	movs	r1, #0
 80091b8:	f06f 0003 	mvn.w	r0, #3
 80091bc:	f7f9 f81c 	bl	80021f8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80091c0:	2200      	movs	r2, #0
 80091c2:	2100      	movs	r1, #0
 80091c4:	f06f 0001 	mvn.w	r0, #1
 80091c8:	f7f9 f816 	bl	80021f8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80091cc:	2200      	movs	r2, #0
 80091ce:	2100      	movs	r1, #0
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295
 80091d4:	f7f9 f810 	bl	80021f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80091d8:	bf00      	nop
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	40021000 	.word	0x40021000

080091e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]

  if(hadc->Instance==ADC1)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091f4:	d10b      	bne.n	800920e <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80091f6:	4a09      	ldr	r2, [pc, #36]	; (800921c <HAL_ADC_MspInit+0x38>)
 80091f8:	4b08      	ldr	r3, [pc, #32]	; (800921c <HAL_ADC_MspInit+0x38>)
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009200:	6153      	str	r3, [r2, #20]
 8009202:	4b06      	ldr	r3, [pc, #24]	; (800921c <HAL_ADC_MspInit+0x38>)
 8009204:	695b      	ldr	r3, [r3, #20]
 8009206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800920a:	60fb      	str	r3, [r7, #12]
 800920c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800920e:	bf00      	nop
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	40021000 	.word	0x40021000

08009220 <HAL_CRC_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a0a      	ldr	r2, [pc, #40]	; (8009258 <HAL_CRC_MspInit+0x38>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d10b      	bne.n	800924a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8009232:	4a0a      	ldr	r2, [pc, #40]	; (800925c <HAL_CRC_MspInit+0x3c>)
 8009234:	4b09      	ldr	r3, [pc, #36]	; (800925c <HAL_CRC_MspInit+0x3c>)
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800923c:	6153      	str	r3, [r2, #20]
 800923e:	4b07      	ldr	r3, [pc, #28]	; (800925c <HAL_CRC_MspInit+0x3c>)
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800924a:	bf00      	nop
 800924c:	3714      	adds	r7, #20
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	40023000 	.word	0x40023000
 800925c:	40021000 	.word	0x40021000

08009260 <HAL_TIM_PWM_MspInit>:
  /* USER CODE END CRC_MspDeInit 1 */

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM15)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a0a      	ldr	r2, [pc, #40]	; (8009298 <HAL_TIM_PWM_MspInit+0x38>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d10b      	bne.n	800928a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8009272:	4a0a      	ldr	r2, [pc, #40]	; (800929c <HAL_TIM_PWM_MspInit+0x3c>)
 8009274:	4b09      	ldr	r3, [pc, #36]	; (800929c <HAL_TIM_PWM_MspInit+0x3c>)
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800927c:	6193      	str	r3, [r2, #24]
 800927e:	4b07      	ldr	r3, [pc, #28]	; (800929c <HAL_TIM_PWM_MspInit+0x3c>)
 8009280:	699b      	ldr	r3, [r3, #24]
 8009282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009286:	60fb      	str	r3, [r7, #12]
 8009288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800928a:	bf00      	nop
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	40014000 	.word	0x40014000
 800929c:	40021000 	.word	0x40021000

080092a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM15)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a0b      	ldr	r2, [pc, #44]	; (80092dc <HAL_TIM_MspPostInit+0x3c>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d110      	bne.n	80092d4 <HAL_TIM_MspPostInit+0x34>
  /* USER CODE END TIM15_MspPostInit 0 */
  
    /**TIM15 GPIO Configuration    
    PB15     ------> TIM15_CH2 
    */
    GPIO_InitStruct.Pin = DO_LED_2_Pin;
 80092b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092b8:	2302      	movs	r3, #2
 80092ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092bc:	2300      	movs	r3, #0
 80092be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092c0:	2300      	movs	r3, #0
 80092c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80092c4:	2301      	movs	r3, #1
 80092c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DO_LED_2_GPIO_Port, &GPIO_InitStruct);
 80092c8:	f107 030c 	add.w	r3, r7, #12
 80092cc:	4619      	mov	r1, r3
 80092ce:	4804      	ldr	r0, [pc, #16]	; (80092e0 <HAL_TIM_MspPostInit+0x40>)
 80092d0:	f7f9 f9fc 	bl	80026cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80092d4:	bf00      	nop
 80092d6:	3720      	adds	r7, #32
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	40014000 	.word	0x40014000
 80092e0:	48000400 	.word	0x48000400

080092e4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80092e4:	b480      	push	{r7}
 80092e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80092e8:	bf00      	nop
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop

080092f4 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80092f4:	b480      	push	{r7}
 80092f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 80092f8:	e7fe      	b.n	80092f8 <HardFault_Handler+0x4>
 80092fa:	bf00      	nop

080092fc <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80092fc:	b480      	push	{r7}
 80092fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 8009300:	e7fe      	b.n	8009300 <MemManage_Handler+0x4>
 8009302:	bf00      	nop

08009304 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8009304:	b480      	push	{r7}
 8009306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8009308:	e7fe      	b.n	8009308 <BusFault_Handler+0x4>
 800930a:	bf00      	nop

0800930c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800930c:	b480      	push	{r7}
 800930e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 8009310:	e7fe      	b.n	8009310 <UsageFault_Handler+0x4>
 8009312:	bf00      	nop

08009314 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8009314:	b480      	push	{r7}
 8009316:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009318:	bf00      	nop
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop

08009324 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8009324:	b480      	push	{r7}
 8009326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009328:	bf00      	nop
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop

08009334 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8009334:	b480      	push	{r7}
 8009336:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009338:	bf00      	nop
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop

08009344 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009348:	f7f7 feac 	bl	80010a4 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800934c:	f7f8 ffa6 	bl	800229c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009350:	bf00      	nop
 8009352:	bd80      	pop	{r7, pc}

08009354 <USB_LP_CAN_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN_RX0 interrupts.
*/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8009358:	4802      	ldr	r0, [pc, #8]	; (8009364 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800935a:	f7f9 ff99 	bl	8003290 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800935e:	bf00      	nop
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	20000d08 	.word	0x20000d08

08009368 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800936c:	2200      	movs	r2, #0
 800936e:	4908      	ldr	r1, [pc, #32]	; (8009390 <MX_USB_DEVICE_Init+0x28>)
 8009370:	4808      	ldr	r0, [pc, #32]	; (8009394 <MX_USB_DEVICE_Init+0x2c>)
 8009372:	f7fe f819 	bl	80073a8 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8009376:	4908      	ldr	r1, [pc, #32]	; (8009398 <MX_USB_DEVICE_Init+0x30>)
 8009378:	4806      	ldr	r0, [pc, #24]	; (8009394 <MX_USB_DEVICE_Init+0x2c>)
 800937a:	f7fe f841 	bl	8007400 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800937e:	4907      	ldr	r1, [pc, #28]	; (800939c <MX_USB_DEVICE_Init+0x34>)
 8009380:	4804      	ldr	r0, [pc, #16]	; (8009394 <MX_USB_DEVICE_Init+0x2c>)
 8009382:	f7fd ff77 	bl	8007274 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8009386:	4803      	ldr	r0, [pc, #12]	; (8009394 <MX_USB_DEVICE_Init+0x2c>)
 8009388:	f7fe f854 	bl	8007434 <USBD_Start>

}
 800938c:	bf00      	nop
 800938e:	bd80      	pop	{r7, pc}
 8009390:	20000128 	.word	0x20000128
 8009394:	20000acc 	.word	0x20000acc
 8009398:	20000010 	.word	0x20000010
 800939c:	20000118 	.word	0x20000118

080093a0 <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80093a4:	2200      	movs	r2, #0
 80093a6:	4905      	ldr	r1, [pc, #20]	; (80093bc <CDC_Init_FS+0x1c>)
 80093a8:	4805      	ldr	r0, [pc, #20]	; (80093c0 <CDC_Init_FS+0x20>)
 80093aa:	f7fd ff7b 	bl	80072a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80093ae:	4905      	ldr	r1, [pc, #20]	; (80093c4 <CDC_Init_FS+0x24>)
 80093b0:	4803      	ldr	r0, [pc, #12]	; (80093c0 <CDC_Init_FS+0x20>)
 80093b2:	f7fd ff91 	bl	80072d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80093b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */ 
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	20000cfc 	.word	0x20000cfc
 80093c0:	20000acc 	.word	0x20000acc
 80093c4:	20000cf0 	.word	0x20000cf0

080093c8 <CDC_DeInit_FS>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80093c8:	b480      	push	{r7}
 80093ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
 80093cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS  (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	4603      	mov	r3, r0
 80093e0:	6039      	str	r1, [r7, #0]
 80093e2:	71fb      	strb	r3, [r7, #7]
 80093e4:	4613      	mov	r3, r2
 80093e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 80093e8:	79fb      	ldrb	r3, [r7, #7]
 80093ea:	2b23      	cmp	r3, #35	; 0x23
 80093ec:	d84a      	bhi.n	8009484 <CDC_Control_FS+0xac>
 80093ee:	a201      	add	r2, pc, #4	; (adr r2, 80093f4 <CDC_Control_FS+0x1c>)
 80093f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f4:	08009485 	.word	0x08009485
 80093f8:	08009485 	.word	0x08009485
 80093fc:	08009485 	.word	0x08009485
 8009400:	08009485 	.word	0x08009485
 8009404:	08009485 	.word	0x08009485
 8009408:	08009485 	.word	0x08009485
 800940c:	08009485 	.word	0x08009485
 8009410:	08009485 	.word	0x08009485
 8009414:	08009485 	.word	0x08009485
 8009418:	08009485 	.word	0x08009485
 800941c:	08009485 	.word	0x08009485
 8009420:	08009485 	.word	0x08009485
 8009424:	08009485 	.word	0x08009485
 8009428:	08009485 	.word	0x08009485
 800942c:	08009485 	.word	0x08009485
 8009430:	08009485 	.word	0x08009485
 8009434:	08009485 	.word	0x08009485
 8009438:	08009485 	.word	0x08009485
 800943c:	08009485 	.word	0x08009485
 8009440:	08009485 	.word	0x08009485
 8009444:	08009485 	.word	0x08009485
 8009448:	08009485 	.word	0x08009485
 800944c:	08009485 	.word	0x08009485
 8009450:	08009485 	.word	0x08009485
 8009454:	08009485 	.word	0x08009485
 8009458:	08009485 	.word	0x08009485
 800945c:	08009485 	.word	0x08009485
 8009460:	08009485 	.word	0x08009485
 8009464:	08009485 	.word	0x08009485
 8009468:	08009485 	.word	0x08009485
 800946c:	08009485 	.word	0x08009485
 8009470:	08009485 	.word	0x08009485
 8009474:	08009485 	.word	0x08009485
 8009478:	08009485 	.word	0x08009485
 800947c:	08009485 	.word	0x08009485
 8009480:	08009485 	.word	0x08009485
  case CDC_SEND_BREAK:
 
    break;    
    
  default:
    break;
 8009484:	bf00      	nop
  }

  return (USBD_OK);
 8009486:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800949e:	6879      	ldr	r1, [r7, #4]
 80094a0:	4807      	ldr	r0, [pc, #28]	; (80094c0 <CDC_Receive_FS+0x2c>)
 80094a2:	f7fd ff19 	bl	80072d8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80094a6:	4806      	ldr	r0, [pc, #24]	; (80094c0 <CDC_Receive_FS+0x2c>)
 80094a8:	f7fd ff54 	bl	8007354 <USBD_CDC_ReceivePacket>
	Commands_BufferHandle(Buf, Len);
 80094ac:	6839      	ldr	r1, [r7, #0]
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7ff f836 	bl	8008520 <Commands_BufferHandle>
	return (USBD_OK);
 80094b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */ 
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	20000acc 	.word	0x20000acc

080094c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be send
  * @param  Len: Number of data to be send (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	460b      	mov	r3, r1
 80094ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80094d4:	4b0d      	ldr	r3, [pc, #52]	; (800950c <CDC_Transmit_FS+0x48>)
 80094d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80094da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d001      	beq.n	80094ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e00b      	b.n	8009502 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80094ea:	887b      	ldrh	r3, [r7, #2]
 80094ec:	461a      	mov	r2, r3
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	4806      	ldr	r0, [pc, #24]	; (800950c <CDC_Transmit_FS+0x48>)
 80094f2:	f7fd fed7 	bl	80072a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80094f6:	4805      	ldr	r0, [pc, #20]	; (800950c <CDC_Transmit_FS+0x48>)
 80094f8:	f7fd ff02 	bl	8007300 <USBD_CDC_TransmitPacket>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */ 
  return result;
 8009500:	7bfb      	ldrb	r3, [r7, #15]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	20000acc 	.word	0x20000acc

08009510 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a16      	ldr	r2, [pc, #88]	; (8009578 <HAL_PCD_MspInit+0x68>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d125      	bne.n	800956e <HAL_PCD_MspInit+0x5e>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009522:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009526:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009528:	2302      	movs	r3, #2
 800952a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800952c:	2300      	movs	r3, #0
 800952e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009530:	2303      	movs	r3, #3
 8009532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009534:	230e      	movs	r3, #14
 8009536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009538:	f107 030c 	add.w	r3, r7, #12
 800953c:	4619      	mov	r1, r3
 800953e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009542:	f7f9 f8c3 	bl	80026cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009546:	4a0d      	ldr	r2, [pc, #52]	; (800957c <HAL_PCD_MspInit+0x6c>)
 8009548:	4b0c      	ldr	r3, [pc, #48]	; (800957c <HAL_PCD_MspInit+0x6c>)
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009550:	61d3      	str	r3, [r2, #28]
 8009552:	4b0a      	ldr	r3, [pc, #40]	; (800957c <HAL_PCD_MspInit+0x6c>)
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800955a:	60bb      	str	r3, [r7, #8]
 800955c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800955e:	2200      	movs	r2, #0
 8009560:	2100      	movs	r1, #0
 8009562:	2014      	movs	r0, #20
 8009564:	f7f8 fe48 	bl	80021f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009568:	2014      	movs	r0, #20
 800956a:	f7f8 fe61 	bl	8002230 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800956e:	bf00      	nop
 8009570:	3720      	adds	r7, #32
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	40005c00 	.word	0x40005c00
 800957c:	40021000 	.word	0x40021000

08009580 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup Stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 23a4 	ldr.w	r2, [r3, #932]	; 0x3a4
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8009594:	4619      	mov	r1, r3
 8009596:	4610      	mov	r0, r2
 8009598:	f7fd ff98 	bl	80074cc <USBD_LL_SetupStage>
}
 800959c:	bf00      	nop
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 03a4 	ldr.w	r0, [r3, #932]	; 0x3a4
 80095b6:	78fa      	ldrb	r2, [r7, #3]
 80095b8:	6879      	ldr	r1, [r7, #4]
 80095ba:	4613      	mov	r3, r2
 80095bc:	00db      	lsls	r3, r3, #3
 80095be:	1a9b      	subs	r3, r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	440b      	add	r3, r1
 80095c4:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	78fb      	ldrb	r3, [r7, #3]
 80095cc:	4619      	mov	r1, r3
 80095ce:	f7fd ffc7 	bl	8007560 <USBD_LL_DataOutStage>
}
 80095d2:	bf00      	nop
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop

080095dc <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 03a4 	ldr.w	r0, [r3, #932]	; 0x3a4
 80095ee:	78fa      	ldrb	r2, [r7, #3]
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	4613      	mov	r3, r2
 80095f4:	00db      	lsls	r3, r3, #3
 80095f6:	1a9b      	subs	r3, r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	440b      	add	r3, r1
 80095fc:	3338      	adds	r3, #56	; 0x38
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	78fb      	ldrb	r3, [r7, #3]
 8009602:	4619      	mov	r1, r3
 8009604:	f7fe f808 	bl	8007618 <USBD_LL_DataInStage>
}
 8009608:	bf00      	nop
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe f8f2 	bl	8007808 <USBD_LL_SOF>
}
 8009624:	bf00      	nop
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009634:	2301      	movs	r3, #1
 8009636:	73fb      	strb	r3, [r7, #15]

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	2b02      	cmp	r3, #2
 800963e:	d102      	bne.n	8009646 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 8009640:	2301      	movs	r3, #1
 8009642:	73fb      	strb	r3, [r7, #15]
    break;
 8009644:	e002      	b.n	800964c <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;    
 8009646:	2301      	movs	r3, #1
 8009648:	73fb      	strb	r3, [r7, #15]
    break;    
 800964a:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8009652:	7bfa      	ldrb	r2, [r7, #15]
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f7fe f89e 	bl	8007798 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe f868 	bl	8007738 <USBD_LL_Reset>
}
 8009668:	bf00      	nop
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 800967e:	4618      	mov	r0, r3
 8009680:	f7fe f89a 	bl	80077b8 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d005      	beq.n	8009698 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800968c:	4a04      	ldr	r2, [pc, #16]	; (80096a0 <HAL_PCD_SuspendCallback+0x30>)
 800968e:	4b04      	ldr	r3, [pc, #16]	; (80096a0 <HAL_PCD_SuspendCallback+0x30>)
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	f043 0306 	orr.w	r3, r3, #6
 8009696:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	e000ed00 	.word	0xe000ed00

080096a4 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fe f896 	bl	80077e4 <USBD_LL_Resume>
  
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 80096c8:	4a29      	ldr	r2, [pc, #164]	; (8009770 <USBD_LL_Init+0xb0>)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8c2 33a4 	str.w	r3, [r2, #932]	; 0x3a4
  pdev->pData = &hpcd_USB_FS;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a27      	ldr	r2, [pc, #156]	; (8009770 <USBD_LL_Init+0xb0>)
 80096d4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 80096d8:	4b25      	ldr	r3, [pc, #148]	; (8009770 <USBD_LL_Init+0xb0>)
 80096da:	4a26      	ldr	r2, [pc, #152]	; (8009774 <USBD_LL_Init+0xb4>)
 80096dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80096de:	4b24      	ldr	r3, [pc, #144]	; (8009770 <USBD_LL_Init+0xb0>)
 80096e0:	2208      	movs	r2, #8
 80096e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096e4:	4b22      	ldr	r3, [pc, #136]	; (8009770 <USBD_LL_Init+0xb0>)
 80096e6:	2202      	movs	r2, #2
 80096e8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80096ea:	4b21      	ldr	r3, [pc, #132]	; (8009770 <USBD_LL_Init+0xb0>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096f0:	4b1f      	ldr	r3, [pc, #124]	; (8009770 <USBD_LL_Init+0xb0>)
 80096f2:	2202      	movs	r2, #2
 80096f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096f6:	4b1e      	ldr	r3, [pc, #120]	; (8009770 <USBD_LL_Init+0xb0>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096fc:	4b1c      	ldr	r3, [pc, #112]	; (8009770 <USBD_LL_Init+0xb0>)
 80096fe:	2200      	movs	r2, #0
 8009700:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009702:	481b      	ldr	r0, [pc, #108]	; (8009770 <USBD_LL_Init+0xb0>)
 8009704:	f7f9 f9a2 	bl	8002a4c <HAL_PCD_Init>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <USBD_LL_Init+0x52>
  {
    Error_Handler();
 800970e:	f7ff fd23 	bl	8009158 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8009718:	2318      	movs	r3, #24
 800971a:	2200      	movs	r2, #0
 800971c:	2100      	movs	r1, #0
 800971e:	f7fb f827 	bl	8004770 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8009728:	2358      	movs	r3, #88	; 0x58
 800972a:	2200      	movs	r2, #0
 800972c:	2180      	movs	r1, #128	; 0x80
 800972e:	f7fb f81f 	bl	8004770 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);  
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8009738:	23c0      	movs	r3, #192	; 0xc0
 800973a:	2200      	movs	r2, #0
 800973c:	2181      	movs	r1, #129	; 0x81
 800973e:	f7fb f817 	bl	8004770 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8009748:	f44f 7388 	mov.w	r3, #272	; 0x110
 800974c:	2200      	movs	r2, #0
 800974e:	2101      	movs	r1, #1
 8009750:	f7fb f80e 	bl	8004770 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);  
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800975a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800975e:	2200      	movs	r2, #0
 8009760:	2182      	movs	r1, #130	; 0x82
 8009762:	f7fb f805 	bl	8004770 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	20000d08 	.word	0x20000d08
 8009774:	40005c00 	.word	0x40005c00

08009778 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start((PCD_HandleTypeDef*)pdev->pData);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009786:	4618      	mov	r0, r3
 8009788:	f7f9 fa40 	bl	8002c0c <HAL_PCD_Start>
  return USBD_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop

08009798 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	4608      	mov	r0, r1
 80097a2:	4611      	mov	r1, r2
 80097a4:	461a      	mov	r2, r3
 80097a6:	4603      	mov	r3, r0
 80097a8:	70fb      	strb	r3, [r7, #3]
 80097aa:	460b      	mov	r3, r1
 80097ac:	70bb      	strb	r3, [r7, #2]
 80097ae:	4613      	mov	r3, r2
 80097b0:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open((PCD_HandleTypeDef*) pdev->pData,
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80097b8:	78bb      	ldrb	r3, [r7, #2]
 80097ba:	883a      	ldrh	r2, [r7, #0]
 80097bc:	78f9      	ldrb	r1, [r7, #3]
 80097be:	f7f9 fe7f 	bl	80034c0 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK; 
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80097de:	78fa      	ldrb	r2, [r7, #3]
 80097e0:	4611      	mov	r1, r2
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fa fa04 	bl	8003bf0 <HAL_PCD_EP_Close>
  return USBD_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop

080097f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009806:	78fa      	ldrb	r2, [r7, #3]
 8009808:	4611      	mov	r1, r2
 800980a:	4618      	mov	r0, r3
 800980c:	f7fa fe2a 	bl	8004464 <HAL_PCD_EP_SetStall>
  return USBD_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop

0800981c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	460b      	mov	r3, r1
 8009826:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800982e:	78fa      	ldrb	r2, [r7, #3]
 8009830:	4611      	mov	r1, r2
 8009832:	4618      	mov	r0, r3
 8009834:	f7fa febe 	bl	80045b4 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop

08009844 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009856:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800985c:	2b00      	cmp	r3, #0
 800985e:	da0b      	bge.n	8009878 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009866:	68f9      	ldr	r1, [r7, #12]
 8009868:	4613      	mov	r3, r2
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	1a9b      	subs	r3, r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	440b      	add	r3, r1
 8009872:	332a      	adds	r3, #42	; 0x2a
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	e00b      	b.n	8009890 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800987e:	68f9      	ldr	r1, [r7, #12]
 8009880:	4613      	mov	r3, r2
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	1a9b      	subs	r3, r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	440b      	add	r3, r1
 800988a:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800988e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009890:	4618      	mov	r0, r3
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	460b      	mov	r3, r1
 80098a6:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress((PCD_HandleTypeDef*) pdev->pData, dev_addr);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80098ae:	78fa      	ldrb	r2, [r7, #3]
 80098b0:	4611      	mov	r1, r2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7f9 fdda 	bl	800346c <HAL_PCD_SetAddress>
  return USBD_OK; 
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop

080098c4 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	607a      	str	r2, [r7, #4]
 80098ce:	461a      	mov	r2, r3
 80098d0:	460b      	mov	r3, r1
 80098d2:	72fb      	strb	r3, [r7, #11]
 80098d4:	4613      	mov	r3, r2
 80098d6:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Transmit((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80098de:	893b      	ldrh	r3, [r7, #8]
 80098e0:	7af9      	ldrb	r1, [r7, #11]
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	f7fa fcca 	bl	800427c <HAL_PCD_EP_Transmit>
  return USBD_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop

080098f4 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	607a      	str	r2, [r7, #4]
 80098fe:	461a      	mov	r2, r3
 8009900:	460b      	mov	r3, r1
 8009902:	72fb      	strb	r3, [r7, #11]
 8009904:	4613      	mov	r3, r2
 8009906:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Receive((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800990e:	893b      	ldrh	r3, [r7, #8]
 8009910:	7af9      	ldrb	r1, [r7, #11]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	f7fa fb84 	bl	8004020 <HAL_PCD_EP_Receive>
  return USBD_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop

08009924 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	460b      	mov	r3, r1
 800992e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009936:	78fa      	ldrb	r2, [r7, #3]
 8009938:	4611      	mov	r1, r2
 800993a:	4618      	mov	r0, r3
 800993c:	f7fa fc84 	bl	8004248 <HAL_PCD_EP_GetRxCount>
 8009940:	4603      	mov	r3, r0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop

0800994c <USBD_static_malloc>:
  * @brief  static single allocation.
  * @param  size: size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];//On 32-bit boundary
  return mem;
 8009954:	4b03      	ldr	r3, [pc, #12]	; (8009964 <USBD_static_malloc+0x18>)
}
 8009956:	4618      	mov	r0, r3
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	200006c8 	.word	0x200006c8

08009968 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  free(p);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f9b5 	bl	8009ce0 <free>
}
 8009976:	bf00      	nop
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop

08009980 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High Connection State */
   
  } 
/* USER CODE END 4 */
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <USBD_FS_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	4603      	mov	r3, r0
 80099a0:	6039      	str	r1, [r7, #0]
 80099a2:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	2212      	movs	r2, #18
 80099a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80099aa:	4b03      	ldr	r3, [pc, #12]	; (80099b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	20000144 	.word	0x20000144

080099bc <USBD_FS_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	6039      	str	r1, [r7, #0]
 80099c6:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	2204      	movs	r2, #4
 80099cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80099ce:	4b03      	ldr	r3, [pc, #12]	; (80099dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	20000158 	.word	0x20000158

080099e0 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	6039      	str	r1, [r7, #0]
 80099ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d105      	bne.n	80099fe <USBD_FS_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	4907      	ldr	r1, [pc, #28]	; (8009a14 <USBD_FS_ProductStrDescriptor+0x34>)
 80099f6:	4808      	ldr	r0, [pc, #32]	; (8009a18 <USBD_FS_ProductStrDescriptor+0x38>)
 80099f8:	f7fe fb26 	bl	8008048 <USBD_GetString>
 80099fc:	e004      	b.n	8009a08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	4904      	ldr	r1, [pc, #16]	; (8009a14 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a02:	4805      	ldr	r0, [pc, #20]	; (8009a18 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a04:	f7fe fb20 	bl	8008048 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a08:	4b02      	ldr	r3, [pc, #8]	; (8009a14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	200010b0 	.word	0x200010b0
 8009a18:	0800cbf0 	.word	0x0800cbf0

08009a1c <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	6039      	str	r1, [r7, #0]
 8009a26:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	4904      	ldr	r1, [pc, #16]	; (8009a3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a2c:	4804      	ldr	r0, [pc, #16]	; (8009a40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a2e:	f7fe fb0b 	bl	8008048 <USBD_GetString>
  return USBD_StrDesc;
 8009a32:	4b02      	ldr	r3, [pc, #8]	; (8009a3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3708      	adds	r7, #8
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	200010b0 	.word	0x200010b0
 8009a40:	0800cc08 	.word	0x0800cc08

08009a44 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	6039      	str	r1, [r7, #0]
 8009a4e:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 8009a50:	79fb      	ldrb	r3, [r7, #7]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d105      	bne.n	8009a62 <USBD_FS_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	4907      	ldr	r1, [pc, #28]	; (8009a78 <USBD_FS_SerialStrDescriptor+0x34>)
 8009a5a:	4808      	ldr	r0, [pc, #32]	; (8009a7c <USBD_FS_SerialStrDescriptor+0x38>)
 8009a5c:	f7fe faf4 	bl	8008048 <USBD_GetString>
 8009a60:	e004      	b.n	8009a6c <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	4904      	ldr	r1, [pc, #16]	; (8009a78 <USBD_FS_SerialStrDescriptor+0x34>)
 8009a66:	4805      	ldr	r0, [pc, #20]	; (8009a7c <USBD_FS_SerialStrDescriptor+0x38>)
 8009a68:	f7fe faee 	bl	8008048 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a6c:	4b02      	ldr	r3, [pc, #8]	; (8009a78 <USBD_FS_SerialStrDescriptor+0x34>)
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	200010b0 	.word	0x200010b0
 8009a7c:	0800cc1c 	.word	0x0800cc1c

08009a80 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	6039      	str	r1, [r7, #0]
 8009a8a:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 8009a8c:	79fb      	ldrb	r3, [r7, #7]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d105      	bne.n	8009a9e <USBD_FS_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	4907      	ldr	r1, [pc, #28]	; (8009ab4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a96:	4808      	ldr	r0, [pc, #32]	; (8009ab8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a98:	f7fe fad6 	bl	8008048 <USBD_GetString>
 8009a9c:	e004      	b.n	8009aa8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	4904      	ldr	r1, [pc, #16]	; (8009ab4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009aa2:	4805      	ldr	r0, [pc, #20]	; (8009ab8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009aa4:	f7fe fad0 	bl	8008048 <USBD_GetString>
  }
  return USBD_StrDesc;  
 8009aa8:	4b02      	ldr	r3, [pc, #8]	; (8009ab4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	200010b0 	.word	0x200010b0
 8009ab8:	0800cc2c 	.word	0x0800cc2c

08009abc <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	6039      	str	r1, [r7, #0]
 8009ac6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ac8:	79fb      	ldrb	r3, [r7, #7]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d105      	bne.n	8009ada <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	4907      	ldr	r1, [pc, #28]	; (8009af0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ad2:	4808      	ldr	r0, [pc, #32]	; (8009af4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ad4:	f7fe fab8 	bl	8008048 <USBD_GetString>
 8009ad8:	e004      	b.n	8009ae4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	4904      	ldr	r1, [pc, #16]	; (8009af0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ade:	4805      	ldr	r0, [pc, #20]	; (8009af4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ae0:	f7fe fab2 	bl	8008048 <USBD_GetString>
  }
  return USBD_StrDesc;  
 8009ae4:	4b02      	ldr	r3, [pc, #8]	; (8009af0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	200010b0 	.word	0x200010b0
 8009af4:	0800cc38 	.word	0x0800cc38

08009af8 <HX711_Init>:
#include "hx711.h"

void HX711_Init(HX711 data)
{
 8009af8:	b084      	sub	sp, #16
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b086      	sub	sp, #24
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	f107 0e20 	add.w	lr, r7, #32
 8009b04:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = data.pinSck;
 8009b08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b0a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b14:	2300      	movs	r3, #0
 8009b16:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(data.gpioSck, &GPIO_InitStruct);
 8009b18:	6a3b      	ldr	r3, [r7, #32]
 8009b1a:	1d3a      	adds	r2, r7, #4
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7f8 fdd4 	bl	80026cc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = data.pinData;
 8009b24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b26:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b30:	2300      	movs	r3, #0
 8009b32:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(data.gpioData, &GPIO_InitStruct);
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	1d3a      	adds	r2, r7, #4
 8009b38:	4611      	mov	r1, r2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7f8 fdc6 	bl	80026cc <HAL_GPIO_Init>

	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8009b44:	2201      	movs	r2, #1
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7f8 ff56 	bl	80029f8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8009b4c:	2032      	movs	r0, #50	; 0x32
 8009b4e:	f7f7 fac3 	bl	80010d8 <HAL_Delay>
	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8009b56:	2200      	movs	r2, #0
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7f8 ff4d 	bl	80029f8 <HAL_GPIO_WritePin>

}
 8009b5e:	bf00      	nop
 8009b60:	3718      	adds	r7, #24
 8009b62:	46bd      	mov	sp, r7
 8009b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b68:	b004      	add	sp, #16
 8009b6a:	4770      	bx	lr

08009b6c <HX711_Average_Value>:

int HX711_Average_Value(HX711 data, uint8_t times)
{
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b094      	sub	sp, #80	; 0x50
 8009b72:	af12      	add	r7, sp, #72	; 0x48
 8009b74:	f107 0e10 	add.w	lr, r7, #16
 8009b78:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    long sum = 0;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < times; i++)
 8009b80:	2300      	movs	r3, #0
 8009b82:	603b      	str	r3, [r7, #0]
 8009b84:	e012      	b.n	8009bac <HX711_Average_Value+0x40>
    {
        sum += HX711_Value(data);
 8009b86:	4668      	mov	r0, sp
 8009b88:	f107 0320 	add.w	r3, r7, #32
 8009b8c:	2248      	movs	r2, #72	; 0x48
 8009b8e:	4619      	mov	r1, r3
 8009b90:	f000 face 	bl	800a130 <memcpy>
 8009b94:	f107 0310 	add.w	r3, r7, #16
 8009b98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b9a:	f000 f819 	bl	8009bd0 <HX711_Value>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	607b      	str	r3, [r7, #4]
}

int HX711_Average_Value(HX711 data, uint8_t times)
{
    long sum = 0;
    for (int i = 0; i < times; i++)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	603b      	str	r3, [r7, #0]
 8009bac:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	dce7      	bgt.n	8009b86 <HX711_Average_Value+0x1a>
    {
        sum += HX711_Value(data);
    }

    return sum / times;
 8009bb6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bca:	b004      	add	sp, #16
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop

08009bd0 <HX711_Value>:

int HX711_Value(HX711 data)
{
 8009bd0:	b084      	sub	sp, #16
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	f107 0e18 	add.w	lr, r7, #24
 8009bdc:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    int buffer;
    buffer = 0;
 8009be0:	2300      	movs	r3, #0
 8009be2:	60fb      	str	r3, [r7, #12]

    while (HAL_GPIO_ReadPin(data.gpioData, data.pinData)==1)
 8009be4:	bf00      	nop
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009bea:	4611      	mov	r1, r2
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7f8 feeb 	bl	80029c8 <HAL_GPIO_ReadPin>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d0f6      	beq.n	8009be6 <HX711_Value+0x16>
    ;

    for (uint8_t i = 0; i < 24; i++)
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	72fb      	strb	r3, [r7, #11]
 8009bfc:	e01d      	b.n	8009c3a <HX711_Value+0x6a>
    {
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	8c39      	ldrh	r1, [r7, #32]
 8009c02:	2201      	movs	r2, #1
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7f8 fef7 	bl	80029f8 <HAL_GPIO_WritePin>

        buffer = buffer << 1 ;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	005b      	lsls	r3, r3, #1
 8009c0e:	60fb      	str	r3, [r7, #12]

        if (HAL_GPIO_ReadPin(data.gpioData, data.pinData))
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009c14:	4611      	mov	r1, r2
 8009c16:	4618      	mov	r0, r3
 8009c18:	f7f8 fed6 	bl	80029c8 <HAL_GPIO_ReadPin>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d002      	beq.n	8009c28 <HX711_Value+0x58>
        {
            buffer++;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	3301      	adds	r3, #1
 8009c26:	60fb      	str	r3, [r7, #12]
        }
        HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	8c39      	ldrh	r1, [r7, #32]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7f8 fee2 	bl	80029f8 <HAL_GPIO_WritePin>
    buffer = 0;

    while (HAL_GPIO_ReadPin(data.gpioData, data.pinData)==1)
    ;

    for (uint8_t i = 0; i < 24; i++)
 8009c34:	7afb      	ldrb	r3, [r7, #11]
 8009c36:	3301      	adds	r3, #1
 8009c38:	72fb      	strb	r3, [r7, #11]
 8009c3a:	7afb      	ldrb	r3, [r7, #11]
 8009c3c:	2b17      	cmp	r3, #23
 8009c3e:	d9de      	bls.n	8009bfe <HX711_Value+0x2e>
            buffer++;
        }
        HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
    }

    for (int i = 0; i < data.gain; i++)
 8009c40:	2300      	movs	r3, #0
 8009c42:	607b      	str	r3, [r7, #4]
 8009c44:	e00e      	b.n	8009c64 <HX711_Value+0x94>
    {
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	8c39      	ldrh	r1, [r7, #32]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7f8 fed3 	bl	80029f8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	8c39      	ldrh	r1, [r7, #32]
 8009c56:	2200      	movs	r2, #0
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7f8 fecd 	bl	80029f8 <HAL_GPIO_WritePin>
            buffer++;
        }
        HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
    }

    for (int i = 0; i < data.gain; i++)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	3301      	adds	r3, #1
 8009c62:	607b      	str	r3, [r7, #4]
 8009c64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	dcec      	bgt.n	8009c46 <HX711_Value+0x76>
    {
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
    }

    buffer ^= 0x800000;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8009c72:	60fb      	str	r3, [r7, #12]

    return buffer;
 8009c74:	68fb      	ldr	r3, [r7, #12]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c80:	b004      	add	sp, #16
 8009c82:	4770      	bx	lr

08009c84 <__libc_init_array>:
 8009c84:	b570      	push	{r4, r5, r6, lr}
 8009c86:	4b0e      	ldr	r3, [pc, #56]	; (8009cc0 <__libc_init_array+0x3c>)
 8009c88:	4c0e      	ldr	r4, [pc, #56]	; (8009cc4 <__libc_init_array+0x40>)
 8009c8a:	1ae4      	subs	r4, r4, r3
 8009c8c:	10a4      	asrs	r4, r4, #2
 8009c8e:	2500      	movs	r5, #0
 8009c90:	461e      	mov	r6, r3
 8009c92:	42a5      	cmp	r5, r4
 8009c94:	d004      	beq.n	8009ca0 <__libc_init_array+0x1c>
 8009c96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009c9a:	4798      	blx	r3
 8009c9c:	3501      	adds	r5, #1
 8009c9e:	e7f8      	b.n	8009c92 <__libc_init_array+0xe>
 8009ca0:	f002 ff82 	bl	800cba8 <_init>
 8009ca4:	4c08      	ldr	r4, [pc, #32]	; (8009cc8 <__libc_init_array+0x44>)
 8009ca6:	4b09      	ldr	r3, [pc, #36]	; (8009ccc <__libc_init_array+0x48>)
 8009ca8:	1ae4      	subs	r4, r4, r3
 8009caa:	10a4      	asrs	r4, r4, #2
 8009cac:	2500      	movs	r5, #0
 8009cae:	461e      	mov	r6, r3
 8009cb0:	42a5      	cmp	r5, r4
 8009cb2:	d004      	beq.n	8009cbe <__libc_init_array+0x3a>
 8009cb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009cb8:	4798      	blx	r3
 8009cba:	3501      	adds	r5, #1
 8009cbc:	e7f8      	b.n	8009cb0 <__libc_init_array+0x2c>
 8009cbe:	bd70      	pop	{r4, r5, r6, pc}
 8009cc0:	0800ceec 	.word	0x0800ceec
 8009cc4:	0800ceec 	.word	0x0800ceec
 8009cc8:	0800cef0 	.word	0x0800cef0
 8009ccc:	0800ceec 	.word	0x0800ceec

08009cd0 <malloc>:
 8009cd0:	4b02      	ldr	r3, [pc, #8]	; (8009cdc <malloc+0xc>)
 8009cd2:	4601      	mov	r1, r0
 8009cd4:	6818      	ldr	r0, [r3, #0]
 8009cd6:	f000 b80b 	b.w	8009cf0 <_malloc_r>
 8009cda:	bf00      	nop
 8009cdc:	20000660 	.word	0x20000660

08009ce0 <free>:
 8009ce0:	4b02      	ldr	r3, [pc, #8]	; (8009cec <free+0xc>)
 8009ce2:	4601      	mov	r1, r0
 8009ce4:	6818      	ldr	r0, [r3, #0]
 8009ce6:	f002 b949 	b.w	800bf7c <_free_r>
 8009cea:	bf00      	nop
 8009cec:	20000660 	.word	0x20000660

08009cf0 <_malloc_r>:
 8009cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	f101 040b 	add.w	r4, r1, #11
 8009cf8:	2c16      	cmp	r4, #22
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	4681      	mov	r9, r0
 8009cfe:	d903      	bls.n	8009d08 <_malloc_r+0x18>
 8009d00:	f034 0407 	bics.w	r4, r4, #7
 8009d04:	d501      	bpl.n	8009d0a <_malloc_r+0x1a>
 8009d06:	e002      	b.n	8009d0e <_malloc_r+0x1e>
 8009d08:	2410      	movs	r4, #16
 8009d0a:	428c      	cmp	r4, r1
 8009d0c:	d203      	bcs.n	8009d16 <_malloc_r+0x26>
 8009d0e:	230c      	movs	r3, #12
 8009d10:	f8c9 3000 	str.w	r3, [r9]
 8009d14:	e1ea      	b.n	800a0ec <_malloc_r+0x3fc>
 8009d16:	4648      	mov	r0, r9
 8009d18:	f000 fa1d 	bl	800a156 <__malloc_lock>
 8009d1c:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8009d20:	4d9e      	ldr	r5, [pc, #632]	; (8009f9c <_malloc_r+0x2ac>)
 8009d22:	d217      	bcs.n	8009d54 <_malloc_r+0x64>
 8009d24:	f104 0208 	add.w	r2, r4, #8
 8009d28:	442a      	add	r2, r5
 8009d2a:	f1a2 0108 	sub.w	r1, r2, #8
 8009d2e:	6856      	ldr	r6, [r2, #4]
 8009d30:	428e      	cmp	r6, r1
 8009d32:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8009d36:	d102      	bne.n	8009d3e <_malloc_r+0x4e>
 8009d38:	68d6      	ldr	r6, [r2, #12]
 8009d3a:	42b2      	cmp	r2, r6
 8009d3c:	d008      	beq.n	8009d50 <_malloc_r+0x60>
 8009d3e:	6873      	ldr	r3, [r6, #4]
 8009d40:	68f2      	ldr	r2, [r6, #12]
 8009d42:	68b1      	ldr	r1, [r6, #8]
 8009d44:	f023 0303 	bic.w	r3, r3, #3
 8009d48:	60ca      	str	r2, [r1, #12]
 8009d4a:	4433      	add	r3, r6
 8009d4c:	6091      	str	r1, [r2, #8]
 8009d4e:	e02f      	b.n	8009db0 <_malloc_r+0xc0>
 8009d50:	3302      	adds	r3, #2
 8009d52:	e03d      	b.n	8009dd0 <_malloc_r+0xe0>
 8009d54:	0a63      	lsrs	r3, r4, #9
 8009d56:	d01a      	beq.n	8009d8e <_malloc_r+0x9e>
 8009d58:	2b04      	cmp	r3, #4
 8009d5a:	d802      	bhi.n	8009d62 <_malloc_r+0x72>
 8009d5c:	09a3      	lsrs	r3, r4, #6
 8009d5e:	3338      	adds	r3, #56	; 0x38
 8009d60:	e018      	b.n	8009d94 <_malloc_r+0xa4>
 8009d62:	2b14      	cmp	r3, #20
 8009d64:	d801      	bhi.n	8009d6a <_malloc_r+0x7a>
 8009d66:	335b      	adds	r3, #91	; 0x5b
 8009d68:	e014      	b.n	8009d94 <_malloc_r+0xa4>
 8009d6a:	2b54      	cmp	r3, #84	; 0x54
 8009d6c:	d802      	bhi.n	8009d74 <_malloc_r+0x84>
 8009d6e:	0b23      	lsrs	r3, r4, #12
 8009d70:	336e      	adds	r3, #110	; 0x6e
 8009d72:	e00f      	b.n	8009d94 <_malloc_r+0xa4>
 8009d74:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009d78:	d802      	bhi.n	8009d80 <_malloc_r+0x90>
 8009d7a:	0be3      	lsrs	r3, r4, #15
 8009d7c:	3377      	adds	r3, #119	; 0x77
 8009d7e:	e009      	b.n	8009d94 <_malloc_r+0xa4>
 8009d80:	f240 5254 	movw	r2, #1364	; 0x554
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d804      	bhi.n	8009d92 <_malloc_r+0xa2>
 8009d88:	0ca3      	lsrs	r3, r4, #18
 8009d8a:	337c      	adds	r3, #124	; 0x7c
 8009d8c:	e002      	b.n	8009d94 <_malloc_r+0xa4>
 8009d8e:	233f      	movs	r3, #63	; 0x3f
 8009d90:	e000      	b.n	8009d94 <_malloc_r+0xa4>
 8009d92:	237e      	movs	r3, #126	; 0x7e
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009d9a:	f1a2 0008 	sub.w	r0, r2, #8
 8009d9e:	6856      	ldr	r6, [r2, #4]
 8009da0:	e00c      	b.n	8009dbc <_malloc_r+0xcc>
 8009da2:	2900      	cmp	r1, #0
 8009da4:	68f1      	ldr	r1, [r6, #12]
 8009da6:	db08      	blt.n	8009dba <_malloc_r+0xca>
 8009da8:	68b3      	ldr	r3, [r6, #8]
 8009daa:	60d9      	str	r1, [r3, #12]
 8009dac:	608b      	str	r3, [r1, #8]
 8009dae:	18b3      	adds	r3, r6, r2
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	f042 0201 	orr.w	r2, r2, #1
 8009db6:	605a      	str	r2, [r3, #4]
 8009db8:	e1a3      	b.n	800a102 <_malloc_r+0x412>
 8009dba:	460e      	mov	r6, r1
 8009dbc:	4286      	cmp	r6, r0
 8009dbe:	d006      	beq.n	8009dce <_malloc_r+0xde>
 8009dc0:	6872      	ldr	r2, [r6, #4]
 8009dc2:	f022 0203 	bic.w	r2, r2, #3
 8009dc6:	1b11      	subs	r1, r2, r4
 8009dc8:	290f      	cmp	r1, #15
 8009dca:	ddea      	ble.n	8009da2 <_malloc_r+0xb2>
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	3301      	adds	r3, #1
 8009dd0:	4a72      	ldr	r2, [pc, #456]	; (8009f9c <_malloc_r+0x2ac>)
 8009dd2:	692e      	ldr	r6, [r5, #16]
 8009dd4:	f102 0708 	add.w	r7, r2, #8
 8009dd8:	42be      	cmp	r6, r7
 8009dda:	4639      	mov	r1, r7
 8009ddc:	d079      	beq.n	8009ed2 <_malloc_r+0x1e2>
 8009dde:	6870      	ldr	r0, [r6, #4]
 8009de0:	f020 0003 	bic.w	r0, r0, #3
 8009de4:	ebc4 0e00 	rsb	lr, r4, r0
 8009de8:	f1be 0f0f 	cmp.w	lr, #15
 8009dec:	dd0d      	ble.n	8009e0a <_malloc_r+0x11a>
 8009dee:	1933      	adds	r3, r6, r4
 8009df0:	f044 0401 	orr.w	r4, r4, #1
 8009df4:	6074      	str	r4, [r6, #4]
 8009df6:	6153      	str	r3, [r2, #20]
 8009df8:	6113      	str	r3, [r2, #16]
 8009dfa:	f04e 0201 	orr.w	r2, lr, #1
 8009dfe:	60df      	str	r7, [r3, #12]
 8009e00:	609f      	str	r7, [r3, #8]
 8009e02:	605a      	str	r2, [r3, #4]
 8009e04:	f843 e00e 	str.w	lr, [r3, lr]
 8009e08:	e17b      	b.n	800a102 <_malloc_r+0x412>
 8009e0a:	f1be 0f00 	cmp.w	lr, #0
 8009e0e:	6157      	str	r7, [r2, #20]
 8009e10:	6117      	str	r7, [r2, #16]
 8009e12:	db05      	blt.n	8009e20 <_malloc_r+0x130>
 8009e14:	4430      	add	r0, r6
 8009e16:	6843      	ldr	r3, [r0, #4]
 8009e18:	f043 0301 	orr.w	r3, r3, #1
 8009e1c:	6043      	str	r3, [r0, #4]
 8009e1e:	e170      	b.n	800a102 <_malloc_r+0x412>
 8009e20:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009e24:	d215      	bcs.n	8009e52 <_malloc_r+0x162>
 8009e26:	08c0      	lsrs	r0, r0, #3
 8009e28:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8009e2c:	2701      	movs	r7, #1
 8009e2e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8009e32:	6857      	ldr	r7, [r2, #4]
 8009e34:	3001      	adds	r0, #1
 8009e36:	ea4e 0707 	orr.w	r7, lr, r7
 8009e3a:	6057      	str	r7, [r2, #4]
 8009e3c:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8009e40:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8009e44:	f8c6 e008 	str.w	lr, [r6, #8]
 8009e48:	3f08      	subs	r7, #8
 8009e4a:	60f7      	str	r7, [r6, #12]
 8009e4c:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8009e50:	e03d      	b.n	8009ece <_malloc_r+0x1de>
 8009e52:	0a42      	lsrs	r2, r0, #9
 8009e54:	2a04      	cmp	r2, #4
 8009e56:	d802      	bhi.n	8009e5e <_malloc_r+0x16e>
 8009e58:	0982      	lsrs	r2, r0, #6
 8009e5a:	3238      	adds	r2, #56	; 0x38
 8009e5c:	e015      	b.n	8009e8a <_malloc_r+0x19a>
 8009e5e:	2a14      	cmp	r2, #20
 8009e60:	d801      	bhi.n	8009e66 <_malloc_r+0x176>
 8009e62:	325b      	adds	r2, #91	; 0x5b
 8009e64:	e011      	b.n	8009e8a <_malloc_r+0x19a>
 8009e66:	2a54      	cmp	r2, #84	; 0x54
 8009e68:	d802      	bhi.n	8009e70 <_malloc_r+0x180>
 8009e6a:	0b02      	lsrs	r2, r0, #12
 8009e6c:	326e      	adds	r2, #110	; 0x6e
 8009e6e:	e00c      	b.n	8009e8a <_malloc_r+0x19a>
 8009e70:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009e74:	d802      	bhi.n	8009e7c <_malloc_r+0x18c>
 8009e76:	0bc2      	lsrs	r2, r0, #15
 8009e78:	3277      	adds	r2, #119	; 0x77
 8009e7a:	e006      	b.n	8009e8a <_malloc_r+0x19a>
 8009e7c:	f240 5754 	movw	r7, #1364	; 0x554
 8009e80:	42ba      	cmp	r2, r7
 8009e82:	bf9a      	itte	ls
 8009e84:	0c82      	lsrls	r2, r0, #18
 8009e86:	327c      	addls	r2, #124	; 0x7c
 8009e88:	227e      	movhi	r2, #126	; 0x7e
 8009e8a:	1c57      	adds	r7, r2, #1
 8009e8c:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8009e90:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8009e94:	f8df c104 	ldr.w	ip, [pc, #260]	; 8009f9c <_malloc_r+0x2ac>
 8009e98:	45be      	cmp	lr, r7
 8009e9a:	d10d      	bne.n	8009eb8 <_malloc_r+0x1c8>
 8009e9c:	2001      	movs	r0, #1
 8009e9e:	1092      	asrs	r2, r2, #2
 8009ea0:	fa00 f202 	lsl.w	r2, r0, r2
 8009ea4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8009ea8:	4310      	orrs	r0, r2
 8009eaa:	f8cc 0004 	str.w	r0, [ip, #4]
 8009eae:	4672      	mov	r2, lr
 8009eb0:	e009      	b.n	8009ec6 <_malloc_r+0x1d6>
 8009eb2:	68bf      	ldr	r7, [r7, #8]
 8009eb4:	45be      	cmp	lr, r7
 8009eb6:	d004      	beq.n	8009ec2 <_malloc_r+0x1d2>
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	f022 0203 	bic.w	r2, r2, #3
 8009ebe:	4290      	cmp	r0, r2
 8009ec0:	d3f7      	bcc.n	8009eb2 <_malloc_r+0x1c2>
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	46be      	mov	lr, r7
 8009ec6:	60f2      	str	r2, [r6, #12]
 8009ec8:	f8c6 e008 	str.w	lr, [r6, #8]
 8009ecc:	6096      	str	r6, [r2, #8]
 8009ece:	f8ce 600c 	str.w	r6, [lr, #12]
 8009ed2:	2001      	movs	r0, #1
 8009ed4:	109a      	asrs	r2, r3, #2
 8009ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8009eda:	6868      	ldr	r0, [r5, #4]
 8009edc:	4282      	cmp	r2, r0
 8009ede:	d85f      	bhi.n	8009fa0 <_malloc_r+0x2b0>
 8009ee0:	4202      	tst	r2, r0
 8009ee2:	d106      	bne.n	8009ef2 <_malloc_r+0x202>
 8009ee4:	f023 0303 	bic.w	r3, r3, #3
 8009ee8:	0052      	lsls	r2, r2, #1
 8009eea:	4202      	tst	r2, r0
 8009eec:	f103 0304 	add.w	r3, r3, #4
 8009ef0:	d0fa      	beq.n	8009ee8 <_malloc_r+0x1f8>
 8009ef2:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 8009ef6:	46c2      	mov	sl, r8
 8009ef8:	469c      	mov	ip, r3
 8009efa:	f8da 600c 	ldr.w	r6, [sl, #12]
 8009efe:	4556      	cmp	r6, sl
 8009f00:	d02c      	beq.n	8009f5c <_malloc_r+0x26c>
 8009f02:	6870      	ldr	r0, [r6, #4]
 8009f04:	68f7      	ldr	r7, [r6, #12]
 8009f06:	f020 0003 	bic.w	r0, r0, #3
 8009f0a:	ebc4 0e00 	rsb	lr, r4, r0
 8009f0e:	f1be 0f0f 	cmp.w	lr, #15
 8009f12:	dd11      	ble.n	8009f38 <_malloc_r+0x248>
 8009f14:	1933      	adds	r3, r6, r4
 8009f16:	f044 0401 	orr.w	r4, r4, #1
 8009f1a:	6074      	str	r4, [r6, #4]
 8009f1c:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8009f20:	60d7      	str	r7, [r2, #12]
 8009f22:	60ba      	str	r2, [r7, #8]
 8009f24:	f04e 0201 	orr.w	r2, lr, #1
 8009f28:	616b      	str	r3, [r5, #20]
 8009f2a:	612b      	str	r3, [r5, #16]
 8009f2c:	60d9      	str	r1, [r3, #12]
 8009f2e:	6099      	str	r1, [r3, #8]
 8009f30:	605a      	str	r2, [r3, #4]
 8009f32:	f843 e00e 	str.w	lr, [r3, lr]
 8009f36:	e00b      	b.n	8009f50 <_malloc_r+0x260>
 8009f38:	f1be 0f00 	cmp.w	lr, #0
 8009f3c:	db0c      	blt.n	8009f58 <_malloc_r+0x268>
 8009f3e:	1833      	adds	r3, r6, r0
 8009f40:	685a      	ldr	r2, [r3, #4]
 8009f42:	f042 0201 	orr.w	r2, r2, #1
 8009f46:	605a      	str	r2, [r3, #4]
 8009f48:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8009f4c:	60df      	str	r7, [r3, #12]
 8009f4e:	60bb      	str	r3, [r7, #8]
 8009f50:	4648      	mov	r0, r9
 8009f52:	f000 f901 	bl	800a158 <__malloc_unlock>
 8009f56:	e0d8      	b.n	800a10a <_malloc_r+0x41a>
 8009f58:	463e      	mov	r6, r7
 8009f5a:	e7d0      	b.n	8009efe <_malloc_r+0x20e>
 8009f5c:	f10c 0c01 	add.w	ip, ip, #1
 8009f60:	f01c 0f03 	tst.w	ip, #3
 8009f64:	f10a 0a08 	add.w	sl, sl, #8
 8009f68:	d1c7      	bne.n	8009efa <_malloc_r+0x20a>
 8009f6a:	0798      	lsls	r0, r3, #30
 8009f6c:	d104      	bne.n	8009f78 <_malloc_r+0x288>
 8009f6e:	686b      	ldr	r3, [r5, #4]
 8009f70:	ea23 0302 	bic.w	r3, r3, r2
 8009f74:	606b      	str	r3, [r5, #4]
 8009f76:	e005      	b.n	8009f84 <_malloc_r+0x294>
 8009f78:	f858 0908 	ldr.w	r0, [r8], #-8
 8009f7c:	4580      	cmp	r8, r0
 8009f7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f82:	d0f2      	beq.n	8009f6a <_malloc_r+0x27a>
 8009f84:	6868      	ldr	r0, [r5, #4]
 8009f86:	0052      	lsls	r2, r2, #1
 8009f88:	4282      	cmp	r2, r0
 8009f8a:	d809      	bhi.n	8009fa0 <_malloc_r+0x2b0>
 8009f8c:	b142      	cbz	r2, 8009fa0 <_malloc_r+0x2b0>
 8009f8e:	4663      	mov	r3, ip
 8009f90:	4202      	tst	r2, r0
 8009f92:	d1ae      	bne.n	8009ef2 <_malloc_r+0x202>
 8009f94:	3304      	adds	r3, #4
 8009f96:	0052      	lsls	r2, r2, #1
 8009f98:	e7fa      	b.n	8009f90 <_malloc_r+0x2a0>
 8009f9a:	bf00      	nop
 8009f9c:	2000015c 	.word	0x2000015c
 8009fa0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8009fa4:	f8db 6004 	ldr.w	r6, [fp, #4]
 8009fa8:	f026 0603 	bic.w	r6, r6, #3
 8009fac:	42b4      	cmp	r4, r6
 8009fae:	d803      	bhi.n	8009fb8 <_malloc_r+0x2c8>
 8009fb0:	1b33      	subs	r3, r6, r4
 8009fb2:	2b0f      	cmp	r3, #15
 8009fb4:	f300 809c 	bgt.w	800a0f0 <_malloc_r+0x400>
 8009fb8:	4a56      	ldr	r2, [pc, #344]	; (800a114 <_malloc_r+0x424>)
 8009fba:	4957      	ldr	r1, [pc, #348]	; (800a118 <_malloc_r+0x428>)
 8009fbc:	6812      	ldr	r2, [r2, #0]
 8009fbe:	6808      	ldr	r0, [r1, #0]
 8009fc0:	9101      	str	r1, [sp, #4]
 8009fc2:	f102 0810 	add.w	r8, r2, #16
 8009fc6:	4a55      	ldr	r2, [pc, #340]	; (800a11c <_malloc_r+0x42c>)
 8009fc8:	9203      	str	r2, [sp, #12]
 8009fca:	3001      	adds	r0, #1
 8009fcc:	bf18      	it	ne
 8009fce:	f102 31ff 	addne.w	r1, r2, #4294967295
 8009fd2:	44a0      	add	r8, r4
 8009fd4:	bf1e      	ittt	ne
 8009fd6:	4488      	addne	r8, r1
 8009fd8:	4251      	negne	r1, r2
 8009fda:	ea01 0808 	andne.w	r8, r1, r8
 8009fde:	eb0b 0306 	add.w	r3, fp, r6
 8009fe2:	4641      	mov	r1, r8
 8009fe4:	4648      	mov	r0, r9
 8009fe6:	9302      	str	r3, [sp, #8]
 8009fe8:	f000 f8b8 	bl	800a15c <_sbrk_r>
 8009fec:	1c42      	adds	r2, r0, #1
 8009fee:	4607      	mov	r7, r0
 8009ff0:	d06f      	beq.n	800a0d2 <_malloc_r+0x3e2>
 8009ff2:	9b02      	ldr	r3, [sp, #8]
 8009ff4:	9a03      	ldr	r2, [sp, #12]
 8009ff6:	4283      	cmp	r3, r0
 8009ff8:	d901      	bls.n	8009ffe <_malloc_r+0x30e>
 8009ffa:	45ab      	cmp	fp, r5
 8009ffc:	d169      	bne.n	800a0d2 <_malloc_r+0x3e2>
 8009ffe:	f8df a128 	ldr.w	sl, [pc, #296]	; 800a128 <_malloc_r+0x438>
 800a002:	f8df c128 	ldr.w	ip, [pc, #296]	; 800a12c <_malloc_r+0x43c>
 800a006:	f8da 0000 	ldr.w	r0, [sl]
 800a00a:	42bb      	cmp	r3, r7
 800a00c:	4440      	add	r0, r8
 800a00e:	f8ca 0000 	str.w	r0, [sl]
 800a012:	d108      	bne.n	800a026 <_malloc_r+0x336>
 800a014:	ea13 0f0c 	tst.w	r3, ip
 800a018:	d105      	bne.n	800a026 <_malloc_r+0x336>
 800a01a:	68ab      	ldr	r3, [r5, #8]
 800a01c:	4446      	add	r6, r8
 800a01e:	f046 0601 	orr.w	r6, r6, #1
 800a022:	605e      	str	r6, [r3, #4]
 800a024:	e049      	b.n	800a0ba <_malloc_r+0x3ca>
 800a026:	9901      	ldr	r1, [sp, #4]
 800a028:	f8d1 e000 	ldr.w	lr, [r1]
 800a02c:	f1be 3fff 	cmp.w	lr, #4294967295
 800a030:	bf15      	itete	ne
 800a032:	1afb      	subne	r3, r7, r3
 800a034:	4b38      	ldreq	r3, [pc, #224]	; (800a118 <_malloc_r+0x428>)
 800a036:	181b      	addne	r3, r3, r0
 800a038:	601f      	streq	r7, [r3, #0]
 800a03a:	bf18      	it	ne
 800a03c:	f8ca 3000 	strne.w	r3, [sl]
 800a040:	f017 0307 	ands.w	r3, r7, #7
 800a044:	bf1c      	itt	ne
 800a046:	f1c3 0308 	rsbne	r3, r3, #8
 800a04a:	18ff      	addne	r7, r7, r3
 800a04c:	44b8      	add	r8, r7
 800a04e:	441a      	add	r2, r3
 800a050:	ea08 080c 	and.w	r8, r8, ip
 800a054:	ebc8 0802 	rsb	r8, r8, r2
 800a058:	4641      	mov	r1, r8
 800a05a:	4648      	mov	r0, r9
 800a05c:	f000 f87e 	bl	800a15c <_sbrk_r>
 800a060:	1c43      	adds	r3, r0, #1
 800a062:	bf04      	itt	eq
 800a064:	4638      	moveq	r0, r7
 800a066:	f04f 0800 	moveq.w	r8, #0
 800a06a:	f8da 3000 	ldr.w	r3, [sl]
 800a06e:	60af      	str	r7, [r5, #8]
 800a070:	1bc2      	subs	r2, r0, r7
 800a072:	4442      	add	r2, r8
 800a074:	4443      	add	r3, r8
 800a076:	f042 0201 	orr.w	r2, r2, #1
 800a07a:	45ab      	cmp	fp, r5
 800a07c:	f8ca 3000 	str.w	r3, [sl]
 800a080:	607a      	str	r2, [r7, #4]
 800a082:	d01a      	beq.n	800a0ba <_malloc_r+0x3ca>
 800a084:	2e0f      	cmp	r6, #15
 800a086:	d802      	bhi.n	800a08e <_malloc_r+0x39e>
 800a088:	2301      	movs	r3, #1
 800a08a:	607b      	str	r3, [r7, #4]
 800a08c:	e021      	b.n	800a0d2 <_malloc_r+0x3e2>
 800a08e:	f8db 3004 	ldr.w	r3, [fp, #4]
 800a092:	3e0c      	subs	r6, #12
 800a094:	f026 0607 	bic.w	r6, r6, #7
 800a098:	f003 0301 	and.w	r3, r3, #1
 800a09c:	4333      	orrs	r3, r6
 800a09e:	f8cb 3004 	str.w	r3, [fp, #4]
 800a0a2:	eb0b 0306 	add.w	r3, fp, r6
 800a0a6:	2205      	movs	r2, #5
 800a0a8:	2e0f      	cmp	r6, #15
 800a0aa:	605a      	str	r2, [r3, #4]
 800a0ac:	609a      	str	r2, [r3, #8]
 800a0ae:	d904      	bls.n	800a0ba <_malloc_r+0x3ca>
 800a0b0:	f10b 0108 	add.w	r1, fp, #8
 800a0b4:	4648      	mov	r0, r9
 800a0b6:	f001 ff61 	bl	800bf7c <_free_r>
 800a0ba:	4a19      	ldr	r2, [pc, #100]	; (800a120 <_malloc_r+0x430>)
 800a0bc:	f8da 3000 	ldr.w	r3, [sl]
 800a0c0:	6811      	ldr	r1, [r2, #0]
 800a0c2:	428b      	cmp	r3, r1
 800a0c4:	bf88      	it	hi
 800a0c6:	6013      	strhi	r3, [r2, #0]
 800a0c8:	4a16      	ldr	r2, [pc, #88]	; (800a124 <_malloc_r+0x434>)
 800a0ca:	6811      	ldr	r1, [r2, #0]
 800a0cc:	428b      	cmp	r3, r1
 800a0ce:	bf88      	it	hi
 800a0d0:	6013      	strhi	r3, [r2, #0]
 800a0d2:	68ab      	ldr	r3, [r5, #8]
 800a0d4:	685a      	ldr	r2, [r3, #4]
 800a0d6:	f022 0203 	bic.w	r2, r2, #3
 800a0da:	4294      	cmp	r4, r2
 800a0dc:	eba2 0304 	sub.w	r3, r2, r4
 800a0e0:	d801      	bhi.n	800a0e6 <_malloc_r+0x3f6>
 800a0e2:	2b0f      	cmp	r3, #15
 800a0e4:	dc04      	bgt.n	800a0f0 <_malloc_r+0x400>
 800a0e6:	4648      	mov	r0, r9
 800a0e8:	f000 f836 	bl	800a158 <__malloc_unlock>
 800a0ec:	2600      	movs	r6, #0
 800a0ee:	e00c      	b.n	800a10a <_malloc_r+0x41a>
 800a0f0:	68ae      	ldr	r6, [r5, #8]
 800a0f2:	f044 0201 	orr.w	r2, r4, #1
 800a0f6:	4434      	add	r4, r6
 800a0f8:	f043 0301 	orr.w	r3, r3, #1
 800a0fc:	6072      	str	r2, [r6, #4]
 800a0fe:	60ac      	str	r4, [r5, #8]
 800a100:	6063      	str	r3, [r4, #4]
 800a102:	4648      	mov	r0, r9
 800a104:	f000 f828 	bl	800a158 <__malloc_unlock>
 800a108:	3608      	adds	r6, #8
 800a10a:	4630      	mov	r0, r6
 800a10c:	b005      	add	sp, #20
 800a10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a112:	bf00      	nop
 800a114:	200008f0 	.word	0x200008f0
 800a118:	20000568 	.word	0x20000568
 800a11c:	00000080 	.word	0x00000080
 800a120:	200008ec 	.word	0x200008ec
 800a124:	200008e8 	.word	0x200008e8
 800a128:	200008f4 	.word	0x200008f4
 800a12c:	0000007f 	.word	0x0000007f

0800a130 <memcpy>:
 800a130:	b510      	push	{r4, lr}
 800a132:	1e43      	subs	r3, r0, #1
 800a134:	440a      	add	r2, r1
 800a136:	4291      	cmp	r1, r2
 800a138:	d004      	beq.n	800a144 <memcpy+0x14>
 800a13a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a13e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a142:	e7f8      	b.n	800a136 <memcpy+0x6>
 800a144:	bd10      	pop	{r4, pc}

0800a146 <memset>:
 800a146:	4402      	add	r2, r0
 800a148:	4603      	mov	r3, r0
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d002      	beq.n	800a154 <memset+0xe>
 800a14e:	f803 1b01 	strb.w	r1, [r3], #1
 800a152:	e7fa      	b.n	800a14a <memset+0x4>
 800a154:	4770      	bx	lr

0800a156 <__malloc_lock>:
 800a156:	4770      	bx	lr

0800a158 <__malloc_unlock>:
 800a158:	4770      	bx	lr
	...

0800a15c <_sbrk_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	4c06      	ldr	r4, [pc, #24]	; (800a178 <_sbrk_r+0x1c>)
 800a160:	2300      	movs	r3, #0
 800a162:	4605      	mov	r5, r0
 800a164:	4608      	mov	r0, r1
 800a166:	6023      	str	r3, [r4, #0]
 800a168:	f002 fd10 	bl	800cb8c <_sbrk>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d102      	bne.n	800a176 <_sbrk_r+0x1a>
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	b103      	cbz	r3, 800a176 <_sbrk_r+0x1a>
 800a174:	602b      	str	r3, [r5, #0]
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	200012b0 	.word	0x200012b0

0800a17c <sprintf>:
 800a17c:	b40e      	push	{r1, r2, r3}
 800a17e:	b500      	push	{lr}
 800a180:	b09c      	sub	sp, #112	; 0x70
 800a182:	f44f 7102 	mov.w	r1, #520	; 0x208
 800a186:	ab1d      	add	r3, sp, #116	; 0x74
 800a188:	f8ad 1014 	strh.w	r1, [sp, #20]
 800a18c:	9002      	str	r0, [sp, #8]
 800a18e:	9006      	str	r0, [sp, #24]
 800a190:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a194:	480a      	ldr	r0, [pc, #40]	; (800a1c0 <sprintf+0x44>)
 800a196:	9104      	str	r1, [sp, #16]
 800a198:	9107      	str	r1, [sp, #28]
 800a19a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a19e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1a2:	f8ad 1016 	strh.w	r1, [sp, #22]
 800a1a6:	6800      	ldr	r0, [r0, #0]
 800a1a8:	9301      	str	r3, [sp, #4]
 800a1aa:	a902      	add	r1, sp, #8
 800a1ac:	f000 f89c 	bl	800a2e8 <_svfprintf_r>
 800a1b0:	9b02      	ldr	r3, [sp, #8]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	701a      	strb	r2, [r3, #0]
 800a1b6:	b01c      	add	sp, #112	; 0x70
 800a1b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1bc:	b003      	add	sp, #12
 800a1be:	4770      	bx	lr
 800a1c0:	20000660 	.word	0x20000660

0800a1c4 <_strtol_r>:
 800a1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c8:	4680      	mov	r8, r0
 800a1ca:	4840      	ldr	r0, [pc, #256]	; (800a2cc <_strtol_r+0x108>)
 800a1cc:	f8d0 9000 	ldr.w	r9, [r0]
 800a1d0:	460f      	mov	r7, r1
 800a1d2:	463d      	mov	r5, r7
 800a1d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1d8:	eb09 0004 	add.w	r0, r9, r4
 800a1dc:	7840      	ldrb	r0, [r0, #1]
 800a1de:	f000 0008 	and.w	r0, r0, #8
 800a1e2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 800a1e6:	b108      	cbz	r0, 800a1ec <_strtol_r+0x28>
 800a1e8:	462f      	mov	r7, r5
 800a1ea:	e7f2      	b.n	800a1d2 <_strtol_r+0xe>
 800a1ec:	2c2d      	cmp	r4, #45	; 0x2d
 800a1ee:	d103      	bne.n	800a1f8 <_strtol_r+0x34>
 800a1f0:	1cbd      	adds	r5, r7, #2
 800a1f2:	787c      	ldrb	r4, [r7, #1]
 800a1f4:	2601      	movs	r6, #1
 800a1f6:	e003      	b.n	800a200 <_strtol_r+0x3c>
 800a1f8:	2c2b      	cmp	r4, #43	; 0x2b
 800a1fa:	bf04      	itt	eq
 800a1fc:	787c      	ldrbeq	r4, [r7, #1]
 800a1fe:	1cbd      	addeq	r5, r7, #2
 800a200:	b113      	cbz	r3, 800a208 <_strtol_r+0x44>
 800a202:	2b10      	cmp	r3, #16
 800a204:	d10a      	bne.n	800a21c <_strtol_r+0x58>
 800a206:	e05b      	b.n	800a2c0 <_strtol_r+0xfc>
 800a208:	2c30      	cmp	r4, #48	; 0x30
 800a20a:	d157      	bne.n	800a2bc <_strtol_r+0xf8>
 800a20c:	7828      	ldrb	r0, [r5, #0]
 800a20e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a212:	2858      	cmp	r0, #88	; 0x58
 800a214:	d14d      	bne.n	800a2b2 <_strtol_r+0xee>
 800a216:	786c      	ldrb	r4, [r5, #1]
 800a218:	2310      	movs	r3, #16
 800a21a:	3502      	adds	r5, #2
 800a21c:	2e00      	cmp	r6, #0
 800a21e:	bf14      	ite	ne
 800a220:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 800a224:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 800a228:	2700      	movs	r7, #0
 800a22a:	fbbc faf3 	udiv	sl, ip, r3
 800a22e:	4638      	mov	r0, r7
 800a230:	fb03 cc1a 	mls	ip, r3, sl, ip
 800a234:	eb09 0e04 	add.w	lr, r9, r4
 800a238:	f89e e001 	ldrb.w	lr, [lr, #1]
 800a23c:	f01e 0f04 	tst.w	lr, #4
 800a240:	d001      	beq.n	800a246 <_strtol_r+0x82>
 800a242:	3c30      	subs	r4, #48	; 0x30
 800a244:	e00b      	b.n	800a25e <_strtol_r+0x9a>
 800a246:	f01e 0e03 	ands.w	lr, lr, #3
 800a24a:	d01b      	beq.n	800a284 <_strtol_r+0xc0>
 800a24c:	f1be 0f01 	cmp.w	lr, #1
 800a250:	bf0c      	ite	eq
 800a252:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 800a256:	f04f 0e57 	movne.w	lr, #87	; 0x57
 800a25a:	ebce 0404 	rsb	r4, lr, r4
 800a25e:	42a3      	cmp	r3, r4
 800a260:	dd10      	ble.n	800a284 <_strtol_r+0xc0>
 800a262:	f1b7 3fff 	cmp.w	r7, #4294967295
 800a266:	d00a      	beq.n	800a27e <_strtol_r+0xba>
 800a268:	4550      	cmp	r0, sl
 800a26a:	d806      	bhi.n	800a27a <_strtol_r+0xb6>
 800a26c:	d101      	bne.n	800a272 <_strtol_r+0xae>
 800a26e:	4564      	cmp	r4, ip
 800a270:	dc03      	bgt.n	800a27a <_strtol_r+0xb6>
 800a272:	fb03 4000 	mla	r0, r3, r0, r4
 800a276:	2701      	movs	r7, #1
 800a278:	e001      	b.n	800a27e <_strtol_r+0xba>
 800a27a:	f04f 37ff 	mov.w	r7, #4294967295
 800a27e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a282:	e7d7      	b.n	800a234 <_strtol_r+0x70>
 800a284:	1c7b      	adds	r3, r7, #1
 800a286:	d10c      	bne.n	800a2a2 <_strtol_r+0xde>
 800a288:	2e00      	cmp	r6, #0
 800a28a:	f04f 0322 	mov.w	r3, #34	; 0x22
 800a28e:	bf14      	ite	ne
 800a290:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 800a294:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800a298:	f8c8 3000 	str.w	r3, [r8]
 800a29c:	b92a      	cbnz	r2, 800a2aa <_strtol_r+0xe6>
 800a29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a2:	b106      	cbz	r6, 800a2a6 <_strtol_r+0xe2>
 800a2a4:	4240      	negs	r0, r0
 800a2a6:	b172      	cbz	r2, 800a2c6 <_strtol_r+0x102>
 800a2a8:	b107      	cbz	r7, 800a2ac <_strtol_r+0xe8>
 800a2aa:	1e69      	subs	r1, r5, #1
 800a2ac:	6011      	str	r1, [r2, #0]
 800a2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b2:	2430      	movs	r4, #48	; 0x30
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1b1      	bne.n	800a21c <_strtol_r+0x58>
 800a2b8:	2308      	movs	r3, #8
 800a2ba:	e7af      	b.n	800a21c <_strtol_r+0x58>
 800a2bc:	230a      	movs	r3, #10
 800a2be:	e7ad      	b.n	800a21c <_strtol_r+0x58>
 800a2c0:	2c30      	cmp	r4, #48	; 0x30
 800a2c2:	d0a3      	beq.n	800a20c <_strtol_r+0x48>
 800a2c4:	e7aa      	b.n	800a21c <_strtol_r+0x58>
 800a2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ca:	bf00      	nop
 800a2cc:	2000056c 	.word	0x2000056c

0800a2d0 <strtol>:
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	460a      	mov	r2, r1
 800a2d4:	4601      	mov	r1, r0
 800a2d6:	4802      	ldr	r0, [pc, #8]	; (800a2e0 <strtol+0x10>)
 800a2d8:	6800      	ldr	r0, [r0, #0]
 800a2da:	f7ff bf73 	b.w	800a1c4 <_strtol_r>
 800a2de:	bf00      	nop
 800a2e0:	20000660 	.word	0x20000660
 800a2e4:	00000000 	.word	0x00000000

0800a2e8 <_svfprintf_r>:
 800a2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ec:	b0bd      	sub	sp, #244	; 0xf4
 800a2ee:	468b      	mov	fp, r1
 800a2f0:	9205      	str	r2, [sp, #20]
 800a2f2:	461f      	mov	r7, r3
 800a2f4:	4682      	mov	sl, r0
 800a2f6:	f001 feff 	bl	800c0f8 <_localeconv_r>
 800a2fa:	6803      	ldr	r3, [r0, #0]
 800a2fc:	930d      	str	r3, [sp, #52]	; 0x34
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7f5 ffb6 	bl	8000270 <strlen>
 800a304:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800a308:	9008      	str	r0, [sp, #32]
 800a30a:	0619      	lsls	r1, r3, #24
 800a30c:	d515      	bpl.n	800a33a <_svfprintf_r+0x52>
 800a30e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a312:	b993      	cbnz	r3, 800a33a <_svfprintf_r+0x52>
 800a314:	2140      	movs	r1, #64	; 0x40
 800a316:	4650      	mov	r0, sl
 800a318:	f7ff fcea 	bl	8009cf0 <_malloc_r>
 800a31c:	f8cb 0000 	str.w	r0, [fp]
 800a320:	f8cb 0010 	str.w	r0, [fp, #16]
 800a324:	b930      	cbnz	r0, 800a334 <_svfprintf_r+0x4c>
 800a326:	230c      	movs	r3, #12
 800a328:	f8ca 3000 	str.w	r3, [sl]
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	f000 bf95 	b.w	800b25e <_svfprintf_r+0xf76>
 800a334:	2340      	movs	r3, #64	; 0x40
 800a336:	f8cb 3014 	str.w	r3, [fp, #20]
 800a33a:	ed9f 7b99 	vldr	d7, [pc, #612]	; 800a5a0 <_svfprintf_r+0x2b8>
 800a33e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a342:	2300      	movs	r3, #0
 800a344:	ac2c      	add	r4, sp, #176	; 0xb0
 800a346:	941f      	str	r4, [sp, #124]	; 0x7c
 800a348:	9321      	str	r3, [sp, #132]	; 0x84
 800a34a:	9320      	str	r3, [sp, #128]	; 0x80
 800a34c:	9304      	str	r3, [sp, #16]
 800a34e:	9311      	str	r3, [sp, #68]	; 0x44
 800a350:	9310      	str	r3, [sp, #64]	; 0x40
 800a352:	930a      	str	r3, [sp, #40]	; 0x28
 800a354:	9d05      	ldr	r5, [sp, #20]
 800a356:	462b      	mov	r3, r5
 800a358:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a35c:	b11a      	cbz	r2, 800a366 <_svfprintf_r+0x7e>
 800a35e:	2a25      	cmp	r2, #37	; 0x25
 800a360:	d001      	beq.n	800a366 <_svfprintf_r+0x7e>
 800a362:	461d      	mov	r5, r3
 800a364:	e7f7      	b.n	800a356 <_svfprintf_r+0x6e>
 800a366:	9b05      	ldr	r3, [sp, #20]
 800a368:	1aee      	subs	r6, r5, r3
 800a36a:	d017      	beq.n	800a39c <_svfprintf_r+0xb4>
 800a36c:	e884 0048 	stmia.w	r4, {r3, r6}
 800a370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a372:	4433      	add	r3, r6
 800a374:	9321      	str	r3, [sp, #132]	; 0x84
 800a376:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a378:	3301      	adds	r3, #1
 800a37a:	2b07      	cmp	r3, #7
 800a37c:	9320      	str	r3, [sp, #128]	; 0x80
 800a37e:	dc01      	bgt.n	800a384 <_svfprintf_r+0x9c>
 800a380:	3408      	adds	r4, #8
 800a382:	e008      	b.n	800a396 <_svfprintf_r+0xae>
 800a384:	aa1f      	add	r2, sp, #124	; 0x7c
 800a386:	4659      	mov	r1, fp
 800a388:	4650      	mov	r0, sl
 800a38a:	f002 f98f 	bl	800c6ac <__ssprint_r>
 800a38e:	2800      	cmp	r0, #0
 800a390:	f040 862c 	bne.w	800afec <_svfprintf_r+0xd04>
 800a394:	ac2c      	add	r4, sp, #176	; 0xb0
 800a396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a398:	4433      	add	r3, r6
 800a39a:	930a      	str	r3, [sp, #40]	; 0x28
 800a39c:	782b      	ldrb	r3, [r5, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 861d 	beq.w	800afde <_svfprintf_r+0xcf6>
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	1c6b      	adds	r3, r5, #1
 800a3a8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800a3ac:	4611      	mov	r1, r2
 800a3ae:	f04f 39ff 	mov.w	r9, #4294967295
 800a3b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3b4:	4615      	mov	r5, r2
 800a3b6:	200a      	movs	r0, #10
 800a3b8:	1c5e      	adds	r6, r3, #1
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	9605      	str	r6, [sp, #20]
 800a3be:	9302      	str	r3, [sp, #8]
 800a3c0:	9b02      	ldr	r3, [sp, #8]
 800a3c2:	3b20      	subs	r3, #32
 800a3c4:	2b58      	cmp	r3, #88	; 0x58
 800a3c6:	f200 8263 	bhi.w	800a890 <_svfprintf_r+0x5a8>
 800a3ca:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a3ce:	005c      	.short	0x005c
 800a3d0:	02610261 	.word	0x02610261
 800a3d4:	0261006b 	.word	0x0261006b
 800a3d8:	02610261 	.word	0x02610261
 800a3dc:	02610261 	.word	0x02610261
 800a3e0:	006e0261 	.word	0x006e0261
 800a3e4:	02610059 	.word	0x02610059
 800a3e8:	007c0079 	.word	0x007c0079
 800a3ec:	00a30261 	.word	0x00a30261
 800a3f0:	00a600a6 	.word	0x00a600a6
 800a3f4:	00a600a6 	.word	0x00a600a6
 800a3f8:	00a600a6 	.word	0x00a600a6
 800a3fc:	00a600a6 	.word	0x00a600a6
 800a400:	026100a6 	.word	0x026100a6
 800a404:	02610261 	.word	0x02610261
 800a408:	02610261 	.word	0x02610261
 800a40c:	02610261 	.word	0x02610261
 800a410:	02610261 	.word	0x02610261
 800a414:	00d60261 	.word	0x00d60261
 800a418:	0261010b 	.word	0x0261010b
 800a41c:	0261010b 	.word	0x0261010b
 800a420:	02610261 	.word	0x02610261
 800a424:	00b90261 	.word	0x00b90261
 800a428:	02610261 	.word	0x02610261
 800a42c:	02610152 	.word	0x02610152
 800a430:	02610261 	.word	0x02610261
 800a434:	02610261 	.word	0x02610261
 800a438:	02610199 	.word	0x02610199
 800a43c:	00660261 	.word	0x00660261
 800a440:	02610261 	.word	0x02610261
 800a444:	02610261 	.word	0x02610261
 800a448:	02610261 	.word	0x02610261
 800a44c:	02610261 	.word	0x02610261
 800a450:	02610261 	.word	0x02610261
 800a454:	006100cd 	.word	0x006100cd
 800a458:	010b010b 	.word	0x010b010b
 800a45c:	00bc010b 	.word	0x00bc010b
 800a460:	02610061 	.word	0x02610061
 800a464:	00bf0261 	.word	0x00bf0261
 800a468:	01340261 	.word	0x01340261
 800a46c:	016f0154 	.word	0x016f0154
 800a470:	026100ca 	.word	0x026100ca
 800a474:	02610180 	.word	0x02610180
 800a478:	0261019b 	.word	0x0261019b
 800a47c:	01b30261 	.word	0x01b30261
 800a480:	2201      	movs	r2, #1
 800a482:	212b      	movs	r1, #43	; 0x2b
 800a484:	e002      	b.n	800a48c <_svfprintf_r+0x1a4>
 800a486:	b909      	cbnz	r1, 800a48c <_svfprintf_r+0x1a4>
 800a488:	2201      	movs	r2, #1
 800a48a:	2120      	movs	r1, #32
 800a48c:	9b05      	ldr	r3, [sp, #20]
 800a48e:	e793      	b.n	800a3b8 <_svfprintf_r+0xd0>
 800a490:	2a00      	cmp	r2, #0
 800a492:	d077      	beq.n	800a584 <_svfprintf_r+0x29c>
 800a494:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800a498:	e074      	b.n	800a584 <_svfprintf_r+0x29c>
 800a49a:	b10a      	cbz	r2, 800a4a0 <_svfprintf_r+0x1b8>
 800a49c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800a4a0:	4b41      	ldr	r3, [pc, #260]	; (800a5a8 <_svfprintf_r+0x2c0>)
 800a4a2:	e14b      	b.n	800a73c <_svfprintf_r+0x454>
 800a4a4:	f045 0501 	orr.w	r5, r5, #1
 800a4a8:	e7f0      	b.n	800a48c <_svfprintf_r+0x1a4>
 800a4aa:	683e      	ldr	r6, [r7, #0]
 800a4ac:	9609      	str	r6, [sp, #36]	; 0x24
 800a4ae:	2e00      	cmp	r6, #0
 800a4b0:	f107 0304 	add.w	r3, r7, #4
 800a4b4:	db01      	blt.n	800a4ba <_svfprintf_r+0x1d2>
 800a4b6:	461f      	mov	r7, r3
 800a4b8:	e7e8      	b.n	800a48c <_svfprintf_r+0x1a4>
 800a4ba:	4276      	negs	r6, r6
 800a4bc:	9609      	str	r6, [sp, #36]	; 0x24
 800a4be:	461f      	mov	r7, r3
 800a4c0:	f045 0504 	orr.w	r5, r5, #4
 800a4c4:	e7e2      	b.n	800a48c <_svfprintf_r+0x1a4>
 800a4c6:	9e05      	ldr	r6, [sp, #20]
 800a4c8:	9b05      	ldr	r3, [sp, #20]
 800a4ca:	7836      	ldrb	r6, [r6, #0]
 800a4cc:	9602      	str	r6, [sp, #8]
 800a4ce:	2e2a      	cmp	r6, #42	; 0x2a
 800a4d0:	f103 0301 	add.w	r3, r3, #1
 800a4d4:	d002      	beq.n	800a4dc <_svfprintf_r+0x1f4>
 800a4d6:	f04f 0900 	mov.w	r9, #0
 800a4da:	e00a      	b.n	800a4f2 <_svfprintf_r+0x20a>
 800a4dc:	f8d7 9000 	ldr.w	r9, [r7]
 800a4e0:	9305      	str	r3, [sp, #20]
 800a4e2:	1d3e      	adds	r6, r7, #4
 800a4e4:	f1b9 0f00 	cmp.w	r9, #0
 800a4e8:	4637      	mov	r7, r6
 800a4ea:	dacf      	bge.n	800a48c <_svfprintf_r+0x1a4>
 800a4ec:	f04f 39ff 	mov.w	r9, #4294967295
 800a4f0:	e7cc      	b.n	800a48c <_svfprintf_r+0x1a4>
 800a4f2:	9305      	str	r3, [sp, #20]
 800a4f4:	9b02      	ldr	r3, [sp, #8]
 800a4f6:	3b30      	subs	r3, #48	; 0x30
 800a4f8:	2b09      	cmp	r3, #9
 800a4fa:	d808      	bhi.n	800a50e <_svfprintf_r+0x226>
 800a4fc:	fb00 3909 	mla	r9, r0, r9, r3
 800a500:	9b05      	ldr	r3, [sp, #20]
 800a502:	461e      	mov	r6, r3
 800a504:	f816 3b01 	ldrb.w	r3, [r6], #1
 800a508:	9302      	str	r3, [sp, #8]
 800a50a:	4633      	mov	r3, r6
 800a50c:	e7f1      	b.n	800a4f2 <_svfprintf_r+0x20a>
 800a50e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 800a512:	e755      	b.n	800a3c0 <_svfprintf_r+0xd8>
 800a514:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800a518:	e7b8      	b.n	800a48c <_svfprintf_r+0x1a4>
 800a51a:	2300      	movs	r3, #0
 800a51c:	9309      	str	r3, [sp, #36]	; 0x24
 800a51e:	9b02      	ldr	r3, [sp, #8]
 800a520:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a522:	3b30      	subs	r3, #48	; 0x30
 800a524:	fb00 3306 	mla	r3, r0, r6, r3
 800a528:	9309      	str	r3, [sp, #36]	; 0x24
 800a52a:	9b05      	ldr	r3, [sp, #20]
 800a52c:	461e      	mov	r6, r3
 800a52e:	f816 3b01 	ldrb.w	r3, [r6], #1
 800a532:	9302      	str	r3, [sp, #8]
 800a534:	9b02      	ldr	r3, [sp, #8]
 800a536:	9605      	str	r6, [sp, #20]
 800a538:	3b30      	subs	r3, #48	; 0x30
 800a53a:	2b09      	cmp	r3, #9
 800a53c:	d9ef      	bls.n	800a51e <_svfprintf_r+0x236>
 800a53e:	e73f      	b.n	800a3c0 <_svfprintf_r+0xd8>
 800a540:	f045 0508 	orr.w	r5, r5, #8
 800a544:	e7a2      	b.n	800a48c <_svfprintf_r+0x1a4>
 800a546:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800a54a:	e79f      	b.n	800a48c <_svfprintf_r+0x1a4>
 800a54c:	9b05      	ldr	r3, [sp, #20]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	2b6c      	cmp	r3, #108	; 0x6c
 800a552:	d103      	bne.n	800a55c <_svfprintf_r+0x274>
 800a554:	9b05      	ldr	r3, [sp, #20]
 800a556:	3301      	adds	r3, #1
 800a558:	9305      	str	r3, [sp, #20]
 800a55a:	e002      	b.n	800a562 <_svfprintf_r+0x27a>
 800a55c:	f045 0510 	orr.w	r5, r5, #16
 800a560:	e794      	b.n	800a48c <_svfprintf_r+0x1a4>
 800a562:	f045 0520 	orr.w	r5, r5, #32
 800a566:	e791      	b.n	800a48c <_svfprintf_r+0x1a4>
 800a568:	1d3b      	adds	r3, r7, #4
 800a56a:	9303      	str	r3, [sp, #12]
 800a56c:	2600      	movs	r6, #0
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800a574:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800a578:	e199      	b.n	800a8ae <_svfprintf_r+0x5c6>
 800a57a:	b10a      	cbz	r2, 800a580 <_svfprintf_r+0x298>
 800a57c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800a580:	f045 0510 	orr.w	r5, r5, #16
 800a584:	06aa      	lsls	r2, r5, #26
 800a586:	d511      	bpl.n	800a5ac <_svfprintf_r+0x2c4>
 800a588:	3707      	adds	r7, #7
 800a58a:	f027 0707 	bic.w	r7, r7, #7
 800a58e:	f107 0308 	add.w	r3, r7, #8
 800a592:	9303      	str	r3, [sp, #12]
 800a594:	e9d7 6700 	ldrd	r6, r7, [r7]
 800a598:	e017      	b.n	800a5ca <_svfprintf_r+0x2e2>
 800a59a:	bf00      	nop
 800a59c:	f3af 8000 	nop.w
	...
 800a5a8:	0800cc98 	.word	0x0800cc98
 800a5ac:	f015 0f10 	tst.w	r5, #16
 800a5b0:	f107 0304 	add.w	r3, r7, #4
 800a5b4:	d002      	beq.n	800a5bc <_svfprintf_r+0x2d4>
 800a5b6:	9303      	str	r3, [sp, #12]
 800a5b8:	683e      	ldr	r6, [r7, #0]
 800a5ba:	e005      	b.n	800a5c8 <_svfprintf_r+0x2e0>
 800a5bc:	683e      	ldr	r6, [r7, #0]
 800a5be:	9303      	str	r3, [sp, #12]
 800a5c0:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a5c4:	bf18      	it	ne
 800a5c6:	b236      	sxthne	r6, r6
 800a5c8:	17f7      	asrs	r7, r6, #31
 800a5ca:	2e00      	cmp	r6, #0
 800a5cc:	f177 0300 	sbcs.w	r3, r7, #0
 800a5d0:	f280 80de 	bge.w	800a790 <_svfprintf_r+0x4a8>
 800a5d4:	4276      	negs	r6, r6
 800a5d6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800a5da:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800a5de:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800a5e2:	e0d5      	b.n	800a790 <_svfprintf_r+0x4a8>
 800a5e4:	b10a      	cbz	r2, 800a5ea <_svfprintf_r+0x302>
 800a5e6:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800a5ea:	3707      	adds	r7, #7
 800a5ec:	f027 0707 	bic.w	r7, r7, #7
 800a5f0:	f107 0308 	add.w	r3, r7, #8
 800a5f4:	9303      	str	r3, [sp, #12]
 800a5f6:	ed97 7b00 	vldr	d7, [r7]
 800a5fa:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a5fe:	9b06      	ldr	r3, [sp, #24]
 800a600:	9312      	str	r3, [sp, #72]	; 0x48
 800a602:	9b07      	ldr	r3, [sp, #28]
 800a604:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a608:	9313      	str	r3, [sp, #76]	; 0x4c
 800a60a:	f04f 32ff 	mov.w	r2, #4294967295
 800a60e:	4bab      	ldr	r3, [pc, #684]	; (800a8bc <_svfprintf_r+0x5d4>)
 800a610:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800a614:	f7f6 fa86 	bl	8000b24 <__aeabi_dcmpun>
 800a618:	2800      	cmp	r0, #0
 800a61a:	f040 84f1 	bne.w	800b000 <_svfprintf_r+0xd18>
 800a61e:	f04f 32ff 	mov.w	r2, #4294967295
 800a622:	4ba6      	ldr	r3, [pc, #664]	; (800a8bc <_svfprintf_r+0x5d4>)
 800a624:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800a628:	f7f6 fa5e 	bl	8000ae8 <__aeabi_dcmple>
 800a62c:	2800      	cmp	r0, #0
 800a62e:	f040 84e7 	bne.w	800b000 <_svfprintf_r+0xd18>
 800a632:	f000 bdfd 	b.w	800b230 <_svfprintf_r+0xf48>
 800a636:	b10a      	cbz	r2, 800a63c <_svfprintf_r+0x354>
 800a638:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800a63c:	f015 0f20 	tst.w	r5, #32
 800a640:	f107 0304 	add.w	r3, r7, #4
 800a644:	d007      	beq.n	800a656 <_svfprintf_r+0x36e>
 800a646:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a648:	683a      	ldr	r2, [r7, #0]
 800a64a:	17ce      	asrs	r6, r1, #31
 800a64c:	4608      	mov	r0, r1
 800a64e:	4631      	mov	r1, r6
 800a650:	e9c2 0100 	strd	r0, r1, [r2]
 800a654:	e00b      	b.n	800a66e <_svfprintf_r+0x386>
 800a656:	06e9      	lsls	r1, r5, #27
 800a658:	d406      	bmi.n	800a668 <_svfprintf_r+0x380>
 800a65a:	066a      	lsls	r2, r5, #25
 800a65c:	d504      	bpl.n	800a668 <_svfprintf_r+0x380>
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800a664:	8011      	strh	r1, [r2, #0]
 800a666:	e002      	b.n	800a66e <_svfprintf_r+0x386>
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a66c:	6011      	str	r1, [r2, #0]
 800a66e:	461f      	mov	r7, r3
 800a670:	e670      	b.n	800a354 <_svfprintf_r+0x6c>
 800a672:	f045 0510 	orr.w	r5, r5, #16
 800a676:	f015 0320 	ands.w	r3, r5, #32
 800a67a:	d009      	beq.n	800a690 <_svfprintf_r+0x3a8>
 800a67c:	3707      	adds	r7, #7
 800a67e:	f027 0707 	bic.w	r7, r7, #7
 800a682:	f107 0308 	add.w	r3, r7, #8
 800a686:	e9d7 6700 	ldrd	r6, r7, [r7]
 800a68a:	9303      	str	r3, [sp, #12]
 800a68c:	2300      	movs	r3, #0
 800a68e:	e07b      	b.n	800a788 <_svfprintf_r+0x4a0>
 800a690:	1d3a      	adds	r2, r7, #4
 800a692:	f015 0110 	ands.w	r1, r5, #16
 800a696:	9203      	str	r2, [sp, #12]
 800a698:	d105      	bne.n	800a6a6 <_svfprintf_r+0x3be>
 800a69a:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800a69e:	d002      	beq.n	800a6a6 <_svfprintf_r+0x3be>
 800a6a0:	883e      	ldrh	r6, [r7, #0]
 800a6a2:	2700      	movs	r7, #0
 800a6a4:	e7f2      	b.n	800a68c <_svfprintf_r+0x3a4>
 800a6a6:	683e      	ldr	r6, [r7, #0]
 800a6a8:	2700      	movs	r7, #0
 800a6aa:	e06d      	b.n	800a788 <_svfprintf_r+0x4a0>
 800a6ac:	1d3b      	adds	r3, r7, #4
 800a6ae:	9303      	str	r3, [sp, #12]
 800a6b0:	2330      	movs	r3, #48	; 0x30
 800a6b2:	2278      	movs	r2, #120	; 0x78
 800a6b4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800a6b8:	4b81      	ldr	r3, [pc, #516]	; (800a8c0 <_svfprintf_r+0x5d8>)
 800a6ba:	683e      	ldr	r6, [r7, #0]
 800a6bc:	9311      	str	r3, [sp, #68]	; 0x44
 800a6be:	2700      	movs	r7, #0
 800a6c0:	f045 0502 	orr.w	r5, r5, #2
 800a6c4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	9202      	str	r2, [sp, #8]
 800a6cc:	e05c      	b.n	800a788 <_svfprintf_r+0x4a0>
 800a6ce:	2600      	movs	r6, #0
 800a6d0:	1d3b      	adds	r3, r7, #4
 800a6d2:	45b1      	cmp	r9, r6
 800a6d4:	9303      	str	r3, [sp, #12]
 800a6d6:	f8d7 8000 	ldr.w	r8, [r7]
 800a6da:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800a6de:	db0a      	blt.n	800a6f6 <_svfprintf_r+0x40e>
 800a6e0:	464a      	mov	r2, r9
 800a6e2:	4631      	mov	r1, r6
 800a6e4:	4640      	mov	r0, r8
 800a6e6:	f7f5 fd73 	bl	80001d0 <memchr>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	f000 80ea 	beq.w	800a8c4 <_svfprintf_r+0x5dc>
 800a6f0:	ebc8 0900 	rsb	r9, r8, r0
 800a6f4:	e0e7      	b.n	800a8c6 <_svfprintf_r+0x5de>
 800a6f6:	4640      	mov	r0, r8
 800a6f8:	f7f5 fdba 	bl	8000270 <strlen>
 800a6fc:	4681      	mov	r9, r0
 800a6fe:	e0e2      	b.n	800a8c6 <_svfprintf_r+0x5de>
 800a700:	f045 0510 	orr.w	r5, r5, #16
 800a704:	06ae      	lsls	r6, r5, #26
 800a706:	d508      	bpl.n	800a71a <_svfprintf_r+0x432>
 800a708:	3707      	adds	r7, #7
 800a70a:	f027 0707 	bic.w	r7, r7, #7
 800a70e:	f107 0308 	add.w	r3, r7, #8
 800a712:	9303      	str	r3, [sp, #12]
 800a714:	e9d7 6700 	ldrd	r6, r7, [r7]
 800a718:	e00a      	b.n	800a730 <_svfprintf_r+0x448>
 800a71a:	1d3b      	adds	r3, r7, #4
 800a71c:	f015 0f10 	tst.w	r5, #16
 800a720:	9303      	str	r3, [sp, #12]
 800a722:	d103      	bne.n	800a72c <_svfprintf_r+0x444>
 800a724:	0668      	lsls	r0, r5, #25
 800a726:	d501      	bpl.n	800a72c <_svfprintf_r+0x444>
 800a728:	883e      	ldrh	r6, [r7, #0]
 800a72a:	e000      	b.n	800a72e <_svfprintf_r+0x446>
 800a72c:	683e      	ldr	r6, [r7, #0]
 800a72e:	2700      	movs	r7, #0
 800a730:	2301      	movs	r3, #1
 800a732:	e029      	b.n	800a788 <_svfprintf_r+0x4a0>
 800a734:	b10a      	cbz	r2, 800a73a <_svfprintf_r+0x452>
 800a736:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800a73a:	4b61      	ldr	r3, [pc, #388]	; (800a8c0 <_svfprintf_r+0x5d8>)
 800a73c:	9311      	str	r3, [sp, #68]	; 0x44
 800a73e:	06a9      	lsls	r1, r5, #26
 800a740:	d508      	bpl.n	800a754 <_svfprintf_r+0x46c>
 800a742:	3707      	adds	r7, #7
 800a744:	f027 0707 	bic.w	r7, r7, #7
 800a748:	f107 0308 	add.w	r3, r7, #8
 800a74c:	9303      	str	r3, [sp, #12]
 800a74e:	e9d7 6700 	ldrd	r6, r7, [r7]
 800a752:	e00a      	b.n	800a76a <_svfprintf_r+0x482>
 800a754:	1d3b      	adds	r3, r7, #4
 800a756:	f015 0f10 	tst.w	r5, #16
 800a75a:	9303      	str	r3, [sp, #12]
 800a75c:	d103      	bne.n	800a766 <_svfprintf_r+0x47e>
 800a75e:	066a      	lsls	r2, r5, #25
 800a760:	d501      	bpl.n	800a766 <_svfprintf_r+0x47e>
 800a762:	883e      	ldrh	r6, [r7, #0]
 800a764:	e000      	b.n	800a768 <_svfprintf_r+0x480>
 800a766:	683e      	ldr	r6, [r7, #0]
 800a768:	2700      	movs	r7, #0
 800a76a:	07eb      	lsls	r3, r5, #31
 800a76c:	d50b      	bpl.n	800a786 <_svfprintf_r+0x49e>
 800a76e:	ea56 0307 	orrs.w	r3, r6, r7
 800a772:	d008      	beq.n	800a786 <_svfprintf_r+0x49e>
 800a774:	2330      	movs	r3, #48	; 0x30
 800a776:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800a77a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a77e:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800a782:	f045 0502 	orr.w	r5, r5, #2
 800a786:	2302      	movs	r3, #2
 800a788:	2200      	movs	r2, #0
 800a78a:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800a78e:	e000      	b.n	800a792 <_svfprintf_r+0x4aa>
 800a790:	2301      	movs	r3, #1
 800a792:	f1b9 0f00 	cmp.w	r9, #0
 800a796:	f2c0 855c 	blt.w	800b252 <_svfprintf_r+0xf6a>
 800a79a:	ea56 0207 	orrs.w	r2, r6, r7
 800a79e:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 800a7a2:	d103      	bne.n	800a7ac <_svfprintf_r+0x4c4>
 800a7a4:	f1b9 0f00 	cmp.w	r9, #0
 800a7a8:	d05f      	beq.n	800a86a <_svfprintf_r+0x582>
 800a7aa:	e006      	b.n	800a7ba <_svfprintf_r+0x4d2>
 800a7ac:	460d      	mov	r5, r1
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d025      	beq.n	800a7fe <_svfprintf_r+0x516>
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d046      	beq.n	800a844 <_svfprintf_r+0x55c>
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	e007      	b.n	800a7ca <_svfprintf_r+0x4e2>
 800a7ba:	460d      	mov	r5, r1
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d022      	beq.n	800a806 <_svfprintf_r+0x51e>
 800a7c0:	2b02      	cmp	r3, #2
 800a7c2:	d03d      	beq.n	800a840 <_svfprintf_r+0x558>
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	2600      	movs	r6, #0
 800a7c8:	2700      	movs	r7, #0
 800a7ca:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800a7ce:	08f2      	lsrs	r2, r6, #3
 800a7d0:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800a7d4:	08f8      	lsrs	r0, r7, #3
 800a7d6:	f006 0307 	and.w	r3, r6, #7
 800a7da:	4607      	mov	r7, r0
 800a7dc:	4616      	mov	r6, r2
 800a7de:	3330      	adds	r3, #48	; 0x30
 800a7e0:	ea56 0207 	orrs.w	r2, r6, r7
 800a7e4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800a7e8:	d1f1      	bne.n	800a7ce <_svfprintf_r+0x4e6>
 800a7ea:	07e8      	lsls	r0, r5, #31
 800a7ec:	d548      	bpl.n	800a880 <_svfprintf_r+0x598>
 800a7ee:	2b30      	cmp	r3, #48	; 0x30
 800a7f0:	d046      	beq.n	800a880 <_svfprintf_r+0x598>
 800a7f2:	2330      	movs	r3, #48	; 0x30
 800a7f4:	f808 3c01 	strb.w	r3, [r8, #-1]
 800a7f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7fc:	e040      	b.n	800a880 <_svfprintf_r+0x598>
 800a7fe:	2f00      	cmp	r7, #0
 800a800:	bf08      	it	eq
 800a802:	2e0a      	cmpeq	r6, #10
 800a804:	d205      	bcs.n	800a812 <_svfprintf_r+0x52a>
 800a806:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800a80a:	3630      	adds	r6, #48	; 0x30
 800a80c:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800a810:	e029      	b.n	800a866 <_svfprintf_r+0x57e>
 800a812:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800a816:	4630      	mov	r0, r6
 800a818:	4639      	mov	r1, r7
 800a81a:	220a      	movs	r2, #10
 800a81c:	2300      	movs	r3, #0
 800a81e:	f7f6 fa0f 	bl	8000c40 <__aeabi_uldivmod>
 800a822:	3230      	adds	r2, #48	; 0x30
 800a824:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800a828:	2300      	movs	r3, #0
 800a82a:	4630      	mov	r0, r6
 800a82c:	4639      	mov	r1, r7
 800a82e:	220a      	movs	r2, #10
 800a830:	f7f6 fa06 	bl	8000c40 <__aeabi_uldivmod>
 800a834:	4606      	mov	r6, r0
 800a836:	460f      	mov	r7, r1
 800a838:	ea56 0307 	orrs.w	r3, r6, r7
 800a83c:	d1eb      	bne.n	800a816 <_svfprintf_r+0x52e>
 800a83e:	e012      	b.n	800a866 <_svfprintf_r+0x57e>
 800a840:	2600      	movs	r6, #0
 800a842:	2700      	movs	r7, #0
 800a844:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800a848:	f006 030f 	and.w	r3, r6, #15
 800a84c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a84e:	5cd3      	ldrb	r3, [r2, r3]
 800a850:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800a854:	0933      	lsrs	r3, r6, #4
 800a856:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800a85a:	093a      	lsrs	r2, r7, #4
 800a85c:	461e      	mov	r6, r3
 800a85e:	4617      	mov	r7, r2
 800a860:	ea56 0307 	orrs.w	r3, r6, r7
 800a864:	d1f0      	bne.n	800a848 <_svfprintf_r+0x560>
 800a866:	4629      	mov	r1, r5
 800a868:	e00a      	b.n	800a880 <_svfprintf_r+0x598>
 800a86a:	b93b      	cbnz	r3, 800a87c <_svfprintf_r+0x594>
 800a86c:	07ea      	lsls	r2, r5, #31
 800a86e:	d505      	bpl.n	800a87c <_svfprintf_r+0x594>
 800a870:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800a874:	2330      	movs	r3, #48	; 0x30
 800a876:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800a87a:	e001      	b.n	800a880 <_svfprintf_r+0x598>
 800a87c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800a880:	464e      	mov	r6, r9
 800a882:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800a886:	ebc8 0909 	rsb	r9, r8, r9
 800a88a:	460d      	mov	r5, r1
 800a88c:	2700      	movs	r7, #0
 800a88e:	e01b      	b.n	800a8c8 <_svfprintf_r+0x5e0>
 800a890:	b10a      	cbz	r2, 800a896 <_svfprintf_r+0x5ae>
 800a892:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 800a896:	9b02      	ldr	r3, [sp, #8]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 83a0 	beq.w	800afde <_svfprintf_r+0xcf6>
 800a89e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a8a2:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800a8a6:	2600      	movs	r6, #0
 800a8a8:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800a8ac:	9703      	str	r7, [sp, #12]
 800a8ae:	f04f 0901 	mov.w	r9, #1
 800a8b2:	4637      	mov	r7, r6
 800a8b4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800a8b8:	e006      	b.n	800a8c8 <_svfprintf_r+0x5e0>
 800a8ba:	bf00      	nop
 800a8bc:	7fefffff 	.word	0x7fefffff
 800a8c0:	0800cca9 	.word	0x0800cca9
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	4637      	mov	r7, r6
 800a8c8:	454e      	cmp	r6, r9
 800a8ca:	4633      	mov	r3, r6
 800a8cc:	bfb8      	it	lt
 800a8ce:	464b      	movlt	r3, r9
 800a8d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8d2:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800a8d6:	b113      	cbz	r3, 800a8de <_svfprintf_r+0x5f6>
 800a8d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8da:	3301      	adds	r3, #1
 800a8dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8de:	f015 0302 	ands.w	r3, r5, #2
 800a8e2:	9314      	str	r3, [sp, #80]	; 0x50
 800a8e4:	bf1e      	ittt	ne
 800a8e6:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 800a8e8:	3302      	addne	r3, #2
 800a8ea:	930b      	strne	r3, [sp, #44]	; 0x2c
 800a8ec:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800a8f0:	9315      	str	r3, [sp, #84]	; 0x54
 800a8f2:	d139      	bne.n	800a968 <_svfprintf_r+0x680>
 800a8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8f8:	1a9b      	subs	r3, r3, r2
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	930c      	str	r3, [sp, #48]	; 0x30
 800a8fe:	dd33      	ble.n	800a968 <_svfprintf_r+0x680>
 800a900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a902:	2b10      	cmp	r3, #16
 800a904:	4ba6      	ldr	r3, [pc, #664]	; (800aba0 <_svfprintf_r+0x8b8>)
 800a906:	6023      	str	r3, [r4, #0]
 800a908:	dd18      	ble.n	800a93c <_svfprintf_r+0x654>
 800a90a:	2310      	movs	r3, #16
 800a90c:	6063      	str	r3, [r4, #4]
 800a90e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a910:	3310      	adds	r3, #16
 800a912:	9321      	str	r3, [sp, #132]	; 0x84
 800a914:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a916:	3301      	adds	r3, #1
 800a918:	2b07      	cmp	r3, #7
 800a91a:	9320      	str	r3, [sp, #128]	; 0x80
 800a91c:	dc01      	bgt.n	800a922 <_svfprintf_r+0x63a>
 800a91e:	3408      	adds	r4, #8
 800a920:	e008      	b.n	800a934 <_svfprintf_r+0x64c>
 800a922:	aa1f      	add	r2, sp, #124	; 0x7c
 800a924:	4659      	mov	r1, fp
 800a926:	4650      	mov	r0, sl
 800a928:	f001 fec0 	bl	800c6ac <__ssprint_r>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	f040 835d 	bne.w	800afec <_svfprintf_r+0xd04>
 800a932:	ac2c      	add	r4, sp, #176	; 0xb0
 800a934:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a936:	3b10      	subs	r3, #16
 800a938:	930c      	str	r3, [sp, #48]	; 0x30
 800a93a:	e7e1      	b.n	800a900 <_svfprintf_r+0x618>
 800a93c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a93e:	6063      	str	r3, [r4, #4]
 800a940:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a944:	4413      	add	r3, r2
 800a946:	9321      	str	r3, [sp, #132]	; 0x84
 800a948:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a94a:	3301      	adds	r3, #1
 800a94c:	2b07      	cmp	r3, #7
 800a94e:	9320      	str	r3, [sp, #128]	; 0x80
 800a950:	dc01      	bgt.n	800a956 <_svfprintf_r+0x66e>
 800a952:	3408      	adds	r4, #8
 800a954:	e008      	b.n	800a968 <_svfprintf_r+0x680>
 800a956:	aa1f      	add	r2, sp, #124	; 0x7c
 800a958:	4659      	mov	r1, fp
 800a95a:	4650      	mov	r0, sl
 800a95c:	f001 fea6 	bl	800c6ac <__ssprint_r>
 800a960:	2800      	cmp	r0, #0
 800a962:	f040 8343 	bne.w	800afec <_svfprintf_r+0xd04>
 800a966:	ac2c      	add	r4, sp, #176	; 0xb0
 800a968:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800a96c:	b1bb      	cbz	r3, 800a99e <_svfprintf_r+0x6b6>
 800a96e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800a972:	6023      	str	r3, [r4, #0]
 800a974:	2301      	movs	r3, #1
 800a976:	6063      	str	r3, [r4, #4]
 800a978:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a97a:	3301      	adds	r3, #1
 800a97c:	9321      	str	r3, [sp, #132]	; 0x84
 800a97e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a980:	3301      	adds	r3, #1
 800a982:	2b07      	cmp	r3, #7
 800a984:	9320      	str	r3, [sp, #128]	; 0x80
 800a986:	dc01      	bgt.n	800a98c <_svfprintf_r+0x6a4>
 800a988:	3408      	adds	r4, #8
 800a98a:	e008      	b.n	800a99e <_svfprintf_r+0x6b6>
 800a98c:	aa1f      	add	r2, sp, #124	; 0x7c
 800a98e:	4659      	mov	r1, fp
 800a990:	4650      	mov	r0, sl
 800a992:	f001 fe8b 	bl	800c6ac <__ssprint_r>
 800a996:	2800      	cmp	r0, #0
 800a998:	f040 8328 	bne.w	800afec <_svfprintf_r+0xd04>
 800a99c:	ac2c      	add	r4, sp, #176	; 0xb0
 800a99e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9a0:	b1b3      	cbz	r3, 800a9d0 <_svfprintf_r+0x6e8>
 800a9a2:	ab18      	add	r3, sp, #96	; 0x60
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	6063      	str	r3, [r4, #4]
 800a9aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9ac:	3302      	adds	r3, #2
 800a9ae:	9321      	str	r3, [sp, #132]	; 0x84
 800a9b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	2b07      	cmp	r3, #7
 800a9b6:	9320      	str	r3, [sp, #128]	; 0x80
 800a9b8:	dc01      	bgt.n	800a9be <_svfprintf_r+0x6d6>
 800a9ba:	3408      	adds	r4, #8
 800a9bc:	e008      	b.n	800a9d0 <_svfprintf_r+0x6e8>
 800a9be:	aa1f      	add	r2, sp, #124	; 0x7c
 800a9c0:	4659      	mov	r1, fp
 800a9c2:	4650      	mov	r0, sl
 800a9c4:	f001 fe72 	bl	800c6ac <__ssprint_r>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	f040 830f 	bne.w	800afec <_svfprintf_r+0xd04>
 800a9ce:	ac2c      	add	r4, sp, #176	; 0xb0
 800a9d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9d2:	2b80      	cmp	r3, #128	; 0x80
 800a9d4:	d135      	bne.n	800aa42 <_svfprintf_r+0x75a>
 800a9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a9da:	1a9b      	subs	r3, r3, r2
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	dd30      	ble.n	800aa42 <_svfprintf_r+0x75a>
 800a9e0:	4a70      	ldr	r2, [pc, #448]	; (800aba4 <_svfprintf_r+0x8bc>)
 800a9e2:	6022      	str	r2, [r4, #0]
 800a9e4:	2b10      	cmp	r3, #16
 800a9e6:	dd18      	ble.n	800aa1a <_svfprintf_r+0x732>
 800a9e8:	2210      	movs	r2, #16
 800a9ea:	6062      	str	r2, [r4, #4]
 800a9ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a9ee:	3210      	adds	r2, #16
 800a9f0:	9221      	str	r2, [sp, #132]	; 0x84
 800a9f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a9f4:	3201      	adds	r2, #1
 800a9f6:	2a07      	cmp	r2, #7
 800a9f8:	9220      	str	r2, [sp, #128]	; 0x80
 800a9fa:	dc01      	bgt.n	800aa00 <_svfprintf_r+0x718>
 800a9fc:	3408      	adds	r4, #8
 800a9fe:	e00a      	b.n	800aa16 <_svfprintf_r+0x72e>
 800aa00:	aa1f      	add	r2, sp, #124	; 0x7c
 800aa02:	4659      	mov	r1, fp
 800aa04:	4650      	mov	r0, sl
 800aa06:	930c      	str	r3, [sp, #48]	; 0x30
 800aa08:	f001 fe50 	bl	800c6ac <__ssprint_r>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	f040 82ed 	bne.w	800afec <_svfprintf_r+0xd04>
 800aa12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa14:	ac2c      	add	r4, sp, #176	; 0xb0
 800aa16:	3b10      	subs	r3, #16
 800aa18:	e7e2      	b.n	800a9e0 <_svfprintf_r+0x6f8>
 800aa1a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa1c:	6063      	str	r3, [r4, #4]
 800aa1e:	4413      	add	r3, r2
 800aa20:	9321      	str	r3, [sp, #132]	; 0x84
 800aa22:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aa24:	3301      	adds	r3, #1
 800aa26:	2b07      	cmp	r3, #7
 800aa28:	9320      	str	r3, [sp, #128]	; 0x80
 800aa2a:	dc01      	bgt.n	800aa30 <_svfprintf_r+0x748>
 800aa2c:	3408      	adds	r4, #8
 800aa2e:	e008      	b.n	800aa42 <_svfprintf_r+0x75a>
 800aa30:	aa1f      	add	r2, sp, #124	; 0x7c
 800aa32:	4659      	mov	r1, fp
 800aa34:	4650      	mov	r0, sl
 800aa36:	f001 fe39 	bl	800c6ac <__ssprint_r>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	f040 82d6 	bne.w	800afec <_svfprintf_r+0xd04>
 800aa40:	ac2c      	add	r4, sp, #176	; 0xb0
 800aa42:	ebc9 0606 	rsb	r6, r9, r6
 800aa46:	2e00      	cmp	r6, #0
 800aa48:	dd2e      	ble.n	800aaa8 <_svfprintf_r+0x7c0>
 800aa4a:	4b56      	ldr	r3, [pc, #344]	; (800aba4 <_svfprintf_r+0x8bc>)
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	2e10      	cmp	r6, #16
 800aa50:	dd16      	ble.n	800aa80 <_svfprintf_r+0x798>
 800aa52:	2310      	movs	r3, #16
 800aa54:	6063      	str	r3, [r4, #4]
 800aa56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa58:	3310      	adds	r3, #16
 800aa5a:	9321      	str	r3, [sp, #132]	; 0x84
 800aa5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aa5e:	3301      	adds	r3, #1
 800aa60:	2b07      	cmp	r3, #7
 800aa62:	9320      	str	r3, [sp, #128]	; 0x80
 800aa64:	dc01      	bgt.n	800aa6a <_svfprintf_r+0x782>
 800aa66:	3408      	adds	r4, #8
 800aa68:	e008      	b.n	800aa7c <_svfprintf_r+0x794>
 800aa6a:	aa1f      	add	r2, sp, #124	; 0x7c
 800aa6c:	4659      	mov	r1, fp
 800aa6e:	4650      	mov	r0, sl
 800aa70:	f001 fe1c 	bl	800c6ac <__ssprint_r>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	f040 82b9 	bne.w	800afec <_svfprintf_r+0xd04>
 800aa7a:	ac2c      	add	r4, sp, #176	; 0xb0
 800aa7c:	3e10      	subs	r6, #16
 800aa7e:	e7e4      	b.n	800aa4a <_svfprintf_r+0x762>
 800aa80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aa82:	9821      	ldr	r0, [sp, #132]	; 0x84
 800aa84:	6066      	str	r6, [r4, #4]
 800aa86:	3301      	adds	r3, #1
 800aa88:	4406      	add	r6, r0
 800aa8a:	2b07      	cmp	r3, #7
 800aa8c:	9621      	str	r6, [sp, #132]	; 0x84
 800aa8e:	9320      	str	r3, [sp, #128]	; 0x80
 800aa90:	dc01      	bgt.n	800aa96 <_svfprintf_r+0x7ae>
 800aa92:	3408      	adds	r4, #8
 800aa94:	e008      	b.n	800aaa8 <_svfprintf_r+0x7c0>
 800aa96:	aa1f      	add	r2, sp, #124	; 0x7c
 800aa98:	4659      	mov	r1, fp
 800aa9a:	4650      	mov	r0, sl
 800aa9c:	f001 fe06 	bl	800c6ac <__ssprint_r>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	f040 82a3 	bne.w	800afec <_svfprintf_r+0xd04>
 800aaa6:	ac2c      	add	r4, sp, #176	; 0xb0
 800aaa8:	05eb      	lsls	r3, r5, #23
 800aaaa:	d414      	bmi.n	800aad6 <_svfprintf_r+0x7ee>
 800aaac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaae:	e884 0300 	stmia.w	r4, {r8, r9}
 800aab2:	444b      	add	r3, r9
 800aab4:	9321      	str	r3, [sp, #132]	; 0x84
 800aab6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aab8:	3301      	adds	r3, #1
 800aaba:	2b07      	cmp	r3, #7
 800aabc:	9320      	str	r3, [sp, #128]	; 0x80
 800aabe:	f340 8244 	ble.w	800af4a <_svfprintf_r+0xc62>
 800aac2:	aa1f      	add	r2, sp, #124	; 0x7c
 800aac4:	4659      	mov	r1, fp
 800aac6:	4650      	mov	r0, sl
 800aac8:	f001 fdf0 	bl	800c6ac <__ssprint_r>
 800aacc:	2800      	cmp	r0, #0
 800aace:	f040 828d 	bne.w	800afec <_svfprintf_r+0xd04>
 800aad2:	ac2c      	add	r4, sp, #176	; 0xb0
 800aad4:	e23a      	b.n	800af4c <_svfprintf_r+0xc64>
 800aad6:	9b02      	ldr	r3, [sp, #8]
 800aad8:	2b65      	cmp	r3, #101	; 0x65
 800aada:	f340 81ad 	ble.w	800ae38 <_svfprintf_r+0xb50>
 800aade:	2200      	movs	r2, #0
 800aae0:	2300      	movs	r3, #0
 800aae2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aae6:	f7f5 ffeb 	bl	8000ac0 <__aeabi_dcmpeq>
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d05e      	beq.n	800abac <_svfprintf_r+0x8c4>
 800aaee:	4b2e      	ldr	r3, [pc, #184]	; (800aba8 <_svfprintf_r+0x8c0>)
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	6063      	str	r3, [r4, #4]
 800aaf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaf8:	3301      	adds	r3, #1
 800aafa:	9321      	str	r3, [sp, #132]	; 0x84
 800aafc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aafe:	3301      	adds	r3, #1
 800ab00:	2b07      	cmp	r3, #7
 800ab02:	9320      	str	r3, [sp, #128]	; 0x80
 800ab04:	dc01      	bgt.n	800ab0a <_svfprintf_r+0x822>
 800ab06:	3408      	adds	r4, #8
 800ab08:	e008      	b.n	800ab1c <_svfprintf_r+0x834>
 800ab0a:	aa1f      	add	r2, sp, #124	; 0x7c
 800ab0c:	4659      	mov	r1, fp
 800ab0e:	4650      	mov	r0, sl
 800ab10:	f001 fdcc 	bl	800c6ac <__ssprint_r>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	f040 8269 	bne.w	800afec <_svfprintf_r+0xd04>
 800ab1a:	ac2c      	add	r4, sp, #176	; 0xb0
 800ab1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ab1e:	9a04      	ldr	r2, [sp, #16]
 800ab20:	4293      	cmp	r3, r2
 800ab22:	db02      	blt.n	800ab2a <_svfprintf_r+0x842>
 800ab24:	07ee      	lsls	r6, r5, #31
 800ab26:	f140 8211 	bpl.w	800af4c <_svfprintf_r+0xc64>
 800ab2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	9b08      	ldr	r3, [sp, #32]
 800ab30:	6063      	str	r3, [r4, #4]
 800ab32:	9a08      	ldr	r2, [sp, #32]
 800ab34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab36:	4413      	add	r3, r2
 800ab38:	9321      	str	r3, [sp, #132]	; 0x84
 800ab3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	2b07      	cmp	r3, #7
 800ab40:	9320      	str	r3, [sp, #128]	; 0x80
 800ab42:	dc01      	bgt.n	800ab48 <_svfprintf_r+0x860>
 800ab44:	3408      	adds	r4, #8
 800ab46:	e008      	b.n	800ab5a <_svfprintf_r+0x872>
 800ab48:	aa1f      	add	r2, sp, #124	; 0x7c
 800ab4a:	4659      	mov	r1, fp
 800ab4c:	4650      	mov	r0, sl
 800ab4e:	f001 fdad 	bl	800c6ac <__ssprint_r>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	f040 824a 	bne.w	800afec <_svfprintf_r+0xd04>
 800ab58:	ac2c      	add	r4, sp, #176	; 0xb0
 800ab5a:	9b04      	ldr	r3, [sp, #16]
 800ab5c:	1e5e      	subs	r6, r3, #1
 800ab5e:	2e00      	cmp	r6, #0
 800ab60:	f340 81f4 	ble.w	800af4c <_svfprintf_r+0xc64>
 800ab64:	4f0f      	ldr	r7, [pc, #60]	; (800aba4 <_svfprintf_r+0x8bc>)
 800ab66:	f04f 0810 	mov.w	r8, #16
 800ab6a:	2e10      	cmp	r6, #16
 800ab6c:	f340 8159 	ble.w	800ae22 <_svfprintf_r+0xb3a>
 800ab70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab72:	3310      	adds	r3, #16
 800ab74:	9321      	str	r3, [sp, #132]	; 0x84
 800ab76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ab78:	3301      	adds	r3, #1
 800ab7a:	2b07      	cmp	r3, #7
 800ab7c:	e884 0180 	stmia.w	r4, {r7, r8}
 800ab80:	9320      	str	r3, [sp, #128]	; 0x80
 800ab82:	dc01      	bgt.n	800ab88 <_svfprintf_r+0x8a0>
 800ab84:	3408      	adds	r4, #8
 800ab86:	e008      	b.n	800ab9a <_svfprintf_r+0x8b2>
 800ab88:	aa1f      	add	r2, sp, #124	; 0x7c
 800ab8a:	4659      	mov	r1, fp
 800ab8c:	4650      	mov	r0, sl
 800ab8e:	f001 fd8d 	bl	800c6ac <__ssprint_r>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	f040 822a 	bne.w	800afec <_svfprintf_r+0xd04>
 800ab98:	ac2c      	add	r4, sp, #176	; 0xb0
 800ab9a:	3e10      	subs	r6, #16
 800ab9c:	e7e5      	b.n	800ab6a <_svfprintf_r+0x882>
 800ab9e:	bf00      	nop
 800aba0:	0800ccbc 	.word	0x0800ccbc
 800aba4:	0800cc78 	.word	0x0800cc78
 800aba8:	0800ccba 	.word	0x0800ccba
 800abac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abae:	2b00      	cmp	r3, #0
 800abb0:	dc7c      	bgt.n	800acac <_svfprintf_r+0x9c4>
 800abb2:	4b9f      	ldr	r3, [pc, #636]	; (800ae30 <_svfprintf_r+0xb48>)
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	2301      	movs	r3, #1
 800abb8:	6063      	str	r3, [r4, #4]
 800abba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abbc:	3301      	adds	r3, #1
 800abbe:	9321      	str	r3, [sp, #132]	; 0x84
 800abc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800abc2:	3301      	adds	r3, #1
 800abc4:	2b07      	cmp	r3, #7
 800abc6:	9320      	str	r3, [sp, #128]	; 0x80
 800abc8:	dc01      	bgt.n	800abce <_svfprintf_r+0x8e6>
 800abca:	3408      	adds	r4, #8
 800abcc:	e008      	b.n	800abe0 <_svfprintf_r+0x8f8>
 800abce:	aa1f      	add	r2, sp, #124	; 0x7c
 800abd0:	4659      	mov	r1, fp
 800abd2:	4650      	mov	r0, sl
 800abd4:	f001 fd6a 	bl	800c6ac <__ssprint_r>
 800abd8:	2800      	cmp	r0, #0
 800abda:	f040 8207 	bne.w	800afec <_svfprintf_r+0xd04>
 800abde:	ac2c      	add	r4, sp, #176	; 0xb0
 800abe0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abe2:	b923      	cbnz	r3, 800abee <_svfprintf_r+0x906>
 800abe4:	9b04      	ldr	r3, [sp, #16]
 800abe6:	b913      	cbnz	r3, 800abee <_svfprintf_r+0x906>
 800abe8:	07e8      	lsls	r0, r5, #31
 800abea:	f140 81af 	bpl.w	800af4c <_svfprintf_r+0xc64>
 800abee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	9b08      	ldr	r3, [sp, #32]
 800abf4:	6063      	str	r3, [r4, #4]
 800abf6:	9a08      	ldr	r2, [sp, #32]
 800abf8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abfa:	4413      	add	r3, r2
 800abfc:	9321      	str	r3, [sp, #132]	; 0x84
 800abfe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ac00:	3301      	adds	r3, #1
 800ac02:	2b07      	cmp	r3, #7
 800ac04:	9320      	str	r3, [sp, #128]	; 0x80
 800ac06:	dc02      	bgt.n	800ac0e <_svfprintf_r+0x926>
 800ac08:	f104 0308 	add.w	r3, r4, #8
 800ac0c:	e008      	b.n	800ac20 <_svfprintf_r+0x938>
 800ac0e:	aa1f      	add	r2, sp, #124	; 0x7c
 800ac10:	4659      	mov	r1, fp
 800ac12:	4650      	mov	r0, sl
 800ac14:	f001 fd4a 	bl	800c6ac <__ssprint_r>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	f040 81e7 	bne.w	800afec <_svfprintf_r+0xd04>
 800ac1e:	ab2c      	add	r3, sp, #176	; 0xb0
 800ac20:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ac22:	4276      	negs	r6, r6
 800ac24:	2e00      	cmp	r6, #0
 800ac26:	dd30      	ble.n	800ac8a <_svfprintf_r+0x9a2>
 800ac28:	4f82      	ldr	r7, [pc, #520]	; (800ae34 <_svfprintf_r+0xb4c>)
 800ac2a:	2410      	movs	r4, #16
 800ac2c:	2e10      	cmp	r6, #16
 800ac2e:	dd16      	ble.n	800ac5e <_svfprintf_r+0x976>
 800ac30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac32:	601f      	str	r7, [r3, #0]
 800ac34:	3210      	adds	r2, #16
 800ac36:	9221      	str	r2, [sp, #132]	; 0x84
 800ac38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac3a:	605c      	str	r4, [r3, #4]
 800ac3c:	3201      	adds	r2, #1
 800ac3e:	2a07      	cmp	r2, #7
 800ac40:	9220      	str	r2, [sp, #128]	; 0x80
 800ac42:	dc01      	bgt.n	800ac48 <_svfprintf_r+0x960>
 800ac44:	3308      	adds	r3, #8
 800ac46:	e008      	b.n	800ac5a <_svfprintf_r+0x972>
 800ac48:	aa1f      	add	r2, sp, #124	; 0x7c
 800ac4a:	4659      	mov	r1, fp
 800ac4c:	4650      	mov	r0, sl
 800ac4e:	f001 fd2d 	bl	800c6ac <__ssprint_r>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	f040 81ca 	bne.w	800afec <_svfprintf_r+0xd04>
 800ac58:	ab2c      	add	r3, sp, #176	; 0xb0
 800ac5a:	3e10      	subs	r6, #16
 800ac5c:	e7e6      	b.n	800ac2c <_svfprintf_r+0x944>
 800ac5e:	4a75      	ldr	r2, [pc, #468]	; (800ae34 <_svfprintf_r+0xb4c>)
 800ac60:	e883 0044 	stmia.w	r3, {r2, r6}
 800ac64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac66:	4416      	add	r6, r2
 800ac68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac6a:	9621      	str	r6, [sp, #132]	; 0x84
 800ac6c:	3201      	adds	r2, #1
 800ac6e:	2a07      	cmp	r2, #7
 800ac70:	9220      	str	r2, [sp, #128]	; 0x80
 800ac72:	dc01      	bgt.n	800ac78 <_svfprintf_r+0x990>
 800ac74:	3308      	adds	r3, #8
 800ac76:	e008      	b.n	800ac8a <_svfprintf_r+0x9a2>
 800ac78:	aa1f      	add	r2, sp, #124	; 0x7c
 800ac7a:	4659      	mov	r1, fp
 800ac7c:	4650      	mov	r0, sl
 800ac7e:	f001 fd15 	bl	800c6ac <__ssprint_r>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	f040 81b2 	bne.w	800afec <_svfprintf_r+0xd04>
 800ac88:	ab2c      	add	r3, sp, #176	; 0xb0
 800ac8a:	9a04      	ldr	r2, [sp, #16]
 800ac8c:	605a      	str	r2, [r3, #4]
 800ac8e:	9904      	ldr	r1, [sp, #16]
 800ac90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac92:	f8c3 8000 	str.w	r8, [r3]
 800ac96:	440a      	add	r2, r1
 800ac98:	9221      	str	r2, [sp, #132]	; 0x84
 800ac9a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac9c:	3201      	adds	r2, #1
 800ac9e:	2a07      	cmp	r2, #7
 800aca0:	9220      	str	r2, [sp, #128]	; 0x80
 800aca2:	f73f af0e 	bgt.w	800aac2 <_svfprintf_r+0x7da>
 800aca6:	f103 0408 	add.w	r4, r3, #8
 800acaa:	e14f      	b.n	800af4c <_svfprintf_r+0xc64>
 800acac:	9b04      	ldr	r3, [sp, #16]
 800acae:	42bb      	cmp	r3, r7
 800acb0:	bfa8      	it	ge
 800acb2:	463b      	movge	r3, r7
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	461e      	mov	r6, r3
 800acb8:	dd15      	ble.n	800ace6 <_svfprintf_r+0x9fe>
 800acba:	6063      	str	r3, [r4, #4]
 800acbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acbe:	f8c4 8000 	str.w	r8, [r4]
 800acc2:	4433      	add	r3, r6
 800acc4:	9321      	str	r3, [sp, #132]	; 0x84
 800acc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800acc8:	3301      	adds	r3, #1
 800acca:	2b07      	cmp	r3, #7
 800accc:	9320      	str	r3, [sp, #128]	; 0x80
 800acce:	dc01      	bgt.n	800acd4 <_svfprintf_r+0x9ec>
 800acd0:	3408      	adds	r4, #8
 800acd2:	e008      	b.n	800ace6 <_svfprintf_r+0x9fe>
 800acd4:	aa1f      	add	r2, sp, #124	; 0x7c
 800acd6:	4659      	mov	r1, fp
 800acd8:	4650      	mov	r0, sl
 800acda:	f001 fce7 	bl	800c6ac <__ssprint_r>
 800acde:	2800      	cmp	r0, #0
 800ace0:	f040 8184 	bne.w	800afec <_svfprintf_r+0xd04>
 800ace4:	ac2c      	add	r4, sp, #176	; 0xb0
 800ace6:	2e00      	cmp	r6, #0
 800ace8:	bfac      	ite	ge
 800acea:	1bbe      	subge	r6, r7, r6
 800acec:	463e      	movlt	r6, r7
 800acee:	2e00      	cmp	r6, #0
 800acf0:	dd30      	ble.n	800ad54 <_svfprintf_r+0xa6c>
 800acf2:	f04f 0910 	mov.w	r9, #16
 800acf6:	4b4f      	ldr	r3, [pc, #316]	; (800ae34 <_svfprintf_r+0xb4c>)
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	2e10      	cmp	r6, #16
 800acfc:	dd16      	ble.n	800ad2c <_svfprintf_r+0xa44>
 800acfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad00:	f8c4 9004 	str.w	r9, [r4, #4]
 800ad04:	3310      	adds	r3, #16
 800ad06:	9321      	str	r3, [sp, #132]	; 0x84
 800ad08:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	2b07      	cmp	r3, #7
 800ad0e:	9320      	str	r3, [sp, #128]	; 0x80
 800ad10:	dc01      	bgt.n	800ad16 <_svfprintf_r+0xa2e>
 800ad12:	3408      	adds	r4, #8
 800ad14:	e008      	b.n	800ad28 <_svfprintf_r+0xa40>
 800ad16:	aa1f      	add	r2, sp, #124	; 0x7c
 800ad18:	4659      	mov	r1, fp
 800ad1a:	4650      	mov	r0, sl
 800ad1c:	f001 fcc6 	bl	800c6ac <__ssprint_r>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	f040 8163 	bne.w	800afec <_svfprintf_r+0xd04>
 800ad26:	ac2c      	add	r4, sp, #176	; 0xb0
 800ad28:	3e10      	subs	r6, #16
 800ad2a:	e7e4      	b.n	800acf6 <_svfprintf_r+0xa0e>
 800ad2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad2e:	6066      	str	r6, [r4, #4]
 800ad30:	441e      	add	r6, r3
 800ad32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ad34:	9621      	str	r6, [sp, #132]	; 0x84
 800ad36:	3301      	adds	r3, #1
 800ad38:	2b07      	cmp	r3, #7
 800ad3a:	9320      	str	r3, [sp, #128]	; 0x80
 800ad3c:	dc01      	bgt.n	800ad42 <_svfprintf_r+0xa5a>
 800ad3e:	3408      	adds	r4, #8
 800ad40:	e008      	b.n	800ad54 <_svfprintf_r+0xa6c>
 800ad42:	aa1f      	add	r2, sp, #124	; 0x7c
 800ad44:	4659      	mov	r1, fp
 800ad46:	4650      	mov	r0, sl
 800ad48:	f001 fcb0 	bl	800c6ac <__ssprint_r>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	f040 814d 	bne.w	800afec <_svfprintf_r+0xd04>
 800ad52:	ac2c      	add	r4, sp, #176	; 0xb0
 800ad54:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad56:	9a04      	ldr	r2, [sp, #16]
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	4447      	add	r7, r8
 800ad5c:	db01      	blt.n	800ad62 <_svfprintf_r+0xa7a>
 800ad5e:	07e9      	lsls	r1, r5, #31
 800ad60:	d517      	bpl.n	800ad92 <_svfprintf_r+0xaaa>
 800ad62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	9b08      	ldr	r3, [sp, #32]
 800ad68:	6063      	str	r3, [r4, #4]
 800ad6a:	9a08      	ldr	r2, [sp, #32]
 800ad6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad6e:	4413      	add	r3, r2
 800ad70:	9321      	str	r3, [sp, #132]	; 0x84
 800ad72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ad74:	3301      	adds	r3, #1
 800ad76:	2b07      	cmp	r3, #7
 800ad78:	9320      	str	r3, [sp, #128]	; 0x80
 800ad7a:	dc01      	bgt.n	800ad80 <_svfprintf_r+0xa98>
 800ad7c:	3408      	adds	r4, #8
 800ad7e:	e008      	b.n	800ad92 <_svfprintf_r+0xaaa>
 800ad80:	aa1f      	add	r2, sp, #124	; 0x7c
 800ad82:	4659      	mov	r1, fp
 800ad84:	4650      	mov	r0, sl
 800ad86:	f001 fc91 	bl	800c6ac <__ssprint_r>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	f040 812e 	bne.w	800afec <_svfprintf_r+0xd04>
 800ad90:	ac2c      	add	r4, sp, #176	; 0xb0
 800ad92:	9b04      	ldr	r3, [sp, #16]
 800ad94:	9a04      	ldr	r2, [sp, #16]
 800ad96:	eb08 0603 	add.w	r6, r8, r3
 800ad9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad9c:	1bf6      	subs	r6, r6, r7
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	429e      	cmp	r6, r3
 800ada2:	bfa8      	it	ge
 800ada4:	461e      	movge	r6, r3
 800ada6:	2e00      	cmp	r6, #0
 800ada8:	dd14      	ble.n	800add4 <_svfprintf_r+0xaec>
 800adaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adac:	6027      	str	r7, [r4, #0]
 800adae:	4433      	add	r3, r6
 800adb0:	9321      	str	r3, [sp, #132]	; 0x84
 800adb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800adb4:	6066      	str	r6, [r4, #4]
 800adb6:	3301      	adds	r3, #1
 800adb8:	2b07      	cmp	r3, #7
 800adba:	9320      	str	r3, [sp, #128]	; 0x80
 800adbc:	dc01      	bgt.n	800adc2 <_svfprintf_r+0xada>
 800adbe:	3408      	adds	r4, #8
 800adc0:	e008      	b.n	800add4 <_svfprintf_r+0xaec>
 800adc2:	aa1f      	add	r2, sp, #124	; 0x7c
 800adc4:	4659      	mov	r1, fp
 800adc6:	4650      	mov	r0, sl
 800adc8:	f001 fc70 	bl	800c6ac <__ssprint_r>
 800adcc:	2800      	cmp	r0, #0
 800adce:	f040 810d 	bne.w	800afec <_svfprintf_r+0xd04>
 800add2:	ac2c      	add	r4, sp, #176	; 0xb0
 800add4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800add6:	9a04      	ldr	r2, [sp, #16]
 800add8:	2e00      	cmp	r6, #0
 800adda:	eba2 0303 	sub.w	r3, r2, r3
 800adde:	bfac      	ite	ge
 800ade0:	1b9e      	subge	r6, r3, r6
 800ade2:	461e      	movlt	r6, r3
 800ade4:	2e00      	cmp	r6, #0
 800ade6:	f340 80b1 	ble.w	800af4c <_svfprintf_r+0xc64>
 800adea:	4f12      	ldr	r7, [pc, #72]	; (800ae34 <_svfprintf_r+0xb4c>)
 800adec:	f04f 0810 	mov.w	r8, #16
 800adf0:	2e10      	cmp	r6, #16
 800adf2:	dd16      	ble.n	800ae22 <_svfprintf_r+0xb3a>
 800adf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adf6:	3310      	adds	r3, #16
 800adf8:	9321      	str	r3, [sp, #132]	; 0x84
 800adfa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800adfc:	3301      	adds	r3, #1
 800adfe:	2b07      	cmp	r3, #7
 800ae00:	e884 0180 	stmia.w	r4, {r7, r8}
 800ae04:	9320      	str	r3, [sp, #128]	; 0x80
 800ae06:	dc01      	bgt.n	800ae0c <_svfprintf_r+0xb24>
 800ae08:	3408      	adds	r4, #8
 800ae0a:	e008      	b.n	800ae1e <_svfprintf_r+0xb36>
 800ae0c:	aa1f      	add	r2, sp, #124	; 0x7c
 800ae0e:	4659      	mov	r1, fp
 800ae10:	4650      	mov	r0, sl
 800ae12:	f001 fc4b 	bl	800c6ac <__ssprint_r>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	f040 80e8 	bne.w	800afec <_svfprintf_r+0xd04>
 800ae1c:	ac2c      	add	r4, sp, #176	; 0xb0
 800ae1e:	3e10      	subs	r6, #16
 800ae20:	e7e6      	b.n	800adf0 <_svfprintf_r+0xb08>
 800ae22:	4b04      	ldr	r3, [pc, #16]	; (800ae34 <_svfprintf_r+0xb4c>)
 800ae24:	e884 0048 	stmia.w	r4, {r3, r6}
 800ae28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae2a:	441e      	add	r6, r3
 800ae2c:	9621      	str	r6, [sp, #132]	; 0x84
 800ae2e:	e642      	b.n	800aab6 <_svfprintf_r+0x7ce>
 800ae30:	0800ccba 	.word	0x0800ccba
 800ae34:	0800cc78 	.word	0x0800cc78
 800ae38:	9b04      	ldr	r3, [sp, #16]
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	dc01      	bgt.n	800ae42 <_svfprintf_r+0xb5a>
 800ae3e:	07ea      	lsls	r2, r5, #31
 800ae40:	d573      	bpl.n	800af2a <_svfprintf_r+0xc42>
 800ae42:	2301      	movs	r3, #1
 800ae44:	6063      	str	r3, [r4, #4]
 800ae46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae48:	f8c4 8000 	str.w	r8, [r4]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	9321      	str	r3, [sp, #132]	; 0x84
 800ae50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ae52:	3301      	adds	r3, #1
 800ae54:	2b07      	cmp	r3, #7
 800ae56:	9320      	str	r3, [sp, #128]	; 0x80
 800ae58:	dc01      	bgt.n	800ae5e <_svfprintf_r+0xb76>
 800ae5a:	3408      	adds	r4, #8
 800ae5c:	e008      	b.n	800ae70 <_svfprintf_r+0xb88>
 800ae5e:	aa1f      	add	r2, sp, #124	; 0x7c
 800ae60:	4659      	mov	r1, fp
 800ae62:	4650      	mov	r0, sl
 800ae64:	f001 fc22 	bl	800c6ac <__ssprint_r>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	f040 80bf 	bne.w	800afec <_svfprintf_r+0xd04>
 800ae6e:	ac2c      	add	r4, sp, #176	; 0xb0
 800ae70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae72:	6023      	str	r3, [r4, #0]
 800ae74:	9b08      	ldr	r3, [sp, #32]
 800ae76:	6063      	str	r3, [r4, #4]
 800ae78:	9a08      	ldr	r2, [sp, #32]
 800ae7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae7c:	4413      	add	r3, r2
 800ae7e:	9321      	str	r3, [sp, #132]	; 0x84
 800ae80:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ae82:	3301      	adds	r3, #1
 800ae84:	2b07      	cmp	r3, #7
 800ae86:	9320      	str	r3, [sp, #128]	; 0x80
 800ae88:	dc01      	bgt.n	800ae8e <_svfprintf_r+0xba6>
 800ae8a:	3408      	adds	r4, #8
 800ae8c:	e008      	b.n	800aea0 <_svfprintf_r+0xbb8>
 800ae8e:	aa1f      	add	r2, sp, #124	; 0x7c
 800ae90:	4659      	mov	r1, fp
 800ae92:	4650      	mov	r0, sl
 800ae94:	f001 fc0a 	bl	800c6ac <__ssprint_r>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	f040 80a7 	bne.w	800afec <_svfprintf_r+0xd04>
 800ae9e:	ac2c      	add	r4, sp, #176	; 0xb0
 800aea0:	2300      	movs	r3, #0
 800aea2:	2200      	movs	r2, #0
 800aea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aea8:	f7f5 fe0a 	bl	8000ac0 <__aeabi_dcmpeq>
 800aeac:	9b04      	ldr	r3, [sp, #16]
 800aeae:	1e5e      	subs	r6, r3, #1
 800aeb0:	b9b8      	cbnz	r0, 800aee2 <_svfprintf_r+0xbfa>
 800aeb2:	f108 0301 	add.w	r3, r8, #1
 800aeb6:	e884 0048 	stmia.w	r4, {r3, r6}
 800aeba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aebc:	9a04      	ldr	r2, [sp, #16]
 800aebe:	3b01      	subs	r3, #1
 800aec0:	4413      	add	r3, r2
 800aec2:	9321      	str	r3, [sp, #132]	; 0x84
 800aec4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aec6:	3301      	adds	r3, #1
 800aec8:	2b07      	cmp	r3, #7
 800aeca:	9320      	str	r3, [sp, #128]	; 0x80
 800aecc:	dd34      	ble.n	800af38 <_svfprintf_r+0xc50>
 800aece:	aa1f      	add	r2, sp, #124	; 0x7c
 800aed0:	4659      	mov	r1, fp
 800aed2:	4650      	mov	r0, sl
 800aed4:	f001 fbea 	bl	800c6ac <__ssprint_r>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	f040 8087 	bne.w	800afec <_svfprintf_r+0xd04>
 800aede:	ac2c      	add	r4, sp, #176	; 0xb0
 800aee0:	e02b      	b.n	800af3a <_svfprintf_r+0xc52>
 800aee2:	2e00      	cmp	r6, #0
 800aee4:	dd29      	ble.n	800af3a <_svfprintf_r+0xc52>
 800aee6:	4fa7      	ldr	r7, [pc, #668]	; (800b184 <_svfprintf_r+0xe9c>)
 800aee8:	f04f 0810 	mov.w	r8, #16
 800aeec:	2e10      	cmp	r6, #16
 800aeee:	dd15      	ble.n	800af1c <_svfprintf_r+0xc34>
 800aef0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aef2:	3310      	adds	r3, #16
 800aef4:	9321      	str	r3, [sp, #132]	; 0x84
 800aef6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aef8:	3301      	adds	r3, #1
 800aefa:	2b07      	cmp	r3, #7
 800aefc:	e884 0180 	stmia.w	r4, {r7, r8}
 800af00:	9320      	str	r3, [sp, #128]	; 0x80
 800af02:	dc01      	bgt.n	800af08 <_svfprintf_r+0xc20>
 800af04:	3408      	adds	r4, #8
 800af06:	e007      	b.n	800af18 <_svfprintf_r+0xc30>
 800af08:	aa1f      	add	r2, sp, #124	; 0x7c
 800af0a:	4659      	mov	r1, fp
 800af0c:	4650      	mov	r0, sl
 800af0e:	f001 fbcd 	bl	800c6ac <__ssprint_r>
 800af12:	2800      	cmp	r0, #0
 800af14:	d16a      	bne.n	800afec <_svfprintf_r+0xd04>
 800af16:	ac2c      	add	r4, sp, #176	; 0xb0
 800af18:	3e10      	subs	r6, #16
 800af1a:	e7e7      	b.n	800aeec <_svfprintf_r+0xc04>
 800af1c:	4b99      	ldr	r3, [pc, #612]	; (800b184 <_svfprintf_r+0xe9c>)
 800af1e:	e884 0048 	stmia.w	r4, {r3, r6}
 800af22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af24:	441e      	add	r6, r3
 800af26:	9621      	str	r6, [sp, #132]	; 0x84
 800af28:	e7cc      	b.n	800aec4 <_svfprintf_r+0xbdc>
 800af2a:	2301      	movs	r3, #1
 800af2c:	6063      	str	r3, [r4, #4]
 800af2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af30:	f8c4 8000 	str.w	r8, [r4]
 800af34:	3301      	adds	r3, #1
 800af36:	e7c4      	b.n	800aec2 <_svfprintf_r+0xbda>
 800af38:	3408      	adds	r4, #8
 800af3a:	ab1b      	add	r3, sp, #108	; 0x6c
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af40:	6063      	str	r3, [r4, #4]
 800af42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af46:	4413      	add	r3, r2
 800af48:	e5b4      	b.n	800aab4 <_svfprintf_r+0x7cc>
 800af4a:	3408      	adds	r4, #8
 800af4c:	076b      	lsls	r3, r5, #29
 800af4e:	d40b      	bmi.n	800af68 <_svfprintf_r+0xc80>
 800af50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af56:	428a      	cmp	r2, r1
 800af58:	bfac      	ite	ge
 800af5a:	189b      	addge	r3, r3, r2
 800af5c:	185b      	addlt	r3, r3, r1
 800af5e:	930a      	str	r3, [sp, #40]	; 0x28
 800af60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af62:	2b00      	cmp	r3, #0
 800af64:	d035      	beq.n	800afd2 <_svfprintf_r+0xcea>
 800af66:	e02e      	b.n	800afc6 <_svfprintf_r+0xcde>
 800af68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af6c:	1a9d      	subs	r5, r3, r2
 800af6e:	2d00      	cmp	r5, #0
 800af70:	ddee      	ble.n	800af50 <_svfprintf_r+0xc68>
 800af72:	2610      	movs	r6, #16
 800af74:	4b84      	ldr	r3, [pc, #528]	; (800b188 <_svfprintf_r+0xea0>)
 800af76:	6023      	str	r3, [r4, #0]
 800af78:	2d10      	cmp	r5, #16
 800af7a:	dd13      	ble.n	800afa4 <_svfprintf_r+0xcbc>
 800af7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af7e:	6066      	str	r6, [r4, #4]
 800af80:	3310      	adds	r3, #16
 800af82:	9321      	str	r3, [sp, #132]	; 0x84
 800af84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800af86:	3301      	adds	r3, #1
 800af88:	2b07      	cmp	r3, #7
 800af8a:	9320      	str	r3, [sp, #128]	; 0x80
 800af8c:	dc01      	bgt.n	800af92 <_svfprintf_r+0xcaa>
 800af8e:	3408      	adds	r4, #8
 800af90:	e006      	b.n	800afa0 <_svfprintf_r+0xcb8>
 800af92:	aa1f      	add	r2, sp, #124	; 0x7c
 800af94:	4659      	mov	r1, fp
 800af96:	4650      	mov	r0, sl
 800af98:	f001 fb88 	bl	800c6ac <__ssprint_r>
 800af9c:	bb30      	cbnz	r0, 800afec <_svfprintf_r+0xd04>
 800af9e:	ac2c      	add	r4, sp, #176	; 0xb0
 800afa0:	3d10      	subs	r5, #16
 800afa2:	e7e7      	b.n	800af74 <_svfprintf_r+0xc8c>
 800afa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afa6:	6065      	str	r5, [r4, #4]
 800afa8:	441d      	add	r5, r3
 800afaa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800afac:	9521      	str	r5, [sp, #132]	; 0x84
 800afae:	3301      	adds	r3, #1
 800afb0:	2b07      	cmp	r3, #7
 800afb2:	9320      	str	r3, [sp, #128]	; 0x80
 800afb4:	ddcc      	ble.n	800af50 <_svfprintf_r+0xc68>
 800afb6:	aa1f      	add	r2, sp, #124	; 0x7c
 800afb8:	4659      	mov	r1, fp
 800afba:	4650      	mov	r0, sl
 800afbc:	f001 fb76 	bl	800c6ac <__ssprint_r>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d0c5      	beq.n	800af50 <_svfprintf_r+0xc68>
 800afc4:	e012      	b.n	800afec <_svfprintf_r+0xd04>
 800afc6:	aa1f      	add	r2, sp, #124	; 0x7c
 800afc8:	4659      	mov	r1, fp
 800afca:	4650      	mov	r0, sl
 800afcc:	f001 fb6e 	bl	800c6ac <__ssprint_r>
 800afd0:	b960      	cbnz	r0, 800afec <_svfprintf_r+0xd04>
 800afd2:	2300      	movs	r3, #0
 800afd4:	9320      	str	r3, [sp, #128]	; 0x80
 800afd6:	9f03      	ldr	r7, [sp, #12]
 800afd8:	ac2c      	add	r4, sp, #176	; 0xb0
 800afda:	f7ff b9bb 	b.w	800a354 <_svfprintf_r+0x6c>
 800afde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afe0:	b123      	cbz	r3, 800afec <_svfprintf_r+0xd04>
 800afe2:	aa1f      	add	r2, sp, #124	; 0x7c
 800afe4:	4659      	mov	r1, fp
 800afe6:	4650      	mov	r0, sl
 800afe8:	f001 fb60 	bl	800c6ac <__ssprint_r>
 800afec:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800aff0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aff6:	bf18      	it	ne
 800aff8:	f04f 33ff 	movne.w	r3, #4294967295
 800affc:	4618      	mov	r0, r3
 800affe:	e12e      	b.n	800b25e <_svfprintf_r+0xf76>
 800b000:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b004:	4610      	mov	r0, r2
 800b006:	4619      	mov	r1, r3
 800b008:	f7f5 fd8c 	bl	8000b24 <__aeabi_dcmpun>
 800b00c:	b160      	cbz	r0, 800b028 <_svfprintf_r+0xd40>
 800b00e:	4b5f      	ldr	r3, [pc, #380]	; (800b18c <_svfprintf_r+0xea4>)
 800b010:	4a5f      	ldr	r2, [pc, #380]	; (800b190 <_svfprintf_r+0xea8>)
 800b012:	9902      	ldr	r1, [sp, #8]
 800b014:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800b018:	2947      	cmp	r1, #71	; 0x47
 800b01a:	bfcc      	ite	gt
 800b01c:	4690      	movgt	r8, r2
 800b01e:	4698      	movle	r8, r3
 800b020:	f04f 0903 	mov.w	r9, #3
 800b024:	2600      	movs	r6, #0
 800b026:	e44e      	b.n	800a8c6 <_svfprintf_r+0x5de>
 800b028:	f1b9 3fff 	cmp.w	r9, #4294967295
 800b02c:	d00a      	beq.n	800b044 <_svfprintf_r+0xd5c>
 800b02e:	9b02      	ldr	r3, [sp, #8]
 800b030:	f023 0320 	bic.w	r3, r3, #32
 800b034:	2b47      	cmp	r3, #71	; 0x47
 800b036:	d107      	bne.n	800b048 <_svfprintf_r+0xd60>
 800b038:	f1b9 0f00 	cmp.w	r9, #0
 800b03c:	bf08      	it	eq
 800b03e:	f04f 0901 	moveq.w	r9, #1
 800b042:	e001      	b.n	800b048 <_svfprintf_r+0xd60>
 800b044:	f04f 0906 	mov.w	r9, #6
 800b048:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800b04c:	930c      	str	r3, [sp, #48]	; 0x30
 800b04e:	9b07      	ldr	r3, [sp, #28]
 800b050:	2b00      	cmp	r3, #0
 800b052:	da07      	bge.n	800b064 <_svfprintf_r+0xd7c>
 800b054:	9b06      	ldr	r3, [sp, #24]
 800b056:	930e      	str	r3, [sp, #56]	; 0x38
 800b058:	9b07      	ldr	r3, [sp, #28]
 800b05a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b05e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b060:	232d      	movs	r3, #45	; 0x2d
 800b062:	e004      	b.n	800b06e <_svfprintf_r+0xd86>
 800b064:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b068:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800b06c:	2300      	movs	r3, #0
 800b06e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b070:	9b02      	ldr	r3, [sp, #8]
 800b072:	f023 0720 	bic.w	r7, r3, #32
 800b076:	2f46      	cmp	r7, #70	; 0x46
 800b078:	d004      	beq.n	800b084 <_svfprintf_r+0xd9c>
 800b07a:	2f45      	cmp	r7, #69	; 0x45
 800b07c:	d105      	bne.n	800b08a <_svfprintf_r+0xda2>
 800b07e:	f109 0601 	add.w	r6, r9, #1
 800b082:	e003      	b.n	800b08c <_svfprintf_r+0xda4>
 800b084:	464e      	mov	r6, r9
 800b086:	2103      	movs	r1, #3
 800b088:	e001      	b.n	800b08e <_svfprintf_r+0xda6>
 800b08a:	464e      	mov	r6, r9
 800b08c:	2102      	movs	r1, #2
 800b08e:	ab1d      	add	r3, sp, #116	; 0x74
 800b090:	9301      	str	r3, [sp, #4]
 800b092:	ab1a      	add	r3, sp, #104	; 0x68
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	4632      	mov	r2, r6
 800b098:	ab19      	add	r3, sp, #100	; 0x64
 800b09a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800b09e:	4650      	mov	r0, sl
 800b0a0:	f000 f976 	bl	800b390 <_dtoa_r>
 800b0a4:	2f47      	cmp	r7, #71	; 0x47
 800b0a6:	4680      	mov	r8, r0
 800b0a8:	d102      	bne.n	800b0b0 <_svfprintf_r+0xdc8>
 800b0aa:	07eb      	lsls	r3, r5, #31
 800b0ac:	f140 80cd 	bpl.w	800b24a <_svfprintf_r+0xf62>
 800b0b0:	eb08 0306 	add.w	r3, r8, r6
 800b0b4:	2f46      	cmp	r7, #70	; 0x46
 800b0b6:	9304      	str	r3, [sp, #16]
 800b0b8:	d111      	bne.n	800b0de <_svfprintf_r+0xdf6>
 800b0ba:	f898 3000 	ldrb.w	r3, [r8]
 800b0be:	2b30      	cmp	r3, #48	; 0x30
 800b0c0:	d109      	bne.n	800b0d6 <_svfprintf_r+0xdee>
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b0ca:	f7f5 fcf9 	bl	8000ac0 <__aeabi_dcmpeq>
 800b0ce:	b910      	cbnz	r0, 800b0d6 <_svfprintf_r+0xdee>
 800b0d0:	f1c6 0601 	rsb	r6, r6, #1
 800b0d4:	9619      	str	r6, [sp, #100]	; 0x64
 800b0d6:	9a04      	ldr	r2, [sp, #16]
 800b0d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b0da:	441a      	add	r2, r3
 800b0dc:	9204      	str	r2, [sp, #16]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b0e6:	f7f5 fceb 	bl	8000ac0 <__aeabi_dcmpeq>
 800b0ea:	b908      	cbnz	r0, 800b0f0 <_svfprintf_r+0xe08>
 800b0ec:	2230      	movs	r2, #48	; 0x30
 800b0ee:	e002      	b.n	800b0f6 <_svfprintf_r+0xe0e>
 800b0f0:	9b04      	ldr	r3, [sp, #16]
 800b0f2:	931d      	str	r3, [sp, #116]	; 0x74
 800b0f4:	e007      	b.n	800b106 <_svfprintf_r+0xe1e>
 800b0f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b0f8:	9904      	ldr	r1, [sp, #16]
 800b0fa:	4299      	cmp	r1, r3
 800b0fc:	d903      	bls.n	800b106 <_svfprintf_r+0xe1e>
 800b0fe:	1c59      	adds	r1, r3, #1
 800b100:	911d      	str	r1, [sp, #116]	; 0x74
 800b102:	701a      	strb	r2, [r3, #0]
 800b104:	e7f7      	b.n	800b0f6 <_svfprintf_r+0xe0e>
 800b106:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b108:	2f47      	cmp	r7, #71	; 0x47
 800b10a:	ebc8 0303 	rsb	r3, r8, r3
 800b10e:	9304      	str	r3, [sp, #16]
 800b110:	d108      	bne.n	800b124 <_svfprintf_r+0xe3c>
 800b112:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b114:	1cdf      	adds	r7, r3, #3
 800b116:	db01      	blt.n	800b11c <_svfprintf_r+0xe34>
 800b118:	4599      	cmp	r9, r3
 800b11a:	da68      	bge.n	800b1ee <_svfprintf_r+0xf06>
 800b11c:	9b02      	ldr	r3, [sp, #8]
 800b11e:	3b02      	subs	r3, #2
 800b120:	9302      	str	r3, [sp, #8]
 800b122:	e002      	b.n	800b12a <_svfprintf_r+0xe42>
 800b124:	9b02      	ldr	r3, [sp, #8]
 800b126:	2b65      	cmp	r3, #101	; 0x65
 800b128:	dc4a      	bgt.n	800b1c0 <_svfprintf_r+0xed8>
 800b12a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b12c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800b130:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800b134:	3b01      	subs	r3, #1
 800b136:	2b00      	cmp	r3, #0
 800b138:	9319      	str	r3, [sp, #100]	; 0x64
 800b13a:	bfba      	itte	lt
 800b13c:	425b      	neglt	r3, r3
 800b13e:	222d      	movlt	r2, #45	; 0x2d
 800b140:	222b      	movge	r2, #43	; 0x2b
 800b142:	2b09      	cmp	r3, #9
 800b144:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800b148:	dd24      	ble.n	800b194 <_svfprintf_r+0xeac>
 800b14a:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800b14e:	200a      	movs	r0, #10
 800b150:	fb93 f1f0 	sdiv	r1, r3, r0
 800b154:	fb00 3311 	mls	r3, r0, r1, r3
 800b158:	3330      	adds	r3, #48	; 0x30
 800b15a:	2909      	cmp	r1, #9
 800b15c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800b160:	460b      	mov	r3, r1
 800b162:	dcf5      	bgt.n	800b150 <_svfprintf_r+0xe68>
 800b164:	3330      	adds	r3, #48	; 0x30
 800b166:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b16a:	1e51      	subs	r1, r2, #1
 800b16c:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800b170:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800b174:	4281      	cmp	r1, r0
 800b176:	461a      	mov	r2, r3
 800b178:	d213      	bcs.n	800b1a2 <_svfprintf_r+0xeba>
 800b17a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b17e:	f803 2b01 	strb.w	r2, [r3], #1
 800b182:	e7f7      	b.n	800b174 <_svfprintf_r+0xe8c>
 800b184:	0800cc78 	.word	0x0800cc78
 800b188:	0800ccbc 	.word	0x0800ccbc
 800b18c:	0800cc90 	.word	0x0800cc90
 800b190:	0800cc94 	.word	0x0800cc94
 800b194:	2230      	movs	r2, #48	; 0x30
 800b196:	4413      	add	r3, r2
 800b198:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800b19c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800b1a0:	aa1c      	add	r2, sp, #112	; 0x70
 800b1a2:	ab1b      	add	r3, sp, #108	; 0x6c
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	9a04      	ldr	r2, [sp, #16]
 800b1a8:	9310      	str	r3, [sp, #64]	; 0x40
 800b1aa:	2a01      	cmp	r2, #1
 800b1ac:	eb03 0902 	add.w	r9, r3, r2
 800b1b0:	dc02      	bgt.n	800b1b8 <_svfprintf_r+0xed0>
 800b1b2:	f015 0701 	ands.w	r7, r5, #1
 800b1b6:	d032      	beq.n	800b21e <_svfprintf_r+0xf36>
 800b1b8:	9b08      	ldr	r3, [sp, #32]
 800b1ba:	2700      	movs	r7, #0
 800b1bc:	4499      	add	r9, r3
 800b1be:	e02e      	b.n	800b21e <_svfprintf_r+0xf36>
 800b1c0:	9b02      	ldr	r3, [sp, #8]
 800b1c2:	2b66      	cmp	r3, #102	; 0x66
 800b1c4:	d113      	bne.n	800b1ee <_svfprintf_r+0xf06>
 800b1c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	dd07      	ble.n	800b1dc <_svfprintf_r+0xef4>
 800b1cc:	f1b9 0f00 	cmp.w	r9, #0
 800b1d0:	d101      	bne.n	800b1d6 <_svfprintf_r+0xeee>
 800b1d2:	07ee      	lsls	r6, r5, #31
 800b1d4:	d521      	bpl.n	800b21a <_svfprintf_r+0xf32>
 800b1d6:	9a08      	ldr	r2, [sp, #32]
 800b1d8:	4413      	add	r3, r2
 800b1da:	e006      	b.n	800b1ea <_svfprintf_r+0xf02>
 800b1dc:	f1b9 0f00 	cmp.w	r9, #0
 800b1e0:	d101      	bne.n	800b1e6 <_svfprintf_r+0xefe>
 800b1e2:	07ed      	lsls	r5, r5, #31
 800b1e4:	d514      	bpl.n	800b210 <_svfprintf_r+0xf28>
 800b1e6:	9b08      	ldr	r3, [sp, #32]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	444b      	add	r3, r9
 800b1ec:	e015      	b.n	800b21a <_svfprintf_r+0xf32>
 800b1ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1f0:	9a04      	ldr	r2, [sp, #16]
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	db03      	blt.n	800b1fe <_svfprintf_r+0xf16>
 800b1f6:	07e8      	lsls	r0, r5, #31
 800b1f8:	d50d      	bpl.n	800b216 <_svfprintf_r+0xf2e>
 800b1fa:	9a08      	ldr	r2, [sp, #32]
 800b1fc:	e006      	b.n	800b20c <_svfprintf_r+0xf24>
 800b1fe:	9a04      	ldr	r2, [sp, #16]
 800b200:	9908      	ldr	r1, [sp, #32]
 800b202:	2b00      	cmp	r3, #0
 800b204:	440a      	add	r2, r1
 800b206:	dc05      	bgt.n	800b214 <_svfprintf_r+0xf2c>
 800b208:	f1c3 0301 	rsb	r3, r3, #1
 800b20c:	4413      	add	r3, r2
 800b20e:	e002      	b.n	800b216 <_svfprintf_r+0xf2e>
 800b210:	2301      	movs	r3, #1
 800b212:	e002      	b.n	800b21a <_svfprintf_r+0xf32>
 800b214:	4613      	mov	r3, r2
 800b216:	2267      	movs	r2, #103	; 0x67
 800b218:	9202      	str	r2, [sp, #8]
 800b21a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800b21c:	4699      	mov	r9, r3
 800b21e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b220:	b113      	cbz	r3, 800b228 <_svfprintf_r+0xf40>
 800b222:	232d      	movs	r3, #45	; 0x2d
 800b224:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800b228:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b22a:	2600      	movs	r6, #0
 800b22c:	f7ff bb4c 	b.w	800a8c8 <_svfprintf_r+0x5e0>
 800b230:	2200      	movs	r2, #0
 800b232:	2300      	movs	r3, #0
 800b234:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b238:	f7f5 fc4c 	bl	8000ad4 <__aeabi_dcmplt>
 800b23c:	b110      	cbz	r0, 800b244 <_svfprintf_r+0xf5c>
 800b23e:	232d      	movs	r3, #45	; 0x2d
 800b240:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800b244:	4b07      	ldr	r3, [pc, #28]	; (800b264 <_svfprintf_r+0xf7c>)
 800b246:	4a08      	ldr	r2, [pc, #32]	; (800b268 <_svfprintf_r+0xf80>)
 800b248:	e6e3      	b.n	800b012 <_svfprintf_r+0xd2a>
 800b24a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b24c:	1a1b      	subs	r3, r3, r0
 800b24e:	9304      	str	r3, [sp, #16]
 800b250:	e75f      	b.n	800b112 <_svfprintf_r+0xe2a>
 800b252:	ea56 0207 	orrs.w	r2, r6, r7
 800b256:	f47f aaaa 	bne.w	800a7ae <_svfprintf_r+0x4c6>
 800b25a:	f7ff baaf 	b.w	800a7bc <_svfprintf_r+0x4d4>
 800b25e:	b03d      	add	sp, #244	; 0xf4
 800b260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b264:	0800cc88 	.word	0x0800cc88
 800b268:	0800cc8c 	.word	0x0800cc8c

0800b26c <quorem>:
 800b26c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b270:	6903      	ldr	r3, [r0, #16]
 800b272:	690c      	ldr	r4, [r1, #16]
 800b274:	429c      	cmp	r4, r3
 800b276:	4680      	mov	r8, r0
 800b278:	f300 8083 	bgt.w	800b382 <quorem+0x116>
 800b27c:	3c01      	subs	r4, #1
 800b27e:	f101 0714 	add.w	r7, r1, #20
 800b282:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800b286:	f100 0614 	add.w	r6, r0, #20
 800b28a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b28e:	eb06 030e 	add.w	r3, r6, lr
 800b292:	9301      	str	r3, [sp, #4]
 800b294:	3501      	adds	r5, #1
 800b296:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800b29a:	fbb3 f5f5 	udiv	r5, r3, r5
 800b29e:	eb07 090e 	add.w	r9, r7, lr
 800b2a2:	2d00      	cmp	r5, #0
 800b2a4:	d039      	beq.n	800b31a <quorem+0xae>
 800b2a6:	f04f 0a00 	mov.w	sl, #0
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	46b4      	mov	ip, r6
 800b2ae:	46d3      	mov	fp, sl
 800b2b0:	f850 2b04 	ldr.w	r2, [r0], #4
 800b2b4:	b293      	uxth	r3, r2
 800b2b6:	fb05 a303 	mla	r3, r5, r3, sl
 800b2ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	ebc3 030b 	rsb	r3, r3, fp
 800b2c4:	0c12      	lsrs	r2, r2, #16
 800b2c6:	f8bc b000 	ldrh.w	fp, [ip]
 800b2ca:	fb05 a202 	mla	r2, r5, r2, sl
 800b2ce:	fa13 f38b 	uxtah	r3, r3, fp
 800b2d2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b2d6:	fa1f fb82 	uxth.w	fp, r2
 800b2da:	f8dc 2000 	ldr.w	r2, [ip]
 800b2de:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b2e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2ec:	4581      	cmp	r9, r0
 800b2ee:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b2f2:	f84c 3b04 	str.w	r3, [ip], #4
 800b2f6:	d2db      	bcs.n	800b2b0 <quorem+0x44>
 800b2f8:	f856 300e 	ldr.w	r3, [r6, lr]
 800b2fc:	b96b      	cbnz	r3, 800b31a <quorem+0xae>
 800b2fe:	9b01      	ldr	r3, [sp, #4]
 800b300:	3b04      	subs	r3, #4
 800b302:	429e      	cmp	r6, r3
 800b304:	461a      	mov	r2, r3
 800b306:	d302      	bcc.n	800b30e <quorem+0xa2>
 800b308:	f8c8 4010 	str.w	r4, [r8, #16]
 800b30c:	e005      	b.n	800b31a <quorem+0xae>
 800b30e:	6812      	ldr	r2, [r2, #0]
 800b310:	3b04      	subs	r3, #4
 800b312:	2a00      	cmp	r2, #0
 800b314:	d1f8      	bne.n	800b308 <quorem+0x9c>
 800b316:	3c01      	subs	r4, #1
 800b318:	e7f3      	b.n	800b302 <quorem+0x96>
 800b31a:	4640      	mov	r0, r8
 800b31c:	f001 f8fd 	bl	800c51a <__mcmp>
 800b320:	2800      	cmp	r0, #0
 800b322:	db2c      	blt.n	800b37e <quorem+0x112>
 800b324:	3501      	adds	r5, #1
 800b326:	4630      	mov	r0, r6
 800b328:	f04f 0e00 	mov.w	lr, #0
 800b32c:	f857 1b04 	ldr.w	r1, [r7], #4
 800b330:	f8d0 c000 	ldr.w	ip, [r0]
 800b334:	b28a      	uxth	r2, r1
 800b336:	ebc2 030e 	rsb	r3, r2, lr
 800b33a:	0c09      	lsrs	r1, r1, #16
 800b33c:	fa13 f38c 	uxtah	r3, r3, ip
 800b340:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 800b344:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b348:	b29b      	uxth	r3, r3
 800b34a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b34e:	45b9      	cmp	r9, r7
 800b350:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b354:	f840 3b04 	str.w	r3, [r0], #4
 800b358:	d2e8      	bcs.n	800b32c <quorem+0xc0>
 800b35a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b35e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b362:	b962      	cbnz	r2, 800b37e <quorem+0x112>
 800b364:	3b04      	subs	r3, #4
 800b366:	429e      	cmp	r6, r3
 800b368:	461a      	mov	r2, r3
 800b36a:	d302      	bcc.n	800b372 <quorem+0x106>
 800b36c:	f8c8 4010 	str.w	r4, [r8, #16]
 800b370:	e005      	b.n	800b37e <quorem+0x112>
 800b372:	6812      	ldr	r2, [r2, #0]
 800b374:	3b04      	subs	r3, #4
 800b376:	2a00      	cmp	r2, #0
 800b378:	d1f8      	bne.n	800b36c <quorem+0x100>
 800b37a:	3c01      	subs	r4, #1
 800b37c:	e7f3      	b.n	800b366 <quorem+0xfa>
 800b37e:	4628      	mov	r0, r5
 800b380:	e000      	b.n	800b384 <quorem+0x118>
 800b382:	2000      	movs	r0, #0
 800b384:	b003      	add	sp, #12
 800b386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38a:	0000      	movs	r0, r0
 800b38c:	0000      	movs	r0, r0
	...

0800b390 <_dtoa_r>:
 800b390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b394:	ec59 8b10 	vmov	r8, r9, d0
 800b398:	b097      	sub	sp, #92	; 0x5c
 800b39a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b39c:	9106      	str	r1, [sp, #24]
 800b39e:	4682      	mov	sl, r0
 800b3a0:	9209      	str	r2, [sp, #36]	; 0x24
 800b3a2:	9310      	str	r3, [sp, #64]	; 0x40
 800b3a4:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800b3a6:	e9cd 8900 	strd	r8, r9, [sp]
 800b3aa:	b945      	cbnz	r5, 800b3be <_dtoa_r+0x2e>
 800b3ac:	2010      	movs	r0, #16
 800b3ae:	f7fe fc8f 	bl	8009cd0 <malloc>
 800b3b2:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 800b3b6:	6045      	str	r5, [r0, #4]
 800b3b8:	6085      	str	r5, [r0, #8]
 800b3ba:	6005      	str	r5, [r0, #0]
 800b3bc:	60c5      	str	r5, [r0, #12]
 800b3be:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800b3c2:	6819      	ldr	r1, [r3, #0]
 800b3c4:	b159      	cbz	r1, 800b3de <_dtoa_r+0x4e>
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	604a      	str	r2, [r1, #4]
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	4093      	lsls	r3, r2
 800b3ce:	608b      	str	r3, [r1, #8]
 800b3d0:	4650      	mov	r0, sl
 800b3d2:	f000 feca 	bl	800c16a <_Bfree>
 800b3d6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800b3da:	2200      	movs	r2, #0
 800b3dc:	601a      	str	r2, [r3, #0]
 800b3de:	9b01      	ldr	r3, [sp, #4]
 800b3e0:	4a9f      	ldr	r2, [pc, #636]	; (800b660 <_dtoa_r+0x2d0>)
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	bfbf      	itttt	lt
 800b3e6:	2301      	movlt	r3, #1
 800b3e8:	6023      	strlt	r3, [r4, #0]
 800b3ea:	9b01      	ldrlt	r3, [sp, #4]
 800b3ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b3f0:	bfb8      	it	lt
 800b3f2:	9301      	strlt	r3, [sp, #4]
 800b3f4:	9f01      	ldr	r7, [sp, #4]
 800b3f6:	bfa4      	itt	ge
 800b3f8:	2300      	movge	r3, #0
 800b3fa:	6023      	strge	r3, [r4, #0]
 800b3fc:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 800b400:	0d1b      	lsrs	r3, r3, #20
 800b402:	051b      	lsls	r3, r3, #20
 800b404:	4293      	cmp	r3, r2
 800b406:	d11d      	bne.n	800b444 <_dtoa_r+0xb4>
 800b408:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b40a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b40e:	6013      	str	r3, [r2, #0]
 800b410:	9b00      	ldr	r3, [sp, #0]
 800b412:	b943      	cbnz	r3, 800b426 <_dtoa_r+0x96>
 800b414:	4a93      	ldr	r2, [pc, #588]	; (800b664 <_dtoa_r+0x2d4>)
 800b416:	4b94      	ldr	r3, [pc, #592]	; (800b668 <_dtoa_r+0x2d8>)
 800b418:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800b41c:	2800      	cmp	r0, #0
 800b41e:	bf14      	ite	ne
 800b420:	4618      	movne	r0, r3
 800b422:	4610      	moveq	r0, r2
 800b424:	e000      	b.n	800b428 <_dtoa_r+0x98>
 800b426:	4890      	ldr	r0, [pc, #576]	; (800b668 <_dtoa_r+0x2d8>)
 800b428:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f000 854a 	beq.w	800bec4 <_dtoa_r+0xb34>
 800b430:	78c3      	ldrb	r3, [r0, #3]
 800b432:	b113      	cbz	r3, 800b43a <_dtoa_r+0xaa>
 800b434:	f100 0308 	add.w	r3, r0, #8
 800b438:	e000      	b.n	800b43c <_dtoa_r+0xac>
 800b43a:	1cc3      	adds	r3, r0, #3
 800b43c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b43e:	6013      	str	r3, [r2, #0]
 800b440:	f000 bd40 	b.w	800bec4 <_dtoa_r+0xb34>
 800b444:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b448:	2200      	movs	r2, #0
 800b44a:	2300      	movs	r3, #0
 800b44c:	4620      	mov	r0, r4
 800b44e:	4629      	mov	r1, r5
 800b450:	f7f5 fb36 	bl	8000ac0 <__aeabi_dcmpeq>
 800b454:	4680      	mov	r8, r0
 800b456:	b158      	cbz	r0, 800b470 <_dtoa_r+0xe0>
 800b458:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b45a:	2301      	movs	r3, #1
 800b45c:	6013      	str	r3, [r2, #0]
 800b45e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b460:	2b00      	cmp	r3, #0
 800b462:	f000 8522 	beq.w	800beaa <_dtoa_r+0xb1a>
 800b466:	4881      	ldr	r0, [pc, #516]	; (800b66c <_dtoa_r+0x2dc>)
 800b468:	6018      	str	r0, [r3, #0]
 800b46a:	3801      	subs	r0, #1
 800b46c:	f000 bd2a 	b.w	800bec4 <_dtoa_r+0xb34>
 800b470:	aa14      	add	r2, sp, #80	; 0x50
 800b472:	a915      	add	r1, sp, #84	; 0x54
 800b474:	ec45 4b10 	vmov	d0, r4, r5
 800b478:	4650      	mov	r0, sl
 800b47a:	f001 f8c9 	bl	800c610 <__d2b>
 800b47e:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b482:	9002      	str	r0, [sp, #8]
 800b484:	b15e      	cbz	r6, 800b49e <_dtoa_r+0x10e>
 800b486:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b48a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b48e:	4620      	mov	r0, r4
 800b490:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b494:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800b498:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 800b49c:	e01d      	b.n	800b4da <_dtoa_r+0x14a>
 800b49e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4a0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b4a2:	441e      	add	r6, r3
 800b4a4:	f206 4332 	addw	r3, r6, #1074	; 0x432
 800b4a8:	2b20      	cmp	r3, #32
 800b4aa:	dd0a      	ble.n	800b4c2 <_dtoa_r+0x132>
 800b4ac:	9a00      	ldr	r2, [sp, #0]
 800b4ae:	f206 4012 	addw	r0, r6, #1042	; 0x412
 800b4b2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800b4b6:	fa22 f000 	lsr.w	r0, r2, r0
 800b4ba:	fa07 f303 	lsl.w	r3, r7, r3
 800b4be:	4318      	orrs	r0, r3
 800b4c0:	e004      	b.n	800b4cc <_dtoa_r+0x13c>
 800b4c2:	f1c3 0020 	rsb	r0, r3, #32
 800b4c6:	9b00      	ldr	r3, [sp, #0]
 800b4c8:	fa03 f000 	lsl.w	r0, r3, r0
 800b4cc:	f7f5 f81a 	bl	8000504 <__aeabi_ui2d>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b4d6:	3e01      	subs	r6, #1
 800b4d8:	9311      	str	r3, [sp, #68]	; 0x44
 800b4da:	2200      	movs	r2, #0
 800b4dc:	4b64      	ldr	r3, [pc, #400]	; (800b670 <_dtoa_r+0x2e0>)
 800b4de:	f7f4 fed3 	bl	8000288 <__aeabi_dsub>
 800b4e2:	a359      	add	r3, pc, #356	; (adr r3, 800b648 <_dtoa_r+0x2b8>)
 800b4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e8:	f7f5 f882 	bl	80005f0 <__aeabi_dmul>
 800b4ec:	a358      	add	r3, pc, #352	; (adr r3, 800b650 <_dtoa_r+0x2c0>)
 800b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f2:	f7f4 fecb 	bl	800028c <__adddf3>
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	460d      	mov	r5, r1
 800b4fc:	f7f5 f812 	bl	8000524 <__aeabi_i2d>
 800b500:	a355      	add	r3, pc, #340	; (adr r3, 800b658 <_dtoa_r+0x2c8>)
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	f7f5 f873 	bl	80005f0 <__aeabi_dmul>
 800b50a:	4602      	mov	r2, r0
 800b50c:	460b      	mov	r3, r1
 800b50e:	4620      	mov	r0, r4
 800b510:	4629      	mov	r1, r5
 800b512:	f7f4 febb 	bl	800028c <__adddf3>
 800b516:	4604      	mov	r4, r0
 800b518:	460d      	mov	r5, r1
 800b51a:	f7f5 fb19 	bl	8000b50 <__aeabi_d2iz>
 800b51e:	2200      	movs	r2, #0
 800b520:	4683      	mov	fp, r0
 800b522:	2300      	movs	r3, #0
 800b524:	4620      	mov	r0, r4
 800b526:	4629      	mov	r1, r5
 800b528:	f7f5 fad4 	bl	8000ad4 <__aeabi_dcmplt>
 800b52c:	b158      	cbz	r0, 800b546 <_dtoa_r+0x1b6>
 800b52e:	4658      	mov	r0, fp
 800b530:	f7f4 fff8 	bl	8000524 <__aeabi_i2d>
 800b534:	4602      	mov	r2, r0
 800b536:	460b      	mov	r3, r1
 800b538:	4620      	mov	r0, r4
 800b53a:	4629      	mov	r1, r5
 800b53c:	f7f5 fac0 	bl	8000ac0 <__aeabi_dcmpeq>
 800b540:	b908      	cbnz	r0, 800b546 <_dtoa_r+0x1b6>
 800b542:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b546:	f1bb 0f16 	cmp.w	fp, #22
 800b54a:	d80d      	bhi.n	800b568 <_dtoa_r+0x1d8>
 800b54c:	4949      	ldr	r1, [pc, #292]	; (800b674 <_dtoa_r+0x2e4>)
 800b54e:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800b552:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b55a:	f7f5 fad9 	bl	8000b10 <__aeabi_dcmpgt>
 800b55e:	b130      	cbz	r0, 800b56e <_dtoa_r+0x1de>
 800b560:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b564:	2300      	movs	r3, #0
 800b566:	e000      	b.n	800b56a <_dtoa_r+0x1da>
 800b568:	2301      	movs	r3, #1
 800b56a:	930d      	str	r3, [sp, #52]	; 0x34
 800b56c:	e000      	b.n	800b570 <_dtoa_r+0x1e0>
 800b56e:	900d      	str	r0, [sp, #52]	; 0x34
 800b570:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b572:	1b9e      	subs	r6, r3, r6
 800b574:	1e73      	subs	r3, r6, #1
 800b576:	9305      	str	r3, [sp, #20]
 800b578:	bf43      	ittte	mi
 800b57a:	f1c3 0900 	rsbmi	r9, r3, #0
 800b57e:	2300      	movmi	r3, #0
 800b580:	9305      	strmi	r3, [sp, #20]
 800b582:	f04f 0900 	movpl.w	r9, #0
 800b586:	f1bb 0f00 	cmp.w	fp, #0
 800b58a:	db07      	blt.n	800b59c <_dtoa_r+0x20c>
 800b58c:	9b05      	ldr	r3, [sp, #20]
 800b58e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800b592:	445b      	add	r3, fp
 800b594:	9305      	str	r3, [sp, #20]
 800b596:	2300      	movs	r3, #0
 800b598:	9307      	str	r3, [sp, #28]
 800b59a:	e006      	b.n	800b5aa <_dtoa_r+0x21a>
 800b59c:	f1cb 0300 	rsb	r3, fp, #0
 800b5a0:	9307      	str	r3, [sp, #28]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	ebcb 0909 	rsb	r9, fp, r9
 800b5a8:	930c      	str	r3, [sp, #48]	; 0x30
 800b5aa:	9b06      	ldr	r3, [sp, #24]
 800b5ac:	2b09      	cmp	r3, #9
 800b5ae:	d827      	bhi.n	800b600 <_dtoa_r+0x270>
 800b5b0:	2b05      	cmp	r3, #5
 800b5b2:	bfc4      	itt	gt
 800b5b4:	3b04      	subgt	r3, #4
 800b5b6:	9306      	strgt	r3, [sp, #24]
 800b5b8:	9b06      	ldr	r3, [sp, #24]
 800b5ba:	f1a3 0302 	sub.w	r3, r3, #2
 800b5be:	bfcc      	ite	gt
 800b5c0:	2500      	movgt	r5, #0
 800b5c2:	2501      	movle	r5, #1
 800b5c4:	2b03      	cmp	r3, #3
 800b5c6:	d820      	bhi.n	800b60a <_dtoa_r+0x27a>
 800b5c8:	e8df f003 	tbb	[pc, r3]
 800b5cc:	04020e06 	.word	0x04020e06
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e002      	b.n	800b5da <_dtoa_r+0x24a>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e008      	b.n	800b5ea <_dtoa_r+0x25a>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	9308      	str	r3, [sp, #32]
 800b5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	dd1c      	ble.n	800b61c <_dtoa_r+0x28c>
 800b5e2:	9303      	str	r3, [sp, #12]
 800b5e4:	4698      	mov	r8, r3
 800b5e6:	e01e      	b.n	800b626 <_dtoa_r+0x296>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	9308      	str	r3, [sp, #32]
 800b5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ee:	445b      	add	r3, fp
 800b5f0:	f103 0801 	add.w	r8, r3, #1
 800b5f4:	9303      	str	r3, [sp, #12]
 800b5f6:	4643      	mov	r3, r8
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	bfb8      	it	lt
 800b5fc:	2301      	movlt	r3, #1
 800b5fe:	e012      	b.n	800b626 <_dtoa_r+0x296>
 800b600:	2501      	movs	r5, #1
 800b602:	2300      	movs	r3, #0
 800b604:	9306      	str	r3, [sp, #24]
 800b606:	9508      	str	r5, [sp, #32]
 800b608:	e001      	b.n	800b60e <_dtoa_r+0x27e>
 800b60a:	2301      	movs	r3, #1
 800b60c:	9308      	str	r3, [sp, #32]
 800b60e:	f04f 33ff 	mov.w	r3, #4294967295
 800b612:	9303      	str	r3, [sp, #12]
 800b614:	4698      	mov	r8, r3
 800b616:	2200      	movs	r2, #0
 800b618:	2312      	movs	r3, #18
 800b61a:	e003      	b.n	800b624 <_dtoa_r+0x294>
 800b61c:	2301      	movs	r3, #1
 800b61e:	9303      	str	r3, [sp, #12]
 800b620:	4698      	mov	r8, r3
 800b622:	461a      	mov	r2, r3
 800b624:	9209      	str	r2, [sp, #36]	; 0x24
 800b626:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 800b62a:	2200      	movs	r2, #0
 800b62c:	6062      	str	r2, [r4, #4]
 800b62e:	2104      	movs	r1, #4
 800b630:	f101 0214 	add.w	r2, r1, #20
 800b634:	429a      	cmp	r2, r3
 800b636:	d81f      	bhi.n	800b678 <_dtoa_r+0x2e8>
 800b638:	6862      	ldr	r2, [r4, #4]
 800b63a:	3201      	adds	r2, #1
 800b63c:	6062      	str	r2, [r4, #4]
 800b63e:	0049      	lsls	r1, r1, #1
 800b640:	e7f6      	b.n	800b630 <_dtoa_r+0x2a0>
 800b642:	bf00      	nop
 800b644:	f3af 8000 	nop.w
 800b648:	636f4361 	.word	0x636f4361
 800b64c:	3fd287a7 	.word	0x3fd287a7
 800b650:	8b60c8b3 	.word	0x8b60c8b3
 800b654:	3fc68a28 	.word	0x3fc68a28
 800b658:	509f79fb 	.word	0x509f79fb
 800b65c:	3fd34413 	.word	0x3fd34413
 800b660:	7ff00000 	.word	0x7ff00000
 800b664:	0800cdcd 	.word	0x0800cdcd
 800b668:	0800cdd6 	.word	0x0800cdd6
 800b66c:	0800ccbb 	.word	0x0800ccbb
 800b670:	3ff80000 	.word	0x3ff80000
 800b674:	0800cde8 	.word	0x0800cde8
 800b678:	6861      	ldr	r1, [r4, #4]
 800b67a:	4650      	mov	r0, sl
 800b67c:	f000 fd40 	bl	800c100 <_Balloc>
 800b680:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800b684:	6020      	str	r0, [r4, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	9304      	str	r3, [sp, #16]
 800b68a:	f1b8 0f0e 	cmp.w	r8, #14
 800b68e:	f200 815d 	bhi.w	800b94c <_dtoa_r+0x5bc>
 800b692:	2d00      	cmp	r5, #0
 800b694:	f000 815a 	beq.w	800b94c <_dtoa_r+0x5bc>
 800b698:	ed9d 7b00 	vldr	d7, [sp]
 800b69c:	f1bb 0f00 	cmp.w	fp, #0
 800b6a0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800b6a4:	dd31      	ble.n	800b70a <_dtoa_r+0x37a>
 800b6a6:	4aa0      	ldr	r2, [pc, #640]	; (800b928 <_dtoa_r+0x598>)
 800b6a8:	f00b 030f 	and.w	r3, fp, #15
 800b6ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b6b0:	ed93 7b00 	vldr	d7, [r3]
 800b6b4:	ea4f 142b 	mov.w	r4, fp, asr #4
 800b6b8:	06e2      	lsls	r2, r4, #27
 800b6ba:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b6be:	d50c      	bpl.n	800b6da <_dtoa_r+0x34a>
 800b6c0:	4b9a      	ldr	r3, [pc, #616]	; (800b92c <_dtoa_r+0x59c>)
 800b6c2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b6c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b6ca:	f7f5 f8bb 	bl	8000844 <__aeabi_ddiv>
 800b6ce:	f004 040f 	and.w	r4, r4, #15
 800b6d2:	e9cd 0100 	strd	r0, r1, [sp]
 800b6d6:	2603      	movs	r6, #3
 800b6d8:	e000      	b.n	800b6dc <_dtoa_r+0x34c>
 800b6da:	2602      	movs	r6, #2
 800b6dc:	4d93      	ldr	r5, [pc, #588]	; (800b92c <_dtoa_r+0x59c>)
 800b6de:	b16c      	cbz	r4, 800b6fc <_dtoa_r+0x36c>
 800b6e0:	07e3      	lsls	r3, r4, #31
 800b6e2:	d508      	bpl.n	800b6f6 <_dtoa_r+0x366>
 800b6e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b6e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6ec:	f7f4 ff80 	bl	80005f0 <__aeabi_dmul>
 800b6f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b6f4:	3601      	adds	r6, #1
 800b6f6:	1064      	asrs	r4, r4, #1
 800b6f8:	3508      	adds	r5, #8
 800b6fa:	e7f0      	b.n	800b6de <_dtoa_r+0x34e>
 800b6fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b700:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b704:	f7f5 f89e 	bl	8000844 <__aeabi_ddiv>
 800b708:	e020      	b.n	800b74c <_dtoa_r+0x3bc>
 800b70a:	f1cb 0400 	rsb	r4, fp, #0
 800b70e:	b304      	cbz	r4, 800b752 <_dtoa_r+0x3c2>
 800b710:	4b85      	ldr	r3, [pc, #532]	; (800b928 <_dtoa_r+0x598>)
 800b712:	4d86      	ldr	r5, [pc, #536]	; (800b92c <_dtoa_r+0x59c>)
 800b714:	f004 020f 	and.w	r2, r4, #15
 800b718:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b720:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b724:	f7f4 ff64 	bl	80005f0 <__aeabi_dmul>
 800b728:	e9cd 0100 	strd	r0, r1, [sp]
 800b72c:	1124      	asrs	r4, r4, #4
 800b72e:	2300      	movs	r3, #0
 800b730:	2602      	movs	r6, #2
 800b732:	b154      	cbz	r4, 800b74a <_dtoa_r+0x3ba>
 800b734:	07e7      	lsls	r7, r4, #31
 800b736:	d505      	bpl.n	800b744 <_dtoa_r+0x3b4>
 800b738:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b73c:	f7f4 ff58 	bl	80005f0 <__aeabi_dmul>
 800b740:	3601      	adds	r6, #1
 800b742:	2301      	movs	r3, #1
 800b744:	1064      	asrs	r4, r4, #1
 800b746:	3508      	adds	r5, #8
 800b748:	e7f3      	b.n	800b732 <_dtoa_r+0x3a2>
 800b74a:	b11b      	cbz	r3, 800b754 <_dtoa_r+0x3c4>
 800b74c:	e9cd 0100 	strd	r0, r1, [sp]
 800b750:	e000      	b.n	800b754 <_dtoa_r+0x3c4>
 800b752:	2602      	movs	r6, #2
 800b754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b756:	b1eb      	cbz	r3, 800b794 <_dtoa_r+0x404>
 800b758:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b75c:	2200      	movs	r2, #0
 800b75e:	4b74      	ldr	r3, [pc, #464]	; (800b930 <_dtoa_r+0x5a0>)
 800b760:	4620      	mov	r0, r4
 800b762:	4629      	mov	r1, r5
 800b764:	f7f5 f9b6 	bl	8000ad4 <__aeabi_dcmplt>
 800b768:	b1a0      	cbz	r0, 800b794 <_dtoa_r+0x404>
 800b76a:	f1b8 0f00 	cmp.w	r8, #0
 800b76e:	d011      	beq.n	800b794 <_dtoa_r+0x404>
 800b770:	9b03      	ldr	r3, [sp, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	f340 80e6 	ble.w	800b944 <_dtoa_r+0x5b4>
 800b778:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b77c:	930a      	str	r3, [sp, #40]	; 0x28
 800b77e:	2200      	movs	r2, #0
 800b780:	4b6c      	ldr	r3, [pc, #432]	; (800b934 <_dtoa_r+0x5a4>)
 800b782:	4620      	mov	r0, r4
 800b784:	4629      	mov	r1, r5
 800b786:	f7f4 ff33 	bl	80005f0 <__aeabi_dmul>
 800b78a:	3601      	adds	r6, #1
 800b78c:	e9cd 0100 	strd	r0, r1, [sp]
 800b790:	9f03      	ldr	r7, [sp, #12]
 800b792:	e002      	b.n	800b79a <_dtoa_r+0x40a>
 800b794:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b798:	4647      	mov	r7, r8
 800b79a:	4630      	mov	r0, r6
 800b79c:	f7f4 fec2 	bl	8000524 <__aeabi_i2d>
 800b7a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7a4:	f7f4 ff24 	bl	80005f0 <__aeabi_dmul>
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	4b63      	ldr	r3, [pc, #396]	; (800b938 <_dtoa_r+0x5a8>)
 800b7ac:	f7f4 fd6e 	bl	800028c <__adddf3>
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800b7b6:	b9cf      	cbnz	r7, 800b7ec <_dtoa_r+0x45c>
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	4b60      	ldr	r3, [pc, #384]	; (800b93c <_dtoa_r+0x5ac>)
 800b7bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7c0:	f7f4 fd62 	bl	8000288 <__aeabi_dsub>
 800b7c4:	4622      	mov	r2, r4
 800b7c6:	462b      	mov	r3, r5
 800b7c8:	e9cd 0100 	strd	r0, r1, [sp]
 800b7cc:	f7f5 f9a0 	bl	8000b10 <__aeabi_dcmpgt>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	f040 8241 	bne.w	800bc58 <_dtoa_r+0x8c8>
 800b7d6:	4622      	mov	r2, r4
 800b7d8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b7dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7e0:	f7f5 f978 	bl	8000ad4 <__aeabi_dcmplt>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	f040 822e 	bne.w	800bc46 <_dtoa_r+0x8b6>
 800b7ea:	e0ab      	b.n	800b944 <_dtoa_r+0x5b4>
 800b7ec:	9a08      	ldr	r2, [sp, #32]
 800b7ee:	4b4e      	ldr	r3, [pc, #312]	; (800b928 <_dtoa_r+0x598>)
 800b7f0:	1e79      	subs	r1, r7, #1
 800b7f2:	2a00      	cmp	r2, #0
 800b7f4:	d04a      	beq.n	800b88c <_dtoa_r+0x4fc>
 800b7f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fe:	2000      	movs	r0, #0
 800b800:	494f      	ldr	r1, [pc, #316]	; (800b940 <_dtoa_r+0x5b0>)
 800b802:	f7f5 f81f 	bl	8000844 <__aeabi_ddiv>
 800b806:	4622      	mov	r2, r4
 800b808:	462b      	mov	r3, r5
 800b80a:	f7f4 fd3d 	bl	8000288 <__aeabi_dsub>
 800b80e:	9c04      	ldr	r4, [sp, #16]
 800b810:	4605      	mov	r5, r0
 800b812:	460e      	mov	r6, r1
 800b814:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b818:	f7f5 f99a 	bl	8000b50 <__aeabi_d2iz>
 800b81c:	9012      	str	r0, [sp, #72]	; 0x48
 800b81e:	f7f4 fe81 	bl	8000524 <__aeabi_i2d>
 800b822:	4602      	mov	r2, r0
 800b824:	460b      	mov	r3, r1
 800b826:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b82a:	f7f4 fd2d 	bl	8000288 <__aeabi_dsub>
 800b82e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b830:	3330      	adds	r3, #48	; 0x30
 800b832:	f804 3b01 	strb.w	r3, [r4], #1
 800b836:	462a      	mov	r2, r5
 800b838:	4633      	mov	r3, r6
 800b83a:	e9cd 0100 	strd	r0, r1, [sp]
 800b83e:	f7f5 f949 	bl	8000ad4 <__aeabi_dcmplt>
 800b842:	2800      	cmp	r0, #0
 800b844:	f040 8321 	bne.w	800be8a <_dtoa_r+0xafa>
 800b848:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b84c:	2000      	movs	r0, #0
 800b84e:	4938      	ldr	r1, [pc, #224]	; (800b930 <_dtoa_r+0x5a0>)
 800b850:	f7f4 fd1a 	bl	8000288 <__aeabi_dsub>
 800b854:	462a      	mov	r2, r5
 800b856:	4633      	mov	r3, r6
 800b858:	f7f5 f93c 	bl	8000ad4 <__aeabi_dcmplt>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	f040 80d2 	bne.w	800ba06 <_dtoa_r+0x676>
 800b862:	9b04      	ldr	r3, [sp, #16]
 800b864:	1ae3      	subs	r3, r4, r3
 800b866:	42bb      	cmp	r3, r7
 800b868:	da6c      	bge.n	800b944 <_dtoa_r+0x5b4>
 800b86a:	2200      	movs	r2, #0
 800b86c:	4b31      	ldr	r3, [pc, #196]	; (800b934 <_dtoa_r+0x5a4>)
 800b86e:	4628      	mov	r0, r5
 800b870:	4631      	mov	r1, r6
 800b872:	f7f4 febd 	bl	80005f0 <__aeabi_dmul>
 800b876:	2200      	movs	r2, #0
 800b878:	4605      	mov	r5, r0
 800b87a:	460e      	mov	r6, r1
 800b87c:	4b2d      	ldr	r3, [pc, #180]	; (800b934 <_dtoa_r+0x5a4>)
 800b87e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b882:	f7f4 feb5 	bl	80005f0 <__aeabi_dmul>
 800b886:	e9cd 0100 	strd	r0, r1, [sp]
 800b88a:	e7c3      	b.n	800b814 <_dtoa_r+0x484>
 800b88c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b890:	4622      	mov	r2, r4
 800b892:	462b      	mov	r3, r5
 800b894:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b898:	f7f4 feaa 	bl	80005f0 <__aeabi_dmul>
 800b89c:	9b04      	ldr	r3, [sp, #16]
 800b89e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800b8a2:	19dc      	adds	r4, r3, r7
 800b8a4:	461d      	mov	r5, r3
 800b8a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8aa:	f7f5 f951 	bl	8000b50 <__aeabi_d2iz>
 800b8ae:	4606      	mov	r6, r0
 800b8b0:	f7f4 fe38 	bl	8000524 <__aeabi_i2d>
 800b8b4:	3630      	adds	r6, #48	; 0x30
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8be:	f7f4 fce3 	bl	8000288 <__aeabi_dsub>
 800b8c2:	f805 6b01 	strb.w	r6, [r5], #1
 800b8c6:	42ac      	cmp	r4, r5
 800b8c8:	e9cd 0100 	strd	r0, r1, [sp]
 800b8cc:	f04f 0200 	mov.w	r2, #0
 800b8d0:	d123      	bne.n	800b91a <_dtoa_r+0x58a>
 800b8d2:	4b1b      	ldr	r3, [pc, #108]	; (800b940 <_dtoa_r+0x5b0>)
 800b8d4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800b8d8:	f7f4 fcd8 	bl	800028c <__adddf3>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	460b      	mov	r3, r1
 800b8e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8e4:	f7f5 f914 	bl	8000b10 <__aeabi_dcmpgt>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	f040 808c 	bne.w	800ba06 <_dtoa_r+0x676>
 800b8ee:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	4912      	ldr	r1, [pc, #72]	; (800b940 <_dtoa_r+0x5b0>)
 800b8f6:	f7f4 fcc7 	bl	8000288 <__aeabi_dsub>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b902:	f7f5 f8e7 	bl	8000ad4 <__aeabi_dcmplt>
 800b906:	b1e8      	cbz	r0, 800b944 <_dtoa_r+0x5b4>
 800b908:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800b90c:	2b30      	cmp	r3, #48	; 0x30
 800b90e:	f104 32ff 	add.w	r2, r4, #4294967295
 800b912:	f040 82ba 	bne.w	800be8a <_dtoa_r+0xafa>
 800b916:	4614      	mov	r4, r2
 800b918:	e7f6      	b.n	800b908 <_dtoa_r+0x578>
 800b91a:	4b06      	ldr	r3, [pc, #24]	; (800b934 <_dtoa_r+0x5a4>)
 800b91c:	f7f4 fe68 	bl	80005f0 <__aeabi_dmul>
 800b920:	e9cd 0100 	strd	r0, r1, [sp]
 800b924:	e7bf      	b.n	800b8a6 <_dtoa_r+0x516>
 800b926:	bf00      	nop
 800b928:	0800cde8 	.word	0x0800cde8
 800b92c:	0800ceb0 	.word	0x0800ceb0
 800b930:	3ff00000 	.word	0x3ff00000
 800b934:	40240000 	.word	0x40240000
 800b938:	401c0000 	.word	0x401c0000
 800b93c:	40140000 	.word	0x40140000
 800b940:	3fe00000 	.word	0x3fe00000
 800b944:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 800b948:	e88d 0018 	stmia.w	sp, {r3, r4}
 800b94c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b94e:	2b00      	cmp	r3, #0
 800b950:	db7c      	blt.n	800ba4c <_dtoa_r+0x6bc>
 800b952:	f1bb 0f0e 	cmp.w	fp, #14
 800b956:	dc79      	bgt.n	800ba4c <_dtoa_r+0x6bc>
 800b958:	4b8f      	ldr	r3, [pc, #572]	; (800bb98 <_dtoa_r+0x808>)
 800b95a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b95e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b964:	2b00      	cmp	r3, #0
 800b966:	da14      	bge.n	800b992 <_dtoa_r+0x602>
 800b968:	f1b8 0f00 	cmp.w	r8, #0
 800b96c:	dc11      	bgt.n	800b992 <_dtoa_r+0x602>
 800b96e:	f040 816c 	bne.w	800bc4a <_dtoa_r+0x8ba>
 800b972:	2200      	movs	r2, #0
 800b974:	4b89      	ldr	r3, [pc, #548]	; (800bb9c <_dtoa_r+0x80c>)
 800b976:	4630      	mov	r0, r6
 800b978:	4639      	mov	r1, r7
 800b97a:	f7f4 fe39 	bl	80005f0 <__aeabi_dmul>
 800b97e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b982:	f7f5 f8bb 	bl	8000afc <__aeabi_dcmpge>
 800b986:	4645      	mov	r5, r8
 800b988:	4646      	mov	r6, r8
 800b98a:	2800      	cmp	r0, #0
 800b98c:	f040 815f 	bne.w	800bc4e <_dtoa_r+0x8be>
 800b990:	e166      	b.n	800bc60 <_dtoa_r+0x8d0>
 800b992:	9c04      	ldr	r4, [sp, #16]
 800b994:	4632      	mov	r2, r6
 800b996:	463b      	mov	r3, r7
 800b998:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b99c:	f7f4 ff52 	bl	8000844 <__aeabi_ddiv>
 800b9a0:	f7f5 f8d6 	bl	8000b50 <__aeabi_d2iz>
 800b9a4:	4605      	mov	r5, r0
 800b9a6:	f7f4 fdbd 	bl	8000524 <__aeabi_i2d>
 800b9aa:	4632      	mov	r2, r6
 800b9ac:	463b      	mov	r3, r7
 800b9ae:	f7f4 fe1f 	bl	80005f0 <__aeabi_dmul>
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9ba:	f7f4 fc65 	bl	8000288 <__aeabi_dsub>
 800b9be:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800b9c2:	f804 eb01 	strb.w	lr, [r4], #1
 800b9c6:	9b04      	ldr	r3, [sp, #16]
 800b9c8:	ebc3 0e04 	rsb	lr, r3, r4
 800b9cc:	45f0      	cmp	r8, lr
 800b9ce:	e9cd 0100 	strd	r0, r1, [sp]
 800b9d2:	d12e      	bne.n	800ba32 <_dtoa_r+0x6a2>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	f7f4 fc58 	bl	800028c <__adddf3>
 800b9dc:	4680      	mov	r8, r0
 800b9de:	4689      	mov	r9, r1
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	4639      	mov	r1, r7
 800b9e8:	f7f5 f874 	bl	8000ad4 <__aeabi_dcmplt>
 800b9ec:	b978      	cbnz	r0, 800ba0e <_dtoa_r+0x67e>
 800b9ee:	4642      	mov	r2, r8
 800b9f0:	464b      	mov	r3, r9
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	4639      	mov	r1, r7
 800b9f6:	f7f5 f863 	bl	8000ac0 <__aeabi_dcmpeq>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	f000 8247 	beq.w	800be8e <_dtoa_r+0xafe>
 800ba00:	07e9      	lsls	r1, r5, #31
 800ba02:	d404      	bmi.n	800ba0e <_dtoa_r+0x67e>
 800ba04:	e243      	b.n	800be8e <_dtoa_r+0xafe>
 800ba06:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800ba0a:	e000      	b.n	800ba0e <_dtoa_r+0x67e>
 800ba0c:	461c      	mov	r4, r3
 800ba0e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800ba12:	2a39      	cmp	r2, #57	; 0x39
 800ba14:	f104 33ff 	add.w	r3, r4, #4294967295
 800ba18:	d107      	bne.n	800ba2a <_dtoa_r+0x69a>
 800ba1a:	9a04      	ldr	r2, [sp, #16]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d1f5      	bne.n	800ba0c <_dtoa_r+0x67c>
 800ba20:	9904      	ldr	r1, [sp, #16]
 800ba22:	2230      	movs	r2, #48	; 0x30
 800ba24:	f10b 0b01 	add.w	fp, fp, #1
 800ba28:	700a      	strb	r2, [r1, #0]
 800ba2a:	781a      	ldrb	r2, [r3, #0]
 800ba2c:	3201      	adds	r2, #1
 800ba2e:	701a      	strb	r2, [r3, #0]
 800ba30:	e22d      	b.n	800be8e <_dtoa_r+0xafe>
 800ba32:	2200      	movs	r2, #0
 800ba34:	4b5a      	ldr	r3, [pc, #360]	; (800bba0 <_dtoa_r+0x810>)
 800ba36:	f7f4 fddb 	bl	80005f0 <__aeabi_dmul>
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	e9cd 0100 	strd	r0, r1, [sp]
 800ba42:	f7f5 f83d 	bl	8000ac0 <__aeabi_dcmpeq>
 800ba46:	2800      	cmp	r0, #0
 800ba48:	d0a4      	beq.n	800b994 <_dtoa_r+0x604>
 800ba4a:	e220      	b.n	800be8e <_dtoa_r+0xafe>
 800ba4c:	9a08      	ldr	r2, [sp, #32]
 800ba4e:	2a00      	cmp	r2, #0
 800ba50:	d02d      	beq.n	800baae <_dtoa_r+0x71e>
 800ba52:	9a06      	ldr	r2, [sp, #24]
 800ba54:	2a01      	cmp	r2, #1
 800ba56:	dc0a      	bgt.n	800ba6e <_dtoa_r+0x6de>
 800ba58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba5a:	b112      	cbz	r2, 800ba62 <_dtoa_r+0x6d2>
 800ba5c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba60:	e002      	b.n	800ba68 <_dtoa_r+0x6d8>
 800ba62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba64:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ba68:	9d07      	ldr	r5, [sp, #28]
 800ba6a:	464c      	mov	r4, r9
 800ba6c:	e015      	b.n	800ba9a <_dtoa_r+0x70a>
 800ba6e:	9b07      	ldr	r3, [sp, #28]
 800ba70:	f108 35ff 	add.w	r5, r8, #4294967295
 800ba74:	42ab      	cmp	r3, r5
 800ba76:	bfbf      	itttt	lt
 800ba78:	9b07      	ldrlt	r3, [sp, #28]
 800ba7a:	9507      	strlt	r5, [sp, #28]
 800ba7c:	1aea      	sublt	r2, r5, r3
 800ba7e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800ba80:	bfb7      	itett	lt
 800ba82:	189b      	addlt	r3, r3, r2
 800ba84:	1b5d      	subge	r5, r3, r5
 800ba86:	930c      	strlt	r3, [sp, #48]	; 0x30
 800ba88:	2500      	movlt	r5, #0
 800ba8a:	f1b8 0f00 	cmp.w	r8, #0
 800ba8e:	bfb9      	ittee	lt
 800ba90:	ebc8 0409 	rsblt	r4, r8, r9
 800ba94:	2300      	movlt	r3, #0
 800ba96:	464c      	movge	r4, r9
 800ba98:	4643      	movge	r3, r8
 800ba9a:	9a05      	ldr	r2, [sp, #20]
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	441a      	add	r2, r3
 800baa0:	4650      	mov	r0, sl
 800baa2:	4499      	add	r9, r3
 800baa4:	9205      	str	r2, [sp, #20]
 800baa6:	f000 fbff 	bl	800c2a8 <__i2b>
 800baaa:	4606      	mov	r6, r0
 800baac:	e002      	b.n	800bab4 <_dtoa_r+0x724>
 800baae:	9d07      	ldr	r5, [sp, #28]
 800bab0:	9e08      	ldr	r6, [sp, #32]
 800bab2:	464c      	mov	r4, r9
 800bab4:	b15c      	cbz	r4, 800bace <_dtoa_r+0x73e>
 800bab6:	9b05      	ldr	r3, [sp, #20]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	dd08      	ble.n	800bace <_dtoa_r+0x73e>
 800babc:	42a3      	cmp	r3, r4
 800babe:	9a05      	ldr	r2, [sp, #20]
 800bac0:	bfa8      	it	ge
 800bac2:	4623      	movge	r3, r4
 800bac4:	ebc3 0909 	rsb	r9, r3, r9
 800bac8:	1ae4      	subs	r4, r4, r3
 800baca:	1ad3      	subs	r3, r2, r3
 800bacc:	9305      	str	r3, [sp, #20]
 800bace:	9b07      	ldr	r3, [sp, #28]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	dd1d      	ble.n	800bb10 <_dtoa_r+0x780>
 800bad4:	9b08      	ldr	r3, [sp, #32]
 800bad6:	b1ab      	cbz	r3, 800bb04 <_dtoa_r+0x774>
 800bad8:	b185      	cbz	r5, 800bafc <_dtoa_r+0x76c>
 800bada:	4631      	mov	r1, r6
 800badc:	462a      	mov	r2, r5
 800bade:	4650      	mov	r0, sl
 800bae0:	f000 fc7c 	bl	800c3dc <__pow5mult>
 800bae4:	9a02      	ldr	r2, [sp, #8]
 800bae6:	4601      	mov	r1, r0
 800bae8:	4606      	mov	r6, r0
 800baea:	4650      	mov	r0, sl
 800baec:	f000 fbe5 	bl	800c2ba <__multiply>
 800baf0:	9902      	ldr	r1, [sp, #8]
 800baf2:	4607      	mov	r7, r0
 800baf4:	4650      	mov	r0, sl
 800baf6:	f000 fb38 	bl	800c16a <_Bfree>
 800bafa:	9702      	str	r7, [sp, #8]
 800bafc:	9b07      	ldr	r3, [sp, #28]
 800bafe:	1b5a      	subs	r2, r3, r5
 800bb00:	d006      	beq.n	800bb10 <_dtoa_r+0x780>
 800bb02:	e000      	b.n	800bb06 <_dtoa_r+0x776>
 800bb04:	9a07      	ldr	r2, [sp, #28]
 800bb06:	9902      	ldr	r1, [sp, #8]
 800bb08:	4650      	mov	r0, sl
 800bb0a:	f000 fc67 	bl	800c3dc <__pow5mult>
 800bb0e:	9002      	str	r0, [sp, #8]
 800bb10:	2101      	movs	r1, #1
 800bb12:	4650      	mov	r0, sl
 800bb14:	f000 fbc8 	bl	800c2a8 <__i2b>
 800bb18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb1a:	4605      	mov	r5, r0
 800bb1c:	b35b      	cbz	r3, 800bb76 <_dtoa_r+0x7e6>
 800bb1e:	461a      	mov	r2, r3
 800bb20:	4601      	mov	r1, r0
 800bb22:	4650      	mov	r0, sl
 800bb24:	f000 fc5a 	bl	800c3dc <__pow5mult>
 800bb28:	9b06      	ldr	r3, [sp, #24]
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	4605      	mov	r5, r0
 800bb2e:	dc18      	bgt.n	800bb62 <_dtoa_r+0x7d2>
 800bb30:	9b00      	ldr	r3, [sp, #0]
 800bb32:	b983      	cbnz	r3, 800bb56 <_dtoa_r+0x7c6>
 800bb34:	9b01      	ldr	r3, [sp, #4]
 800bb36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb3a:	b973      	cbnz	r3, 800bb5a <_dtoa_r+0x7ca>
 800bb3c:	9b01      	ldr	r3, [sp, #4]
 800bb3e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800bb42:	0d3f      	lsrs	r7, r7, #20
 800bb44:	053f      	lsls	r7, r7, #20
 800bb46:	b14f      	cbz	r7, 800bb5c <_dtoa_r+0x7cc>
 800bb48:	9b05      	ldr	r3, [sp, #20]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	f109 0901 	add.w	r9, r9, #1
 800bb50:	9305      	str	r3, [sp, #20]
 800bb52:	2701      	movs	r7, #1
 800bb54:	e002      	b.n	800bb5c <_dtoa_r+0x7cc>
 800bb56:	2700      	movs	r7, #0
 800bb58:	e000      	b.n	800bb5c <_dtoa_r+0x7cc>
 800bb5a:	9f00      	ldr	r7, [sp, #0]
 800bb5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb5e:	b173      	cbz	r3, 800bb7e <_dtoa_r+0x7ee>
 800bb60:	e000      	b.n	800bb64 <_dtoa_r+0x7d4>
 800bb62:	2700      	movs	r7, #0
 800bb64:	692b      	ldr	r3, [r5, #16]
 800bb66:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800bb6a:	6918      	ldr	r0, [r3, #16]
 800bb6c:	f000 fb4f 	bl	800c20e <__hi0bits>
 800bb70:	f1c0 0020 	rsb	r0, r0, #32
 800bb74:	e004      	b.n	800bb80 <_dtoa_r+0x7f0>
 800bb76:	9b06      	ldr	r3, [sp, #24]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	ddd9      	ble.n	800bb30 <_dtoa_r+0x7a0>
 800bb7c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800bb7e:	2001      	movs	r0, #1
 800bb80:	9b05      	ldr	r3, [sp, #20]
 800bb82:	4418      	add	r0, r3
 800bb84:	f010 001f 	ands.w	r0, r0, #31
 800bb88:	d00e      	beq.n	800bba8 <_dtoa_r+0x818>
 800bb8a:	f1c0 0320 	rsb	r3, r0, #32
 800bb8e:	2b04      	cmp	r3, #4
 800bb90:	dd08      	ble.n	800bba4 <_dtoa_r+0x814>
 800bb92:	f1c0 001c 	rsb	r0, r0, #28
 800bb96:	e008      	b.n	800bbaa <_dtoa_r+0x81a>
 800bb98:	0800cde8 	.word	0x0800cde8
 800bb9c:	40140000 	.word	0x40140000
 800bba0:	40240000 	.word	0x40240000
 800bba4:	d006      	beq.n	800bbb4 <_dtoa_r+0x824>
 800bba6:	4618      	mov	r0, r3
 800bba8:	301c      	adds	r0, #28
 800bbaa:	9b05      	ldr	r3, [sp, #20]
 800bbac:	4403      	add	r3, r0
 800bbae:	4481      	add	r9, r0
 800bbb0:	4404      	add	r4, r0
 800bbb2:	9305      	str	r3, [sp, #20]
 800bbb4:	f1b9 0f00 	cmp.w	r9, #0
 800bbb8:	dd05      	ble.n	800bbc6 <_dtoa_r+0x836>
 800bbba:	464a      	mov	r2, r9
 800bbbc:	9902      	ldr	r1, [sp, #8]
 800bbbe:	4650      	mov	r0, sl
 800bbc0:	f000 fc5a 	bl	800c478 <__lshift>
 800bbc4:	9002      	str	r0, [sp, #8]
 800bbc6:	9b05      	ldr	r3, [sp, #20]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	dd05      	ble.n	800bbd8 <_dtoa_r+0x848>
 800bbcc:	4629      	mov	r1, r5
 800bbce:	461a      	mov	r2, r3
 800bbd0:	4650      	mov	r0, sl
 800bbd2:	f000 fc51 	bl	800c478 <__lshift>
 800bbd6:	4605      	mov	r5, r0
 800bbd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbda:	b1eb      	cbz	r3, 800bc18 <_dtoa_r+0x888>
 800bbdc:	4629      	mov	r1, r5
 800bbde:	9802      	ldr	r0, [sp, #8]
 800bbe0:	f000 fc9b 	bl	800c51a <__mcmp>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	da17      	bge.n	800bc18 <_dtoa_r+0x888>
 800bbe8:	2300      	movs	r3, #0
 800bbea:	220a      	movs	r2, #10
 800bbec:	9902      	ldr	r1, [sp, #8]
 800bbee:	4650      	mov	r0, sl
 800bbf0:	f000 fad2 	bl	800c198 <__multadd>
 800bbf4:	9b08      	ldr	r3, [sp, #32]
 800bbf6:	9002      	str	r0, [sp, #8]
 800bbf8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f000 8158 	beq.w	800beb2 <_dtoa_r+0xb22>
 800bc02:	2300      	movs	r3, #0
 800bc04:	4631      	mov	r1, r6
 800bc06:	220a      	movs	r2, #10
 800bc08:	4650      	mov	r0, sl
 800bc0a:	f000 fac5 	bl	800c198 <__multadd>
 800bc0e:	9b03      	ldr	r3, [sp, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	4606      	mov	r6, r0
 800bc14:	dc37      	bgt.n	800bc86 <_dtoa_r+0x8f6>
 800bc16:	e033      	b.n	800bc80 <_dtoa_r+0x8f0>
 800bc18:	f1b8 0f00 	cmp.w	r8, #0
 800bc1c:	dc2a      	bgt.n	800bc74 <_dtoa_r+0x8e4>
 800bc1e:	9b06      	ldr	r3, [sp, #24]
 800bc20:	2b02      	cmp	r3, #2
 800bc22:	dd27      	ble.n	800bc74 <_dtoa_r+0x8e4>
 800bc24:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc28:	9b03      	ldr	r3, [sp, #12]
 800bc2a:	b983      	cbnz	r3, 800bc4e <_dtoa_r+0x8be>
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	2205      	movs	r2, #5
 800bc30:	4650      	mov	r0, sl
 800bc32:	f000 fab1 	bl	800c198 <__multadd>
 800bc36:	4601      	mov	r1, r0
 800bc38:	4605      	mov	r5, r0
 800bc3a:	9802      	ldr	r0, [sp, #8]
 800bc3c:	f000 fc6d 	bl	800c51a <__mcmp>
 800bc40:	2800      	cmp	r0, #0
 800bc42:	dc0d      	bgt.n	800bc60 <_dtoa_r+0x8d0>
 800bc44:	e003      	b.n	800bc4e <_dtoa_r+0x8be>
 800bc46:	463d      	mov	r5, r7
 800bc48:	e000      	b.n	800bc4c <_dtoa_r+0x8bc>
 800bc4a:	2500      	movs	r5, #0
 800bc4c:	462e      	mov	r6, r5
 800bc4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc50:	9c04      	ldr	r4, [sp, #16]
 800bc52:	ea6f 0b03 	mvn.w	fp, r3
 800bc56:	e00a      	b.n	800bc6e <_dtoa_r+0x8de>
 800bc58:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800bc5c:	463d      	mov	r5, r7
 800bc5e:	463e      	mov	r6, r7
 800bc60:	9b04      	ldr	r3, [sp, #16]
 800bc62:	9a04      	ldr	r2, [sp, #16]
 800bc64:	1c5c      	adds	r4, r3, #1
 800bc66:	2331      	movs	r3, #49	; 0x31
 800bc68:	7013      	strb	r3, [r2, #0]
 800bc6a:	f10b 0b01 	add.w	fp, fp, #1
 800bc6e:	46b0      	mov	r8, r6
 800bc70:	2600      	movs	r6, #0
 800bc72:	e0f7      	b.n	800be64 <_dtoa_r+0xad4>
 800bc74:	9b08      	ldr	r3, [sp, #32]
 800bc76:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc7a:	b923      	cbnz	r3, 800bc86 <_dtoa_r+0x8f6>
 800bc7c:	9c04      	ldr	r4, [sp, #16]
 800bc7e:	e0b1      	b.n	800bde4 <_dtoa_r+0xa54>
 800bc80:	9b06      	ldr	r3, [sp, #24]
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	dcd0      	bgt.n	800bc28 <_dtoa_r+0x898>
 800bc86:	2c00      	cmp	r4, #0
 800bc88:	dd05      	ble.n	800bc96 <_dtoa_r+0x906>
 800bc8a:	4631      	mov	r1, r6
 800bc8c:	4622      	mov	r2, r4
 800bc8e:	4650      	mov	r0, sl
 800bc90:	f000 fbf2 	bl	800c478 <__lshift>
 800bc94:	4606      	mov	r6, r0
 800bc96:	b19f      	cbz	r7, 800bcc0 <_dtoa_r+0x930>
 800bc98:	6871      	ldr	r1, [r6, #4]
 800bc9a:	4650      	mov	r0, sl
 800bc9c:	f000 fa30 	bl	800c100 <_Balloc>
 800bca0:	6932      	ldr	r2, [r6, #16]
 800bca2:	3202      	adds	r2, #2
 800bca4:	4604      	mov	r4, r0
 800bca6:	0092      	lsls	r2, r2, #2
 800bca8:	f106 010c 	add.w	r1, r6, #12
 800bcac:	300c      	adds	r0, #12
 800bcae:	f7fe fa3f 	bl	800a130 <memcpy>
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	4621      	mov	r1, r4
 800bcb6:	4650      	mov	r0, sl
 800bcb8:	f000 fbde 	bl	800c478 <__lshift>
 800bcbc:	4680      	mov	r8, r0
 800bcbe:	e000      	b.n	800bcc2 <_dtoa_r+0x932>
 800bcc0:	46b0      	mov	r8, r6
 800bcc2:	9b00      	ldr	r3, [sp, #0]
 800bcc4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800bcc8:	f003 0301 	and.w	r3, r3, #1
 800bccc:	9305      	str	r3, [sp, #20]
 800bcce:	4629      	mov	r1, r5
 800bcd0:	9802      	ldr	r0, [sp, #8]
 800bcd2:	f7ff facb 	bl	800b26c <quorem>
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	4604      	mov	r4, r0
 800bcda:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800bcde:	9802      	ldr	r0, [sp, #8]
 800bce0:	f000 fc1b 	bl	800c51a <__mcmp>
 800bce4:	4642      	mov	r2, r8
 800bce6:	9000      	str	r0, [sp, #0]
 800bce8:	4629      	mov	r1, r5
 800bcea:	4650      	mov	r0, sl
 800bcec:	f000 fc31 	bl	800c552 <__mdiff>
 800bcf0:	68c3      	ldr	r3, [r0, #12]
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	b93b      	cbnz	r3, 800bd06 <_dtoa_r+0x976>
 800bcf6:	4601      	mov	r1, r0
 800bcf8:	9007      	str	r0, [sp, #28]
 800bcfa:	9802      	ldr	r0, [sp, #8]
 800bcfc:	f000 fc0d 	bl	800c51a <__mcmp>
 800bd00:	9a07      	ldr	r2, [sp, #28]
 800bd02:	4603      	mov	r3, r0
 800bd04:	e000      	b.n	800bd08 <_dtoa_r+0x978>
 800bd06:	2301      	movs	r3, #1
 800bd08:	4611      	mov	r1, r2
 800bd0a:	4650      	mov	r0, sl
 800bd0c:	9307      	str	r3, [sp, #28]
 800bd0e:	f000 fa2c 	bl	800c16a <_Bfree>
 800bd12:	9b07      	ldr	r3, [sp, #28]
 800bd14:	b94b      	cbnz	r3, 800bd2a <_dtoa_r+0x99a>
 800bd16:	9a06      	ldr	r2, [sp, #24]
 800bd18:	b93a      	cbnz	r2, 800bd2a <_dtoa_r+0x99a>
 800bd1a:	9a05      	ldr	r2, [sp, #20]
 800bd1c:	b92a      	cbnz	r2, 800bd2a <_dtoa_r+0x99a>
 800bd1e:	2f39      	cmp	r7, #57	; 0x39
 800bd20:	d028      	beq.n	800bd74 <_dtoa_r+0x9e4>
 800bd22:	9b00      	ldr	r3, [sp, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	dc1a      	bgt.n	800bd5e <_dtoa_r+0x9ce>
 800bd28:	e01b      	b.n	800bd62 <_dtoa_r+0x9d2>
 800bd2a:	9a00      	ldr	r2, [sp, #0]
 800bd2c:	2a00      	cmp	r2, #0
 800bd2e:	db04      	blt.n	800bd3a <_dtoa_r+0x9aa>
 800bd30:	d11a      	bne.n	800bd68 <_dtoa_r+0x9d8>
 800bd32:	9a06      	ldr	r2, [sp, #24]
 800bd34:	b9c2      	cbnz	r2, 800bd68 <_dtoa_r+0x9d8>
 800bd36:	9a05      	ldr	r2, [sp, #20]
 800bd38:	b9b2      	cbnz	r2, 800bd68 <_dtoa_r+0x9d8>
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	dd11      	ble.n	800bd62 <_dtoa_r+0x9d2>
 800bd3e:	2201      	movs	r2, #1
 800bd40:	9902      	ldr	r1, [sp, #8]
 800bd42:	4650      	mov	r0, sl
 800bd44:	f000 fb98 	bl	800c478 <__lshift>
 800bd48:	4629      	mov	r1, r5
 800bd4a:	9002      	str	r0, [sp, #8]
 800bd4c:	f000 fbe5 	bl	800c51a <__mcmp>
 800bd50:	2800      	cmp	r0, #0
 800bd52:	dc02      	bgt.n	800bd5a <_dtoa_r+0x9ca>
 800bd54:	d105      	bne.n	800bd62 <_dtoa_r+0x9d2>
 800bd56:	07fa      	lsls	r2, r7, #31
 800bd58:	d503      	bpl.n	800bd62 <_dtoa_r+0x9d2>
 800bd5a:	2f39      	cmp	r7, #57	; 0x39
 800bd5c:	d00a      	beq.n	800bd74 <_dtoa_r+0x9e4>
 800bd5e:	f104 0731 	add.w	r7, r4, #49	; 0x31
 800bd62:	f109 0401 	add.w	r4, r9, #1
 800bd66:	e00c      	b.n	800bd82 <_dtoa_r+0x9f2>
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	f109 0401 	add.w	r4, r9, #1
 800bd6e:	dd0b      	ble.n	800bd88 <_dtoa_r+0x9f8>
 800bd70:	2f39      	cmp	r7, #57	; 0x39
 800bd72:	d105      	bne.n	800bd80 <_dtoa_r+0x9f0>
 800bd74:	2339      	movs	r3, #57	; 0x39
 800bd76:	f889 3000 	strb.w	r3, [r9]
 800bd7a:	f109 0901 	add.w	r9, r9, #1
 800bd7e:	e054      	b.n	800be2a <_dtoa_r+0xa9a>
 800bd80:	3701      	adds	r7, #1
 800bd82:	f889 7000 	strb.w	r7, [r9]
 800bd86:	e06d      	b.n	800be64 <_dtoa_r+0xad4>
 800bd88:	9b04      	ldr	r3, [sp, #16]
 800bd8a:	9a03      	ldr	r2, [sp, #12]
 800bd8c:	f804 7c01 	strb.w	r7, [r4, #-1]
 800bd90:	1ae3      	subs	r3, r4, r3
 800bd92:	4293      	cmp	r3, r2
 800bd94:	46a1      	mov	r9, r4
 800bd96:	d03a      	beq.n	800be0e <_dtoa_r+0xa7e>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	220a      	movs	r2, #10
 800bd9c:	9902      	ldr	r1, [sp, #8]
 800bd9e:	4650      	mov	r0, sl
 800bda0:	f000 f9fa 	bl	800c198 <__multadd>
 800bda4:	4546      	cmp	r6, r8
 800bda6:	9002      	str	r0, [sp, #8]
 800bda8:	f04f 0300 	mov.w	r3, #0
 800bdac:	f04f 020a 	mov.w	r2, #10
 800bdb0:	4631      	mov	r1, r6
 800bdb2:	4650      	mov	r0, sl
 800bdb4:	d104      	bne.n	800bdc0 <_dtoa_r+0xa30>
 800bdb6:	f000 f9ef 	bl	800c198 <__multadd>
 800bdba:	4606      	mov	r6, r0
 800bdbc:	4680      	mov	r8, r0
 800bdbe:	e786      	b.n	800bcce <_dtoa_r+0x93e>
 800bdc0:	f000 f9ea 	bl	800c198 <__multadd>
 800bdc4:	4641      	mov	r1, r8
 800bdc6:	4606      	mov	r6, r0
 800bdc8:	2300      	movs	r3, #0
 800bdca:	220a      	movs	r2, #10
 800bdcc:	4650      	mov	r0, sl
 800bdce:	f000 f9e3 	bl	800c198 <__multadd>
 800bdd2:	4680      	mov	r8, r0
 800bdd4:	e77b      	b.n	800bcce <_dtoa_r+0x93e>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	220a      	movs	r2, #10
 800bdda:	9902      	ldr	r1, [sp, #8]
 800bddc:	4650      	mov	r0, sl
 800bdde:	f000 f9db 	bl	800c198 <__multadd>
 800bde2:	9002      	str	r0, [sp, #8]
 800bde4:	4629      	mov	r1, r5
 800bde6:	9802      	ldr	r0, [sp, #8]
 800bde8:	f7ff fa40 	bl	800b26c <quorem>
 800bdec:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800bdf0:	f804 7b01 	strb.w	r7, [r4], #1
 800bdf4:	9b04      	ldr	r3, [sp, #16]
 800bdf6:	9a03      	ldr	r2, [sp, #12]
 800bdf8:	1ae3      	subs	r3, r4, r3
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	dbeb      	blt.n	800bdd6 <_dtoa_r+0xa46>
 800bdfe:	9b04      	ldr	r3, [sp, #16]
 800be00:	2a01      	cmp	r2, #1
 800be02:	bfac      	ite	ge
 800be04:	189b      	addge	r3, r3, r2
 800be06:	3301      	addlt	r3, #1
 800be08:	46b0      	mov	r8, r6
 800be0a:	4699      	mov	r9, r3
 800be0c:	2600      	movs	r6, #0
 800be0e:	2201      	movs	r2, #1
 800be10:	9902      	ldr	r1, [sp, #8]
 800be12:	4650      	mov	r0, sl
 800be14:	f000 fb30 	bl	800c478 <__lshift>
 800be18:	4629      	mov	r1, r5
 800be1a:	9002      	str	r0, [sp, #8]
 800be1c:	f000 fb7d 	bl	800c51a <__mcmp>
 800be20:	2800      	cmp	r0, #0
 800be22:	dc02      	bgt.n	800be2a <_dtoa_r+0xa9a>
 800be24:	d115      	bne.n	800be52 <_dtoa_r+0xac2>
 800be26:	07fb      	lsls	r3, r7, #31
 800be28:	d513      	bpl.n	800be52 <_dtoa_r+0xac2>
 800be2a:	464c      	mov	r4, r9
 800be2c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800be30:	2b39      	cmp	r3, #57	; 0x39
 800be32:	f104 32ff 	add.w	r2, r4, #4294967295
 800be36:	d109      	bne.n	800be4c <_dtoa_r+0xabc>
 800be38:	9b04      	ldr	r3, [sp, #16]
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d104      	bne.n	800be48 <_dtoa_r+0xab8>
 800be3e:	f10b 0b01 	add.w	fp, fp, #1
 800be42:	2331      	movs	r3, #49	; 0x31
 800be44:	9a04      	ldr	r2, [sp, #16]
 800be46:	e002      	b.n	800be4e <_dtoa_r+0xabe>
 800be48:	4614      	mov	r4, r2
 800be4a:	e7ef      	b.n	800be2c <_dtoa_r+0xa9c>
 800be4c:	3301      	adds	r3, #1
 800be4e:	7013      	strb	r3, [r2, #0]
 800be50:	e008      	b.n	800be64 <_dtoa_r+0xad4>
 800be52:	464c      	mov	r4, r9
 800be54:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800be58:	2b30      	cmp	r3, #48	; 0x30
 800be5a:	f104 32ff 	add.w	r2, r4, #4294967295
 800be5e:	d101      	bne.n	800be64 <_dtoa_r+0xad4>
 800be60:	4614      	mov	r4, r2
 800be62:	e7f7      	b.n	800be54 <_dtoa_r+0xac4>
 800be64:	4629      	mov	r1, r5
 800be66:	4650      	mov	r0, sl
 800be68:	f000 f97f 	bl	800c16a <_Bfree>
 800be6c:	f1b8 0f00 	cmp.w	r8, #0
 800be70:	d00d      	beq.n	800be8e <_dtoa_r+0xafe>
 800be72:	b12e      	cbz	r6, 800be80 <_dtoa_r+0xaf0>
 800be74:	4546      	cmp	r6, r8
 800be76:	d003      	beq.n	800be80 <_dtoa_r+0xaf0>
 800be78:	4631      	mov	r1, r6
 800be7a:	4650      	mov	r0, sl
 800be7c:	f000 f975 	bl	800c16a <_Bfree>
 800be80:	4641      	mov	r1, r8
 800be82:	4650      	mov	r0, sl
 800be84:	f000 f971 	bl	800c16a <_Bfree>
 800be88:	e001      	b.n	800be8e <_dtoa_r+0xafe>
 800be8a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800be8e:	9902      	ldr	r1, [sp, #8]
 800be90:	4650      	mov	r0, sl
 800be92:	f000 f96a 	bl	800c16a <_Bfree>
 800be96:	2300      	movs	r3, #0
 800be98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800be9a:	7023      	strb	r3, [r4, #0]
 800be9c:	f10b 0301 	add.w	r3, fp, #1
 800bea0:	6013      	str	r3, [r2, #0]
 800bea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bea4:	b11b      	cbz	r3, 800beae <_dtoa_r+0xb1e>
 800bea6:	601c      	str	r4, [r3, #0]
 800bea8:	e001      	b.n	800beae <_dtoa_r+0xb1e>
 800beaa:	4808      	ldr	r0, [pc, #32]	; (800becc <_dtoa_r+0xb3c>)
 800beac:	e00a      	b.n	800bec4 <_dtoa_r+0xb34>
 800beae:	9804      	ldr	r0, [sp, #16]
 800beb0:	e008      	b.n	800bec4 <_dtoa_r+0xb34>
 800beb2:	9b03      	ldr	r3, [sp, #12]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f73f aee1 	bgt.w	800bc7c <_dtoa_r+0x8ec>
 800beba:	9b06      	ldr	r3, [sp, #24]
 800bebc:	2b02      	cmp	r3, #2
 800bebe:	f77f aedd 	ble.w	800bc7c <_dtoa_r+0x8ec>
 800bec2:	e6b1      	b.n	800bc28 <_dtoa_r+0x898>
 800bec4:	b017      	add	sp, #92	; 0x5c
 800bec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beca:	bf00      	nop
 800becc:	0800ccba 	.word	0x0800ccba

0800bed0 <_malloc_trim_r>:
 800bed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bed4:	4f25      	ldr	r7, [pc, #148]	; (800bf6c <_malloc_trim_r+0x9c>)
 800bed6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800bf78 <_malloc_trim_r+0xa8>
 800beda:	4689      	mov	r9, r1
 800bedc:	4606      	mov	r6, r0
 800bede:	f7fe f93a 	bl	800a156 <__malloc_lock>
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	685d      	ldr	r5, [r3, #4]
 800bee6:	f1a8 0411 	sub.w	r4, r8, #17
 800beea:	f025 0503 	bic.w	r5, r5, #3
 800beee:	442c      	add	r4, r5
 800bef0:	ebc9 0404 	rsb	r4, r9, r4
 800bef4:	fbb4 f4f8 	udiv	r4, r4, r8
 800bef8:	3c01      	subs	r4, #1
 800befa:	fb08 f404 	mul.w	r4, r8, r4
 800befe:	4544      	cmp	r4, r8
 800bf00:	da05      	bge.n	800bf0e <_malloc_trim_r+0x3e>
 800bf02:	4630      	mov	r0, r6
 800bf04:	f7fe f928 	bl	800a158 <__malloc_unlock>
 800bf08:	2000      	movs	r0, #0
 800bf0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf0e:	2100      	movs	r1, #0
 800bf10:	4630      	mov	r0, r6
 800bf12:	f7fe f923 	bl	800a15c <_sbrk_r>
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	442b      	add	r3, r5
 800bf1a:	4298      	cmp	r0, r3
 800bf1c:	d1f1      	bne.n	800bf02 <_malloc_trim_r+0x32>
 800bf1e:	4261      	negs	r1, r4
 800bf20:	4630      	mov	r0, r6
 800bf22:	f7fe f91b 	bl	800a15c <_sbrk_r>
 800bf26:	3001      	adds	r0, #1
 800bf28:	d110      	bne.n	800bf4c <_malloc_trim_r+0x7c>
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	f7fe f915 	bl	800a15c <_sbrk_r>
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	1a83      	subs	r3, r0, r2
 800bf36:	2b0f      	cmp	r3, #15
 800bf38:	dde3      	ble.n	800bf02 <_malloc_trim_r+0x32>
 800bf3a:	490d      	ldr	r1, [pc, #52]	; (800bf70 <_malloc_trim_r+0xa0>)
 800bf3c:	6809      	ldr	r1, [r1, #0]
 800bf3e:	1a40      	subs	r0, r0, r1
 800bf40:	490c      	ldr	r1, [pc, #48]	; (800bf74 <_malloc_trim_r+0xa4>)
 800bf42:	f043 0301 	orr.w	r3, r3, #1
 800bf46:	6008      	str	r0, [r1, #0]
 800bf48:	6053      	str	r3, [r2, #4]
 800bf4a:	e7da      	b.n	800bf02 <_malloc_trim_r+0x32>
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	4a09      	ldr	r2, [pc, #36]	; (800bf74 <_malloc_trim_r+0xa4>)
 800bf50:	1b2d      	subs	r5, r5, r4
 800bf52:	f045 0501 	orr.w	r5, r5, #1
 800bf56:	605d      	str	r5, [r3, #4]
 800bf58:	6813      	ldr	r3, [r2, #0]
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	1b1c      	subs	r4, r3, r4
 800bf5e:	6014      	str	r4, [r2, #0]
 800bf60:	f7fe f8fa 	bl	800a158 <__malloc_unlock>
 800bf64:	2001      	movs	r0, #1
 800bf66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf6a:	bf00      	nop
 800bf6c:	2000015c 	.word	0x2000015c
 800bf70:	20000568 	.word	0x20000568
 800bf74:	200008f4 	.word	0x200008f4
 800bf78:	00000080 	.word	0x00000080

0800bf7c <_free_r>:
 800bf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf80:	4604      	mov	r4, r0
 800bf82:	4688      	mov	r8, r1
 800bf84:	2900      	cmp	r1, #0
 800bf86:	f000 80ad 	beq.w	800c0e4 <_free_r+0x168>
 800bf8a:	f7fe f8e4 	bl	800a156 <__malloc_lock>
 800bf8e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800bf92:	4d55      	ldr	r5, [pc, #340]	; (800c0e8 <_free_r+0x16c>)
 800bf94:	f022 0001 	bic.w	r0, r2, #1
 800bf98:	f1a8 0308 	sub.w	r3, r8, #8
 800bf9c:	181f      	adds	r7, r3, r0
 800bf9e:	68a9      	ldr	r1, [r5, #8]
 800bfa0:	687e      	ldr	r6, [r7, #4]
 800bfa2:	428f      	cmp	r7, r1
 800bfa4:	f026 0603 	bic.w	r6, r6, #3
 800bfa8:	f002 0201 	and.w	r2, r2, #1
 800bfac:	d11b      	bne.n	800bfe6 <_free_r+0x6a>
 800bfae:	4430      	add	r0, r6
 800bfb0:	b93a      	cbnz	r2, 800bfc2 <_free_r+0x46>
 800bfb2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800bfb6:	1a9b      	subs	r3, r3, r2
 800bfb8:	4410      	add	r0, r2
 800bfba:	6899      	ldr	r1, [r3, #8]
 800bfbc:	68da      	ldr	r2, [r3, #12]
 800bfbe:	60ca      	str	r2, [r1, #12]
 800bfc0:	6091      	str	r1, [r2, #8]
 800bfc2:	f040 0201 	orr.w	r2, r0, #1
 800bfc6:	605a      	str	r2, [r3, #4]
 800bfc8:	60ab      	str	r3, [r5, #8]
 800bfca:	4b48      	ldr	r3, [pc, #288]	; (800c0ec <_free_r+0x170>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4298      	cmp	r0, r3
 800bfd0:	d304      	bcc.n	800bfdc <_free_r+0x60>
 800bfd2:	4b47      	ldr	r3, [pc, #284]	; (800c0f0 <_free_r+0x174>)
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	6819      	ldr	r1, [r3, #0]
 800bfd8:	f7ff ff7a 	bl	800bed0 <_malloc_trim_r>
 800bfdc:	4620      	mov	r0, r4
 800bfde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe2:	f7fe b8b9 	b.w	800a158 <__malloc_unlock>
 800bfe6:	607e      	str	r6, [r7, #4]
 800bfe8:	b97a      	cbnz	r2, 800c00a <_free_r+0x8e>
 800bfea:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800bfee:	1a5b      	subs	r3, r3, r1
 800bff0:	4408      	add	r0, r1
 800bff2:	6899      	ldr	r1, [r3, #8]
 800bff4:	f105 0e08 	add.w	lr, r5, #8
 800bff8:	4571      	cmp	r1, lr
 800bffa:	d008      	beq.n	800c00e <_free_r+0x92>
 800bffc:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800c000:	f8c1 e00c 	str.w	lr, [r1, #12]
 800c004:	f8ce 1008 	str.w	r1, [lr, #8]
 800c008:	e002      	b.n	800c010 <_free_r+0x94>
 800c00a:	2200      	movs	r2, #0
 800c00c:	e000      	b.n	800c010 <_free_r+0x94>
 800c00e:	2201      	movs	r2, #1
 800c010:	19b9      	adds	r1, r7, r6
 800c012:	6849      	ldr	r1, [r1, #4]
 800c014:	07c9      	lsls	r1, r1, #31
 800c016:	d40e      	bmi.n	800c036 <_free_r+0xba>
 800c018:	4430      	add	r0, r6
 800c01a:	68b9      	ldr	r1, [r7, #8]
 800c01c:	b942      	cbnz	r2, 800c030 <_free_r+0xb4>
 800c01e:	4e35      	ldr	r6, [pc, #212]	; (800c0f4 <_free_r+0x178>)
 800c020:	42b1      	cmp	r1, r6
 800c022:	d105      	bne.n	800c030 <_free_r+0xb4>
 800c024:	616b      	str	r3, [r5, #20]
 800c026:	612b      	str	r3, [r5, #16]
 800c028:	2201      	movs	r2, #1
 800c02a:	60d9      	str	r1, [r3, #12]
 800c02c:	6099      	str	r1, [r3, #8]
 800c02e:	e002      	b.n	800c036 <_free_r+0xba>
 800c030:	68fe      	ldr	r6, [r7, #12]
 800c032:	60ce      	str	r6, [r1, #12]
 800c034:	60b1      	str	r1, [r6, #8]
 800c036:	f040 0101 	orr.w	r1, r0, #1
 800c03a:	6059      	str	r1, [r3, #4]
 800c03c:	5018      	str	r0, [r3, r0]
 800c03e:	2a00      	cmp	r2, #0
 800c040:	d1cc      	bne.n	800bfdc <_free_r+0x60>
 800c042:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800c046:	d212      	bcs.n	800c06e <_free_r+0xf2>
 800c048:	08c0      	lsrs	r0, r0, #3
 800c04a:	1081      	asrs	r1, r0, #2
 800c04c:	2201      	movs	r2, #1
 800c04e:	fa02 f101 	lsl.w	r1, r2, r1
 800c052:	686a      	ldr	r2, [r5, #4]
 800c054:	3001      	adds	r0, #1
 800c056:	430a      	orrs	r2, r1
 800c058:	606a      	str	r2, [r5, #4]
 800c05a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800c05e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800c062:	6099      	str	r1, [r3, #8]
 800c064:	3a08      	subs	r2, #8
 800c066:	60da      	str	r2, [r3, #12]
 800c068:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800c06c:	e038      	b.n	800c0e0 <_free_r+0x164>
 800c06e:	0a42      	lsrs	r2, r0, #9
 800c070:	2a04      	cmp	r2, #4
 800c072:	d802      	bhi.n	800c07a <_free_r+0xfe>
 800c074:	0982      	lsrs	r2, r0, #6
 800c076:	3238      	adds	r2, #56	; 0x38
 800c078:	e015      	b.n	800c0a6 <_free_r+0x12a>
 800c07a:	2a14      	cmp	r2, #20
 800c07c:	d801      	bhi.n	800c082 <_free_r+0x106>
 800c07e:	325b      	adds	r2, #91	; 0x5b
 800c080:	e011      	b.n	800c0a6 <_free_r+0x12a>
 800c082:	2a54      	cmp	r2, #84	; 0x54
 800c084:	d802      	bhi.n	800c08c <_free_r+0x110>
 800c086:	0b02      	lsrs	r2, r0, #12
 800c088:	326e      	adds	r2, #110	; 0x6e
 800c08a:	e00c      	b.n	800c0a6 <_free_r+0x12a>
 800c08c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800c090:	d802      	bhi.n	800c098 <_free_r+0x11c>
 800c092:	0bc2      	lsrs	r2, r0, #15
 800c094:	3277      	adds	r2, #119	; 0x77
 800c096:	e006      	b.n	800c0a6 <_free_r+0x12a>
 800c098:	f240 5154 	movw	r1, #1364	; 0x554
 800c09c:	428a      	cmp	r2, r1
 800c09e:	bf9a      	itte	ls
 800c0a0:	0c82      	lsrls	r2, r0, #18
 800c0a2:	327c      	addls	r2, #124	; 0x7c
 800c0a4:	227e      	movhi	r2, #126	; 0x7e
 800c0a6:	1c51      	adds	r1, r2, #1
 800c0a8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800c0ac:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800c0b0:	4f0d      	ldr	r7, [pc, #52]	; (800c0e8 <_free_r+0x16c>)
 800c0b2:	428e      	cmp	r6, r1
 800c0b4:	d10b      	bne.n	800c0ce <_free_r+0x152>
 800c0b6:	2101      	movs	r1, #1
 800c0b8:	1092      	asrs	r2, r2, #2
 800c0ba:	fa01 f202 	lsl.w	r2, r1, r2
 800c0be:	6879      	ldr	r1, [r7, #4]
 800c0c0:	4311      	orrs	r1, r2
 800c0c2:	6079      	str	r1, [r7, #4]
 800c0c4:	4631      	mov	r1, r6
 800c0c6:	e008      	b.n	800c0da <_free_r+0x15e>
 800c0c8:	6889      	ldr	r1, [r1, #8]
 800c0ca:	428e      	cmp	r6, r1
 800c0cc:	d004      	beq.n	800c0d8 <_free_r+0x15c>
 800c0ce:	684a      	ldr	r2, [r1, #4]
 800c0d0:	f022 0203 	bic.w	r2, r2, #3
 800c0d4:	4290      	cmp	r0, r2
 800c0d6:	d3f7      	bcc.n	800c0c8 <_free_r+0x14c>
 800c0d8:	68ce      	ldr	r6, [r1, #12]
 800c0da:	60de      	str	r6, [r3, #12]
 800c0dc:	6099      	str	r1, [r3, #8]
 800c0de:	60b3      	str	r3, [r6, #8]
 800c0e0:	60cb      	str	r3, [r1, #12]
 800c0e2:	e77b      	b.n	800bfdc <_free_r+0x60>
 800c0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e8:	2000015c 	.word	0x2000015c
 800c0ec:	20000564 	.word	0x20000564
 800c0f0:	200008f0 	.word	0x200008f0
 800c0f4:	20000164 	.word	0x20000164

0800c0f8 <_localeconv_r>:
 800c0f8:	4800      	ldr	r0, [pc, #0]	; (800c0fc <_localeconv_r+0x4>)
 800c0fa:	4770      	bx	lr
 800c0fc:	20000664 	.word	0x20000664

0800c100 <_Balloc>:
 800c100:	b570      	push	{r4, r5, r6, lr}
 800c102:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c104:	4604      	mov	r4, r0
 800c106:	460e      	mov	r6, r1
 800c108:	b93d      	cbnz	r5, 800c11a <_Balloc+0x1a>
 800c10a:	2010      	movs	r0, #16
 800c10c:	f7fd fde0 	bl	8009cd0 <malloc>
 800c110:	6260      	str	r0, [r4, #36]	; 0x24
 800c112:	6045      	str	r5, [r0, #4]
 800c114:	6085      	str	r5, [r0, #8]
 800c116:	6005      	str	r5, [r0, #0]
 800c118:	60c5      	str	r5, [r0, #12]
 800c11a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c11c:	68eb      	ldr	r3, [r5, #12]
 800c11e:	b143      	cbz	r3, 800c132 <_Balloc+0x32>
 800c120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c128:	b178      	cbz	r0, 800c14a <_Balloc+0x4a>
 800c12a:	6802      	ldr	r2, [r0, #0]
 800c12c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c130:	e017      	b.n	800c162 <_Balloc+0x62>
 800c132:	2221      	movs	r2, #33	; 0x21
 800c134:	2104      	movs	r1, #4
 800c136:	4620      	mov	r0, r4
 800c138:	f000 fb37 	bl	800c7aa <_calloc_r>
 800c13c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c13e:	60e8      	str	r0, [r5, #12]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1ec      	bne.n	800c120 <_Balloc+0x20>
 800c146:	2000      	movs	r0, #0
 800c148:	bd70      	pop	{r4, r5, r6, pc}
 800c14a:	2101      	movs	r1, #1
 800c14c:	fa01 f506 	lsl.w	r5, r1, r6
 800c150:	1d6a      	adds	r2, r5, #5
 800c152:	0092      	lsls	r2, r2, #2
 800c154:	4620      	mov	r0, r4
 800c156:	f000 fb28 	bl	800c7aa <_calloc_r>
 800c15a:	2800      	cmp	r0, #0
 800c15c:	d0f3      	beq.n	800c146 <_Balloc+0x46>
 800c15e:	6046      	str	r6, [r0, #4]
 800c160:	6085      	str	r5, [r0, #8]
 800c162:	2300      	movs	r3, #0
 800c164:	6103      	str	r3, [r0, #16]
 800c166:	60c3      	str	r3, [r0, #12]
 800c168:	bd70      	pop	{r4, r5, r6, pc}

0800c16a <_Bfree>:
 800c16a:	b570      	push	{r4, r5, r6, lr}
 800c16c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c16e:	4606      	mov	r6, r0
 800c170:	460d      	mov	r5, r1
 800c172:	b93c      	cbnz	r4, 800c184 <_Bfree+0x1a>
 800c174:	2010      	movs	r0, #16
 800c176:	f7fd fdab 	bl	8009cd0 <malloc>
 800c17a:	6270      	str	r0, [r6, #36]	; 0x24
 800c17c:	6044      	str	r4, [r0, #4]
 800c17e:	6084      	str	r4, [r0, #8]
 800c180:	6004      	str	r4, [r0, #0]
 800c182:	60c4      	str	r4, [r0, #12]
 800c184:	b13d      	cbz	r5, 800c196 <_Bfree+0x2c>
 800c186:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c188:	686a      	ldr	r2, [r5, #4]
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c190:	6029      	str	r1, [r5, #0]
 800c192:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c196:	bd70      	pop	{r4, r5, r6, pc}

0800c198 <__multadd>:
 800c198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c19c:	690d      	ldr	r5, [r1, #16]
 800c19e:	461f      	mov	r7, r3
 800c1a0:	4606      	mov	r6, r0
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	f101 0e14 	add.w	lr, r1, #20
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	f8de 0000 	ldr.w	r0, [lr]
 800c1ae:	b281      	uxth	r1, r0
 800c1b0:	fb02 7101 	mla	r1, r2, r1, r7
 800c1b4:	0c0f      	lsrs	r7, r1, #16
 800c1b6:	0c00      	lsrs	r0, r0, #16
 800c1b8:	fb02 7000 	mla	r0, r2, r0, r7
 800c1bc:	b289      	uxth	r1, r1
 800c1be:	3301      	adds	r3, #1
 800c1c0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c1c4:	429d      	cmp	r5, r3
 800c1c6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c1ca:	f84e 1b04 	str.w	r1, [lr], #4
 800c1ce:	dcec      	bgt.n	800c1aa <__multadd+0x12>
 800c1d0:	b1d7      	cbz	r7, 800c208 <__multadd+0x70>
 800c1d2:	68a3      	ldr	r3, [r4, #8]
 800c1d4:	429d      	cmp	r5, r3
 800c1d6:	db12      	blt.n	800c1fe <__multadd+0x66>
 800c1d8:	6861      	ldr	r1, [r4, #4]
 800c1da:	4630      	mov	r0, r6
 800c1dc:	3101      	adds	r1, #1
 800c1de:	f7ff ff8f 	bl	800c100 <_Balloc>
 800c1e2:	6922      	ldr	r2, [r4, #16]
 800c1e4:	3202      	adds	r2, #2
 800c1e6:	f104 010c 	add.w	r1, r4, #12
 800c1ea:	4680      	mov	r8, r0
 800c1ec:	0092      	lsls	r2, r2, #2
 800c1ee:	300c      	adds	r0, #12
 800c1f0:	f7fd ff9e 	bl	800a130 <memcpy>
 800c1f4:	4621      	mov	r1, r4
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f7ff ffb7 	bl	800c16a <_Bfree>
 800c1fc:	4644      	mov	r4, r8
 800c1fe:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c202:	3501      	adds	r5, #1
 800c204:	615f      	str	r7, [r3, #20]
 800c206:	6125      	str	r5, [r4, #16]
 800c208:	4620      	mov	r0, r4
 800c20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c20e <__hi0bits>:
 800c20e:	0c03      	lsrs	r3, r0, #16
 800c210:	041b      	lsls	r3, r3, #16
 800c212:	b913      	cbnz	r3, 800c21a <__hi0bits+0xc>
 800c214:	0400      	lsls	r0, r0, #16
 800c216:	2310      	movs	r3, #16
 800c218:	e000      	b.n	800c21c <__hi0bits+0xe>
 800c21a:	2300      	movs	r3, #0
 800c21c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c220:	bf04      	itt	eq
 800c222:	0200      	lsleq	r0, r0, #8
 800c224:	3308      	addeq	r3, #8
 800c226:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c22a:	bf04      	itt	eq
 800c22c:	0100      	lsleq	r0, r0, #4
 800c22e:	3304      	addeq	r3, #4
 800c230:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c234:	bf04      	itt	eq
 800c236:	0080      	lsleq	r0, r0, #2
 800c238:	3302      	addeq	r3, #2
 800c23a:	2800      	cmp	r0, #0
 800c23c:	db03      	blt.n	800c246 <__hi0bits+0x38>
 800c23e:	0042      	lsls	r2, r0, #1
 800c240:	d503      	bpl.n	800c24a <__hi0bits+0x3c>
 800c242:	1c58      	adds	r0, r3, #1
 800c244:	4770      	bx	lr
 800c246:	4618      	mov	r0, r3
 800c248:	4770      	bx	lr
 800c24a:	2020      	movs	r0, #32
 800c24c:	4770      	bx	lr

0800c24e <__lo0bits>:
 800c24e:	6803      	ldr	r3, [r0, #0]
 800c250:	f013 0207 	ands.w	r2, r3, #7
 800c254:	d00b      	beq.n	800c26e <__lo0bits+0x20>
 800c256:	07d9      	lsls	r1, r3, #31
 800c258:	d422      	bmi.n	800c2a0 <__lo0bits+0x52>
 800c25a:	079a      	lsls	r2, r3, #30
 800c25c:	bf4b      	itete	mi
 800c25e:	085b      	lsrmi	r3, r3, #1
 800c260:	089b      	lsrpl	r3, r3, #2
 800c262:	6003      	strmi	r3, [r0, #0]
 800c264:	6003      	strpl	r3, [r0, #0]
 800c266:	bf4c      	ite	mi
 800c268:	2001      	movmi	r0, #1
 800c26a:	2002      	movpl	r0, #2
 800c26c:	4770      	bx	lr
 800c26e:	b299      	uxth	r1, r3
 800c270:	b909      	cbnz	r1, 800c276 <__lo0bits+0x28>
 800c272:	0c1b      	lsrs	r3, r3, #16
 800c274:	2210      	movs	r2, #16
 800c276:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c27a:	bf04      	itt	eq
 800c27c:	0a1b      	lsreq	r3, r3, #8
 800c27e:	3208      	addeq	r2, #8
 800c280:	0719      	lsls	r1, r3, #28
 800c282:	bf04      	itt	eq
 800c284:	091b      	lsreq	r3, r3, #4
 800c286:	3204      	addeq	r2, #4
 800c288:	0799      	lsls	r1, r3, #30
 800c28a:	bf04      	itt	eq
 800c28c:	089b      	lsreq	r3, r3, #2
 800c28e:	3202      	addeq	r2, #2
 800c290:	07d9      	lsls	r1, r3, #31
 800c292:	d402      	bmi.n	800c29a <__lo0bits+0x4c>
 800c294:	085b      	lsrs	r3, r3, #1
 800c296:	d005      	beq.n	800c2a4 <__lo0bits+0x56>
 800c298:	3201      	adds	r2, #1
 800c29a:	6003      	str	r3, [r0, #0]
 800c29c:	4610      	mov	r0, r2
 800c29e:	4770      	bx	lr
 800c2a0:	2000      	movs	r0, #0
 800c2a2:	4770      	bx	lr
 800c2a4:	2020      	movs	r0, #32
 800c2a6:	4770      	bx	lr

0800c2a8 <__i2b>:
 800c2a8:	b510      	push	{r4, lr}
 800c2aa:	460c      	mov	r4, r1
 800c2ac:	2101      	movs	r1, #1
 800c2ae:	f7ff ff27 	bl	800c100 <_Balloc>
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	6144      	str	r4, [r0, #20]
 800c2b6:	6102      	str	r2, [r0, #16]
 800c2b8:	bd10      	pop	{r4, pc}

0800c2ba <__multiply>:
 800c2ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2be:	4614      	mov	r4, r2
 800c2c0:	690a      	ldr	r2, [r1, #16]
 800c2c2:	6923      	ldr	r3, [r4, #16]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	bfb8      	it	lt
 800c2c8:	460b      	movlt	r3, r1
 800c2ca:	4688      	mov	r8, r1
 800c2cc:	bfbc      	itt	lt
 800c2ce:	46a0      	movlt	r8, r4
 800c2d0:	461c      	movlt	r4, r3
 800c2d2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c2d6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c2da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c2de:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c2e2:	eb07 0609 	add.w	r6, r7, r9
 800c2e6:	429e      	cmp	r6, r3
 800c2e8:	bfc8      	it	gt
 800c2ea:	3101      	addgt	r1, #1
 800c2ec:	f7ff ff08 	bl	800c100 <_Balloc>
 800c2f0:	f100 0514 	add.w	r5, r0, #20
 800c2f4:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800c2f8:	462b      	mov	r3, r5
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	4563      	cmp	r3, ip
 800c2fe:	d202      	bcs.n	800c306 <__multiply+0x4c>
 800c300:	f843 2b04 	str.w	r2, [r3], #4
 800c304:	e7fa      	b.n	800c2fc <__multiply+0x42>
 800c306:	f104 0214 	add.w	r2, r4, #20
 800c30a:	f108 0114 	add.w	r1, r8, #20
 800c30e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c312:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	9b00      	ldr	r3, [sp, #0]
 800c31a:	9201      	str	r2, [sp, #4]
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d957      	bls.n	800c3d0 <__multiply+0x116>
 800c320:	f8b2 b000 	ldrh.w	fp, [r2]
 800c324:	f1bb 0f00 	cmp.w	fp, #0
 800c328:	d023      	beq.n	800c372 <__multiply+0xb8>
 800c32a:	4689      	mov	r9, r1
 800c32c:	46ae      	mov	lr, r5
 800c32e:	f04f 0800 	mov.w	r8, #0
 800c332:	f859 4b04 	ldr.w	r4, [r9], #4
 800c336:	f8be a000 	ldrh.w	sl, [lr]
 800c33a:	b2a3      	uxth	r3, r4
 800c33c:	fb0b a303 	mla	r3, fp, r3, sl
 800c340:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c344:	f8de 4000 	ldr.w	r4, [lr]
 800c348:	4443      	add	r3, r8
 800c34a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c34e:	fb0b 840a 	mla	r4, fp, sl, r8
 800c352:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c356:	46f2      	mov	sl, lr
 800c358:	b29b      	uxth	r3, r3
 800c35a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c35e:	454f      	cmp	r7, r9
 800c360:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c364:	f84a 3b04 	str.w	r3, [sl], #4
 800c368:	d901      	bls.n	800c36e <__multiply+0xb4>
 800c36a:	46d6      	mov	lr, sl
 800c36c:	e7e1      	b.n	800c332 <__multiply+0x78>
 800c36e:	f8ce 8004 	str.w	r8, [lr, #4]
 800c372:	9b01      	ldr	r3, [sp, #4]
 800c374:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c378:	3204      	adds	r2, #4
 800c37a:	f1ba 0f00 	cmp.w	sl, #0
 800c37e:	d021      	beq.n	800c3c4 <__multiply+0x10a>
 800c380:	682b      	ldr	r3, [r5, #0]
 800c382:	462c      	mov	r4, r5
 800c384:	4689      	mov	r9, r1
 800c386:	f04f 0800 	mov.w	r8, #0
 800c38a:	f8b9 e000 	ldrh.w	lr, [r9]
 800c38e:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800c392:	fb0a be0e 	mla	lr, sl, lr, fp
 800c396:	44f0      	add	r8, lr
 800c398:	46a3      	mov	fp, r4
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800c3a0:	f84b 3b04 	str.w	r3, [fp], #4
 800c3a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c3a8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 800c3ac:	0c1b      	lsrs	r3, r3, #16
 800c3ae:	fb0a e303 	mla	r3, sl, r3, lr
 800c3b2:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 800c3b6:	454f      	cmp	r7, r9
 800c3b8:	ea4f 4813 	mov.w	r8, r3, lsr #16
 800c3bc:	d901      	bls.n	800c3c2 <__multiply+0x108>
 800c3be:	465c      	mov	r4, fp
 800c3c0:	e7e3      	b.n	800c38a <__multiply+0xd0>
 800c3c2:	6063      	str	r3, [r4, #4]
 800c3c4:	3504      	adds	r5, #4
 800c3c6:	e7a7      	b.n	800c318 <__multiply+0x5e>
 800c3c8:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 800c3cc:	b913      	cbnz	r3, 800c3d4 <__multiply+0x11a>
 800c3ce:	3e01      	subs	r6, #1
 800c3d0:	2e00      	cmp	r6, #0
 800c3d2:	dcf9      	bgt.n	800c3c8 <__multiply+0x10e>
 800c3d4:	6106      	str	r6, [r0, #16]
 800c3d6:	b003      	add	sp, #12
 800c3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c3dc <__pow5mult>:
 800c3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3e0:	4615      	mov	r5, r2
 800c3e2:	f012 0203 	ands.w	r2, r2, #3
 800c3e6:	4606      	mov	r6, r0
 800c3e8:	460f      	mov	r7, r1
 800c3ea:	d007      	beq.n	800c3fc <__pow5mult+0x20>
 800c3ec:	3a01      	subs	r2, #1
 800c3ee:	4c21      	ldr	r4, [pc, #132]	; (800c474 <__pow5mult+0x98>)
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3f6:	f7ff fecf 	bl	800c198 <__multadd>
 800c3fa:	4607      	mov	r7, r0
 800c3fc:	10ad      	asrs	r5, r5, #2
 800c3fe:	d036      	beq.n	800c46e <__pow5mult+0x92>
 800c400:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c402:	b93c      	cbnz	r4, 800c414 <__pow5mult+0x38>
 800c404:	2010      	movs	r0, #16
 800c406:	f7fd fc63 	bl	8009cd0 <malloc>
 800c40a:	6270      	str	r0, [r6, #36]	; 0x24
 800c40c:	6044      	str	r4, [r0, #4]
 800c40e:	6084      	str	r4, [r0, #8]
 800c410:	6004      	str	r4, [r0, #0]
 800c412:	60c4      	str	r4, [r0, #12]
 800c414:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c418:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c41c:	b94c      	cbnz	r4, 800c432 <__pow5mult+0x56>
 800c41e:	f240 2171 	movw	r1, #625	; 0x271
 800c422:	4630      	mov	r0, r6
 800c424:	f7ff ff40 	bl	800c2a8 <__i2b>
 800c428:	2300      	movs	r3, #0
 800c42a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c42e:	4604      	mov	r4, r0
 800c430:	6003      	str	r3, [r0, #0]
 800c432:	f04f 0800 	mov.w	r8, #0
 800c436:	07eb      	lsls	r3, r5, #31
 800c438:	d50a      	bpl.n	800c450 <__pow5mult+0x74>
 800c43a:	4639      	mov	r1, r7
 800c43c:	4622      	mov	r2, r4
 800c43e:	4630      	mov	r0, r6
 800c440:	f7ff ff3b 	bl	800c2ba <__multiply>
 800c444:	4639      	mov	r1, r7
 800c446:	4681      	mov	r9, r0
 800c448:	4630      	mov	r0, r6
 800c44a:	f7ff fe8e 	bl	800c16a <_Bfree>
 800c44e:	464f      	mov	r7, r9
 800c450:	106d      	asrs	r5, r5, #1
 800c452:	d00c      	beq.n	800c46e <__pow5mult+0x92>
 800c454:	6820      	ldr	r0, [r4, #0]
 800c456:	b108      	cbz	r0, 800c45c <__pow5mult+0x80>
 800c458:	4604      	mov	r4, r0
 800c45a:	e7ec      	b.n	800c436 <__pow5mult+0x5a>
 800c45c:	4622      	mov	r2, r4
 800c45e:	4621      	mov	r1, r4
 800c460:	4630      	mov	r0, r6
 800c462:	f7ff ff2a 	bl	800c2ba <__multiply>
 800c466:	6020      	str	r0, [r4, #0]
 800c468:	f8c0 8000 	str.w	r8, [r0]
 800c46c:	e7f4      	b.n	800c458 <__pow5mult+0x7c>
 800c46e:	4638      	mov	r0, r7
 800c470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c474:	0800ced8 	.word	0x0800ced8

0800c478 <__lshift>:
 800c478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c47c:	460c      	mov	r4, r1
 800c47e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c482:	6926      	ldr	r6, [r4, #16]
 800c484:	6849      	ldr	r1, [r1, #4]
 800c486:	68a3      	ldr	r3, [r4, #8]
 800c488:	4456      	add	r6, sl
 800c48a:	4607      	mov	r7, r0
 800c48c:	4691      	mov	r9, r2
 800c48e:	1c75      	adds	r5, r6, #1
 800c490:	42ab      	cmp	r3, r5
 800c492:	da02      	bge.n	800c49a <__lshift+0x22>
 800c494:	3101      	adds	r1, #1
 800c496:	005b      	lsls	r3, r3, #1
 800c498:	e7fa      	b.n	800c490 <__lshift+0x18>
 800c49a:	4638      	mov	r0, r7
 800c49c:	f7ff fe30 	bl	800c100 <_Balloc>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	4680      	mov	r8, r0
 800c4a4:	f100 0114 	add.w	r1, r0, #20
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	4553      	cmp	r3, sl
 800c4ac:	da03      	bge.n	800c4b6 <__lshift+0x3e>
 800c4ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	e7f9      	b.n	800c4aa <__lshift+0x32>
 800c4b6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800c4ba:	6920      	ldr	r0, [r4, #16]
 800c4bc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c4c0:	f019 091f 	ands.w	r9, r9, #31
 800c4c4:	f104 0114 	add.w	r1, r4, #20
 800c4c8:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800c4cc:	d014      	beq.n	800c4f8 <__lshift+0x80>
 800c4ce:	f1c9 0c20 	rsb	ip, r9, #32
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	6808      	ldr	r0, [r1, #0]
 800c4d6:	fa00 f009 	lsl.w	r0, r0, r9
 800c4da:	4302      	orrs	r2, r0
 800c4dc:	469a      	mov	sl, r3
 800c4de:	f843 2b04 	str.w	r2, [r3], #4
 800c4e2:	f851 2b04 	ldr.w	r2, [r1], #4
 800c4e6:	458e      	cmp	lr, r1
 800c4e8:	fa22 f20c 	lsr.w	r2, r2, ip
 800c4ec:	d8f2      	bhi.n	800c4d4 <__lshift+0x5c>
 800c4ee:	f8ca 2004 	str.w	r2, [sl, #4]
 800c4f2:	b142      	cbz	r2, 800c506 <__lshift+0x8e>
 800c4f4:	1cb5      	adds	r5, r6, #2
 800c4f6:	e006      	b.n	800c506 <__lshift+0x8e>
 800c4f8:	3b04      	subs	r3, #4
 800c4fa:	f851 2b04 	ldr.w	r2, [r1], #4
 800c4fe:	f843 2f04 	str.w	r2, [r3, #4]!
 800c502:	458e      	cmp	lr, r1
 800c504:	d8f9      	bhi.n	800c4fa <__lshift+0x82>
 800c506:	3d01      	subs	r5, #1
 800c508:	4638      	mov	r0, r7
 800c50a:	f8c8 5010 	str.w	r5, [r8, #16]
 800c50e:	4621      	mov	r1, r4
 800c510:	f7ff fe2b 	bl	800c16a <_Bfree>
 800c514:	4640      	mov	r0, r8
 800c516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c51a <__mcmp>:
 800c51a:	6903      	ldr	r3, [r0, #16]
 800c51c:	690a      	ldr	r2, [r1, #16]
 800c51e:	1a9b      	subs	r3, r3, r2
 800c520:	b510      	push	{r4, lr}
 800c522:	d111      	bne.n	800c548 <__mcmp+0x2e>
 800c524:	0092      	lsls	r2, r2, #2
 800c526:	3014      	adds	r0, #20
 800c528:	3114      	adds	r1, #20
 800c52a:	1883      	adds	r3, r0, r2
 800c52c:	440a      	add	r2, r1
 800c52e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800c532:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c536:	428c      	cmp	r4, r1
 800c538:	d002      	beq.n	800c540 <__mcmp+0x26>
 800c53a:	d307      	bcc.n	800c54c <__mcmp+0x32>
 800c53c:	2001      	movs	r0, #1
 800c53e:	bd10      	pop	{r4, pc}
 800c540:	4298      	cmp	r0, r3
 800c542:	d3f4      	bcc.n	800c52e <__mcmp+0x14>
 800c544:	2000      	movs	r0, #0
 800c546:	bd10      	pop	{r4, pc}
 800c548:	4618      	mov	r0, r3
 800c54a:	bd10      	pop	{r4, pc}
 800c54c:	f04f 30ff 	mov.w	r0, #4294967295
 800c550:	bd10      	pop	{r4, pc}

0800c552 <__mdiff>:
 800c552:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c556:	460c      	mov	r4, r1
 800c558:	4607      	mov	r7, r0
 800c55a:	4611      	mov	r1, r2
 800c55c:	4620      	mov	r0, r4
 800c55e:	4615      	mov	r5, r2
 800c560:	f7ff ffdb 	bl	800c51a <__mcmp>
 800c564:	1e06      	subs	r6, r0, #0
 800c566:	d108      	bne.n	800c57a <__mdiff+0x28>
 800c568:	4631      	mov	r1, r6
 800c56a:	4638      	mov	r0, r7
 800c56c:	f7ff fdc8 	bl	800c100 <_Balloc>
 800c570:	2301      	movs	r3, #1
 800c572:	6103      	str	r3, [r0, #16]
 800c574:	6146      	str	r6, [r0, #20]
 800c576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c57a:	bfbc      	itt	lt
 800c57c:	4623      	movlt	r3, r4
 800c57e:	462c      	movlt	r4, r5
 800c580:	4638      	mov	r0, r7
 800c582:	6861      	ldr	r1, [r4, #4]
 800c584:	bfba      	itte	lt
 800c586:	461d      	movlt	r5, r3
 800c588:	2601      	movlt	r6, #1
 800c58a:	2600      	movge	r6, #0
 800c58c:	f7ff fdb8 	bl	800c100 <_Balloc>
 800c590:	692b      	ldr	r3, [r5, #16]
 800c592:	60c6      	str	r6, [r0, #12]
 800c594:	6926      	ldr	r6, [r4, #16]
 800c596:	f105 0914 	add.w	r9, r5, #20
 800c59a:	3414      	adds	r4, #20
 800c59c:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800c5a0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c5a4:	f100 0514 	add.w	r5, r0, #20
 800c5a8:	f04f 0c00 	mov.w	ip, #0
 800c5ac:	f854 3b04 	ldr.w	r3, [r4], #4
 800c5b0:	f859 2b04 	ldr.w	r2, [r9], #4
 800c5b4:	fa1c f183 	uxtah	r1, ip, r3
 800c5b8:	fa1f fe82 	uxth.w	lr, r2
 800c5bc:	0c12      	lsrs	r2, r2, #16
 800c5be:	ebce 0101 	rsb	r1, lr, r1
 800c5c2:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800c5c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c5ca:	b289      	uxth	r1, r1
 800c5cc:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c5d0:	45c8      	cmp	r8, r9
 800c5d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c5d6:	46a6      	mov	lr, r4
 800c5d8:	f845 3b04 	str.w	r3, [r5], #4
 800c5dc:	d8e6      	bhi.n	800c5ac <__mdiff+0x5a>
 800c5de:	45be      	cmp	lr, r7
 800c5e0:	d20e      	bcs.n	800c600 <__mdiff+0xae>
 800c5e2:	f85e 1b04 	ldr.w	r1, [lr], #4
 800c5e6:	fa1c f281 	uxtah	r2, ip, r1
 800c5ea:	1413      	asrs	r3, r2, #16
 800c5ec:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800c5f0:	b292      	uxth	r2, r2
 800c5f2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c5f6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c5fa:	f845 2b04 	str.w	r2, [r5], #4
 800c5fe:	e7ee      	b.n	800c5de <__mdiff+0x8c>
 800c600:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c604:	b90b      	cbnz	r3, 800c60a <__mdiff+0xb8>
 800c606:	3e01      	subs	r6, #1
 800c608:	e7fa      	b.n	800c600 <__mdiff+0xae>
 800c60a:	6106      	str	r6, [r0, #16]
 800c60c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c610 <__d2b>:
 800c610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c614:	460e      	mov	r6, r1
 800c616:	2101      	movs	r1, #1
 800c618:	ec59 8b10 	vmov	r8, r9, d0
 800c61c:	4615      	mov	r5, r2
 800c61e:	f7ff fd6f 	bl	800c100 <_Balloc>
 800c622:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c626:	4607      	mov	r7, r0
 800c628:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c62c:	b10c      	cbz	r4, 800c632 <__d2b+0x22>
 800c62e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c632:	9301      	str	r3, [sp, #4]
 800c634:	f1b8 0f00 	cmp.w	r8, #0
 800c638:	d019      	beq.n	800c66e <__d2b+0x5e>
 800c63a:	a802      	add	r0, sp, #8
 800c63c:	f840 8d08 	str.w	r8, [r0, #-8]!
 800c640:	f7ff fe05 	bl	800c24e <__lo0bits>
 800c644:	9b00      	ldr	r3, [sp, #0]
 800c646:	b148      	cbz	r0, 800c65c <__d2b+0x4c>
 800c648:	9a01      	ldr	r2, [sp, #4]
 800c64a:	f1c0 0120 	rsb	r1, r0, #32
 800c64e:	fa02 f101 	lsl.w	r1, r2, r1
 800c652:	430b      	orrs	r3, r1
 800c654:	40c2      	lsrs	r2, r0
 800c656:	617b      	str	r3, [r7, #20]
 800c658:	9201      	str	r2, [sp, #4]
 800c65a:	e000      	b.n	800c65e <__d2b+0x4e>
 800c65c:	617b      	str	r3, [r7, #20]
 800c65e:	9b01      	ldr	r3, [sp, #4]
 800c660:	61bb      	str	r3, [r7, #24]
 800c662:	2b00      	cmp	r3, #0
 800c664:	bf14      	ite	ne
 800c666:	2102      	movne	r1, #2
 800c668:	2101      	moveq	r1, #1
 800c66a:	6139      	str	r1, [r7, #16]
 800c66c:	e007      	b.n	800c67e <__d2b+0x6e>
 800c66e:	a801      	add	r0, sp, #4
 800c670:	f7ff fded 	bl	800c24e <__lo0bits>
 800c674:	9b01      	ldr	r3, [sp, #4]
 800c676:	617b      	str	r3, [r7, #20]
 800c678:	2101      	movs	r1, #1
 800c67a:	6139      	str	r1, [r7, #16]
 800c67c:	3020      	adds	r0, #32
 800c67e:	b134      	cbz	r4, 800c68e <__d2b+0x7e>
 800c680:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c684:	4404      	add	r4, r0
 800c686:	6034      	str	r4, [r6, #0]
 800c688:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c68c:	e009      	b.n	800c6a2 <__d2b+0x92>
 800c68e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c692:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c696:	6030      	str	r0, [r6, #0]
 800c698:	6918      	ldr	r0, [r3, #16]
 800c69a:	f7ff fdb8 	bl	800c20e <__hi0bits>
 800c69e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c6a2:	6028      	str	r0, [r5, #0]
 800c6a4:	4638      	mov	r0, r7
 800c6a6:	b003      	add	sp, #12
 800c6a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c6ac <__ssprint_r>:
 800c6ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b0:	4693      	mov	fp, r2
 800c6b2:	6892      	ldr	r2, [r2, #8]
 800c6b4:	4681      	mov	r9, r0
 800c6b6:	460c      	mov	r4, r1
 800c6b8:	b34a      	cbz	r2, 800c70e <__ssprint_r+0x62>
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	f8db a000 	ldr.w	sl, [fp]
 800c6c0:	9301      	str	r3, [sp, #4]
 800c6c2:	461f      	mov	r7, r3
 800c6c4:	e006      	b.n	800c6d4 <__ssprint_r+0x28>
 800c6c6:	f8da 3000 	ldr.w	r3, [sl]
 800c6ca:	f8da 7004 	ldr.w	r7, [sl, #4]
 800c6ce:	9301      	str	r3, [sp, #4]
 800c6d0:	f10a 0a08 	add.w	sl, sl, #8
 800c6d4:	2f00      	cmp	r7, #0
 800c6d6:	d0f6      	beq.n	800c6c6 <__ssprint_r+0x1a>
 800c6d8:	68a6      	ldr	r6, [r4, #8]
 800c6da:	42b7      	cmp	r7, r6
 800c6dc:	d360      	bcc.n	800c7a0 <__ssprint_r+0xf4>
 800c6de:	89a0      	ldrh	r0, [r4, #12]
 800c6e0:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800c6e4:	d117      	bne.n	800c716 <__ssprint_r+0x6a>
 800c6e6:	42b7      	cmp	r7, r6
 800c6e8:	d35a      	bcc.n	800c7a0 <__ssprint_r+0xf4>
 800c6ea:	4632      	mov	r2, r6
 800c6ec:	9901      	ldr	r1, [sp, #4]
 800c6ee:	6820      	ldr	r0, [r4, #0]
 800c6f0:	f000 f888 	bl	800c804 <memmove>
 800c6f4:	68a2      	ldr	r2, [r4, #8]
 800c6f6:	1b92      	subs	r2, r2, r6
 800c6f8:	60a2      	str	r2, [r4, #8]
 800c6fa:	6822      	ldr	r2, [r4, #0]
 800c6fc:	4416      	add	r6, r2
 800c6fe:	f8db 2008 	ldr.w	r2, [fp, #8]
 800c702:	6026      	str	r6, [r4, #0]
 800c704:	1bd7      	subs	r7, r2, r7
 800c706:	f8cb 7008 	str.w	r7, [fp, #8]
 800c70a:	2f00      	cmp	r7, #0
 800c70c:	d1db      	bne.n	800c6c6 <__ssprint_r+0x1a>
 800c70e:	2000      	movs	r0, #0
 800c710:	f8cb 0004 	str.w	r0, [fp, #4]
 800c714:	e046      	b.n	800c7a4 <__ssprint_r+0xf8>
 800c716:	6825      	ldr	r5, [r4, #0]
 800c718:	6921      	ldr	r1, [r4, #16]
 800c71a:	ebc1 0805 	rsb	r8, r1, r5
 800c71e:	f108 0201 	add.w	r2, r8, #1
 800c722:	6965      	ldr	r5, [r4, #20]
 800c724:	443a      	add	r2, r7
 800c726:	2302      	movs	r3, #2
 800c728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c72c:	fb95 f5f3 	sdiv	r5, r5, r3
 800c730:	4295      	cmp	r5, r2
 800c732:	bf38      	it	cc
 800c734:	4615      	movcc	r5, r2
 800c736:	0543      	lsls	r3, r0, #21
 800c738:	d510      	bpl.n	800c75c <__ssprint_r+0xb0>
 800c73a:	4629      	mov	r1, r5
 800c73c:	4648      	mov	r0, r9
 800c73e:	f7fd fad7 	bl	8009cf0 <_malloc_r>
 800c742:	4606      	mov	r6, r0
 800c744:	b1a0      	cbz	r0, 800c770 <__ssprint_r+0xc4>
 800c746:	4642      	mov	r2, r8
 800c748:	6921      	ldr	r1, [r4, #16]
 800c74a:	f7fd fcf1 	bl	800a130 <memcpy>
 800c74e:	89a2      	ldrh	r2, [r4, #12]
 800c750:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c754:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c758:	81a2      	strh	r2, [r4, #12]
 800c75a:	e018      	b.n	800c78e <__ssprint_r+0xe2>
 800c75c:	462a      	mov	r2, r5
 800c75e:	4648      	mov	r0, r9
 800c760:	f000 f86c 	bl	800c83c <_realloc_r>
 800c764:	4606      	mov	r6, r0
 800c766:	b990      	cbnz	r0, 800c78e <__ssprint_r+0xe2>
 800c768:	6921      	ldr	r1, [r4, #16]
 800c76a:	4648      	mov	r0, r9
 800c76c:	f7ff fc06 	bl	800bf7c <_free_r>
 800c770:	220c      	movs	r2, #12
 800c772:	f8c9 2000 	str.w	r2, [r9]
 800c776:	89a2      	ldrh	r2, [r4, #12]
 800c778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c77c:	81a2      	strh	r2, [r4, #12]
 800c77e:	2200      	movs	r2, #0
 800c780:	f8cb 2008 	str.w	r2, [fp, #8]
 800c784:	f8cb 2004 	str.w	r2, [fp, #4]
 800c788:	f04f 30ff 	mov.w	r0, #4294967295
 800c78c:	e00a      	b.n	800c7a4 <__ssprint_r+0xf8>
 800c78e:	6126      	str	r6, [r4, #16]
 800c790:	6165      	str	r5, [r4, #20]
 800c792:	4446      	add	r6, r8
 800c794:	ebc8 0505 	rsb	r5, r8, r5
 800c798:	6026      	str	r6, [r4, #0]
 800c79a:	60a5      	str	r5, [r4, #8]
 800c79c:	463e      	mov	r6, r7
 800c79e:	e7a2      	b.n	800c6e6 <__ssprint_r+0x3a>
 800c7a0:	463e      	mov	r6, r7
 800c7a2:	e7a2      	b.n	800c6ea <__ssprint_r+0x3e>
 800c7a4:	b003      	add	sp, #12
 800c7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7aa <_calloc_r>:
 800c7aa:	b510      	push	{r4, lr}
 800c7ac:	4351      	muls	r1, r2
 800c7ae:	f7fd fa9f 	bl	8009cf0 <_malloc_r>
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	b320      	cbz	r0, 800c800 <_calloc_r+0x56>
 800c7b6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c7ba:	f022 0203 	bic.w	r2, r2, #3
 800c7be:	3a04      	subs	r2, #4
 800c7c0:	2a24      	cmp	r2, #36	; 0x24
 800c7c2:	d81a      	bhi.n	800c7fa <_calloc_r+0x50>
 800c7c4:	2a13      	cmp	r2, #19
 800c7c6:	d912      	bls.n	800c7ee <_calloc_r+0x44>
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	2a1b      	cmp	r2, #27
 800c7cc:	6001      	str	r1, [r0, #0]
 800c7ce:	6041      	str	r1, [r0, #4]
 800c7d0:	d802      	bhi.n	800c7d8 <_calloc_r+0x2e>
 800c7d2:	f100 0308 	add.w	r3, r0, #8
 800c7d6:	e00b      	b.n	800c7f0 <_calloc_r+0x46>
 800c7d8:	2a24      	cmp	r2, #36	; 0x24
 800c7da:	6081      	str	r1, [r0, #8]
 800c7dc:	60c1      	str	r1, [r0, #12]
 800c7de:	bf11      	iteee	ne
 800c7e0:	f100 0310 	addne.w	r3, r0, #16
 800c7e4:	6101      	streq	r1, [r0, #16]
 800c7e6:	f100 0318 	addeq.w	r3, r0, #24
 800c7ea:	6141      	streq	r1, [r0, #20]
 800c7ec:	e000      	b.n	800c7f0 <_calloc_r+0x46>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	601a      	str	r2, [r3, #0]
 800c7f4:	605a      	str	r2, [r3, #4]
 800c7f6:	609a      	str	r2, [r3, #8]
 800c7f8:	e002      	b.n	800c800 <_calloc_r+0x56>
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	f7fd fca3 	bl	800a146 <memset>
 800c800:	4620      	mov	r0, r4
 800c802:	bd10      	pop	{r4, pc}

0800c804 <memmove>:
 800c804:	4288      	cmp	r0, r1
 800c806:	b510      	push	{r4, lr}
 800c808:	eb01 0302 	add.w	r3, r1, r2
 800c80c:	d801      	bhi.n	800c812 <memmove+0xe>
 800c80e:	1e42      	subs	r2, r0, #1
 800c810:	e00b      	b.n	800c82a <memmove+0x26>
 800c812:	4298      	cmp	r0, r3
 800c814:	d2fb      	bcs.n	800c80e <memmove+0xa>
 800c816:	1881      	adds	r1, r0, r2
 800c818:	1ad2      	subs	r2, r2, r3
 800c81a:	42d3      	cmn	r3, r2
 800c81c:	d004      	beq.n	800c828 <memmove+0x24>
 800c81e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c822:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c826:	e7f8      	b.n	800c81a <memmove+0x16>
 800c828:	bd10      	pop	{r4, pc}
 800c82a:	4299      	cmp	r1, r3
 800c82c:	d004      	beq.n	800c838 <memmove+0x34>
 800c82e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c832:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c836:	e7f8      	b.n	800c82a <memmove+0x26>
 800c838:	bd10      	pop	{r4, pc}
	...

0800c83c <_realloc_r>:
 800c83c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c840:	4681      	mov	r9, r0
 800c842:	460c      	mov	r4, r1
 800c844:	b929      	cbnz	r1, 800c852 <_realloc_r+0x16>
 800c846:	4611      	mov	r1, r2
 800c848:	b003      	add	sp, #12
 800c84a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84e:	f7fd ba4f 	b.w	8009cf0 <_malloc_r>
 800c852:	9201      	str	r2, [sp, #4]
 800c854:	f7fd fc7f 	bl	800a156 <__malloc_lock>
 800c858:	9a01      	ldr	r2, [sp, #4]
 800c85a:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800c85e:	f102 080b 	add.w	r8, r2, #11
 800c862:	f1b8 0f16 	cmp.w	r8, #22
 800c866:	f1a4 0b08 	sub.w	fp, r4, #8
 800c86a:	f02e 0503 	bic.w	r5, lr, #3
 800c86e:	d903      	bls.n	800c878 <_realloc_r+0x3c>
 800c870:	f038 0807 	bics.w	r8, r8, #7
 800c874:	d502      	bpl.n	800c87c <_realloc_r+0x40>
 800c876:	e003      	b.n	800c880 <_realloc_r+0x44>
 800c878:	f04f 0810 	mov.w	r8, #16
 800c87c:	4590      	cmp	r8, r2
 800c87e:	d204      	bcs.n	800c88a <_realloc_r+0x4e>
 800c880:	230c      	movs	r3, #12
 800c882:	f8c9 3000 	str.w	r3, [r9]
 800c886:	2000      	movs	r0, #0
 800c888:	e17d      	b.n	800cb86 <_realloc_r+0x34a>
 800c88a:	45a8      	cmp	r8, r5
 800c88c:	f340 8150 	ble.w	800cb30 <_realloc_r+0x2f4>
 800c890:	4ba6      	ldr	r3, [pc, #664]	; (800cb2c <_realloc_r+0x2f0>)
 800c892:	6898      	ldr	r0, [r3, #8]
 800c894:	eb0b 0105 	add.w	r1, fp, r5
 800c898:	4281      	cmp	r1, r0
 800c89a:	684f      	ldr	r7, [r1, #4]
 800c89c:	d005      	beq.n	800c8aa <_realloc_r+0x6e>
 800c89e:	f027 0601 	bic.w	r6, r7, #1
 800c8a2:	440e      	add	r6, r1
 800c8a4:	6876      	ldr	r6, [r6, #4]
 800c8a6:	07f6      	lsls	r6, r6, #31
 800c8a8:	d426      	bmi.n	800c8f8 <_realloc_r+0xbc>
 800c8aa:	f027 0a03 	bic.w	sl, r7, #3
 800c8ae:	4281      	cmp	r1, r0
 800c8b0:	eb05 070a 	add.w	r7, r5, sl
 800c8b4:	d118      	bne.n	800c8e8 <_realloc_r+0xac>
 800c8b6:	f108 0610 	add.w	r6, r8, #16
 800c8ba:	42b7      	cmp	r7, r6
 800c8bc:	db1f      	blt.n	800c8fe <_realloc_r+0xc2>
 800c8be:	eb0b 0008 	add.w	r0, fp, r8
 800c8c2:	ebc8 0707 	rsb	r7, r8, r7
 800c8c6:	f047 0701 	orr.w	r7, r7, #1
 800c8ca:	6098      	str	r0, [r3, #8]
 800c8cc:	6047      	str	r7, [r0, #4]
 800c8ce:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c8d2:	f003 0301 	and.w	r3, r3, #1
 800c8d6:	ea43 0308 	orr.w	r3, r3, r8
 800c8da:	4648      	mov	r0, r9
 800c8dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8e0:	f7fd fc3a 	bl	800a158 <__malloc_unlock>
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	e14e      	b.n	800cb86 <_realloc_r+0x34a>
 800c8e8:	45b8      	cmp	r8, r7
 800c8ea:	dc08      	bgt.n	800c8fe <_realloc_r+0xc2>
 800c8ec:	68cb      	ldr	r3, [r1, #12]
 800c8ee:	688a      	ldr	r2, [r1, #8]
 800c8f0:	463d      	mov	r5, r7
 800c8f2:	60d3      	str	r3, [r2, #12]
 800c8f4:	609a      	str	r2, [r3, #8]
 800c8f6:	e11b      	b.n	800cb30 <_realloc_r+0x2f4>
 800c8f8:	f04f 0a00 	mov.w	sl, #0
 800c8fc:	4651      	mov	r1, sl
 800c8fe:	f01e 0f01 	tst.w	lr, #1
 800c902:	f040 80c3 	bne.w	800ca8c <_realloc_r+0x250>
 800c906:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800c90a:	ebc7 070b 	rsb	r7, r7, fp
 800c90e:	687e      	ldr	r6, [r7, #4]
 800c910:	f026 0603 	bic.w	r6, r6, #3
 800c914:	442e      	add	r6, r5
 800c916:	2900      	cmp	r1, #0
 800c918:	f000 8083 	beq.w	800ca22 <_realloc_r+0x1e6>
 800c91c:	4281      	cmp	r1, r0
 800c91e:	44b2      	add	sl, r6
 800c920:	d147      	bne.n	800c9b2 <_realloc_r+0x176>
 800c922:	f108 0110 	add.w	r1, r8, #16
 800c926:	458a      	cmp	sl, r1
 800c928:	db7b      	blt.n	800ca22 <_realloc_r+0x1e6>
 800c92a:	463e      	mov	r6, r7
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800c932:	60ca      	str	r2, [r1, #12]
 800c934:	6091      	str	r1, [r2, #8]
 800c936:	1f2a      	subs	r2, r5, #4
 800c938:	2a24      	cmp	r2, #36	; 0x24
 800c93a:	d825      	bhi.n	800c988 <_realloc_r+0x14c>
 800c93c:	2a13      	cmp	r2, #19
 800c93e:	d91b      	bls.n	800c978 <_realloc_r+0x13c>
 800c940:	6821      	ldr	r1, [r4, #0]
 800c942:	60b9      	str	r1, [r7, #8]
 800c944:	6861      	ldr	r1, [r4, #4]
 800c946:	60f9      	str	r1, [r7, #12]
 800c948:	2a1b      	cmp	r2, #27
 800c94a:	d803      	bhi.n	800c954 <_realloc_r+0x118>
 800c94c:	f107 0210 	add.w	r2, r7, #16
 800c950:	3408      	adds	r4, #8
 800c952:	e012      	b.n	800c97a <_realloc_r+0x13e>
 800c954:	68a1      	ldr	r1, [r4, #8]
 800c956:	6139      	str	r1, [r7, #16]
 800c958:	68e1      	ldr	r1, [r4, #12]
 800c95a:	6179      	str	r1, [r7, #20]
 800c95c:	2a24      	cmp	r2, #36	; 0x24
 800c95e:	bf01      	itttt	eq
 800c960:	6922      	ldreq	r2, [r4, #16]
 800c962:	61ba      	streq	r2, [r7, #24]
 800c964:	6961      	ldreq	r1, [r4, #20]
 800c966:	61f9      	streq	r1, [r7, #28]
 800c968:	bf19      	ittee	ne
 800c96a:	f107 0218 	addne.w	r2, r7, #24
 800c96e:	3410      	addne	r4, #16
 800c970:	f107 0220 	addeq.w	r2, r7, #32
 800c974:	3418      	addeq	r4, #24
 800c976:	e000      	b.n	800c97a <_realloc_r+0x13e>
 800c978:	4632      	mov	r2, r6
 800c97a:	6821      	ldr	r1, [r4, #0]
 800c97c:	6011      	str	r1, [r2, #0]
 800c97e:	6861      	ldr	r1, [r4, #4]
 800c980:	6051      	str	r1, [r2, #4]
 800c982:	68a1      	ldr	r1, [r4, #8]
 800c984:	6091      	str	r1, [r2, #8]
 800c986:	e005      	b.n	800c994 <_realloc_r+0x158>
 800c988:	4621      	mov	r1, r4
 800c98a:	4630      	mov	r0, r6
 800c98c:	9301      	str	r3, [sp, #4]
 800c98e:	f7ff ff39 	bl	800c804 <memmove>
 800c992:	9b01      	ldr	r3, [sp, #4]
 800c994:	eb07 0208 	add.w	r2, r7, r8
 800c998:	ebc8 0a0a 	rsb	sl, r8, sl
 800c99c:	609a      	str	r2, [r3, #8]
 800c99e:	f04a 0301 	orr.w	r3, sl, #1
 800c9a2:	6053      	str	r3, [r2, #4]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f003 0301 	and.w	r3, r3, #1
 800c9aa:	ea43 0308 	orr.w	r3, r3, r8
 800c9ae:	607b      	str	r3, [r7, #4]
 800c9b0:	e0b6      	b.n	800cb20 <_realloc_r+0x2e4>
 800c9b2:	45d0      	cmp	r8, sl
 800c9b4:	dc35      	bgt.n	800ca22 <_realloc_r+0x1e6>
 800c9b6:	68cb      	ldr	r3, [r1, #12]
 800c9b8:	688a      	ldr	r2, [r1, #8]
 800c9ba:	4638      	mov	r0, r7
 800c9bc:	60d3      	str	r3, [r2, #12]
 800c9be:	609a      	str	r2, [r3, #8]
 800c9c0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	60d3      	str	r3, [r2, #12]
 800c9c8:	609a      	str	r2, [r3, #8]
 800c9ca:	1f2a      	subs	r2, r5, #4
 800c9cc:	2a24      	cmp	r2, #36	; 0x24
 800c9ce:	d823      	bhi.n	800ca18 <_realloc_r+0x1dc>
 800c9d0:	2a13      	cmp	r2, #19
 800c9d2:	d91a      	bls.n	800ca0a <_realloc_r+0x1ce>
 800c9d4:	6823      	ldr	r3, [r4, #0]
 800c9d6:	60bb      	str	r3, [r7, #8]
 800c9d8:	6863      	ldr	r3, [r4, #4]
 800c9da:	60fb      	str	r3, [r7, #12]
 800c9dc:	2a1b      	cmp	r2, #27
 800c9de:	d803      	bhi.n	800c9e8 <_realloc_r+0x1ac>
 800c9e0:	f107 0010 	add.w	r0, r7, #16
 800c9e4:	3408      	adds	r4, #8
 800c9e6:	e010      	b.n	800ca0a <_realloc_r+0x1ce>
 800c9e8:	68a3      	ldr	r3, [r4, #8]
 800c9ea:	613b      	str	r3, [r7, #16]
 800c9ec:	68e3      	ldr	r3, [r4, #12]
 800c9ee:	617b      	str	r3, [r7, #20]
 800c9f0:	2a24      	cmp	r2, #36	; 0x24
 800c9f2:	bf01      	itttt	eq
 800c9f4:	6923      	ldreq	r3, [r4, #16]
 800c9f6:	61bb      	streq	r3, [r7, #24]
 800c9f8:	6963      	ldreq	r3, [r4, #20]
 800c9fa:	61fb      	streq	r3, [r7, #28]
 800c9fc:	bf19      	ittee	ne
 800c9fe:	f107 0018 	addne.w	r0, r7, #24
 800ca02:	3410      	addne	r4, #16
 800ca04:	f107 0020 	addeq.w	r0, r7, #32
 800ca08:	3418      	addeq	r4, #24
 800ca0a:	6823      	ldr	r3, [r4, #0]
 800ca0c:	6003      	str	r3, [r0, #0]
 800ca0e:	6863      	ldr	r3, [r4, #4]
 800ca10:	6043      	str	r3, [r0, #4]
 800ca12:	68a3      	ldr	r3, [r4, #8]
 800ca14:	6083      	str	r3, [r0, #8]
 800ca16:	e002      	b.n	800ca1e <_realloc_r+0x1e2>
 800ca18:	4621      	mov	r1, r4
 800ca1a:	f7ff fef3 	bl	800c804 <memmove>
 800ca1e:	4655      	mov	r5, sl
 800ca20:	e02e      	b.n	800ca80 <_realloc_r+0x244>
 800ca22:	45b0      	cmp	r8, r6
 800ca24:	dc32      	bgt.n	800ca8c <_realloc_r+0x250>
 800ca26:	4638      	mov	r0, r7
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ca2e:	60d3      	str	r3, [r2, #12]
 800ca30:	609a      	str	r2, [r3, #8]
 800ca32:	1f2a      	subs	r2, r5, #4
 800ca34:	2a24      	cmp	r2, #36	; 0x24
 800ca36:	d825      	bhi.n	800ca84 <_realloc_r+0x248>
 800ca38:	2a13      	cmp	r2, #19
 800ca3a:	d91a      	bls.n	800ca72 <_realloc_r+0x236>
 800ca3c:	6823      	ldr	r3, [r4, #0]
 800ca3e:	60bb      	str	r3, [r7, #8]
 800ca40:	6863      	ldr	r3, [r4, #4]
 800ca42:	60fb      	str	r3, [r7, #12]
 800ca44:	2a1b      	cmp	r2, #27
 800ca46:	d803      	bhi.n	800ca50 <_realloc_r+0x214>
 800ca48:	f107 0010 	add.w	r0, r7, #16
 800ca4c:	3408      	adds	r4, #8
 800ca4e:	e010      	b.n	800ca72 <_realloc_r+0x236>
 800ca50:	68a3      	ldr	r3, [r4, #8]
 800ca52:	613b      	str	r3, [r7, #16]
 800ca54:	68e3      	ldr	r3, [r4, #12]
 800ca56:	617b      	str	r3, [r7, #20]
 800ca58:	2a24      	cmp	r2, #36	; 0x24
 800ca5a:	bf01      	itttt	eq
 800ca5c:	6923      	ldreq	r3, [r4, #16]
 800ca5e:	61bb      	streq	r3, [r7, #24]
 800ca60:	6963      	ldreq	r3, [r4, #20]
 800ca62:	61fb      	streq	r3, [r7, #28]
 800ca64:	bf19      	ittee	ne
 800ca66:	f107 0018 	addne.w	r0, r7, #24
 800ca6a:	3410      	addne	r4, #16
 800ca6c:	f107 0020 	addeq.w	r0, r7, #32
 800ca70:	3418      	addeq	r4, #24
 800ca72:	6823      	ldr	r3, [r4, #0]
 800ca74:	6003      	str	r3, [r0, #0]
 800ca76:	6863      	ldr	r3, [r4, #4]
 800ca78:	6043      	str	r3, [r0, #4]
 800ca7a:	68a3      	ldr	r3, [r4, #8]
 800ca7c:	6083      	str	r3, [r0, #8]
 800ca7e:	4635      	mov	r5, r6
 800ca80:	46bb      	mov	fp, r7
 800ca82:	e055      	b.n	800cb30 <_realloc_r+0x2f4>
 800ca84:	4621      	mov	r1, r4
 800ca86:	f7ff febd 	bl	800c804 <memmove>
 800ca8a:	e7f8      	b.n	800ca7e <_realloc_r+0x242>
 800ca8c:	4611      	mov	r1, r2
 800ca8e:	4648      	mov	r0, r9
 800ca90:	f7fd f92e 	bl	8009cf0 <_malloc_r>
 800ca94:	4606      	mov	r6, r0
 800ca96:	2800      	cmp	r0, #0
 800ca98:	d042      	beq.n	800cb20 <_realloc_r+0x2e4>
 800ca9a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ca9e:	f023 0301 	bic.w	r3, r3, #1
 800caa2:	f1a0 0208 	sub.w	r2, r0, #8
 800caa6:	445b      	add	r3, fp
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d105      	bne.n	800cab8 <_realloc_r+0x27c>
 800caac:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800cab0:	f023 0303 	bic.w	r3, r3, #3
 800cab4:	441d      	add	r5, r3
 800cab6:	e03b      	b.n	800cb30 <_realloc_r+0x2f4>
 800cab8:	1f2a      	subs	r2, r5, #4
 800caba:	2a24      	cmp	r2, #36	; 0x24
 800cabc:	d829      	bhi.n	800cb12 <_realloc_r+0x2d6>
 800cabe:	2a13      	cmp	r2, #19
 800cac0:	d91e      	bls.n	800cb00 <_realloc_r+0x2c4>
 800cac2:	6823      	ldr	r3, [r4, #0]
 800cac4:	6003      	str	r3, [r0, #0]
 800cac6:	6863      	ldr	r3, [r4, #4]
 800cac8:	6043      	str	r3, [r0, #4]
 800caca:	2a1b      	cmp	r2, #27
 800cacc:	d804      	bhi.n	800cad8 <_realloc_r+0x29c>
 800cace:	f100 0308 	add.w	r3, r0, #8
 800cad2:	f104 0208 	add.w	r2, r4, #8
 800cad6:	e015      	b.n	800cb04 <_realloc_r+0x2c8>
 800cad8:	68a3      	ldr	r3, [r4, #8]
 800cada:	6083      	str	r3, [r0, #8]
 800cadc:	68e3      	ldr	r3, [r4, #12]
 800cade:	60c3      	str	r3, [r0, #12]
 800cae0:	2a24      	cmp	r2, #36	; 0x24
 800cae2:	bf01      	itttt	eq
 800cae4:	6923      	ldreq	r3, [r4, #16]
 800cae6:	6103      	streq	r3, [r0, #16]
 800cae8:	6961      	ldreq	r1, [r4, #20]
 800caea:	6141      	streq	r1, [r0, #20]
 800caec:	bf19      	ittee	ne
 800caee:	f100 0310 	addne.w	r3, r0, #16
 800caf2:	f104 0210 	addne.w	r2, r4, #16
 800caf6:	f100 0318 	addeq.w	r3, r0, #24
 800cafa:	f104 0218 	addeq.w	r2, r4, #24
 800cafe:	e001      	b.n	800cb04 <_realloc_r+0x2c8>
 800cb00:	4603      	mov	r3, r0
 800cb02:	4622      	mov	r2, r4
 800cb04:	6811      	ldr	r1, [r2, #0]
 800cb06:	6019      	str	r1, [r3, #0]
 800cb08:	6851      	ldr	r1, [r2, #4]
 800cb0a:	6059      	str	r1, [r3, #4]
 800cb0c:	6892      	ldr	r2, [r2, #8]
 800cb0e:	609a      	str	r2, [r3, #8]
 800cb10:	e002      	b.n	800cb18 <_realloc_r+0x2dc>
 800cb12:	4621      	mov	r1, r4
 800cb14:	f7ff fe76 	bl	800c804 <memmove>
 800cb18:	4621      	mov	r1, r4
 800cb1a:	4648      	mov	r0, r9
 800cb1c:	f7ff fa2e 	bl	800bf7c <_free_r>
 800cb20:	4648      	mov	r0, r9
 800cb22:	f7fd fb19 	bl	800a158 <__malloc_unlock>
 800cb26:	4630      	mov	r0, r6
 800cb28:	e02d      	b.n	800cb86 <_realloc_r+0x34a>
 800cb2a:	bf00      	nop
 800cb2c:	2000015c 	.word	0x2000015c
 800cb30:	ebc8 0205 	rsb	r2, r8, r5
 800cb34:	2a0f      	cmp	r2, #15
 800cb36:	f8db 3004 	ldr.w	r3, [fp, #4]
 800cb3a:	d914      	bls.n	800cb66 <_realloc_r+0x32a>
 800cb3c:	f003 0301 	and.w	r3, r3, #1
 800cb40:	eb0b 0108 	add.w	r1, fp, r8
 800cb44:	ea43 0308 	orr.w	r3, r3, r8
 800cb48:	f8cb 3004 	str.w	r3, [fp, #4]
 800cb4c:	f042 0301 	orr.w	r3, r2, #1
 800cb50:	440a      	add	r2, r1
 800cb52:	604b      	str	r3, [r1, #4]
 800cb54:	6853      	ldr	r3, [r2, #4]
 800cb56:	f043 0301 	orr.w	r3, r3, #1
 800cb5a:	6053      	str	r3, [r2, #4]
 800cb5c:	3108      	adds	r1, #8
 800cb5e:	4648      	mov	r0, r9
 800cb60:	f7ff fa0c 	bl	800bf7c <_free_r>
 800cb64:	e00a      	b.n	800cb7c <_realloc_r+0x340>
 800cb66:	f003 0301 	and.w	r3, r3, #1
 800cb6a:	432b      	orrs	r3, r5
 800cb6c:	eb0b 0205 	add.w	r2, fp, r5
 800cb70:	f8cb 3004 	str.w	r3, [fp, #4]
 800cb74:	6853      	ldr	r3, [r2, #4]
 800cb76:	f043 0301 	orr.w	r3, r3, #1
 800cb7a:	6053      	str	r3, [r2, #4]
 800cb7c:	4648      	mov	r0, r9
 800cb7e:	f7fd faeb 	bl	800a158 <__malloc_unlock>
 800cb82:	f10b 0008 	add.w	r0, fp, #8
 800cb86:	b003      	add	sp, #12
 800cb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb8c <_sbrk>:
 800cb8c:	4b04      	ldr	r3, [pc, #16]	; (800cba0 <_sbrk+0x14>)
 800cb8e:	6819      	ldr	r1, [r3, #0]
 800cb90:	4602      	mov	r2, r0
 800cb92:	b909      	cbnz	r1, 800cb98 <_sbrk+0xc>
 800cb94:	4903      	ldr	r1, [pc, #12]	; (800cba4 <_sbrk+0x18>)
 800cb96:	6019      	str	r1, [r3, #0]
 800cb98:	6818      	ldr	r0, [r3, #0]
 800cb9a:	4402      	add	r2, r0
 800cb9c:	601a      	str	r2, [r3, #0]
 800cb9e:	4770      	bx	lr
 800cba0:	2000091c 	.word	0x2000091c
 800cba4:	200012b4 	.word	0x200012b4

0800cba8 <_init>:
 800cba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbaa:	bf00      	nop
 800cbac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbae:	bc08      	pop	{r3}
 800cbb0:	469e      	mov	lr, r3
 800cbb2:	4770      	bx	lr

0800cbb4 <_fini>:
 800cbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb6:	bf00      	nop
 800cbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbba:	bc08      	pop	{r3}
 800cbbc:	469e      	mov	lr, r3
 800cbbe:	4770      	bx	lr
