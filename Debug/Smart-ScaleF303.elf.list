
Smart-ScaleF303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b098  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  0800b228  0800b228  0001b228  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b44c  0800b44c  0001b44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b454  0800b454  0001b454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b458  0800b458  0001b458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000694  20000000  0800b45c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020694  2**0
                  CONTENTS
  8 .bss          00000b28  20000694  20000694  00020694  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200011bc  200011bc  00020694  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020694  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000fcb4  00000000  00000000  000206c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002b69  00000000  00000000  00030378  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f18  00000000  00000000  00032ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d80  00000000  00000000  00033e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000739e  00000000  00000000  00034b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000042ec  00000000  00000000  0003bf1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0004020a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000437c  00000000  00000000  00040288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000694 	.word	0x20000694
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b210 	.word	0x0800b210

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000698 	.word	0x20000698
 80001cc:	0800b210 	.word	0x0800b210

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97e 	b.w	8000eb4 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460e      	mov	r6, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9d08      	ldr	r5, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d150      	bne.n	8000c82 <__udivmoddi4+0xb2>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96c      	bls.n	8000cc0 <__udivmoddi4+0xf0>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0420 	rsb	r4, lr, #32
 8000bf4:	fa20 f404 	lsr.w	r4, r0, r4
 8000bf8:	fa01 f60e 	lsl.w	r6, r1, lr
 8000bfc:	ea44 0c06 	orr.w	ip, r4, r6
 8000c00:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c0c:	0c22      	lsrs	r2, r4, #16
 8000c0e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c12:	fa1f f887 	uxth.w	r8, r7
 8000c16:	fb09 c610 	mls	r6, r9, r0, ip
 8000c1a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c1e:	fb00 f308 	mul.w	r3, r0, r8
 8000c22:	42b3      	cmp	r3, r6
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x6a>
 8000c26:	19f6      	adds	r6, r6, r7
 8000c28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2c:	f080 8122 	bcs.w	8000e74 <__udivmoddi4+0x2a4>
 8000c30:	42b3      	cmp	r3, r6
 8000c32:	f240 811f 	bls.w	8000e74 <__udivmoddi4+0x2a4>
 8000c36:	3802      	subs	r0, #2
 8000c38:	443e      	add	r6, r7
 8000c3a:	1af6      	subs	r6, r6, r3
 8000c3c:	b2a2      	uxth	r2, r4
 8000c3e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c42:	fb09 6613 	mls	r6, r9, r3, r6
 8000c46:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c4a:	fb03 f808 	mul.w	r8, r3, r8
 8000c4e:	45a0      	cmp	r8, r4
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x96>
 8000c52:	19e4      	adds	r4, r4, r7
 8000c54:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c58:	f080 810a 	bcs.w	8000e70 <__udivmoddi4+0x2a0>
 8000c5c:	45a0      	cmp	r8, r4
 8000c5e:	f240 8107 	bls.w	8000e70 <__udivmoddi4+0x2a0>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	443c      	add	r4, r7
 8000c66:	ebc8 0404 	rsb	r4, r8, r4
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d062      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c74:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c78:	2300      	movs	r3, #0
 8000c7a:	602c      	str	r4, [r5, #0]
 8000c7c:	606b      	str	r3, [r5, #4]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0xc6>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d055      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000c90:	4608      	mov	r0, r1
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	f040 8090 	bne.w	8000dc0 <__udivmoddi4+0x1f0>
 8000ca0:	42b3      	cmp	r3, r6
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xda>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb66 0603 	sbc.w	r6, r6, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	46b4      	mov	ip, r6
 8000cb4:	2d00      	cmp	r5, #0
 8000cb6:	d040      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cb8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc0:	b912      	cbnz	r2, 8000cc8 <__udivmoddi4+0xf8>
 8000cc2:	2701      	movs	r7, #1
 8000cc4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cc8:	fab7 fe87 	clz	lr, r7
 8000ccc:	f1be 0f00 	cmp.w	lr, #0
 8000cd0:	d135      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd2:	1bf3      	subs	r3, r6, r7
 8000cd4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb08 3610 	mls	r6, r8, r0, r3
 8000ce8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000cec:	fb0c f300 	mul.w	r3, ip, r0
 8000cf0:	42b3      	cmp	r3, r6
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19f6      	adds	r6, r6, r7
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42b3      	cmp	r3, r6
 8000cfe:	f200 80ce 	bhi.w	8000e9e <__udivmoddi4+0x2ce>
 8000d02:	4610      	mov	r0, r2
 8000d04:	1af6      	subs	r6, r6, r3
 8000d06:	b2a2      	uxth	r2, r4
 8000d08:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d0c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d10:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d14:	fb0c fc03 	mul.w	ip, ip, r3
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b5 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	ebcc 0404 	rsb	r4, ip, r4
 8000d30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d34:	e79c      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000d36:	4629      	mov	r1, r5
 8000d38:	4628      	mov	r0, r5
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0120 	rsb	r1, lr, #32
 8000d42:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d4e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d52:	40ce      	lsrs	r6, r1
 8000d54:	ea49 0903 	orr.w	r9, r9, r3
 8000d58:	fbb6 faf8 	udiv	sl, r6, r8
 8000d5c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000d60:	fb08 661a 	mls	r6, r8, sl, r6
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000d6c:	fb0a f20c 	mul.w	r2, sl, ip
 8000d70:	429a      	cmp	r2, r3
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1be>
 8000d78:	19db      	adds	r3, r3, r7
 8000d7a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000d7e:	f080 8087 	bcs.w	8000e90 <__udivmoddi4+0x2c0>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f240 8084 	bls.w	8000e90 <__udivmoddi4+0x2c0>
 8000d88:	f1aa 0a02 	sub.w	sl, sl, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	1a9b      	subs	r3, r3, r2
 8000d90:	fa1f f989 	uxth.w	r9, r9
 8000d94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d98:	fb08 3311 	mls	r3, r8, r1, r3
 8000d9c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000da0:	fb01 f60c 	mul.w	r6, r1, ip
 8000da4:	429e      	cmp	r6, r3
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0x1e8>
 8000da8:	19db      	adds	r3, r3, r7
 8000daa:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dae:	d26b      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000db0:	429e      	cmp	r6, r3
 8000db2:	d969      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000db4:	3902      	subs	r1, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dbe:	e78e      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dc0:	f1c1 0e20 	rsb	lr, r1, #32
 8000dc4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	4323      	orrs	r3, r4
 8000dcc:	fa20 f70e 	lsr.w	r7, r0, lr
 8000dd0:	fa06 f401 	lsl.w	r4, r6, r1
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000ddc:	433c      	orrs	r4, r7
 8000dde:	fbb6 f9fc 	udiv	r9, r6, ip
 8000de2:	0c27      	lsrs	r7, r4, #16
 8000de4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000de8:	fa1f f883 	uxth.w	r8, r3
 8000dec:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000df0:	fb09 f708 	mul.w	r7, r9, r8
 8000df4:	42b7      	cmp	r7, r6
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x242>
 8000e00:	18f6      	adds	r6, r6, r3
 8000e02:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e06:	d241      	bcs.n	8000e8c <__udivmoddi4+0x2bc>
 8000e08:	42b7      	cmp	r7, r6
 8000e0a:	d93f      	bls.n	8000e8c <__udivmoddi4+0x2bc>
 8000e0c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e10:	441e      	add	r6, r3
 8000e12:	1bf6      	subs	r6, r6, r7
 8000e14:	b2a0      	uxth	r0, r4
 8000e16:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e1a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e1e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e22:	fb04 f808 	mul.w	r8, r4, r8
 8000e26:	45b8      	cmp	r8, r7
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x26a>
 8000e2a:	18ff      	adds	r7, r7, r3
 8000e2c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e30:	d228      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d926      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000e36:	3c02      	subs	r4, #2
 8000e38:	441f      	add	r7, r3
 8000e3a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e3e:	ebc8 0707 	rsb	r7, r8, r7
 8000e42:	fba0 8902 	umull	r8, r9, r0, r2
 8000e46:	454f      	cmp	r7, r9
 8000e48:	4644      	mov	r4, r8
 8000e4a:	464e      	mov	r6, r9
 8000e4c:	d314      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000e4e:	d029      	beq.n	8000ea4 <__udivmoddi4+0x2d4>
 8000e50:	b365      	cbz	r5, 8000eac <__udivmoddi4+0x2dc>
 8000e52:	ebba 0304 	subs.w	r3, sl, r4
 8000e56:	eb67 0706 	sbc.w	r7, r7, r6
 8000e5a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	40cf      	lsrs	r7, r1
 8000e62:	ea4e 0303 	orr.w	r3, lr, r3
 8000e66:	e885 0088 	stmia.w	r5, {r3, r7}
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e70:	4613      	mov	r3, r2
 8000e72:	e6f8      	b.n	8000c66 <__udivmoddi4+0x96>
 8000e74:	4610      	mov	r0, r2
 8000e76:	e6e0      	b.n	8000c3a <__udivmoddi4+0x6a>
 8000e78:	ebb8 0402 	subs.w	r4, r8, r2
 8000e7c:	eb69 0603 	sbc.w	r6, r9, r3
 8000e80:	3801      	subs	r0, #1
 8000e82:	e7e5      	b.n	8000e50 <__udivmoddi4+0x280>
 8000e84:	4604      	mov	r4, r0
 8000e86:	e7d8      	b.n	8000e3a <__udivmoddi4+0x26a>
 8000e88:	4611      	mov	r1, r2
 8000e8a:	e795      	b.n	8000db8 <__udivmoddi4+0x1e8>
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	e7c0      	b.n	8000e12 <__udivmoddi4+0x242>
 8000e90:	468a      	mov	sl, r1
 8000e92:	e77c      	b.n	8000d8e <__udivmoddi4+0x1be>
 8000e94:	3b02      	subs	r3, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e748      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xe4>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	443e      	add	r6, r7
 8000ea2:	e72f      	b.n	8000d04 <__udivmoddi4+0x134>
 8000ea4:	45c2      	cmp	sl, r8
 8000ea6:	d3e7      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000ea8:	463e      	mov	r6, r7
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x280>
 8000eac:	4629      	mov	r1, r5
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HX711_Init>:
#include "hx711.h"

void HX711_Init(HX711 data)
{
 8000eb8:	b084      	sub	sp, #16
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	f107 0e20 	add.w	lr, r7, #32
 8000ec4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = data.pinSck;
 8000ec8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000eca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(data.gpioSck, &GPIO_InitStruct);
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	1d3a      	adds	r2, r7, #4
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f006 fdec 	bl	8007abc <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = data.pinData;
 8000ee4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000ee6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(data.gpioData, &GPIO_InitStruct);
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef6:	1d3a      	adds	r2, r7, #4
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f006 fdde 	bl	8007abc <HAL_GPIO_Init>

	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 8000f00:	6a3b      	ldr	r3, [r7, #32]
 8000f02:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000f04:	2201      	movs	r2, #1
 8000f06:	4618      	mov	r0, r3
 8000f08:	f006 ff6e 	bl	8007de8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000f0c:	2032      	movs	r0, #50	; 0x32
 8000f0e:	f007 f9f5 	bl	80082fc <HAL_Delay>
	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000f16:	2200      	movs	r2, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f006 ff65 	bl	8007de8 <HAL_GPIO_WritePin>

}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f28:	b004      	add	sp, #16
 8000f2a:	4770      	bx	lr

08000f2c <HX711_Average_Value>:

int HX711_Average_Value(HX711 data, uint8_t times)
{
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	b590      	push	{r4, r7, lr}
 8000f30:	b087      	sub	sp, #28
 8000f32:	af04      	add	r7, sp, #16
 8000f34:	f107 0418 	add.w	r4, r7, #24
 8000f38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    long sum = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < times; i++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	e011      	b.n	8000f6a <HX711_Average_Value+0x3e>
    {
        sum += HX711_Value(data);
 8000f46:	466c      	mov	r4, sp
 8000f48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f52:	f107 0318 	add.w	r3, r7, #24
 8000f56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f58:	f000 f818 	bl	8000f8c <HX711_Value>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	607b      	str	r3, [r7, #4]
}

int HX711_Average_Value(HX711 data, uint8_t times)
{
    long sum = 0;
    for (int i = 0; i < times; i++)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	3301      	adds	r3, #1
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dce8      	bgt.n	8000f46 <HX711_Average_Value+0x1a>
    {
        sum += HX711_Value(data);
    }

    return sum / times;
 8000f74:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000f88:	b004      	add	sp, #16
 8000f8a:	4770      	bx	lr

08000f8c <HX711_Value>:

int HX711_Value(HX711 data)
{
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b084      	sub	sp, #16
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	f107 0e18 	add.w	lr, r7, #24
 8000f98:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    int buffer;
    buffer = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]

    while (HAL_GPIO_ReadPin(data.gpioData, data.pinData)==1)
 8000fa0:	bf00      	nop
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f006 ff05 	bl	8007db8 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d0f6      	beq.n	8000fa2 <HX711_Value+0x16>
    ;

    for (uint8_t i = 0; i < 24; i++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	72fb      	strb	r3, [r7, #11]
 8000fb8:	e01d      	b.n	8000ff6 <HX711_Value+0x6a>
    {
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	8c39      	ldrh	r1, [r7, #32]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f006 ff11 	bl	8007de8 <HAL_GPIO_WritePin>

        buffer = buffer << 1 ;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]

        if (HAL_GPIO_ReadPin(data.gpioData, data.pinData))
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 fef0 	bl	8007db8 <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <HX711_Value+0x58>
        {
            buffer++;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
        }

        HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	8c39      	ldrh	r1, [r7, #32]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f006 fefc 	bl	8007de8 <HAL_GPIO_WritePin>
    buffer = 0;

    while (HAL_GPIO_ReadPin(data.gpioData, data.pinData)==1)
    ;

    for (uint8_t i = 0; i < 24; i++)
 8000ff0:	7afb      	ldrb	r3, [r7, #11]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	72fb      	strb	r3, [r7, #11]
 8000ff6:	7afb      	ldrb	r3, [r7, #11]
 8000ff8:	2b17      	cmp	r3, #23
 8000ffa:	d9de      	bls.n	8000fba <HX711_Value+0x2e>
        }

        HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
    }

    for (int i = 0; i < data.gain; i++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	e00e      	b.n	8001020 <HX711_Value+0x94>
    {
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	8c39      	ldrh	r1, [r7, #32]
 8001006:	2201      	movs	r2, #1
 8001008:	4618      	mov	r0, r3
 800100a:	f006 feed 	bl	8007de8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	8c39      	ldrh	r1, [r7, #32]
 8001012:	2200      	movs	r2, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f006 fee7 	bl	8007de8 <HAL_GPIO_WritePin>
        }

        HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
    }

    for (int i = 0; i < data.gain; i++)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3301      	adds	r3, #1
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dcec      	bgt.n	8001002 <HX711_Value+0x76>
    {
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
    }

    buffer ^= 0x800000;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 800102e:	60fb      	str	r3, [r7, #12]

    return buffer;
 8001030:	68fb      	ldr	r3, [r7, #12]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800103c:	b004      	add	sp, #16
 800103e:	4770      	bx	lr

08001040 <USBD_FS_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2212      	movs	r2, #18
 8001050:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8001052:	4b03      	ldr	r3, [pc, #12]	; (8001060 <USBD_FS_DeviceDescriptor+0x20>)
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	2000001c 	.word	0x2000001c

08001064 <USBD_FS_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2204      	movs	r2, #4
 8001074:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8001076:	4b03      	ldr	r3, [pc, #12]	; (8001084 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	20000030 	.word	0x20000030

08001088 <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d105      	bne.n	80010a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	4907      	ldr	r1, [pc, #28]	; (80010bc <USBD_FS_ProductStrDescriptor+0x34>)
 800109e:	4808      	ldr	r0, [pc, #32]	; (80010c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80010a0:	f001 fdb8 	bl	8002c14 <USBD_GetString>
 80010a4:	e004      	b.n	80010b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	4904      	ldr	r1, [pc, #16]	; (80010bc <USBD_FS_ProductStrDescriptor+0x34>)
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80010ac:	f001 fdb2 	bl	8002c14 <USBD_GetString>
  }
  return USBD_StrDesc;
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000910 	.word	0x20000910
 80010c0:	0800b228 	.word	0x0800b228

080010c4 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	4904      	ldr	r1, [pc, #16]	; (80010e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80010d6:	f001 fd9d 	bl	8002c14 <USBD_GetString>
  return USBD_StrDesc;
 80010da:	4b02      	ldr	r3, [pc, #8]	; (80010e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000910 	.word	0x20000910
 80010e8:	0800b240 	.word	0x0800b240

080010ec <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d105      	bne.n	800110a <USBD_FS_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	4907      	ldr	r1, [pc, #28]	; (8001120 <USBD_FS_SerialStrDescriptor+0x34>)
 8001102:	4808      	ldr	r0, [pc, #32]	; (8001124 <USBD_FS_SerialStrDescriptor+0x38>)
 8001104:	f001 fd86 	bl	8002c14 <USBD_GetString>
 8001108:	e004      	b.n	8001114 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	4904      	ldr	r1, [pc, #16]	; (8001120 <USBD_FS_SerialStrDescriptor+0x34>)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <USBD_FS_SerialStrDescriptor+0x38>)
 8001110:	f001 fd80 	bl	8002c14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001114:	4b02      	ldr	r3, [pc, #8]	; (8001120 <USBD_FS_SerialStrDescriptor+0x34>)
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000910 	.word	0x20000910
 8001124:	0800b254 	.word	0x0800b254

08001128 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d105      	bne.n	8001146 <USBD_FS_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <USBD_FS_ConfigStrDescriptor+0x34>)
 800113e:	4808      	ldr	r0, [pc, #32]	; (8001160 <USBD_FS_ConfigStrDescriptor+0x38>)
 8001140:	f001 fd68 	bl	8002c14 <USBD_GetString>
 8001144:	e004      	b.n	8001150 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	4904      	ldr	r1, [pc, #16]	; (800115c <USBD_FS_ConfigStrDescriptor+0x34>)
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <USBD_FS_ConfigStrDescriptor+0x38>)
 800114c:	f001 fd62 	bl	8002c14 <USBD_GetString>
  }
  return USBD_StrDesc;  
 8001150:	4b02      	ldr	r3, [pc, #8]	; (800115c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000910 	.word	0x20000910
 8001160:	0800b264 	.word	0x0800b264

08001164 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d105      	bne.n	8001182 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	4907      	ldr	r1, [pc, #28]	; (8001198 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800117a:	4808      	ldr	r0, [pc, #32]	; (800119c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800117c:	f001 fd4a 	bl	8002c14 <USBD_GetString>
 8001180:	e004      	b.n	800118c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	4904      	ldr	r1, [pc, #16]	; (8001198 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001188:	f001 fd44 	bl	8002c14 <USBD_GetString>
  }
  return USBD_StrDesc;  
 800118c:	4b02      	ldr	r3, [pc, #8]	; (8001198 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000910 	.word	0x20000910
 800119c:	0800b270 	.word	0x0800b270

080011a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a16      	ldr	r2, [pc, #88]	; (8001208 <HAL_PCD_MspInit+0x68>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d125      	bne.n	80011fe <HAL_PCD_MspInit+0x5e>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80011c4:	230e      	movs	r3, #14
 80011c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d2:	f006 fc73 	bl	8007abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011d6:	4a0d      	ldr	r2, [pc, #52]	; (800120c <HAL_PCD_MspInit+0x6c>)
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_PCD_MspInit+0x6c>)
 80011da:	69db      	ldr	r3, [r3, #28]
 80011dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_PCD_MspInit+0x6c>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2014      	movs	r0, #20
 80011f4:	f006 ffd6 	bl	80081a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80011f8:	2014      	movs	r0, #20
 80011fa:	f006 ffef 	bl	80081dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40005c00 	.word	0x40005c00
 800120c:	40021000 	.word	0x40021000

08001210 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup Stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f8d3 23a4 	ldr.w	r2, [r3, #932]	; 0x3a4
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8001224:	4619      	mov	r1, r3
 8001226:	4610      	mov	r0, r2
 8001228:	f001 fde2 	bl	8002df0 <USBD_LL_SetupStage>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f8d3 03a4 	ldr.w	r0, [r3, #932]	; 0x3a4
 8001246:	78fa      	ldrb	r2, [r7, #3]
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	1a9b      	subs	r3, r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	4619      	mov	r1, r3
 800125e:	f001 fe11 	bl	8002e84 <USBD_LL_DataOutStage>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop

0800126c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f8d3 03a4 	ldr.w	r0, [r3, #932]	; 0x3a4
 800127e:	78fa      	ldrb	r2, [r7, #3]
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	1a9b      	subs	r3, r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	440b      	add	r3, r1
 800128c:	3338      	adds	r3, #56	; 0x38
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	4619      	mov	r1, r3
 8001294:	f001 fe52 	bl	8002f3c <USBD_LL_DataInStage>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 ff3c 	bl	800312c <USBD_LL_SOF>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d102      	bne.n	80012d6 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
    break;
 80012d4:	e002      	b.n	80012dc <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;    
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
    break;    
 80012da:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f001 fee8 	bl	80030bc <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 feb2 	bl	800305c <USBD_LL_Reset>
}
 80012f8:	bf00      	nop
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 800130e:	4618      	mov	r0, r3
 8001310:	f001 fee4 	bl	80030dc <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_PCD_SuspendCallback+0x30>)
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <HAL_PCD_SuspendCallback+0x30>)
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	f043 0306 	orr.w	r3, r3, #6
 8001326:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fee0 	bl	8003108 <USBD_LL_Resume>
  
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 8001358:	4a29      	ldr	r2, [pc, #164]	; (8001400 <USBD_LL_Init+0xb0>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8c2 33a4 	str.w	r3, [r2, #932]	; 0x3a4
  pdev->pData = &hpcd_USB_FS;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a27      	ldr	r2, [pc, #156]	; (8001400 <USBD_LL_Init+0xb0>)
 8001364:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <USBD_LL_Init+0xb0>)
 800136a:	4a26      	ldr	r2, [pc, #152]	; (8001404 <USBD_LL_Init+0xb4>)
 800136c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <USBD_LL_Init+0xb0>)
 8001370:	2208      	movs	r2, #8
 8001372:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001374:	4b22      	ldr	r3, [pc, #136]	; (8001400 <USBD_LL_Init+0xb0>)
 8001376:	2202      	movs	r2, #2
 8001378:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <USBD_LL_Init+0xb0>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <USBD_LL_Init+0xb0>)
 8001382:	2202      	movs	r2, #2
 8001384:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <USBD_LL_Init+0xb0>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <USBD_LL_Init+0xb0>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001392:	481b      	ldr	r0, [pc, #108]	; (8001400 <USBD_LL_Init+0xb0>)
 8001394:	f004 fd00 	bl	8005d98 <HAL_PCD_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <USBD_LL_Init+0x52>
  {
    Error_Handler();
 800139e:	f000 fdf5 	bl	8001f8c <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80013a8:	2318      	movs	r3, #24
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	f004 fc3d 	bl	8005c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80013b8:	2358      	movs	r3, #88	; 0x58
 80013ba:	2200      	movs	r2, #0
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	f004 fc35 	bl	8005c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);  
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80013c8:	23c0      	movs	r3, #192	; 0xc0
 80013ca:	2200      	movs	r2, #0
 80013cc:	2181      	movs	r1, #129	; 0x81
 80013ce:	f004 fc2d 	bl	8005c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80013d8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013dc:	2200      	movs	r2, #0
 80013de:	2101      	movs	r1, #1
 80013e0:	f004 fc24 	bl	8005c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);  
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80013ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ee:	2200      	movs	r2, #0
 80013f0:	2182      	movs	r1, #130	; 0x82
 80013f2:	f004 fc1b 	bl	8005c2c <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000b10 	.word	0x20000b10
 8001404:	40005c00 	.word	0x40005c00

08001408 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start((PCD_HandleTypeDef*)pdev->pData);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8001416:	4618      	mov	r0, r3
 8001418:	f004 fd9e 	bl	8005f58 <HAL_PCD_Start>
  return USBD_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop

08001428 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	4608      	mov	r0, r1
 8001432:	4611      	mov	r1, r2
 8001434:	461a      	mov	r2, r3
 8001436:	4603      	mov	r3, r0
 8001438:	70fb      	strb	r3, [r7, #3]
 800143a:	460b      	mov	r3, r1
 800143c:	70bb      	strb	r3, [r7, #2]
 800143e:	4613      	mov	r3, r2
 8001440:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open((PCD_HandleTypeDef*) pdev->pData,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8001448:	78bb      	ldrb	r3, [r7, #2]
 800144a:	883a      	ldrh	r2, [r7, #0]
 800144c:	78f9      	ldrb	r1, [r7, #3]
 800144e:	f005 f9dd 	bl	800680c <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK; 
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800146e:	78fa      	ldrb	r2, [r7, #3]
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f005 fd62 	bl	8006f3c <HAL_PCD_EP_Close>
  return USBD_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop

08001484 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8001496:	78fa      	ldrb	r2, [r7, #3]
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f006 f988 	bl	80077b0 <HAL_PCD_EP_SetStall>
  return USBD_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop

080014ac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80014be:	78fa      	ldrb	r2, [r7, #3]
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f006 fa1c 	bl	8007900 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop

080014d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80014e6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80014e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	da0b      	bge.n	8001508 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80014f6:	68f9      	ldr	r1, [r7, #12]
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	332a      	adds	r3, #42	; 0x2a
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	e00b      	b.n	8001520 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800150e:	68f9      	ldr	r1, [r7, #12]
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800151e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress((PCD_HandleTypeDef*) pdev->pData, dev_addr);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f005 f938 	bl	80067b8 <HAL_PCD_SetAddress>
  return USBD_OK; 
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop

08001554 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	461a      	mov	r2, r3
 8001560:	460b      	mov	r3, r1
 8001562:	72fb      	strb	r3, [r7, #11]
 8001564:	4613      	mov	r3, r2
 8001566:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Transmit((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800156e:	893b      	ldrh	r3, [r7, #8]
 8001570:	7af9      	ldrb	r1, [r7, #11]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	f006 f828 	bl	80075c8 <HAL_PCD_EP_Transmit>
  return USBD_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop

08001584 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	461a      	mov	r2, r3
 8001590:	460b      	mov	r3, r1
 8001592:	72fb      	strb	r3, [r7, #11]
 8001594:	4613      	mov	r3, r2
 8001596:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Receive((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800159e:	893b      	ldrh	r3, [r7, #8]
 80015a0:	7af9      	ldrb	r1, [r7, #11]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	f005 fee2 	bl	800736c <HAL_PCD_EP_Receive>
  return USBD_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop

080015b4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80015c6:	78fa      	ldrb	r2, [r7, #3]
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f005 ffe2 	bl	8007594 <HAL_PCD_EP_GetRxCount>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop

080015dc <USBD_static_malloc>:
  * @brief  static single allocation.
  * @param  size: size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];//On 32-bit boundary
  return mem;
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <USBD_static_malloc+0x18>)
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	200006b0 	.word	0x200006b0

080015f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  free(p);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f006 ff31 	bl	8008468 <free>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop

08001610 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High Connection State */
   
  } 
/* USER CODE END 4 */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	4905      	ldr	r1, [pc, #20]	; (8001644 <CDC_Init_FS+0x1c>)
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <CDC_Init_FS+0x20>)
 8001632:	f001 ff53 	bl	80034dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8001636:	4905      	ldr	r1, [pc, #20]	; (800164c <CDC_Init_FS+0x24>)
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <CDC_Init_FS+0x20>)
 800163a:	f001 ff69 	bl	8003510 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800163e:	2300      	movs	r3, #0
  /* USER CODE END 3 */ 
}
 8001640:	4618      	mov	r0, r3
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000ec4 	.word	0x20000ec4
 8001648:	20000ed0 	.word	0x20000ed0
 800164c:	20000eb8 	.word	0x20000eb8

08001650 <CDC_DeInit_FS>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
 8001654:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS  (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
 800166c:	4613      	mov	r3, r2
 800166e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b23      	cmp	r3, #35	; 0x23
 8001674:	d84a      	bhi.n	800170c <CDC_Control_FS+0xac>
 8001676:	a201      	add	r2, pc, #4	; (adr r2, 800167c <CDC_Control_FS+0x1c>)
 8001678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167c:	0800170d 	.word	0x0800170d
 8001680:	0800170d 	.word	0x0800170d
 8001684:	0800170d 	.word	0x0800170d
 8001688:	0800170d 	.word	0x0800170d
 800168c:	0800170d 	.word	0x0800170d
 8001690:	0800170d 	.word	0x0800170d
 8001694:	0800170d 	.word	0x0800170d
 8001698:	0800170d 	.word	0x0800170d
 800169c:	0800170d 	.word	0x0800170d
 80016a0:	0800170d 	.word	0x0800170d
 80016a4:	0800170d 	.word	0x0800170d
 80016a8:	0800170d 	.word	0x0800170d
 80016ac:	0800170d 	.word	0x0800170d
 80016b0:	0800170d 	.word	0x0800170d
 80016b4:	0800170d 	.word	0x0800170d
 80016b8:	0800170d 	.word	0x0800170d
 80016bc:	0800170d 	.word	0x0800170d
 80016c0:	0800170d 	.word	0x0800170d
 80016c4:	0800170d 	.word	0x0800170d
 80016c8:	0800170d 	.word	0x0800170d
 80016cc:	0800170d 	.word	0x0800170d
 80016d0:	0800170d 	.word	0x0800170d
 80016d4:	0800170d 	.word	0x0800170d
 80016d8:	0800170d 	.word	0x0800170d
 80016dc:	0800170d 	.word	0x0800170d
 80016e0:	0800170d 	.word	0x0800170d
 80016e4:	0800170d 	.word	0x0800170d
 80016e8:	0800170d 	.word	0x0800170d
 80016ec:	0800170d 	.word	0x0800170d
 80016f0:	0800170d 	.word	0x0800170d
 80016f4:	0800170d 	.word	0x0800170d
 80016f8:	0800170d 	.word	0x0800170d
 80016fc:	0800170d 	.word	0x0800170d
 8001700:	0800170d 	.word	0x0800170d
 8001704:	0800170d 	.word	0x0800170d
 8001708:	0800170d 	.word	0x0800170d
  case CDC_SEND_BREAK:
 
    break;    
    
  default:
    break;
 800170c:	bf00      	nop
  }

  return (USBD_OK);
 800170e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4807      	ldr	r0, [pc, #28]	; (8001748 <CDC_Receive_FS+0x2c>)
 800172a:	f001 fef1 	bl	8003510 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <CDC_Receive_FS+0x2c>)
 8001730:	f001 ff2c 	bl	800358c <USBD_CDC_ReceivePacket>
	Commands_BufferHandle(Buf, Len);
 8001734:	6839      	ldr	r1, [r7, #0]
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 fc2c 	bl	8001f94 <Commands_BufferHandle>
	return (USBD_OK);
 800173c:	2300      	movs	r3, #0
  /* USER CODE END 6 */ 
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000ed0 	.word	0x20000ed0

0800174c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be send
  * @param  Len: Number of data to be send (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800175c:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <CDC_Transmit_FS+0x48>)
 800175e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001762:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800176e:	2301      	movs	r3, #1
 8001770:	e00b      	b.n	800178a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8001772:	887b      	ldrh	r3, [r7, #2]
 8001774:	461a      	mov	r2, r3
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4806      	ldr	r0, [pc, #24]	; (8001794 <CDC_Transmit_FS+0x48>)
 800177a:	f001 feaf 	bl	80034dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <CDC_Transmit_FS+0x48>)
 8001780:	f001 feda 	bl	8003538 <USBD_CDC_TransmitPacket>
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */ 
  return result;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000ed0 	.word	0x20000ed0

08001798 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800179c:	2200      	movs	r2, #0
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <MX_USB_DEVICE_Init+0x28>)
 80017a0:	4808      	ldr	r0, [pc, #32]	; (80017c4 <MX_USB_DEVICE_Init+0x2c>)
 80017a2:	f001 fa93 	bl	8002ccc <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 80017a6:	4908      	ldr	r1, [pc, #32]	; (80017c8 <MX_USB_DEVICE_Init+0x30>)
 80017a8:	4806      	ldr	r0, [pc, #24]	; (80017c4 <MX_USB_DEVICE_Init+0x2c>)
 80017aa:	f001 fabb 	bl	8002d24 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80017ae:	4907      	ldr	r1, [pc, #28]	; (80017cc <MX_USB_DEVICE_Init+0x34>)
 80017b0:	4804      	ldr	r0, [pc, #16]	; (80017c4 <MX_USB_DEVICE_Init+0x2c>)
 80017b2:	f001 fe7b 	bl	80034ac <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 80017b6:	4803      	ldr	r0, [pc, #12]	; (80017c4 <MX_USB_DEVICE_Init+0x2c>)
 80017b8:	f001 face 	bl	8002d58 <USBD_Start>

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000ed0 	.word	0x20000ed0
 80017c8:	20000050 	.word	0x20000050
 80017cc:	20000034 	.word	0x20000034

080017d0 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop

080017e0 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 80017e4:	e7fe      	b.n	80017e4 <HardFault_Handler+0x4>
 80017e6:	bf00      	nop

080017e8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 80017ec:	e7fe      	b.n	80017ec <MemManage_Handler+0x4>
 80017ee:	bf00      	nop

080017f0 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 80017f4:	e7fe      	b.n	80017f4 <BusFault_Handler+0x4>
 80017f6:	bf00      	nop

080017f8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>
 80017fe:	bf00      	nop

08001800 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop

08001810 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop

08001820 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop

08001830 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f006 fd48 	bl	80082c8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001838:	f006 fd06 	bl	8008248 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <USB_LP_CAN_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN_RX0 interrupts.
*/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001846:	f004 fec9 	bl	80065dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000b10 	.word	0x20000b10

08001854 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <HAL_MspInit+0x80>)
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_MspInit+0x80>)
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6193      	str	r3, [r2, #24]
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_MspInit+0x80>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001872:	2003      	movs	r0, #3
 8001874:	f006 fc8a 	bl	800818c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	f06f 000b 	mvn.w	r0, #11
 8001880:	f006 fc90 	bl	80081a4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2100      	movs	r1, #0
 8001888:	f06f 000a 	mvn.w	r0, #10
 800188c:	f006 fc8a 	bl	80081a4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	f06f 0009 	mvn.w	r0, #9
 8001898:	f006 fc84 	bl	80081a4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	f06f 0004 	mvn.w	r0, #4
 80018a4:	f006 fc7e 	bl	80081a4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	f06f 0003 	mvn.w	r0, #3
 80018b0:	f006 fc78 	bl	80081a4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2100      	movs	r1, #0
 80018b8:	f06f 0001 	mvn.w	r0, #1
 80018bc:	f006 fc72 	bl	80081a4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f006 fc6c 	bl	80081a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_CRC_MspInit+0x38>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d10b      	bne.n	8001902 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_CRC_MspInit+0x3c>)
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_CRC_MspInit+0x3c>)
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f4:	6153      	str	r3, [r2, #20]
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <HAL_CRC_MspInit+0x3c>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023000 	.word	0x40023000
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_TIM_PWM_MspInit>:
  /* USER CODE END CRC_MspDeInit 1 */

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM15)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <HAL_TIM_PWM_MspInit+0x38>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d10b      	bne.n	8001942 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_TIM_PWM_MspInit+0x3c>)
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_TIM_PWM_MspInit+0x3c>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001934:	6193      	str	r3, [r2, #24]
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <HAL_TIM_PWM_MspInit+0x3c>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40014000 	.word	0x40014000
 8001954:	40021000 	.word	0x40021000

08001958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM15)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <HAL_TIM_MspPostInit+0x3c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d110      	bne.n	800198c <HAL_TIM_MspPostInit+0x34>
  /* USER CODE END TIM15_MspPostInit 0 */
  
    /**TIM15 GPIO Configuration    
    PB15     ------> TIM15_CH2 
    */
    GPIO_InitStruct.Pin = DO_LED_2_Pin;
 800196a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800196e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800197c:	2301      	movs	r3, #1
 800197e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DO_LED_2_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4619      	mov	r1, r3
 8001986:	4804      	ldr	r0, [pc, #16]	; (8001998 <HAL_TIM_MspPostInit+0x40>)
 8001988:	f006 f898 	bl	8007abc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800198c:	bf00      	nop
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40014000 	.word	0x40014000
 8001998:	48000400 	.word	0x48000400

0800199c <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 800199c:	b5b0      	push	{r4, r5, r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80019a2:	f006 fc5f 	bl	8008264 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 80019a6:	f000 f99f 	bl	8001ce8 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80019aa:	f000 fa85 	bl	8001eb8 <MX_GPIO_Init>
	MX_CRC_Init();
 80019ae:	f000 f9f5 	bl	8001d9c <MX_CRC_Init>
	MX_USB_DEVICE_Init();
 80019b2:	f7ff fef1 	bl	8001798 <MX_USB_DEVICE_Init>
	MX_TIM15_Init();
 80019b6:	f000 fa13 	bl	8001de0 <MX_TIM15_Init>

	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80019ba:	2104      	movs	r1, #4
 80019bc:	486c      	ldr	r0, [pc, #432]	; (8001b70 <main+0x1d4>)
 80019be:	f002 f917 	bl	8003bf0 <HAL_TIM_PWM_Start>

	hx1.gpioSck = DO_SCK_1_GPIO_Port;
 80019c2:	4b6c      	ldr	r3, [pc, #432]	; (8001b74 <main+0x1d8>)
 80019c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019c8:	601a      	str	r2, [r3, #0]
	hx1.gpioData = DI_DATA_1_GPIO_Port;
 80019ca:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <main+0x1d8>)
 80019cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80019d0:	605a      	str	r2, [r3, #4]
	hx1.pinSck = DO_SCK_1_Pin;
 80019d2:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <main+0x1d8>)
 80019d4:	2202      	movs	r2, #2
 80019d6:	811a      	strh	r2, [r3, #8]
	hx1.pinData = DI_DATA_1_Pin;
 80019d8:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <main+0x1d8>)
 80019da:	2204      	movs	r2, #4
 80019dc:	815a      	strh	r2, [r3, #10]
	hx1.gain = 3;
 80019de:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <main+0x1d8>)
 80019e0:	2203      	movs	r2, #3
 80019e2:	61da      	str	r2, [r3, #28]
	hx1.offsetA = 0;
 80019e4:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <main+0x1d8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
	hx1.offsetB = 0;
 80019ea:	4b62      	ldr	r3, [pc, #392]	; (8001b74 <main+0x1d8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
	hx1.readingA = 0;
 80019f0:	4b60      	ldr	r3, [pc, #384]	; (8001b74 <main+0x1d8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
	hx1.readingB = 0;
 80019f6:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <main+0x1d8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
	HX711_Init(hx1);
 80019fc:	4c5d      	ldr	r4, [pc, #372]	; (8001b74 <main+0x1d8>)
 80019fe:	466d      	mov	r5, sp
 8001a00:	f104 0310 	add.w	r3, r4, #16
 8001a04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a06:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a0e:	f7ff fa53 	bl	8000eb8 <HX711_Init>

	hx2.gpioSck = DO_SCK_2_GPIO_Port;
 8001a12:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <main+0x1dc>)
 8001a14:	4a59      	ldr	r2, [pc, #356]	; (8001b7c <main+0x1e0>)
 8001a16:	601a      	str	r2, [r3, #0]
	hx2.gpioData = DI_DATA_2_GPIO_Port;
 8001a18:	4b57      	ldr	r3, [pc, #348]	; (8001b78 <main+0x1dc>)
 8001a1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001a1e:	605a      	str	r2, [r3, #4]
	hx2.pinSck = DO_SCK_2_Pin;
 8001a20:	4b55      	ldr	r3, [pc, #340]	; (8001b78 <main+0x1dc>)
 8001a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a26:	811a      	strh	r2, [r3, #8]
	hx2.pinData = DI_DATA_2_Pin;
 8001a28:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <main+0x1dc>)
 8001a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2e:	815a      	strh	r2, [r3, #10]
	hx2.gain = 3;
 8001a30:	4b51      	ldr	r3, [pc, #324]	; (8001b78 <main+0x1dc>)
 8001a32:	2203      	movs	r2, #3
 8001a34:	61da      	str	r2, [r3, #28]
	hx2.offsetA = 0;
 8001a36:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <main+0x1dc>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
	hx2.offsetB = 0;
 8001a3c:	4b4e      	ldr	r3, [pc, #312]	; (8001b78 <main+0x1dc>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
	hx2.readingA = 0;
 8001a42:	4b4d      	ldr	r3, [pc, #308]	; (8001b78 <main+0x1dc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	615a      	str	r2, [r3, #20]
	hx2.readingB = 0;
 8001a48:	4b4b      	ldr	r3, [pc, #300]	; (8001b78 <main+0x1dc>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
	HX711_Init(hx2);
 8001a4e:	4c4a      	ldr	r4, [pc, #296]	; (8001b78 <main+0x1dc>)
 8001a50:	466d      	mov	r5, sp
 8001a52:	f104 0310 	add.w	r3, r4, #16
 8001a56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a58:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a5c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a60:	f7ff fa2a 	bl	8000eb8 <HX711_Init>

	iTare = 1;
 8001a64:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <main+0x1e4>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

	  if (iTare)
 8001a6a:	4b45      	ldr	r3, [pc, #276]	; (8001b80 <main+0x1e4>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 8088 	beq.w	8001b84 <main+0x1e8>
	  {
		HX711_Average_Value(hx1, 100);
 8001a74:	4c3f      	ldr	r4, [pc, #252]	; (8001b74 <main+0x1d8>)
 8001a76:	2364      	movs	r3, #100	; 0x64
 8001a78:	9304      	str	r3, [sp, #16]
 8001a7a:	466d      	mov	r5, sp
 8001a7c:	f104 0310 	add.w	r3, r4, #16
 8001a80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a82:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a8a:	f7ff fa4f 	bl	8000f2c <HX711_Average_Value>
		HX711_Average_Value(hx2, 100);
 8001a8e:	4c3a      	ldr	r4, [pc, #232]	; (8001b78 <main+0x1dc>)
 8001a90:	2364      	movs	r3, #100	; 0x64
 8001a92:	9304      	str	r3, [sp, #16]
 8001a94:	466d      	mov	r5, sp
 8001a96:	f104 0310 	add.w	r3, r4, #16
 8001a9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a9c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001aa0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001aa4:	f7ff fa42 	bl	8000f2c <HX711_Average_Value>

		hx1.offsetA = HX711_Average_Value(hx1, 20);
 8001aa8:	4c32      	ldr	r4, [pc, #200]	; (8001b74 <main+0x1d8>)
 8001aaa:	2314      	movs	r3, #20
 8001aac:	9304      	str	r3, [sp, #16]
 8001aae:	466d      	mov	r5, sp
 8001ab0:	f104 0310 	add.w	r3, r4, #16
 8001ab4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ab6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001aba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001abe:	f7ff fa35 	bl	8000f2c <HX711_Average_Value>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <main+0x1d8>)
 8001ac6:	60da      	str	r2, [r3, #12]
		hx2.offsetA = HX711_Average_Value(hx2, 20);
 8001ac8:	4c2b      	ldr	r4, [pc, #172]	; (8001b78 <main+0x1dc>)
 8001aca:	2314      	movs	r3, #20
 8001acc:	9304      	str	r3, [sp, #16]
 8001ace:	466d      	mov	r5, sp
 8001ad0:	f104 0310 	add.w	r3, r4, #16
 8001ad4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ad6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001ada:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ade:	f7ff fa25 	bl	8000f2c <HX711_Average_Value>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <main+0x1dc>)
 8001ae6:	60da      	str	r2, [r3, #12]

		hx1.gain = 2;
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <main+0x1d8>)
 8001aea:	2202      	movs	r2, #2
 8001aec:	61da      	str	r2, [r3, #28]
		hx2.gain = 2;
 8001aee:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <main+0x1dc>)
 8001af0:	2202      	movs	r2, #2
 8001af2:	61da      	str	r2, [r3, #28]

		HX711_Average_Value(hx1, 100);
 8001af4:	4c1f      	ldr	r4, [pc, #124]	; (8001b74 <main+0x1d8>)
 8001af6:	2364      	movs	r3, #100	; 0x64
 8001af8:	9304      	str	r3, [sp, #16]
 8001afa:	466d      	mov	r5, sp
 8001afc:	f104 0310 	add.w	r3, r4, #16
 8001b00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b02:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001b06:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b0a:	f7ff fa0f 	bl	8000f2c <HX711_Average_Value>
		HX711_Average_Value(hx2, 100);
 8001b0e:	4c1a      	ldr	r4, [pc, #104]	; (8001b78 <main+0x1dc>)
 8001b10:	2364      	movs	r3, #100	; 0x64
 8001b12:	9304      	str	r3, [sp, #16]
 8001b14:	466d      	mov	r5, sp
 8001b16:	f104 0310 	add.w	r3, r4, #16
 8001b1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b1c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001b20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b24:	f7ff fa02 	bl	8000f2c <HX711_Average_Value>

		hx1.offsetB = HX711_Average_Value(hx1, 20);
 8001b28:	4c12      	ldr	r4, [pc, #72]	; (8001b74 <main+0x1d8>)
 8001b2a:	2314      	movs	r3, #20
 8001b2c:	9304      	str	r3, [sp, #16]
 8001b2e:	466d      	mov	r5, sp
 8001b30:	f104 0310 	add.w	r3, r4, #16
 8001b34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b36:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001b3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b3e:	f7ff f9f5 	bl	8000f2c <HX711_Average_Value>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <main+0x1d8>)
 8001b46:	611a      	str	r2, [r3, #16]
		hx2.offsetB = HX711_Average_Value(hx2, 20);
 8001b48:	4c0b      	ldr	r4, [pc, #44]	; (8001b78 <main+0x1dc>)
 8001b4a:	2314      	movs	r3, #20
 8001b4c:	9304      	str	r3, [sp, #16]
 8001b4e:	466d      	mov	r5, sp
 8001b50:	f104 0310 	add.w	r3, r4, #16
 8001b54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b56:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001b5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b5e:	f7ff f9e5 	bl	8000f2c <HX711_Average_Value>
 8001b62:	4602      	mov	r2, r0
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <main+0x1dc>)
 8001b66:	611a      	str	r2, [r3, #16]
		iTare = 0;
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <main+0x1e4>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
 8001b6e:	e0ad      	b.n	8001ccc <main+0x330>
 8001b70:	200010f4 	.word	0x200010f4
 8001b74:	20001194 	.word	0x20001194
 8001b78:	20001174 	.word	0x20001174
 8001b7c:	48000400 	.word	0x48000400
 8001b80:	200008d3 	.word	0x200008d3
	  }
	  else
	  {
		  hx1.gain = 2;
 8001b84:	4b54      	ldr	r3, [pc, #336]	; (8001cd8 <main+0x33c>)
 8001b86:	2202      	movs	r2, #2
 8001b88:	61da      	str	r2, [r3, #28]
		  hx2.gain = 2;
 8001b8a:	4b54      	ldr	r3, [pc, #336]	; (8001cdc <main+0x340>)
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	61da      	str	r2, [r3, #28]
		  HX711_Average_Value(hx1, 2);
 8001b90:	4c51      	ldr	r4, [pc, #324]	; (8001cd8 <main+0x33c>)
 8001b92:	2302      	movs	r3, #2
 8001b94:	9304      	str	r3, [sp, #16]
 8001b96:	466d      	mov	r5, sp
 8001b98:	f104 0310 	add.w	r3, r4, #16
 8001b9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b9e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001ba2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ba6:	f7ff f9c1 	bl	8000f2c <HX711_Average_Value>
		  HX711_Average_Value(hx2, 2);
 8001baa:	4c4c      	ldr	r4, [pc, #304]	; (8001cdc <main+0x340>)
 8001bac:	2302      	movs	r3, #2
 8001bae:	9304      	str	r3, [sp, #16]
 8001bb0:	466d      	mov	r5, sp
 8001bb2:	f104 0310 	add.w	r3, r4, #16
 8001bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bb8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001bbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bc0:	f7ff f9b4 	bl	8000f2c <HX711_Average_Value>
		  hx1.readingB = (HX711_Average_Value(hx1, 1) - hx1.offsetB)/10;
 8001bc4:	4c44      	ldr	r4, [pc, #272]	; (8001cd8 <main+0x33c>)
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	9304      	str	r3, [sp, #16]
 8001bca:	466d      	mov	r5, sp
 8001bcc:	f104 0310 	add.w	r3, r4, #16
 8001bd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bd2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001bd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bda:	f7ff f9a7 	bl	8000f2c <HX711_Average_Value>
 8001bde:	4602      	mov	r2, r0
 8001be0:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <main+0x33c>)
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	4a3e      	ldr	r2, [pc, #248]	; (8001ce0 <main+0x344>)
 8001be8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bec:	1092      	asrs	r2, r2, #2
 8001bee:	17db      	asrs	r3, r3, #31
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	4a39      	ldr	r2, [pc, #228]	; (8001cd8 <main+0x33c>)
 8001bf4:	6193      	str	r3, [r2, #24]
		  hx2.readingB = (HX711_Average_Value(hx2, 1) - hx2.offsetB)/10;
 8001bf6:	4c39      	ldr	r4, [pc, #228]	; (8001cdc <main+0x340>)
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	9304      	str	r3, [sp, #16]
 8001bfc:	466d      	mov	r5, sp
 8001bfe:	f104 0310 	add.w	r3, r4, #16
 8001c02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c04:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001c08:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c0c:	f7ff f98e 	bl	8000f2c <HX711_Average_Value>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <main+0x340>)
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	4a31      	ldr	r2, [pc, #196]	; (8001ce0 <main+0x344>)
 8001c1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c1e:	1092      	asrs	r2, r2, #2
 8001c20:	17db      	asrs	r3, r3, #31
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4a2d      	ldr	r2, [pc, #180]	; (8001cdc <main+0x340>)
 8001c26:	6193      	str	r3, [r2, #24]
		  hx1.gain = 3;
 8001c28:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <main+0x33c>)
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	61da      	str	r2, [r3, #28]
		  hx2.gain = 3;
 8001c2e:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <main+0x340>)
 8001c30:	2203      	movs	r2, #3
 8001c32:	61da      	str	r2, [r3, #28]
		  HX711_Average_Value(hx1, 2);
 8001c34:	4c28      	ldr	r4, [pc, #160]	; (8001cd8 <main+0x33c>)
 8001c36:	2302      	movs	r3, #2
 8001c38:	9304      	str	r3, [sp, #16]
 8001c3a:	466d      	mov	r5, sp
 8001c3c:	f104 0310 	add.w	r3, r4, #16
 8001c40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001c46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c4a:	f7ff f96f 	bl	8000f2c <HX711_Average_Value>
		  HX711_Average_Value(hx2, 2);
 8001c4e:	4c23      	ldr	r4, [pc, #140]	; (8001cdc <main+0x340>)
 8001c50:	2302      	movs	r3, #2
 8001c52:	9304      	str	r3, [sp, #16]
 8001c54:	466d      	mov	r5, sp
 8001c56:	f104 0310 	add.w	r3, r4, #16
 8001c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c5c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001c60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c64:	f7ff f962 	bl	8000f2c <HX711_Average_Value>
		  hx1.readingA = (HX711_Average_Value(hx1, 1) - hx1.offsetA)/20;
 8001c68:	4c1b      	ldr	r4, [pc, #108]	; (8001cd8 <main+0x33c>)
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	9304      	str	r3, [sp, #16]
 8001c6e:	466d      	mov	r5, sp
 8001c70:	f104 0310 	add.w	r3, r4, #16
 8001c74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c76:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001c7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c7e:	f7ff f955 	bl	8000f2c <HX711_Average_Value>
 8001c82:	4602      	mov	r2, r0
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <main+0x33c>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <main+0x344>)
 8001c8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c90:	10d2      	asrs	r2, r2, #3
 8001c92:	17db      	asrs	r3, r3, #31
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <main+0x33c>)
 8001c98:	6153      	str	r3, [r2, #20]
		  hx2.readingA = (HX711_Average_Value(hx2, 1) - hx2.offsetA)/20;
 8001c9a:	4c10      	ldr	r4, [pc, #64]	; (8001cdc <main+0x340>)
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	9304      	str	r3, [sp, #16]
 8001ca0:	466d      	mov	r5, sp
 8001ca2:	f104 0310 	add.w	r3, r4, #16
 8001ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001cac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001cb0:	f7ff f93c 	bl	8000f2c <HX711_Average_Value>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <main+0x340>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <main+0x344>)
 8001cbe:	fb82 1203 	smull	r1, r2, r2, r3
 8001cc2:	10d2      	asrs	r2, r2, #3
 8001cc4:	17db      	asrs	r3, r3, #31
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <main+0x340>)
 8001cca:	6153      	str	r3, [r2, #20]
	  }
	  HAL_GPIO_TogglePin(DO_LED_1_GPIO_Port, DO_LED_1_Pin);
 8001ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd0:	4804      	ldr	r0, [pc, #16]	; (8001ce4 <main+0x348>)
 8001cd2:	f006 f8a1 	bl	8007e18 <HAL_GPIO_TogglePin>
  }
 8001cd6:	e6c8      	b.n	8001a6a <main+0xce>
 8001cd8:	20001194 	.word	0x20001194
 8001cdc:	20001174 	.word	0x20001174
 8001ce0:	66666667 	.word	0x66666667
 8001ce4:	48000400 	.word	0x48000400

08001ce8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b09e      	sub	sp, #120	; 0x78
 8001cec:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d04:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001d06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d0a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 fc57 	bl	80045c4 <HAL_RCC_OscConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <SystemClock_Config+0x38>
  {
    Error_Handler();
 8001d1c:	f000 f936 	bl	8001f8c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d20:	230f      	movs	r3, #15
 8001d22:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d24:	2302      	movs	r3, #2
 8001d26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 fd03 	bl	8005748 <HAL_RCC_ClockConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001d48:	f000 f920 	bl	8001f8c <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d50:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001d52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d56:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d58:	463b      	mov	r3, r7
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 fa64 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d66:	f000 f911 	bl	8001f8c <Error_Handler>
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001d6a:	f003 ff53 	bl	8005c14 <HAL_RCC_GetHCLKFreq>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <SystemClock_Config+0xb0>)
 8001d72:	fba3 2302 	umull	r2, r3, r3, r2
 8001d76:	099b      	lsrs	r3, r3, #6
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f006 fa3d 	bl	80081f8 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d7e:	2004      	movs	r0, #4
 8001d80:	f006 fa46 	bl	8008210 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f006 fa0a 	bl	80081a4 <HAL_NVIC_SetPriority>
}
 8001d90:	bf00      	nop
 8001d92:	3778      	adds	r7, #120	; 0x78
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	10624dd3 	.word	0x10624dd3

08001d9c <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <MX_CRC_Init+0x3c>)
 8001da2:	4a0e      	ldr	r2, [pc, #56]	; (8001ddc <MX_CRC_Init+0x40>)
 8001da4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_CRC_Init+0x3c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <MX_CRC_Init+0x3c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_CRC_Init+0x3c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <MX_CRC_Init+0x3c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_CRC_Init+0x3c>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <MX_CRC_Init+0x3c>)
 8001dc6:	f006 f8b3 	bl	8007f30 <HAL_CRC_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001dd0:	f000 f8dc 	bl	8001f8c <Error_Handler>
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20001130 	.word	0x20001130
 8001ddc:	40023000 	.word	0x40023000

08001de0 <MX_TIM15_Init>:

/* TIM15 init function */
static void MX_TIM15_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b096      	sub	sp, #88	; 0x58
 8001de4:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim15.Instance = TIM15;
 8001de6:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <MX_TIM15_Init+0xd0>)
 8001de8:	4a32      	ldr	r2, [pc, #200]	; (8001eb4 <MX_TIM15_Init+0xd4>)
 8001dea:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 30000;
 8001dec:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <MX_TIM15_Init+0xd0>)
 8001dee:	f247 5230 	movw	r2, #30000	; 0x7530
 8001df2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df4:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <MX_TIM15_Init+0xd0>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 255;
 8001dfa:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <MX_TIM15_Init+0xd0>)
 8001dfc:	22ff      	movs	r2, #255	; 0xff
 8001dfe:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e00:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <MX_TIM15_Init+0xd0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001e06:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <MX_TIM15_Init+0xd0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001e0c:	4828      	ldr	r0, [pc, #160]	; (8001eb0 <MX_TIM15_Init+0xd0>)
 8001e0e:	f001 fec3 	bl	8003b98 <HAL_TIM_PWM_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM15_Init+0x3c>
  {
    Error_Handler();
 8001e18:	f000 f8b8 	bl	8001f8c <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001e24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4821      	ldr	r0, [pc, #132]	; (8001eb0 <MX_TIM15_Init+0xd0>)
 8001e2c:	f001 fcf0 	bl	8003810 <HAL_TIMEx_MasterConfigSynchronization>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001e36:	f000 f8a9 	bl	8001f8c <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	63bb      	str	r3, [r7, #56]	; 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001e58:	f107 0320 	add.w	r3, r7, #32
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4814      	ldr	r0, [pc, #80]	; (8001eb0 <MX_TIM15_Init+0xd0>)
 8001e60:	f001 fd2a 	bl	80038b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8001e6a:	f000 f88f 	bl	8001f8c <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e6e:	2360      	movs	r3, #96	; 0x60
 8001e70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001e72:	2364      	movs	r3, #100	; 0x64
 8001e74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4807      	ldr	r0, [pc, #28]	; (8001eb0 <MX_TIM15_Init+0xd0>)
 8001e92:	f001 fba5 	bl	80035e0 <HAL_TIM_PWM_ConfigChannel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001e9c:	f000 f876 	bl	8001f8c <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim15);
 8001ea0:	4803      	ldr	r0, [pc, #12]	; (8001eb0 <MX_TIM15_Init+0xd0>)
 8001ea2:	f7ff fd59 	bl	8001958 <HAL_TIM_MspPostInit>

}
 8001ea6:	bf00      	nop
 8001ea8:	3758      	adds	r7, #88	; 0x58
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200010f4 	.word	0x200010f4
 8001eb4:	40014000 	.word	0x40014000

08001eb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ebe:	4a31      	ldr	r2, [pc, #196]	; (8001f84 <MX_GPIO_Init+0xcc>)
 8001ec0:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <MX_GPIO_Init+0xcc>)
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ec8:	6153      	str	r3, [r2, #20]
 8001eca:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <MX_GPIO_Init+0xcc>)
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <MX_GPIO_Init+0xcc>)
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <MX_GPIO_Init+0xcc>)
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	6153      	str	r3, [r2, #20]
 8001ee2:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <MX_GPIO_Init+0xcc>)
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	4a25      	ldr	r2, [pc, #148]	; (8001f84 <MX_GPIO_Init+0xcc>)
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <MX_GPIO_Init+0xcc>)
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef8:	6153      	str	r3, [r2, #20]
 8001efa:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <MX_GPIO_Init+0xcc>)
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DO_SCK_1_Pin|DO_USBPWREN_Pin, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	f248 0102 	movw	r1, #32770	; 0x8002
 8001f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f10:	f005 ff6a 	bl	8007de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|DO_LED_1_Pin|DO_SCK_2_Pin|DO_BOOT_SET_Pin, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001f1a:	481b      	ldr	r0, [pc, #108]	; (8001f88 <MX_GPIO_Init+0xd0>)
 8001f1c:	f005 ff64 	bl	8007de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DO_SCK_1_Pin DO_USBPWREN_Pin */
  GPIO_InitStruct.Pin = DO_SCK_1_Pin|DO_USBPWREN_Pin;
 8001f20:	f248 0302 	movw	r3, #32770	; 0x8002
 8001f24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f26:	2301      	movs	r3, #1
 8001f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	4619      	mov	r1, r3
 8001f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f3c:	f005 fdbe 	bl	8007abc <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_DATA_1_Pin DI_DATA_2_Pin */
  GPIO_InitStruct.Pin = DI_DATA_1_Pin|DI_DATA_2_Pin;
 8001f40:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	4619      	mov	r1, r3
 8001f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f58:	f005 fdb0 	bl	8007abc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin DO_LED_1_Pin DO_SCK_2_Pin DO_BOOT_SET_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|DO_LED_1_Pin|DO_SCK_2_Pin|DO_BOOT_SET_Pin;
 8001f5c:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001f60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f62:	2301      	movs	r3, #1
 8001f64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	4619      	mov	r1, r3
 8001f74:	4804      	ldr	r0, [pc, #16]	; (8001f88 <MX_GPIO_Init+0xd0>)
 8001f76:	f005 fda1 	bl	8007abc <HAL_GPIO_Init>

}
 8001f7a:	bf00      	nop
 8001f7c:	3720      	adds	r7, #32
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	48000400 	.word	0x48000400

08001f8c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 8001f90:	e7fe      	b.n	8001f90 <Error_Handler+0x4>
 8001f92:	bf00      	nop

08001f94 <Commands_BufferHandle>:
uint8_t status = 0;
uint8_t iCalibration = 0;
uint8_t iTare = 0;

void Commands_BufferHandle(uint8_t* Buf, uint32_t *Len)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
	if (status == 0 && Buf[0] == '|')
 8001f9e:	4b23      	ldr	r3, [pc, #140]	; (800202c <Commands_BufferHandle+0x98>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <Commands_BufferHandle+0x26>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b7c      	cmp	r3, #124	; 0x7c
 8001fac:	d105      	bne.n	8001fba <Commands_BufferHandle+0x26>
	{
	  status = 1;
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <Commands_BufferHandle+0x98>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
	  length = 0;
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <Commands_BufferHandle+0x9c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	801a      	strh	r2, [r3, #0]
	}

	if (status == 1)
 8001fba:	4b1c      	ldr	r3, [pc, #112]	; (800202c <Commands_BufferHandle+0x98>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d119      	bne.n	8001ff6 <Commands_BufferHandle+0x62>
	{
	  for (int i = 0; i < *Len; i++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e011      	b.n	8001fec <Commands_BufferHandle+0x58>
	  {
		  command[length] = Buf[i];
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <Commands_BufferHandle+0x9c>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	781a      	ldrb	r2, [r3, #0]
 8001fd6:	4b17      	ldr	r3, [pc, #92]	; (8002034 <Commands_BufferHandle+0xa0>)
 8001fd8:	545a      	strb	r2, [r3, r1]
		  length++;
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <Commands_BufferHandle+0x9c>)
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <Commands_BufferHandle+0x9c>)
 8001fe4:	801a      	strh	r2, [r3, #0]
	  length = 0;
	}

	if (status == 1)
	{
	  for (int i = 0; i < *Len; i++)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d8e8      	bhi.n	8001fc8 <Commands_BufferHandle+0x34>
		  command[length] = Buf[i];
		  length++;
	  }
	}

	if (status == 1 && Buf[*Len-1] == '\n')
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <Commands_BufferHandle+0x98>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d111      	bne.n	8002022 <Commands_BufferHandle+0x8e>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3b01      	subs	r3, #1
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	4413      	add	r3, r2
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b0a      	cmp	r3, #10
 800200c:	d109      	bne.n	8002022 <Commands_BufferHandle+0x8e>
	{
		status = 0;
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <Commands_BufferHandle+0x98>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
		Commands_Parse(command, length);
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <Commands_BufferHandle+0x9c>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	4619      	mov	r1, r3
 800201c:	4805      	ldr	r0, [pc, #20]	; (8002034 <Commands_BufferHandle+0xa0>)
 800201e:	f000 f839 	bl	8002094 <Commands_Parse>
	}

}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200008d2 	.word	0x200008d2
 8002030:	200008d0 	.word	0x200008d0
 8002034:	20001154 	.word	0x20001154

08002038 <_cmd_check>:

uint8_t _cmd_check(uint8_t* buf, uint8_t bufsize, uint8_t* cmd, uint8_t cmdsize)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	607a      	str	r2, [r7, #4]
 8002042:	461a      	mov	r2, r3
 8002044:	460b      	mov	r3, r1
 8002046:	72fb      	strb	r3, [r7, #11]
 8002048:	4613      	mov	r3, r2
 800204a:	72bb      	strb	r3, [r7, #10]
	if(cmdsize >= bufsize)
 800204c:	7aba      	ldrb	r2, [r7, #10]
 800204e:	7afb      	ldrb	r3, [r7, #11]
 8002050:	429a      	cmp	r2, r3
 8002052:	d301      	bcc.n	8002058 <_cmd_check+0x20>
	{
		return 0;
 8002054:	2300      	movs	r3, #0
 8002056:	e017      	b.n	8002088 <_cmd_check+0x50>
	}

	for(int i = 1; i <= cmdsize; i++)
 8002058:	2301      	movs	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	e00f      	b.n	800207e <_cmd_check+0x46>
	{
		if(buf[i] != cmd[i-1])
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	781a      	ldrb	r2, [r3, #0]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3b01      	subs	r3, #1
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	440b      	add	r3, r1
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <_cmd_check+0x40>
		{
			return 0;
 8002074:	2300      	movs	r3, #0
 8002076:	e007      	b.n	8002088 <_cmd_check+0x50>
	if(cmdsize >= bufsize)
	{
		return 0;
	}

	for(int i = 1; i <= cmdsize; i++)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3301      	adds	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	7aba      	ldrb	r2, [r7, #10]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	429a      	cmp	r2, r3
 8002084:	daeb      	bge.n	800205e <_cmd_check+0x26>
		{
			return 0;
		}
	}

	return 1;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <Commands_Parse>:

void Commands_Parse(uint8_t* buf, uint8_t len)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08e      	sub	sp, #56	; 0x38
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
	uint8_t msg[30];
	msg[0] = '|';
 80020a0:	237c      	movs	r3, #124	; 0x7c
 80020a2:	733b      	strb	r3, [r7, #12]
	uint16_t offset = 1;
 80020a4:	2301      	movs	r3, #1
 80020a6:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(_cmd_check(buf, len, "id", 2))
 80020a8:	78f9      	ldrb	r1, [r7, #3]
 80020aa:	2302      	movs	r3, #2
 80020ac:	4a86      	ldr	r2, [pc, #536]	; (80022c8 <Commands_Parse+0x234>)
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffc2 	bl	8002038 <_cmd_check>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d02d      	beq.n	8002116 <Commands_Parse+0x82>
	{
	  unsigned long *id = (unsigned long *)0x1FFFF7AC;
 80020ba:	4b84      	ldr	r3, [pc, #528]	; (80022cc <Commands_Parse+0x238>)
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for( int i = 0; i < 3; i++)
 80020be:	2300      	movs	r3, #0
 80020c0:	633b      	str	r3, [r7, #48]	; 0x30
 80020c2:	e014      	b.n	80020ee <Commands_Parse+0x5a>
	  {
		  offset += sprintf(&msg[offset], "%08X", id[i]);
 80020c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020c6:	f107 020c 	add.w	r2, r7, #12
 80020ca:	18d0      	adds	r0, r2, r3
 80020cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d2:	4413      	add	r3, r2
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	497d      	ldr	r1, [pc, #500]	; (80022d0 <Commands_Parse+0x23c>)
 80020da:	f006 fc0b 	bl	80088f4 <sprintf>
 80020de:	4603      	mov	r3, r0
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020e4:	4413      	add	r3, r2
 80020e6:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t offset = 1;

	if(_cmd_check(buf, len, "id", 2))
	{
	  unsigned long *id = (unsigned long *)0x1FFFF7AC;
	  for( int i = 0; i < 3; i++)
 80020e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ea:	3301      	adds	r3, #1
 80020ec:	633b      	str	r3, [r7, #48]	; 0x30
 80020ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	dde7      	ble.n	80020c4 <Commands_Parse+0x30>
	  {
		  offset += sprintf(&msg[offset], "%08X", id[i]);
	  }
	  msg[offset++] = '\n';
 80020f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	86fa      	strh	r2, [r7, #54]	; 0x36
 80020fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020fe:	4413      	add	r3, r2
 8002100:	220a      	movs	r2, #10
 8002102:	f803 2c2c 	strb.w	r2, [r3, #-44]
	  CDC_Transmit_FS(msg, offset);
 8002106:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002108:	f107 030c 	add.w	r3, r7, #12
 800210c:	4611      	mov	r1, r2
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fb1c 	bl	800174c <CDC_Transmit_FS>
	  msg[offset++] = '\n';

	  CDC_Transmit_FS(msg, offset);
	}

}
 8002114:	e0d3      	b.n	80022be <Commands_Parse+0x22a>
		  offset += sprintf(&msg[offset], "%08X", id[i]);
	  }
	  msg[offset++] = '\n';
	  CDC_Transmit_FS(msg, offset);
	}
	else if(_cmd_check(buf, len, "val", 3))
 8002116:	78f9      	ldrb	r1, [r7, #3]
 8002118:	2303      	movs	r3, #3
 800211a:	4a6e      	ldr	r2, [pc, #440]	; (80022d4 <Commands_Parse+0x240>)
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ff8b 	bl	8002038 <_cmd_check>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d07c      	beq.n	8002222 <Commands_Parse+0x18e>
	{

	  offset += sprintf(&msg[offset], ":%03d", hx1.readingA);
 8002128:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800212a:	f107 020c 	add.w	r2, r7, #12
 800212e:	18d0      	adds	r0, r2, r3
 8002130:	4b69      	ldr	r3, [pc, #420]	; (80022d8 <Commands_Parse+0x244>)
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	461a      	mov	r2, r3
 8002136:	4969      	ldr	r1, [pc, #420]	; (80022dc <Commands_Parse+0x248>)
 8002138:	f006 fbdc 	bl	80088f4 <sprintf>
 800213c:	4603      	mov	r3, r0
 800213e:	b29a      	uxth	r2, r3
 8002140:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002142:	4413      	add	r3, r2
 8002144:	86fb      	strh	r3, [r7, #54]	; 0x36
	  offset += sprintf(&msg[offset], ":%03d", hx1.readingB);
 8002146:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002148:	f107 020c 	add.w	r2, r7, #12
 800214c:	18d0      	adds	r0, r2, r3
 800214e:	4b62      	ldr	r3, [pc, #392]	; (80022d8 <Commands_Parse+0x244>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	461a      	mov	r2, r3
 8002154:	4961      	ldr	r1, [pc, #388]	; (80022dc <Commands_Parse+0x248>)
 8002156:	f006 fbcd 	bl	80088f4 <sprintf>
 800215a:	4603      	mov	r3, r0
 800215c:	b29a      	uxth	r2, r3
 800215e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002160:	4413      	add	r3, r2
 8002162:	86fb      	strh	r3, [r7, #54]	; 0x36
	  offset += sprintf(&msg[offset], ":%03d", hx2.readingA);
 8002164:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002166:	f107 020c 	add.w	r2, r7, #12
 800216a:	18d0      	adds	r0, r2, r3
 800216c:	4b5c      	ldr	r3, [pc, #368]	; (80022e0 <Commands_Parse+0x24c>)
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	461a      	mov	r2, r3
 8002172:	495a      	ldr	r1, [pc, #360]	; (80022dc <Commands_Parse+0x248>)
 8002174:	f006 fbbe 	bl	80088f4 <sprintf>
 8002178:	4603      	mov	r3, r0
 800217a:	b29a      	uxth	r2, r3
 800217c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800217e:	4413      	add	r3, r2
 8002180:	86fb      	strh	r3, [r7, #54]	; 0x36
	  offset += sprintf(&msg[offset], ":%03d", hx2.readingB);
 8002182:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002184:	f107 020c 	add.w	r2, r7, #12
 8002188:	18d0      	adds	r0, r2, r3
 800218a:	4b55      	ldr	r3, [pc, #340]	; (80022e0 <Commands_Parse+0x24c>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	461a      	mov	r2, r3
 8002190:	4952      	ldr	r1, [pc, #328]	; (80022dc <Commands_Parse+0x248>)
 8002192:	f006 fbaf 	bl	80088f4 <sprintf>
 8002196:	4603      	mov	r3, r0
 8002198:	b29a      	uxth	r2, r3
 800219a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800219c:	4413      	add	r3, r2
 800219e:	86fb      	strh	r3, [r7, #54]	; 0x36
	  offset += sprintf(&msg[offset], ":SUMA:%03d", (hx1.readingA/100 + hx1.readingB/100 + hx2.readingA/100 + hx2.readingB/100));
 80021a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021a2:	f107 020c 	add.w	r2, r7, #12
 80021a6:	18d0      	adds	r0, r2, r3
 80021a8:	4b4b      	ldr	r3, [pc, #300]	; (80022d8 <Commands_Parse+0x244>)
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	4a4d      	ldr	r2, [pc, #308]	; (80022e4 <Commands_Parse+0x250>)
 80021ae:	fb82 1203 	smull	r1, r2, r2, r3
 80021b2:	1152      	asrs	r2, r2, #5
 80021b4:	17db      	asrs	r3, r3, #31
 80021b6:	1ad2      	subs	r2, r2, r3
 80021b8:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <Commands_Parse+0x244>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	4949      	ldr	r1, [pc, #292]	; (80022e4 <Commands_Parse+0x250>)
 80021be:	fb81 e103 	smull	lr, r1, r1, r3
 80021c2:	1149      	asrs	r1, r1, #5
 80021c4:	17db      	asrs	r3, r3, #31
 80021c6:	1acb      	subs	r3, r1, r3
 80021c8:	441a      	add	r2, r3
 80021ca:	4b45      	ldr	r3, [pc, #276]	; (80022e0 <Commands_Parse+0x24c>)
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	4945      	ldr	r1, [pc, #276]	; (80022e4 <Commands_Parse+0x250>)
 80021d0:	fb81 e103 	smull	lr, r1, r1, r3
 80021d4:	1149      	asrs	r1, r1, #5
 80021d6:	17db      	asrs	r3, r3, #31
 80021d8:	1acb      	subs	r3, r1, r3
 80021da:	441a      	add	r2, r3
 80021dc:	4b40      	ldr	r3, [pc, #256]	; (80022e0 <Commands_Parse+0x24c>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	4940      	ldr	r1, [pc, #256]	; (80022e4 <Commands_Parse+0x250>)
 80021e2:	fb81 e103 	smull	lr, r1, r1, r3
 80021e6:	1149      	asrs	r1, r1, #5
 80021e8:	17db      	asrs	r3, r3, #31
 80021ea:	1acb      	subs	r3, r1, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	461a      	mov	r2, r3
 80021f0:	493d      	ldr	r1, [pc, #244]	; (80022e8 <Commands_Parse+0x254>)
 80021f2:	f006 fb7f 	bl	80088f4 <sprintf>
 80021f6:	4603      	mov	r3, r0
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021fc:	4413      	add	r3, r2
 80021fe:	86fb      	strh	r3, [r7, #54]	; 0x36

	  msg[offset++] = '\n';
 8002200:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	86fa      	strh	r2, [r7, #54]	; 0x36
 8002206:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800220a:	4413      	add	r3, r2
 800220c:	220a      	movs	r2, #10
 800220e:	f803 2c2c 	strb.w	r2, [r3, #-44]
	  CDC_Transmit_FS(msg, offset);
 8002212:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002214:	f107 030c 	add.w	r3, r7, #12
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fa96 	bl	800174c <CDC_Transmit_FS>
	  msg[offset++] = '\n';

	  CDC_Transmit_FS(msg, offset);
	}

}
 8002220:	e04d      	b.n	80022be <Commands_Parse+0x22a>
	  offset += sprintf(&msg[offset], ":%03d", hx2.readingB);
	  offset += sprintf(&msg[offset], ":SUMA:%03d", (hx1.readingA/100 + hx1.readingB/100 + hx2.readingA/100 + hx2.readingB/100));

	  msg[offset++] = '\n';
	  CDC_Transmit_FS(msg, offset);
	} else if(_cmd_check(buf, len, "cal", 3))
 8002222:	78f9      	ldrb	r1, [r7, #3]
 8002224:	2303      	movs	r3, #3
 8002226:	4a31      	ldr	r2, [pc, #196]	; (80022ec <Commands_Parse+0x258>)
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff05 	bl	8002038 <_cmd_check>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01c      	beq.n	800226e <Commands_Parse+0x1da>
	{
	  memcpy(&msg[offset], "OK", 2);
 8002234:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002236:	f107 020c 	add.w	r2, r7, #12
 800223a:	4413      	add	r3, r2
 800223c:	2202      	movs	r2, #2
 800223e:	492c      	ldr	r1, [pc, #176]	; (80022f0 <Commands_Parse+0x25c>)
 8002240:	4618      	mov	r0, r3
 8002242:	f006 fb39 	bl	80088b8 <memcpy>
	  offset += 2;
 8002246:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002248:	3302      	adds	r3, #2
 800224a:	86fb      	strh	r3, [r7, #54]	; 0x36
	  msg[offset++] = '\n';
 800224c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	86fa      	strh	r2, [r7, #54]	; 0x36
 8002252:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002256:	4413      	add	r3, r2
 8002258:	220a      	movs	r2, #10
 800225a:	f803 2c2c 	strb.w	r2, [r3, #-44]

	  CDC_Transmit_FS(msg, offset);
 800225e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff fa70 	bl	800174c <CDC_Transmit_FS>
	  msg[offset++] = '\n';

	  CDC_Transmit_FS(msg, offset);
	}

}
 800226c:	e027      	b.n	80022be <Commands_Parse+0x22a>
	  memcpy(&msg[offset], "OK", 2);
	  offset += 2;
	  msg[offset++] = '\n';

	  CDC_Transmit_FS(msg, offset);
	} else if(_cmd_check(buf, len, "tare", 4))
 800226e:	78f9      	ldrb	r1, [r7, #3]
 8002270:	2304      	movs	r3, #4
 8002272:	4a20      	ldr	r2, [pc, #128]	; (80022f4 <Commands_Parse+0x260>)
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff fedf 	bl	8002038 <_cmd_check>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01e      	beq.n	80022be <Commands_Parse+0x22a>
	{
	  iTare = 1;
 8002280:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <Commands_Parse+0x264>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
	  memcpy(&msg[offset], "OK", 2);
 8002286:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002288:	f107 020c 	add.w	r2, r7, #12
 800228c:	4413      	add	r3, r2
 800228e:	2202      	movs	r2, #2
 8002290:	4917      	ldr	r1, [pc, #92]	; (80022f0 <Commands_Parse+0x25c>)
 8002292:	4618      	mov	r0, r3
 8002294:	f006 fb10 	bl	80088b8 <memcpy>
	  offset += 2;
 8002298:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800229a:	3302      	adds	r3, #2
 800229c:	86fb      	strh	r3, [r7, #54]	; 0x36
	  msg[offset++] = '\n';
 800229e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	86fa      	strh	r2, [r7, #54]	; 0x36
 80022a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022a8:	4413      	add	r3, r2
 80022aa:	220a      	movs	r2, #10
 80022ac:	f803 2c2c 	strb.w	r2, [r3, #-44]

	  CDC_Transmit_FS(msg, offset);
 80022b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fa47 	bl	800174c <CDC_Transmit_FS>
	}

}
 80022be:	bf00      	nop
 80022c0:	3738      	adds	r7, #56	; 0x38
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	0800b280 	.word	0x0800b280
 80022cc:	1ffff7ac 	.word	0x1ffff7ac
 80022d0:	0800b284 	.word	0x0800b284
 80022d4:	0800b28c 	.word	0x0800b28c
 80022d8:	20001194 	.word	0x20001194
 80022dc:	0800b290 	.word	0x0800b290
 80022e0:	20001174 	.word	0x20001174
 80022e4:	51eb851f 	.word	0x51eb851f
 80022e8:	0800b298 	.word	0x0800b298
 80022ec:	0800b2a4 	.word	0x0800b2a4
 80022f0:	0800b2a8 	.word	0x0800b2a8
 80022f4:	0800b2ac 	.word	0x0800b2ac
 80022f8:	200008d3 	.word	0x200008d3

080022fc <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2202      	movs	r2, #2
 800230e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8002312:	88fa      	ldrh	r2, [r7, #6]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8002318:	88fa      	ldrh	r2, [r7, #6]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	2100      	movs	r1, #0
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f7ff f915 	bl	8001554 <USBD_LL_Transmit>
  
  return USBD_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	2100      	movs	r1, #0
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f7ff f903 	bl	8001554 <USBD_LL_Transmit>
  
  return USBD_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	4613      	mov	r3, r2
 8002364:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2203      	movs	r2, #3
 800236a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800236e:	88fa      	ldrh	r2, [r7, #6]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8002376:	88fa      	ldrh	r2, [r7, #6]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	2100      	movs	r1, #0
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f7ff f8fd 	bl	8001584 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	4613      	mov	r3, r2
 80023a0:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	2100      	movs	r1, #0
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff f8eb 	bl	8001584 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2204      	movs	r2, #4
 80023c4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80023c8:	2300      	movs	r3, #0
 80023ca:	2200      	movs	r2, #0
 80023cc:	2100      	movs	r1, #0
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff f8c0 	bl	8001554 <USBD_LL_Transmit>
  
  return USBD_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop

080023e0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2205      	movs	r2, #5
 80023ec:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80023f0:	2300      	movs	r3, #0
 80023f2:	2200      	movs	r2, #0
 80023f4:	2100      	movs	r1, #0
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff f8c4 	bl	8001584 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop

08002408 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	785b      	ldrb	r3, [r3, #1]
 800241a:	2b09      	cmp	r3, #9
 800241c:	d839      	bhi.n	8002492 <USBD_StdDevReq+0x8a>
 800241e:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <USBD_StdDevReq+0x1c>)
 8002420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002424:	08002475 	.word	0x08002475
 8002428:	08002489 	.word	0x08002489
 800242c:	08002493 	.word	0x08002493
 8002430:	0800247f 	.word	0x0800247f
 8002434:	08002493 	.word	0x08002493
 8002438:	08002457 	.word	0x08002457
 800243c:	0800244d 	.word	0x0800244d
 8002440:	08002493 	.word	0x08002493
 8002444:	0800246b 	.word	0x0800246b
 8002448:	08002461 	.word	0x08002461
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 800244c:	6839      	ldr	r1, [r7, #0]
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f936 	bl	80026c0 <USBD_GetDescriptor>
    break;
 8002454:	e022      	b.n	800249c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8002456:	6839      	ldr	r1, [r7, #0]
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fa25 	bl	80028a8 <USBD_SetAddress>
    break;
 800245e:	e01d      	b.n	800249c <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8002460:	6839      	ldr	r1, [r7, #0]
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fa5e 	bl	8002924 <USBD_SetConfig>
    break;
 8002468:	e018      	b.n	800249c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800246a:	6839      	ldr	r1, [r7, #0]
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fae1 	bl	8002a34 <USBD_GetConfig>
    break;
 8002472:	e013      	b.n	800249c <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fb0e 	bl	8002a98 <USBD_GetStatus>
    break;
 800247c:	e00e      	b.n	800249c <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 800247e:	6839      	ldr	r1, [r7, #0]
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 fb33 	bl	8002aec <USBD_SetFeature>
    break;
 8002486:	e009      	b.n	800249c <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8002488:	6839      	ldr	r1, [r7, #0]
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fb4a 	bl	8002b24 <USBD_ClrFeature>
    break;
 8002490:	e004      	b.n	800249c <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8002492:	6839      	ldr	r1, [r7, #0]
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fbab 	bl	8002bf0 <USBD_CtlError>
    break;
 800249a:	bf00      	nop
  }
  
  return ret;
 800249c:	7bfb      	ldrb	r3, [r7, #15]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop

080024a8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80024b2:	2300      	movs	r3, #0
 80024b4:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80024bc:	2b03      	cmp	r3, #3
 80024be:	d11b      	bne.n	80024f8 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	889b      	ldrh	r3, [r3, #4]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d811      	bhi.n	80024ee <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	6839      	ldr	r1, [r7, #0]
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	88db      	ldrh	r3, [r3, #6]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d110      	bne.n	8002502 <USBD_StdItfReq+0x5a>
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10d      	bne.n	8002502 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ff66 	bl	80023b8 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80024ec:	e009      	b.n	8002502 <USBD_StdItfReq+0x5a>
         USBD_CtlSendStatus(pdev);
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 80024ee:	6839      	ldr	r1, [r7, #0]
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fb7d 	bl	8002bf0 <USBD_CtlError>
    }
    break;
 80024f6:	e004      	b.n	8002502 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 80024f8:	6839      	ldr	r1, [r7, #0]
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fb78 	bl	8002bf0 <USBD_CtlError>
    break;
 8002500:	e000      	b.n	8002504 <USBD_StdItfReq+0x5c>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8002502:	bf00      	nop
    
  default:
     USBD_CtlError(pdev , req);
    break;
  }
  return USBD_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop

08002510 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	889b      	ldrh	r3, [r3, #4]
 8002522:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800252c:	2b20      	cmp	r3, #32
 800252e:	d108      	bne.n	8002542 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	6839      	ldr	r1, [r7, #0]
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4798      	blx	r3
    
    return USBD_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e0ba      	b.n	80026b8 <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	785b      	ldrb	r3, [r3, #1]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d039      	beq.n	80025be <USBD_StdEPReq+0xae>
 800254a:	2b03      	cmp	r3, #3
 800254c:	d002      	beq.n	8002554 <USBD_StdEPReq+0x44>
 800254e:	2b00      	cmp	r3, #0
 8002550:	d06b      	beq.n	800262a <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8002552:	e0b0      	b.n	80026b6 <USBD_StdEPReq+0x1a6>
  switch (req->bRequest) 
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800255a:	2b02      	cmp	r3, #2
 800255c:	d002      	beq.n	8002564 <USBD_StdEPReq+0x54>
 800255e:	2b03      	cmp	r3, #3
 8002560:	d00c      	beq.n	800257c <USBD_StdEPReq+0x6c>
 8002562:	e025      	b.n	80025b0 <USBD_StdEPReq+0xa0>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002564:	7bbb      	ldrb	r3, [r7, #14]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d027      	beq.n	80025ba <USBD_StdEPReq+0xaa>
 800256a:	7bbb      	ldrb	r3, [r7, #14]
 800256c:	2b80      	cmp	r3, #128	; 0x80
 800256e:	d024      	beq.n	80025ba <USBD_StdEPReq+0xaa>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8002570:	7bbb      	ldrb	r3, [r7, #14]
 8002572:	4619      	mov	r1, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7fe ff85 	bl	8001484 <USBD_LL_StallEP>
      }
      break;	
 800257a:	e01e      	b.n	80025ba <USBD_StdEPReq+0xaa>
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	885b      	ldrh	r3, [r3, #2]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <USBD_StdEPReq+0x8a>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002584:	7bbb      	ldrb	r3, [r7, #14]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d007      	beq.n	800259a <USBD_StdEPReq+0x8a>
 800258a:	7bbb      	ldrb	r3, [r7, #14]
 800258c:	2b80      	cmp	r3, #128	; 0x80
 800258e:	d004      	beq.n	800259a <USBD_StdEPReq+0x8a>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8002590:	7bbb      	ldrb	r3, [r7, #14]
 8002592:	4619      	mov	r1, r3
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7fe ff75 	bl	8001484 <USBD_LL_StallEP>
          
        }
      }
      pdev->pClass->Setup (pdev, req);   
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	6839      	ldr	r1, [r7, #0]
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ff05 	bl	80023b8 <USBD_CtlSendStatus>
      
      break;
 80025ae:	e005      	b.n	80025bc <USBD_StdEPReq+0xac>
      
    default:                         
      USBD_CtlError(pdev , req);
 80025b0:	6839      	ldr	r1, [r7, #0]
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fb1c 	bl	8002bf0 <USBD_CtlError>
      break;    
 80025b8:	e000      	b.n	80025bc <USBD_StdEPReq+0xac>
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
 80025ba:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;    
    }
    break;
 80025bc:	e07b      	b.n	80026b6 <USBD_StdEPReq+0x1a6>
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d002      	beq.n	80025ce <USBD_StdEPReq+0xbe>
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d00c      	beq.n	80025e6 <USBD_StdEPReq+0xd6>
 80025cc:	e024      	b.n	8002618 <USBD_StdEPReq+0x108>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80025ce:	7bbb      	ldrb	r3, [r7, #14]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d026      	beq.n	8002622 <USBD_StdEPReq+0x112>
 80025d4:	7bbb      	ldrb	r3, [r7, #14]
 80025d6:	2b80      	cmp	r3, #128	; 0x80
 80025d8:	d023      	beq.n	8002622 <USBD_StdEPReq+0x112>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 80025da:	7bbb      	ldrb	r3, [r7, #14]
 80025dc:	4619      	mov	r1, r3
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe ff50 	bl	8001484 <USBD_LL_StallEP>
      }
      break;	
 80025e4:	e01d      	b.n	8002622 <USBD_StdEPReq+0x112>
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	885b      	ldrh	r3, [r3, #2]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d11b      	bne.n	8002626 <USBD_StdEPReq+0x116>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 80025ee:	7bbb      	ldrb	r3, [r7, #14]
 80025f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00b      	beq.n	8002610 <USBD_StdEPReq+0x100>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80025f8:	7bbb      	ldrb	r3, [r7, #14]
 80025fa:	4619      	mov	r1, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7fe ff55 	bl	80014ac <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	6839      	ldr	r1, [r7, #0]
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff fed1 	bl	80023b8 <USBD_CtlSendStatus>
      }
      break;
 8002616:	e006      	b.n	8002626 <USBD_StdEPReq+0x116>
      
    default:                         
      USBD_CtlError(pdev , req);
 8002618:	6839      	ldr	r1, [r7, #0]
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fae8 	bl	8002bf0 <USBD_CtlError>
      break;    
 8002620:	e002      	b.n	8002628 <USBD_StdEPReq+0x118>
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
 8002622:	bf00      	nop
 8002624:	e047      	b.n	80026b6 <USBD_StdEPReq+0x1a6>
          USBD_LL_ClearStallEP(pdev , ep_addr);
          pdev->pClass->Setup (pdev, req);
        }
        USBD_CtlSendStatus(pdev);
      }
      break;
 8002626:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;    
    }
    break;
 8002628:	e045      	b.n	80026b6 <USBD_StdEPReq+0x1a6>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8002630:	2b02      	cmp	r3, #2
 8002632:	d002      	beq.n	800263a <USBD_StdEPReq+0x12a>
 8002634:	2b03      	cmp	r3, #3
 8002636:	d00b      	beq.n	8002650 <USBD_StdEPReq+0x140>
 8002638:	e036      	b.n	80026a8 <USBD_StdEPReq+0x198>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 800263a:	7bbb      	ldrb	r3, [r7, #14]
 800263c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002640:	2b00      	cmp	r3, #0
 8002642:	d036      	beq.n	80026b2 <USBD_StdEPReq+0x1a2>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8002644:	7bbb      	ldrb	r3, [r7, #14]
 8002646:	4619      	mov	r1, r3
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7fe ff1b 	bl	8001484 <USBD_LL_StallEP>
      }
      break;	
 800264e:	e030      	b.n	80026b2 <USBD_StdEPReq+0x1a2>
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002654:	2b00      	cmp	r3, #0
 8002656:	da08      	bge.n	800266a <USBD_StdEPReq+0x15a>
 8002658:	7bbb      	ldrb	r3, [r7, #14]
 800265a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800265e:	3301      	adds	r3, #1
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	3304      	adds	r3, #4
 8002668:	e007      	b.n	800267a <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800266a:	7bbb      	ldrb	r3, [r7, #14]
 800266c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002670:	3310      	adds	r3, #16
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	60bb      	str	r3, [r7, #8]
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800267c:	7bbb      	ldrb	r3, [r7, #14]
 800267e:	4619      	mov	r1, r3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7fe ff27 	bl	80014d4 <USBD_LL_IsStallEP>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <USBD_StdEPReq+0x184>
      {
        pep->status = 0x0001;     
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e002      	b.n	800269a <USBD_StdEPReq+0x18a>
      }
      else
      {
        pep->status = 0x0000;  
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
      }
      
      USBD_CtlSendData (pdev,
                        (uint8_t *)&pep->status,
 800269a:	68bb      	ldr	r3, [r7, #8]
      else
      {
        pep->status = 0x0000;  
      }
      
      USBD_CtlSendData (pdev,
 800269c:	2202      	movs	r2, #2
 800269e:	4619      	mov	r1, r3
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff fe2b 	bl	80022fc <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 80026a6:	e005      	b.n	80026b4 <USBD_StdEPReq+0x1a4>
      
    default:                         
      USBD_CtlError(pdev , req);
 80026a8:	6839      	ldr	r1, [r7, #0]
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 faa0 	bl	8002bf0 <USBD_CtlError>
      break;
 80026b0:	e000      	b.n	80026b4 <USBD_StdEPReq+0x1a4>
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
      {
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
 80026b2:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;
    }
    break;
 80026b4:	bf00      	nop
    
  default:
    break;
  }
  return ret;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	885b      	ldrh	r3, [r3, #2]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	2b06      	cmp	r3, #6
 80026d6:	f200 80c9 	bhi.w	800286c <USBD_GetDescriptor+0x1ac>
 80026da:	a201      	add	r2, pc, #4	; (adr r2, 80026e0 <USBD_GetDescriptor+0x20>)
 80026dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e0:	080026fd 	.word	0x080026fd
 80026e4:	08002715 	.word	0x08002715
 80026e8:	08002755 	.word	0x08002755
 80026ec:	0800286d 	.word	0x0800286d
 80026f0:	0800286d 	.word	0x0800286d
 80026f4:	08002819 	.word	0x08002819
 80026f8:	0800283f 	.word	0x0800283f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	7c12      	ldrb	r2, [r2, #16]
 8002708:	f107 010a 	add.w	r1, r7, #10
 800270c:	4610      	mov	r0, r2
 800270e:	4798      	blx	r3
 8002710:	60f8      	str	r0, [r7, #12]
    break;
 8002712:	e0b0      	b.n	8002876 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7c1b      	ldrb	r3, [r3, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10d      	bne.n	8002738 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	f107 020a 	add.w	r2, r7, #10
 8002728:	4610      	mov	r0, r2
 800272a:	4798      	blx	r3
 800272c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3301      	adds	r3, #1
 8002732:	2202      	movs	r2, #2
 8002734:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8002736:	e09e      	b.n	8002876 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	f107 020a 	add.w	r2, r7, #10
 8002744:	4610      	mov	r0, r2
 8002746:	4798      	blx	r3
 8002748:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3301      	adds	r3, #1
 800274e:	2202      	movs	r2, #2
 8002750:	701a      	strb	r2, [r3, #0]
    }
    break;
 8002752:	e090      	b.n	8002876 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	885b      	ldrh	r3, [r3, #2]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b05      	cmp	r3, #5
 800275c:	d856      	bhi.n	800280c <USBD_GetDescriptor+0x14c>
 800275e:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <USBD_GetDescriptor+0xa4>)
 8002760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002764:	0800277d 	.word	0x0800277d
 8002768:	08002795 	.word	0x08002795
 800276c:	080027ad 	.word	0x080027ad
 8002770:	080027c5 	.word	0x080027c5
 8002774:	080027dd 	.word	0x080027dd
 8002778:	080027f5 	.word	0x080027f5
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	7c12      	ldrb	r2, [r2, #16]
 8002788:	f107 010a 	add.w	r1, r7, #10
 800278c:	4610      	mov	r0, r2
 800278e:	4798      	blx	r3
 8002790:	60f8      	str	r0, [r7, #12]
      break;
 8002792:	e040      	b.n	8002816 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	7c12      	ldrb	r2, [r2, #16]
 80027a0:	f107 010a 	add.w	r1, r7, #10
 80027a4:	4610      	mov	r0, r2
 80027a6:	4798      	blx	r3
 80027a8:	60f8      	str	r0, [r7, #12]
      break;
 80027aa:	e034      	b.n	8002816 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	7c12      	ldrb	r2, [r2, #16]
 80027b8:	f107 010a 	add.w	r1, r7, #10
 80027bc:	4610      	mov	r0, r2
 80027be:	4798      	blx	r3
 80027c0:	60f8      	str	r0, [r7, #12]
      break;
 80027c2:	e028      	b.n	8002816 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	7c12      	ldrb	r2, [r2, #16]
 80027d0:	f107 010a 	add.w	r1, r7, #10
 80027d4:	4610      	mov	r0, r2
 80027d6:	4798      	blx	r3
 80027d8:	60f8      	str	r0, [r7, #12]
      break;
 80027da:	e01c      	b.n	8002816 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	7c12      	ldrb	r2, [r2, #16]
 80027e8:	f107 010a 	add.w	r1, r7, #10
 80027ec:	4610      	mov	r0, r2
 80027ee:	4798      	blx	r3
 80027f0:	60f8      	str	r0, [r7, #12]
      break;
 80027f2:	e010      	b.n	8002816 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	7c12      	ldrb	r2, [r2, #16]
 8002800:	f107 010a 	add.w	r1, r7, #10
 8002804:	4610      	mov	r0, r2
 8002806:	4798      	blx	r3
 8002808:	60f8      	str	r0, [r7, #12]
      break;
 800280a:	e004      	b.n	8002816 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800280c:	6839      	ldr	r1, [r7, #0]
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f9ee 	bl	8002bf0 <USBD_CtlError>
      return;
 8002814:	e044      	b.n	80028a0 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8002816:	e02e      	b.n	8002876 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7c1b      	ldrb	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002828:	f107 020a 	add.w	r2, r7, #10
 800282c:	4610      	mov	r0, r2
 800282e:	4798      	blx	r3
 8002830:	60f8      	str	r0, [r7, #12]
      break;
 8002832:	e020      	b.n	8002876 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8002834:	6839      	ldr	r1, [r7, #0]
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f9da 	bl	8002bf0 <USBD_CtlError>
      return;
 800283c:	e030      	b.n	80028a0 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7c1b      	ldrb	r3, [r3, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10d      	bne.n	8002862 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f107 020a 	add.w	r2, r7, #10
 8002852:	4610      	mov	r0, r2
 8002854:	4798      	blx	r3
 8002856:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3301      	adds	r3, #1
 800285c:	2207      	movs	r2, #7
 800285e:	701a      	strb	r2, [r3, #0]
      break; 
 8002860:	e009      	b.n	8002876 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8002862:	6839      	ldr	r1, [r7, #0]
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f9c3 	bl	8002bf0 <USBD_CtlError>
      return;
 800286a:	e019      	b.n	80028a0 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 800286c:	6839      	ldr	r1, [r7, #0]
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f9be 	bl	8002bf0 <USBD_CtlError>
    return;
 8002874:	e014      	b.n	80028a0 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8002876:	897b      	ldrh	r3, [r7, #10]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d011      	beq.n	80028a0 <USBD_GetDescriptor+0x1e0>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	88db      	ldrh	r3, [r3, #6]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00d      	beq.n	80028a0 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	88da      	ldrh	r2, [r3, #6]
 8002888:	897b      	ldrh	r3, [r7, #10]
 800288a:	4293      	cmp	r3, r2
 800288c:	bf28      	it	cs
 800288e:	4613      	movcs	r3, r2
 8002890:	b29b      	uxth	r3, r3
 8002892:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8002894:	897b      	ldrh	r3, [r7, #10]
 8002896:	461a      	mov	r2, r3
 8002898:	68f9      	ldr	r1, [r7, #12]
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff fd2e 	bl	80022fc <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop

080028a8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	889b      	ldrh	r3, [r3, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d12c      	bne.n	8002914 <USBD_SetAddress+0x6c>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	88db      	ldrh	r3, [r3, #6]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d128      	bne.n	8002914 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	885b      	ldrh	r3, [r3, #2]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028cc:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d104      	bne.n	80028e2 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80028d8:	6839      	ldr	r1, [r7, #0]
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f988 	bl	8002bf0 <USBD_CtlError>
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80028e0:	e01c      	b.n	800291c <USBD_SetAddress+0x74>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	4619      	mov	r1, r3
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe fe1c 	bl	800152c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff fd5f 	bl	80023b8 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d004      	beq.n	800290a <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002908:	e008      	b.n	800291c <USBD_SetAddress+0x74>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8002912:	e003      	b.n	800291c <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8002914:	6839      	ldr	r1, [r7, #0]
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f96a 	bl	8002bf0 <USBD_CtlError>
  } 
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	885b      	ldrh	r3, [r3, #2]
 8002932:	b2da      	uxtb	r2, r3
 8002934:	4b3e      	ldr	r3, [pc, #248]	; (8002a30 <USBD_SetConfig+0x10c>)
 8002936:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8002938:	4b3d      	ldr	r3, [pc, #244]	; (8002a30 <USBD_SetConfig+0x10c>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d904      	bls.n	800294a <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8002940:	6839      	ldr	r1, [r7, #0]
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f954 	bl	8002bf0 <USBD_CtlError>
 8002948:	e06f      	b.n	8002a2a <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8002950:	2b02      	cmp	r3, #2
 8002952:	d002      	beq.n	800295a <USBD_SetConfig+0x36>
 8002954:	2b03      	cmp	r3, #3
 8002956:	d023      	beq.n	80029a0 <USBD_SetConfig+0x7c>
 8002958:	e062      	b.n	8002a20 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800295a:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <USBD_SetConfig+0x10c>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01a      	beq.n	8002998 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8002962:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <USBD_SetConfig+0x10c>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2203      	movs	r2, #3
 8002970:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002974:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <USBD_SetConfig+0x10c>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fa04 	bl	8002d88 <USBD_SetClassConfig>
 8002980:	4603      	mov	r3, r0
 8002982:	2b02      	cmp	r3, #2
 8002984:	d104      	bne.n	8002990 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 8002986:	6839      	ldr	r1, [r7, #0]
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f931 	bl	8002bf0 <USBD_CtlError>
          return;
 800298e:	e04c      	b.n	8002a2a <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff fd11 	bl	80023b8 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 8002996:	e048      	b.n	8002a2a <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff fd0d 	bl	80023b8 <USBD_CtlSendStatus>
      }
      break;
 800299e:	e044      	b.n	8002a2a <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80029a0:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <USBD_SetConfig+0x10c>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d112      	bne.n	80029ce <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80029b0:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <USBD_SetConfig+0x10c>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80029ba:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <USBD_SetConfig+0x10c>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 fa01 	bl	8002dc8 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff fcf6 	bl	80023b8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80029cc:	e02d      	b.n	8002a2a <USBD_SetConfig+0x106>
        pdev->dev_config = cfgidx;          
        USBD_ClrClassConfig(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <USBD_SetConfig+0x10c>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d01d      	beq.n	8002a18 <USBD_SetConfig+0xf4>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	4619      	mov	r1, r3
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f9ef 	bl	8002dc8 <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <USBD_SetConfig+0x10c>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <USBD_SetConfig+0x10c>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	4619      	mov	r1, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f9c4 	bl	8002d88 <USBD_SetClassConfig>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d104      	bne.n	8002a10 <USBD_SetConfig+0xec>
        {
          USBD_CtlError(pdev , req);  
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f8f1 	bl	8002bf0 <USBD_CtlError>
          return;
 8002a0e:	e00c      	b.n	8002a2a <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff fcd1 	bl	80023b8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8002a16:	e008      	b.n	8002a2a <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fccd 	bl	80023b8 <USBD_CtlSendStatus>
      }
      break;
 8002a1e:	e004      	b.n	8002a2a <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8002a20:	6839      	ldr	r1, [r7, #0]
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f8e4 	bl	8002bf0 <USBD_CtlError>
      break;
 8002a28:	bf00      	nop
    }
  }
}
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	200008d4 	.word	0x200008d4

08002a34 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	88db      	ldrh	r3, [r3, #6]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d004      	beq.n	8002a50 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f8d1 	bl	8002bf0 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8002a4e:	e01f      	b.n	8002a90 <USBD_GetConfig+0x5c>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d002      	beq.n	8002a60 <USBD_GetConfig+0x2c>
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d00b      	beq.n	8002a76 <USBD_GetConfig+0x42>
 8002a5e:	e012      	b.n	8002a86 <USBD_GetConfig+0x52>
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&pdev->dev_default_config,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3308      	adds	r3, #8
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
      USBD_CtlSendData (pdev, 
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fc44 	bl	80022fc <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_default_config,
                        1);
      break;
 8002a74:	e00c      	b.n	8002a90 <USBD_GetConfig+0x5c>
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&pdev->dev_config,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3304      	adds	r3, #4
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff fc3c 	bl	80022fc <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_config,
                        1);
      break;
 8002a84:	e004      	b.n	8002a90 <USBD_GetConfig+0x5c>
      
    default:
       USBD_CtlError(pdev , req);
 8002a86:	6839      	ldr	r1, [r7, #0]
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f8b1 	bl	8002bf0 <USBD_CtlError>
      break;
 8002a8e:	bf00      	nop
    }
  }
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8002aa8:	3b02      	subs	r3, #2
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d815      	bhi.n	8002ada <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f043 0202 	orr.w	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	330c      	adds	r3, #12
    if (pdev->dev_remote_wakeup) 
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
    }
    
    USBD_CtlSendData (pdev, 
 8002ace:	2202      	movs	r2, #2
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fc12 	bl	80022fc <USBD_CtlSendData>
                      (uint8_t *)& pdev->dev_config_status,
                      2);
    break;
 8002ad8:	e004      	b.n	8002ae4 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8002ada:	6839      	ldr	r1, [r7, #0]
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f887 	bl	8002bf0 <USBD_CtlError>
    break;
 8002ae2:	bf00      	nop
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	885b      	ldrh	r3, [r3, #2]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d10d      	bne.n	8002b1a <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	6839      	ldr	r1, [r7, #0]
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff fc4f 	bl	80023b8 <USBD_CtlSendStatus>
  }

}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop

08002b24 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8002b34:	3b02      	subs	r3, #2
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d812      	bhi.n	8002b60 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	885b      	ldrh	r3, [r3, #2]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d113      	bne.n	8002b6a <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	6839      	ldr	r1, [r7, #0]
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff fc2d 	bl	80023b8 <USBD_CtlSendStatus>
    }
    break;
 8002b5e:	e004      	b.n	8002b6a <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8002b60:	6839      	ldr	r1, [r7, #0]
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f844 	bl	8002bf0 <USBD_CtlError>
    break;
 8002b68:	e000      	b.n	8002b6c <USBD_ClrFeature+0x48>
    {
      pdev->dev_remote_wakeup = 0; 
      pdev->pClass->Setup (pdev, req);   
      USBD_CtlSendStatus(pdev);
    }
    break;
 8002b6a:	bf00      	nop
    
  default :
     USBD_CtlError(pdev , req);
    break;
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	785a      	ldrb	r2, [r3, #1]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	3302      	adds	r3, #2
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	3303      	adds	r3, #3
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	3304      	adds	r3, #4
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	3305      	adds	r3, #5
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	3306      	adds	r3, #6
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	3307      	adds	r3, #7
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	80da      	strh	r2, [r3, #6]

}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop

08002bf0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 8002bfa:	2180      	movs	r1, #128	; 0x80
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7fe fc41 	bl	8001484 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002c02:	2100      	movs	r1, #0
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7fe fc3d 	bl	8001484 <USBD_LL_StallEP>
}
 8002c0a:	bf00      	nop
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop

08002c14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d033      	beq.n	8002c92 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f836 	bl	8002c9c <USBD_GetLen>
 8002c30:	4603      	mov	r3, r0
 8002c32:	3301      	adds	r3, #1
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	75fa      	strb	r2, [r7, #23]
 8002c44:	461a      	mov	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4413      	add	r3, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	8812      	ldrh	r2, [r2, #0]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002c52:	7dfb      	ldrb	r3, [r7, #23]
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	75fa      	strb	r2, [r7, #23]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	2203      	movs	r2, #3
 8002c60:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8002c62:	e012      	b.n	8002c8a <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	75fa      	strb	r2, [r7, #23]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	441a      	add	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1c59      	adds	r1, r3, #1
 8002c74:	60f9      	str	r1, [r7, #12]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	75fa      	strb	r2, [r7, #23]
 8002c80:	461a      	mov	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4413      	add	r3, r2
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != '\0') 
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1e8      	bne.n	8002c64 <USBD_GetString+0x50>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop

08002c9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8002ca8:	e005      	b.n	8002cb6 <USBD_GetLen+0x1a>
    {
        len++;
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	3301      	adds	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
        buf++;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	607b      	str	r3, [r7, #4]
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f5      	bne.n	8002caa <USBD_GetLen+0xe>
    {
        len++;
        buf++;
    }

    return len;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e01a      	b.n	8002d1a <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	79fa      	ldrb	r2, [r7, #7]
 8002d10:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7fe fb1c 	bl	8001350 <USBD_LL_Init>
  
  return USBD_OK; 
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop

08002d24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d006      	beq.n	8002d46 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]
 8002d44:	e001      	b.n	8002d4a <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002d46:	2302      	movs	r3, #2
 8002d48:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7fe fb51 	bl	8001408 <USBD_LL_Start>
  
  return USBD_OK;  
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop

08002d88 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002d94:	2302      	movs	r3, #2
 8002d96:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00c      	beq.n	8002dbc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	4611      	mov	r1, r2
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop

08002dc8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	4611      	mov	r1, r2
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	4798      	blx	r3
  return USBD_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop

08002df0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e00:	6839      	ldr	r1, [r7, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff feb6 	bl	8002b74 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8002e16:	461a      	mov	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d00b      	beq.n	8002e44 <USBD_LL_SetupStage+0x54>
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d011      	beq.n	8002e54 <USBD_LL_SetupStage+0x64>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d117      	bne.n	8002e64 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff fae3 	bl	8002408 <USBD_StdDevReq>
    break;
 8002e42:	e01a      	b.n	8002e7a <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff fb2b 	bl	80024a8 <USBD_StdItfReq>
    break;
 8002e52:	e012      	b.n	8002e7a <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fb57 	bl	8002510 <USBD_StdEPReq>
    break;
 8002e62:	e00a      	b.n	8002e7a <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8002e6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	4619      	mov	r1, r3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fe fb06 	bl	8001484 <USBD_LL_StallEP>
    break;
 8002e78:	bf00      	nop
  }  
  return USBD_OK;  
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002e92:	7afb      	ldrb	r3, [r7, #11]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d138      	bne.n	8002f0a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002e9e:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d142      	bne.n	8002f30 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d914      	bls.n	8002ee0 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	1ad2      	subs	r2, r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	68da      	ldr	r2, [r3, #12]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	bf28      	it	cs
 8002ed0:	4613      	movcs	r3, r2
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
       
        USBD_CtlContinueRx (pdev, 
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff fa5b 	bl	8002394 <USBD_CtlContinueRx>
 8002ede:	e027      	b.n	8002f30 <USBD_LL_DataOutStage+0xac>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d105      	bne.n	8002f02 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f7ff fa58 	bl	80023b8 <USBD_CtlSendStatus>
 8002f08:	e012      	b.n	8002f30 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00c      	beq.n	8002f30 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d107      	bne.n	8002f30 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	7afa      	ldrb	r2, [r7, #11]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	4798      	blx	r3
  }  
  return USBD_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop

08002f3c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	460b      	mov	r3, r1
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002f4a:	7afb      	ldrb	r3, [r7, #11]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d16c      	bne.n	800302a <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3314      	adds	r3, #20
 8002f54:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d157      	bne.n	8003010 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d915      	bls.n	8002f98 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	1ad2      	subs	r2, r2, r3
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	689b      	ldr	r3, [r3, #8]
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
        
        USBD_CtlContinueSendData (pdev, 
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f7ff f9d5 	bl	8002334 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2100      	movs	r1, #0
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7fe faf7 	bl	8001584 <USBD_LL_PrepareReceive>
 8002f96:	e03b      	b.n	8003010 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	68d2      	ldr	r2, [r2, #12]
 8002fa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002fa4:	fb02 f201 	mul.w	r2, r2, r1
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d11c      	bne.n	8002fe8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	68db      	ldr	r3, [r3, #12]
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d316      	bcc.n	8002fe8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
           (pep->total_length >= pep->maxpacket) &&
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d20f      	bcs.n	8002fe8 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2100      	movs	r1, #0
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f7ff f9b1 	bl	8002334 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002fda:	2300      	movs	r3, #0
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2100      	movs	r1, #0
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f7fe facf 	bl	8001584 <USBD_LL_PrepareReceive>
 8002fe6:	e013      	b.n	8003010 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d105      	bne.n	800300a <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f7ff f9e8 	bl	80023e0 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003016:	2b01      	cmp	r3, #1
 8003018:	d11a      	bne.n	8003050 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f7ff fea8 	bl	8002d70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8003028:	e012      	b.n	8003050 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00c      	beq.n	8003050 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 800303c:	2b03      	cmp	r3, #3
 800303e:	d107      	bne.n	8003050 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	7afa      	ldrb	r2, [r7, #11]
 800304a:	4611      	mov	r1, r2
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	4798      	blx	r3
  }  
  return USBD_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop

0800305c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003064:	2340      	movs	r3, #64	; 0x40
 8003066:	2200      	movs	r2, #0
 8003068:	2100      	movs	r1, #0
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fe f9dc 	bl	8001428 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2240      	movs	r2, #64	; 0x40
 8003074:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003078:	2340      	movs	r3, #64	; 0x40
 800307a:	2200      	movs	r2, #0
 800307c:	2180      	movs	r1, #128	; 0x80
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fe f9d2 	bl	8001428 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2240      	movs	r2, #64	; 0x40
 8003088:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003098:	2b00      	cmp	r3, #0
 800309a:	d009      	beq.n	80030b0 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6852      	ldr	r2, [r2, #4]
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	4611      	mov	r1, r2
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	4798      	blx	r3
 
  
  return USBD_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop

080030bc <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2204      	movs	r2, #4
 80030f4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop

08003108 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop

0800312c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800313a:	2b03      	cmp	r3, #3
 800313c:	d10b      	bne.n	8003156 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	7c1b      	ldrb	r3, [r3, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10e      	bne.n	8003196 <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8003178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800317c:	2202      	movs	r2, #2
 800317e:	2181      	movs	r1, #129	; 0x81
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7fe f951 	bl	8001428 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8003186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800318a:	2202      	movs	r2, #2
 800318c:	2101      	movs	r1, #1
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe f94a 	bl	8001428 <USBD_LL_OpenEP>
 8003194:	e00b      	b.n	80031ae <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8003196:	2340      	movs	r3, #64	; 0x40
 8003198:	2202      	movs	r2, #2
 800319a:	2181      	movs	r1, #129	; 0x81
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7fe f943 	bl	8001428 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 80031a2:	2340      	movs	r3, #64	; 0x40
 80031a4:	2202      	movs	r2, #2
 80031a6:	2101      	movs	r1, #1
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fe f93d 	bl	8001428 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 80031ae:	2308      	movs	r3, #8
 80031b0:	2203      	movs	r2, #3
 80031b2:	2182      	movs	r1, #130	; 0x82
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7fe f937 	bl	8001428 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80031ba:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80031be:	f7fe fa0d 	bl	80015dc <USBD_static_malloc>
 80031c2:	4602      	mov	r2, r0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 80031d4:	2301      	movs	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
 80031d8:	e026      	b.n	8003228 <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80031e0:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	7c1b      	ldrb	r3, [r3, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d109      	bne.n	8003218 <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800320a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800320e:	2101      	movs	r1, #1
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fe f9b7 	bl	8001584 <USBD_LL_PrepareReceive>
 8003216:	e007      	b.n	8003228 <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800321e:	2340      	movs	r3, #64	; 0x40
 8003220:	2101      	movs	r1, #1
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fe f9ae 	bl	8001584 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop

08003234 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8003244:	2181      	movs	r1, #129	; 0x81
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fe f908 	bl	800145c <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800324c:	2101      	movs	r1, #1
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fe f904 	bl	800145c <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8003254:	2182      	movs	r1, #130	; 0x82
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fe f900 	bl	800145c <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00e      	beq.n	8003284 <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe f9be 	bl	80015f8 <USBD_static_free>
    pdev->pClassData = NULL;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8003284:	7bfb      	ldrb	r3, [r7, #15]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop

08003290 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80032a0:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d03a      	beq.n	8003324 <USBD_CDC_Setup+0x94>
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d000      	beq.n	80032b4 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 80032b2:	e043      	b.n	800333c <USBD_CDC_Setup+0xac>
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	88db      	ldrh	r3, [r3, #6]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d029      	beq.n	8003310 <USBD_CDC_Setup+0x80>
    {
      if (req->bmRequest & 0x80)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	da11      	bge.n	80032ea <USBD_CDC_Setup+0x5a>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80032d2:	68f9      	ldr	r1, [r7, #12]
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
    {
      if (req->bmRequest & 0x80)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	88d2      	ldrh	r2, [r2, #6]
 80032d8:	4798      	blx	r3
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 80032da:	68f9      	ldr	r1, [r7, #12]
      if (req->bmRequest & 0x80)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	88db      	ldrh	r3, [r3, #6]
 80032e0:	461a      	mov	r2, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff f80a 	bl	80022fc <USBD_CtlSendData>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 80032e8:	e029      	b.n	800333e <USBD_CDC_Setup+0xae>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	785a      	ldrb	r2, [r3, #1]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	88db      	ldrh	r3, [r3, #6]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
                           (uint8_t *)hcdc->data,
 8003300:	68f9      	ldr	r1, [r7, #12]
      else
      {
        hcdc->CmdOpCode = req->bRequest;
        hcdc->CmdLength = req->wLength;
        
        USBD_CtlPrepareRx (pdev, 
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	88db      	ldrh	r3, [r3, #6]
 8003306:	461a      	mov	r2, r3
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff f825 	bl	8002358 <USBD_CtlPrepareRx>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 800330e:	e016      	b.n	800333e <USBD_CDC_Setup+0xae>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	7850      	ldrb	r0, [r2, #1]
 800331c:	2200      	movs	r2, #0
 800331e:	6839      	ldr	r1, [r7, #0]
 8003320:	4798      	blx	r3
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 8003322:	e00c      	b.n	800333e <USBD_CDC_Setup+0xae>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	785b      	ldrb	r3, [r3, #1]
 8003328:	2b0a      	cmp	r3, #10
 800332a:	d001      	beq.n	8003330 <USBD_CDC_Setup+0xa0>
 800332c:	2b0b      	cmp	r3, #11
                        &ifalt,
                        1);
      break;
      
    case USB_REQ_SET_INTERFACE :
      break;
 800332e:	e005      	b.n	800333c <USBD_CDC_Setup+0xac>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8003330:	2201      	movs	r2, #1
 8003332:	4905      	ldr	r1, [pc, #20]	; (8003348 <USBD_CDC_Setup+0xb8>)
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7fe ffe1 	bl	80022fc <USBD_CtlSendData>
                        &ifalt,
                        1);
      break;
 800333a:	bf00      	nop
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 800333c:	bf00      	nop
  }
  return USBD_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	200008d5 	.word	0x200008d5

0800334c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800335e:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e000      	b.n	8003378 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8003376:	2302      	movs	r3, #2
  }
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003396:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7fe f909 	bl	80015b4 <USBD_LL_GetRxDataSize>
 80033a2:	4602      	mov	r2, r0
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00d      	beq.n	80033d0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80033c8:	4611      	mov	r1, r2
 80033ca:	4798      	blx	r3

    return USBD_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop

080033dc <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80033ea:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d015      	beq.n	8003422 <USBD_CDC_EP0_RxReady+0x46>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80033fc:	2bff      	cmp	r3, #255	; 0xff
 80033fe:	d010      	beq.n	8003422 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800340e:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003416:	b292      	uxth	r2, r2
 8003418:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	22ff      	movs	r2, #255	; 0xff
 800341e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2243      	movs	r2, #67	; 0x43
 8003438:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800343a:	4b03      	ldr	r3, [pc, #12]	; (8003448 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	200000cc 	.word	0x200000cc

0800344c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2243      	movs	r2, #67	; 0x43
 8003458:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800345a:	4b03      	ldr	r3, [pc, #12]	; (8003468 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	20000088 	.word	0x20000088

0800346c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2243      	movs	r2, #67	; 0x43
 8003478:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800347a:	4b03      	ldr	r3, [pc, #12]	; (8003488 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	20000110 	.word	0x20000110

0800348c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	220a      	movs	r2, #10
 8003498:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800349a:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	20000044 	.word	0x20000044

080034ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80034b6:	2302      	movs	r3, #2
 80034b8:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 80034c8:	2300      	movs	r3, #0
 80034ca:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop

080034dc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	4613      	mov	r3, r2
 80034e8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80034f0:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	371c      	adds	r7, #28
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003520:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003546:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800354e:	2b00      	cmp	r3, #0
 8003550:	d017      	beq.n	8003582 <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003558:	2b00      	cmp	r3, #0
 800355a:	d110      	bne.n	800357e <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2201      	movs	r2, #1
 8003560:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8003570:	b29b      	uxth	r3, r3
 8003572:	2181      	movs	r1, #129	; 0x81
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fd ffed 	bl	8001554 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	e002      	b.n	8003584 <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 8003582:	2302      	movs	r3, #2
  }
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800359a:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d017      	beq.n	80035d6 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	7c1b      	ldrb	r3, [r3, #16]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035b8:	2101      	movs	r1, #1
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd ffe2 	bl	8001584 <USBD_LL_PrepareReceive>
 80035c0:	e007      	b.n	80035d2 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80035c8:	2340      	movs	r3, #64	; 0x40
 80035ca:	2101      	movs	r1, #1
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7fd ffd9 	bl	8001584 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e000      	b.n	80035d8 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80035d6:	2302      	movs	r3, #2
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e105      	b.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x226>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2202      	movs	r2, #2
 8003606:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b14      	cmp	r3, #20
 800360e:	f200 80f0 	bhi.w	80037f2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003612:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	0800366d 	.word	0x0800366d
 800361c:	080037f3 	.word	0x080037f3
 8003620:	080037f3 	.word	0x080037f3
 8003624:	080037f3 	.word	0x080037f3
 8003628:	080036ad 	.word	0x080036ad
 800362c:	080037f3 	.word	0x080037f3
 8003630:	080037f3 	.word	0x080037f3
 8003634:	080037f3 	.word	0x080037f3
 8003638:	080036ef 	.word	0x080036ef
 800363c:	080037f3 	.word	0x080037f3
 8003640:	080037f3 	.word	0x080037f3
 8003644:	080037f3 	.word	0x080037f3
 8003648:	0800372f 	.word	0x0800372f
 800364c:	080037f3 	.word	0x080037f3
 8003650:	080037f3 	.word	0x080037f3
 8003654:	080037f3 	.word	0x080037f3
 8003658:	08003771 	.word	0x08003771
 800365c:	080037f3 	.word	0x080037f3
 8003660:	080037f3 	.word	0x080037f3
 8003664:	080037f3 	.word	0x080037f3
 8003668:	080037b1 	.word	0x080037b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fb90 	bl	8003d98 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	6992      	ldr	r2, [r2, #24]
 8003682:	f042 0208 	orr.w	r2, r2, #8
 8003686:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	6992      	ldr	r2, [r2, #24]
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	6991      	ldr	r1, [r2, #24]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	6912      	ldr	r2, [r2, #16]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	619a      	str	r2, [r3, #24]
    }
    break;
 80036aa:	e0a3      	b.n	80037f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fc06 	bl	8003ec4 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	6992      	ldr	r2, [r2, #24]
 80036c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036c6:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	6992      	ldr	r2, [r2, #24]
 80036d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	6991      	ldr	r1, [r2, #24]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	6912      	ldr	r2, [r2, #16]
 80036e6:	0212      	lsls	r2, r2, #8
 80036e8:	430a      	orrs	r2, r1
 80036ea:	619a      	str	r2, [r3, #24]
    }
    break;
 80036ec:	e082      	b.n	80037f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fc75 	bl	8003fe4 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	69d2      	ldr	r2, [r2, #28]
 8003704:	f042 0208 	orr.w	r2, r2, #8
 8003708:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	69d2      	ldr	r2, [r2, #28]
 8003714:	f022 0204 	bic.w	r2, r2, #4
 8003718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	69d1      	ldr	r1, [r2, #28]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	6912      	ldr	r2, [r2, #16]
 8003728:	430a      	orrs	r2, r1
 800372a:	61da      	str	r2, [r3, #28]
    }
    break;
 800372c:	e062      	b.n	80037f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fce3 	bl	8004100 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	6812      	ldr	r2, [r2, #0]
 8003742:	69d2      	ldr	r2, [r2, #28]
 8003744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003748:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	69d2      	ldr	r2, [r2, #28]
 8003754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	69d1      	ldr	r1, [r2, #28]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	6912      	ldr	r2, [r2, #16]
 8003768:	0212      	lsls	r2, r2, #8
 800376a:	430a      	orrs	r2, r1
 800376c:	61da      	str	r2, [r3, #28]
    }
    break;
 800376e:	e041      	b.n	80037f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f938 	bl	80039ec <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003786:	f042 0208 	orr.w	r2, r2, #8
 800378a:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003796:	f022 0204 	bic.w	r2, r2, #4
 800379a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	6912      	ldr	r2, [r2, #16]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 80037ae:	e021      	b.n	80037f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f982 	bl	8003ac0 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80037c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80037d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	6912      	ldr	r2, [r2, #16]
 80037ea:	0212      	lsls	r2, r2, #8
 80037ec:	430a      	orrs	r2, r1
 80037ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 80037f0:	e000      	b.n	80037f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 80037f2:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop

08003810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003824:	2302      	movs	r3, #2
 8003826:	e03d      	b.n	80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a1a      	ldr	r2, [pc, #104]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a19      	ldr	r2, [pc, #100]	; (80038b4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d108      	bne.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800385a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800387e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	4313      	orrs	r3, r2
 8003888:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
} 
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	40012c00 	.word	0x40012c00
 80038b4:	40013400 	.word	0x40013400

080038b8 <HAL_TIMEx_ConfigBreakDeadTime>:
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e081      	b.n	80039d8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a40      	ldr	r2, [pc, #256]	; (80039e4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d004      	beq.n	80038f0 <HAL_TIMEx_ConfigBreakDeadTime+0x38>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a3f      	ldr	r2, [pc, #252]	; (80039e8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d13d      	bne.n	800396c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Clear the BDTR bits */
    tmpbdtr &= ~(TIM_BDTR_DTG | TIM_BDTR_LOCK |  TIM_BDTR_OSSI | 
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 80038f6:	60fb      	str	r3, [r7, #12]
                 TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
                 TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF |
                 TIM_BDTR_BK2F | TIM_BDTR_BK2E | TIM_BDTR_BK2P);

    /* Set the BDTR bits */
    tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	041b      	lsls	r3, r3, #16
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	051b      	lsls	r3, r3, #20
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->Break2State;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->Break2Polarity;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e02c      	b.n	80039c6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
  }
  else
  {
    /* Clear the BDTR bits */
    tmpbdtr &= ~(TIM_BDTR_DTG | TIM_BDTR_LOCK |  TIM_BDTR_OSSI | 
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	0d1b      	lsrs	r3, r3, #20
 8003970:	051b      	lsls	r3, r3, #20
 8003972:	60fb      	str	r3, [r7, #12]
                 TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
                 TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF);
    
    /* Set the BDTR bits */
    tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	041b      	lsls	r3, r3, #16
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	40012c00 	.word	0x40012c00
 80039e8:	40013400 	.word	0x40013400

080039ec <TIM_OC5_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b087      	sub	sp, #28
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2a:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a3c:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a17      	ldr	r2, [pc, #92]	; (8003aac <TIM_OC5_SetConfig+0xc0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00f      	beq.n	8003a72 <TIM_OC5_SetConfig+0x86>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <TIM_OC5_SetConfig+0xc4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00b      	beq.n	8003a72 <TIM_OC5_SetConfig+0x86>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <TIM_OC5_SetConfig+0xc8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d007      	beq.n	8003a72 <TIM_OC5_SetConfig+0x86>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a14      	ldr	r2, [pc, #80]	; (8003ab8 <TIM_OC5_SetConfig+0xcc>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d003      	beq.n	8003a72 <TIM_OC5_SetConfig+0x86>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a13      	ldr	r2, [pc, #76]	; (8003abc <TIM_OC5_SetConfig+0xd0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d109      	bne.n	8003a86 <TIM_OC5_SetConfig+0x9a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	621a      	str	r2, [r3, #32]
}
 8003aa0:	bf00      	nop
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	40012c00 	.word	0x40012c00
 8003ab0:	40013400 	.word	0x40013400
 8003ab4:	40014000 	.word	0x40014000
 8003ab8:	40014400 	.word	0x40014400
 8003abc:	40014800 	.word	0x40014800

08003ac0 <TIM_OC6_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af2:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003afe:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b12:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	051b      	lsls	r3, r3, #20
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a18      	ldr	r2, [pc, #96]	; (8003b84 <TIM_OC6_SetConfig+0xc4>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00f      	beq.n	8003b48 <TIM_OC6_SetConfig+0x88>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <TIM_OC6_SetConfig+0xc8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00b      	beq.n	8003b48 <TIM_OC6_SetConfig+0x88>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <TIM_OC6_SetConfig+0xcc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d007      	beq.n	8003b48 <TIM_OC6_SetConfig+0x88>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <TIM_OC6_SetConfig+0xd0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_OC6_SetConfig+0x88>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <TIM_OC6_SetConfig+0xd4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d109      	bne.n	8003b5c <TIM_OC6_SetConfig+0x9c>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	029b      	lsls	r3, r3, #10
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	621a      	str	r2, [r3, #32]
} 
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	40013400 	.word	0x40013400
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	40014400 	.word	0x40014400
 8003b94:	40014800 	.word	0x40014800

08003b98 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e01d      	b.n	8003be6 <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd feaa 	bl	8001918 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	f000 f854 	bl	8003c84 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop

08003bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	6839      	ldr	r1, [r7, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 faec 	bl	80041e0 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <HAL_TIM_PWM_Start+0x80>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x4a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a17      	ldr	r2, [pc, #92]	; (8003c74 <HAL_TIM_PWM_Start+0x84>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x4a>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <HAL_TIM_PWM_Start+0x88>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x4a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <HAL_TIM_PWM_Start+0x8c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x4a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a12      	ldr	r2, [pc, #72]	; (8003c80 <HAL_TIM_PWM_Start+0x90>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d101      	bne.n	8003c3e <HAL_TIM_PWM_Start+0x4e>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <HAL_TIM_PWM_Start+0x50>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c52:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	6812      	ldr	r2, [r2, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
} 
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40012c00 	.word	0x40012c00
 8003c74:	40013400 	.word	0x40013400
 8003c78:	40014000 	.word	0x40014000
 8003c7c:	40014400 	.word	0x40014400
 8003c80:	40014800 	.word	0x40014800

08003c84 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a38      	ldr	r2, [pc, #224]	; (8003d7c <TIM_Base_SetConfig+0xf8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00f      	beq.n	8003cc0 <TIM_Base_SetConfig+0x3c>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca6:	d00b      	beq.n	8003cc0 <TIM_Base_SetConfig+0x3c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a35      	ldr	r2, [pc, #212]	; (8003d80 <TIM_Base_SetConfig+0xfc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d007      	beq.n	8003cc0 <TIM_Base_SetConfig+0x3c>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a34      	ldr	r2, [pc, #208]	; (8003d84 <TIM_Base_SetConfig+0x100>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_Base_SetConfig+0x3c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a33      	ldr	r2, [pc, #204]	; (8003d88 <TIM_Base_SetConfig+0x104>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d108      	bne.n	8003cd2 <TIM_Base_SetConfig+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a29      	ldr	r2, [pc, #164]	; (8003d7c <TIM_Base_SetConfig+0xf8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01b      	beq.n	8003d12 <TIM_Base_SetConfig+0x8e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce0:	d017      	beq.n	8003d12 <TIM_Base_SetConfig+0x8e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <TIM_Base_SetConfig+0xfc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <TIM_Base_SetConfig+0x8e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a25      	ldr	r2, [pc, #148]	; (8003d84 <TIM_Base_SetConfig+0x100>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00f      	beq.n	8003d12 <TIM_Base_SetConfig+0x8e>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a24      	ldr	r2, [pc, #144]	; (8003d88 <TIM_Base_SetConfig+0x104>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00b      	beq.n	8003d12 <TIM_Base_SetConfig+0x8e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a23      	ldr	r2, [pc, #140]	; (8003d8c <TIM_Base_SetConfig+0x108>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d007      	beq.n	8003d12 <TIM_Base_SetConfig+0x8e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a22      	ldr	r2, [pc, #136]	; (8003d90 <TIM_Base_SetConfig+0x10c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d003      	beq.n	8003d12 <TIM_Base_SetConfig+0x8e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <TIM_Base_SetConfig+0x110>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d108      	bne.n	8003d24 <TIM_Base_SetConfig+0xa0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a0f      	ldr	r2, [pc, #60]	; (8003d7c <TIM_Base_SetConfig+0xf8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00f      	beq.n	8003d62 <TIM_Base_SetConfig+0xde>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a10      	ldr	r2, [pc, #64]	; (8003d88 <TIM_Base_SetConfig+0x104>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00b      	beq.n	8003d62 <TIM_Base_SetConfig+0xde>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a0f      	ldr	r2, [pc, #60]	; (8003d8c <TIM_Base_SetConfig+0x108>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d007      	beq.n	8003d62 <TIM_Base_SetConfig+0xde>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a0e      	ldr	r2, [pc, #56]	; (8003d90 <TIM_Base_SetConfig+0x10c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d003      	beq.n	8003d62 <TIM_Base_SetConfig+0xde>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a0d      	ldr	r2, [pc, #52]	; (8003d94 <TIM_Base_SetConfig+0x110>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d103      	bne.n	8003d6a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	615a      	str	r2, [r3, #20]
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40012c00 	.word	0x40012c00
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800
 8003d88:	40013400 	.word	0x40013400
 8003d8c:	40014000 	.word	0x40014000
 8003d90:	40014400 	.word	0x40014400
 8003d94:	40014800 	.word	0x40014800

08003d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	f023 0201 	bic.w	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0303 	bic.w	r3, r3, #3
 8003dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f023 0302 	bic.w	r3, r3, #2
 8003df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a2c      	ldr	r2, [pc, #176]	; (8003eb0 <TIM_OC1_SetConfig+0x118>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00f      	beq.n	8003e24 <TIM_OC1_SetConfig+0x8c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a2b      	ldr	r2, [pc, #172]	; (8003eb4 <TIM_OC1_SetConfig+0x11c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00b      	beq.n	8003e24 <TIM_OC1_SetConfig+0x8c>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a2a      	ldr	r2, [pc, #168]	; (8003eb8 <TIM_OC1_SetConfig+0x120>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <TIM_OC1_SetConfig+0x8c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a29      	ldr	r2, [pc, #164]	; (8003ebc <TIM_OC1_SetConfig+0x124>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <TIM_OC1_SetConfig+0x8c>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a28      	ldr	r2, [pc, #160]	; (8003ec0 <TIM_OC1_SetConfig+0x128>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d10c      	bne.n	8003e3e <TIM_OC1_SetConfig+0xa6>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f023 0308 	bic.w	r3, r3, #8
 8003e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f023 0304 	bic.w	r3, r3, #4
 8003e3c:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a1b      	ldr	r2, [pc, #108]	; (8003eb0 <TIM_OC1_SetConfig+0x118>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00f      	beq.n	8003e66 <TIM_OC1_SetConfig+0xce>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a1a      	ldr	r2, [pc, #104]	; (8003eb4 <TIM_OC1_SetConfig+0x11c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00b      	beq.n	8003e66 <TIM_OC1_SetConfig+0xce>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a19      	ldr	r2, [pc, #100]	; (8003eb8 <TIM_OC1_SetConfig+0x120>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d007      	beq.n	8003e66 <TIM_OC1_SetConfig+0xce>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a18      	ldr	r2, [pc, #96]	; (8003ebc <TIM_OC1_SetConfig+0x124>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d003      	beq.n	8003e66 <TIM_OC1_SetConfig+0xce>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a17      	ldr	r2, [pc, #92]	; (8003ec0 <TIM_OC1_SetConfig+0x128>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d111      	bne.n	8003e8a <TIM_OC1_SetConfig+0xf2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	621a      	str	r2, [r3, #32]
} 
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40013400 	.word	0x40013400
 8003eb8:	40014000 	.word	0x40014000
 8003ebc:	40014400 	.word	0x40014400
 8003ec0:	40014800 	.word	0x40014800

08003ec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f023 0210 	bic.w	r2, r3, #16
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0a:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f023 0320 	bic.w	r3, r3, #32
 8003f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a28      	ldr	r2, [pc, #160]	; (8003fd0 <TIM_OC2_SetConfig+0x10c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_OC2_SetConfig+0x78>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a27      	ldr	r2, [pc, #156]	; (8003fd4 <TIM_OC2_SetConfig+0x110>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d10d      	bne.n	8003f58 <TIM_OC2_SetConfig+0x94>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f56:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <TIM_OC2_SetConfig+0x10c>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00f      	beq.n	8003f80 <TIM_OC2_SetConfig+0xbc>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a1c      	ldr	r2, [pc, #112]	; (8003fd4 <TIM_OC2_SetConfig+0x110>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00b      	beq.n	8003f80 <TIM_OC2_SetConfig+0xbc>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a1b      	ldr	r2, [pc, #108]	; (8003fd8 <TIM_OC2_SetConfig+0x114>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d007      	beq.n	8003f80 <TIM_OC2_SetConfig+0xbc>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a1a      	ldr	r2, [pc, #104]	; (8003fdc <TIM_OC2_SetConfig+0x118>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_OC2_SetConfig+0xbc>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a19      	ldr	r2, [pc, #100]	; (8003fe0 <TIM_OC2_SetConfig+0x11c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d113      	bne.n	8003fa8 <TIM_OC2_SetConfig+0xe4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	621a      	str	r2, [r3, #32]
}
 8003fc2:	bf00      	nop
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40012c00 	.word	0x40012c00
 8003fd4:	40013400 	.word	0x40013400
 8003fd8:	40014000 	.word	0x40014000
 8003fdc:	40014400 	.word	0x40014400
 8003fe0:	40014800 	.word	0x40014800

08003fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0303 	bic.w	r3, r3, #3
 800402a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800403c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	021b      	lsls	r3, r3, #8
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a27      	ldr	r2, [pc, #156]	; (80040ec <TIM_OC3_SetConfig+0x108>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d003      	beq.n	800405a <TIM_OC3_SetConfig+0x76>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <TIM_OC3_SetConfig+0x10c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d10d      	bne.n	8004076 <TIM_OC3_SetConfig+0x92>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004060:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004074:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a1c      	ldr	r2, [pc, #112]	; (80040ec <TIM_OC3_SetConfig+0x108>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00f      	beq.n	800409e <TIM_OC3_SetConfig+0xba>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a1b      	ldr	r2, [pc, #108]	; (80040f0 <TIM_OC3_SetConfig+0x10c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00b      	beq.n	800409e <TIM_OC3_SetConfig+0xba>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a1a      	ldr	r2, [pc, #104]	; (80040f4 <TIM_OC3_SetConfig+0x110>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d007      	beq.n	800409e <TIM_OC3_SetConfig+0xba>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <TIM_OC3_SetConfig+0x114>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d003      	beq.n	800409e <TIM_OC3_SetConfig+0xba>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a18      	ldr	r2, [pc, #96]	; (80040fc <TIM_OC3_SetConfig+0x118>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d113      	bne.n	80040c6 <TIM_OC3_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	621a      	str	r2, [r3, #32]
}
 80040e0:	bf00      	nop
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40013400 	.word	0x40013400
 80040f4:	40014000 	.word	0x40014000
 80040f8:	40014400 	.word	0x40014400
 80040fc:	40014800 	.word	0x40014800

08004100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8004112:	2300      	movs	r3, #0
 8004114:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800413a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004146:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800415a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	031b      	lsls	r3, r3, #12
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a18      	ldr	r2, [pc, #96]	; (80041cc <TIM_OC4_SetConfig+0xcc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00f      	beq.n	8004190 <TIM_OC4_SetConfig+0x90>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a17      	ldr	r2, [pc, #92]	; (80041d0 <TIM_OC4_SetConfig+0xd0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00b      	beq.n	8004190 <TIM_OC4_SetConfig+0x90>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a16      	ldr	r2, [pc, #88]	; (80041d4 <TIM_OC4_SetConfig+0xd4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d007      	beq.n	8004190 <TIM_OC4_SetConfig+0x90>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <TIM_OC4_SetConfig+0xd8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d003      	beq.n	8004190 <TIM_OC4_SetConfig+0x90>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a14      	ldr	r2, [pc, #80]	; (80041dc <TIM_OC4_SetConfig+0xdc>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d109      	bne.n	80041a4 <TIM_OC4_SetConfig+0xa4>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004196:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	019b      	lsls	r3, r3, #6
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40013400 	.word	0x40013400
 80041d4:	40014000 	.word	0x40014000
 80041d8:	40014400 	.word	0x40014400
 80041dc:	40014800 	.word	0x40014800

080041e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80041f0:	2201      	movs	r2, #1
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a1a      	ldr	r2, [r3, #32]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	43db      	mvns	r3, r3
 8004202:	401a      	ands	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a1a      	ldr	r2, [r3, #32]
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	fa01 f303 	lsl.w	r3, r1, r3
 8004214:	431a      	orrs	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop

08004228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b092      	sub	sp, #72	; 0x48
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80f5 	beq.w	8004430 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004246:	2300      	movs	r3, #0
 8004248:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800424c:	4b60      	ldr	r3, [pc, #384]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10e      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004258:	4a5d      	ldr	r2, [pc, #372]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800425a:	4b5d      	ldr	r3, [pc, #372]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004262:	61d3      	str	r3, [r2, #28]
 8004264:	4b5a      	ldr	r3, [pc, #360]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004270:	2301      	movs	r3, #1
 8004272:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004276:	4b57      	ldr	r3, [pc, #348]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d118      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004282:	4a54      	ldr	r2, [pc, #336]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004284:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800428e:	f004 f829 	bl	80082e4 <HAL_GetTick>
 8004292:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004294:	e008      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004296:	f004 f825 	bl	80082e4 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b64      	cmp	r3, #100	; 0x64
 80042a2:	d901      	bls.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e187      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x390>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a8:	4b4a      	ldr	r3, [pc, #296]	; (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f0      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042b4:	4b46      	ldr	r3, [pc, #280]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 80a2 	beq.w	800440a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80042ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d0:	429a      	cmp	r2, r3
 80042d2:	f000 809a 	beq.w	800440a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042d6:	4b3e      	ldr	r3, [pc, #248]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042e4:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e8:	fa93 f3a3 	rbit	r3, r3
 80042ec:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80042ee:	69fb      	ldr	r3, [r7, #28]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042f0:	fab3 f383 	clz	r3, r3
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	461a      	mov	r2, r3
 80042f8:	4b37      	ldr	r3, [pc, #220]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80042fa:	4413      	add	r3, r2
 80042fc:	461a      	mov	r2, r3
 80042fe:	2301      	movs	r3, #1
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	fa93 f3a3 	rbit	r3, r3
 800430e:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004310:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	461a      	mov	r2, r3
 800431a:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800431c:	4413      	add	r3, r2
 800431e:	461a      	mov	r2, r3
 8004320:	2300      	movs	r3, #0
 8004322:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004324:	4a2a      	ldr	r2, [pc, #168]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004328:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800432a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d06a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004334:	f003 ffd6 	bl	80082e4 <HAL_GetTick>
 8004338:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433a:	e00a      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433c:	f003 ffd2 	bl	80082e4 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e132      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8004352:	2302      	movs	r3, #2
 8004354:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	fa93 f3a3 	rbit	r3, r3
 800435c:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800435e:	69bb      	ldr	r3, [r7, #24]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004360:	fab3 f383 	clz	r3, r3
 8004364:	b25b      	sxtb	r3, r3
 8004366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800436a:	b25b      	sxtb	r3, r3
 800436c:	b2db      	uxtb	r3, r3
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d102      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004376:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	e031      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800437c:	2302      	movs	r3, #2
 800437e:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004382:	fa93 f3a3 	rbit	r3, r3
 8004386:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	fab3 f383 	clz	r3, r3
 800438e:	b25b      	sxtb	r3, r3
 8004390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004394:	b25b      	sxtb	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d102      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	e01c      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80043a6:	2302      	movs	r3, #2
 80043a8:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ac:	fa93 f3a3 	rbit	r3, r3
 80043b0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	fab3 f383 	clz	r3, r3
 80043b8:	b25b      	sxtb	r3, r3
 80043ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043be:	b25b      	sxtb	r3, r3
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d108      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80043ca:	4b01      	ldr	r3, [pc, #4]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	e007      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40007000 	.word	0x40007000
 80043d8:	42420400 	.word	0x42420400
 80043dc:	4b78      	ldr	r3, [pc, #480]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	2202      	movs	r2, #2
 80043e2:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043e6:	fa92 f2a2 	rbit	r2, r2
 80043ea:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	fab2 f282 	clz	r2, r2
 80043f2:	b252      	sxtb	r2, r2
 80043f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043f8:	b252      	sxtb	r2, r2
 80043fa:	b2d2      	uxtb	r2, r2
 80043fc:	f002 021f 	and.w	r2, r2, #31
 8004400:	40d3      	lsrs	r3, r2
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d098      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800440a:	496d      	ldr	r1, [pc, #436]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800440c:	4b6c      	ldr	r3, [pc, #432]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	4313      	orrs	r3, r2
 800441a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800441c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004420:	2b01      	cmp	r3, #1
 8004422:	d105      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x208>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004424:	4a66      	ldr	r2, [pc, #408]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004426:	4b66      	ldr	r3, [pc, #408]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d008      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800443c:	4960      	ldr	r1, [pc, #384]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800443e:	4b60      	ldr	r3, [pc, #384]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	f023 0203 	bic.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	4313      	orrs	r3, r2
 800444c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d008      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800445a:	4959      	ldr	r1, [pc, #356]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800445c:	4b58      	ldr	r3, [pc, #352]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004478:	4951      	ldr	r1, [pc, #324]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800447a:	4b51      	ldr	r3, [pc, #324]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b00      	cmp	r3, #0
 8004494:	d008      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004496:	494a      	ldr	r1, [pc, #296]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004498:	4b49      	ldr	r3, [pc, #292]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	f023 0210 	bic.w	r2, r3, #16
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80044b4:	4942      	ldr	r1, [pc, #264]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80044b6:	4b42      	ldr	r3, [pc, #264]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	4313      	orrs	r3, r2
 80044c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044d2:	493b      	ldr	r1, [pc, #236]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80044d4:	4b3a      	ldr	r3, [pc, #232]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	f023 0220 	bic.w	r2, r3, #32
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d008      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044f0:	4933      	ldr	r1, [pc, #204]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80044f2:	4b33      	ldr	r3, [pc, #204]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800450e:	492c      	ldr	r1, [pc, #176]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004510:	4b2b      	ldr	r3, [pc, #172]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800452c:	4924      	ldr	r1, [pc, #144]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800452e:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	4313      	orrs	r3, r2
 800453c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004546:	2b00      	cmp	r3, #0
 8004548:	d008      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800454a:	491d      	ldr	r1, [pc, #116]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800454c:	4b1c      	ldr	r3, [pc, #112]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	4313      	orrs	r3, r2
 800455a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004568:	4915      	ldr	r1, [pc, #84]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800456a:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	4313      	orrs	r3, r2
 8004578:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d008      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004586:	490e      	ldr	r1, [pc, #56]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004588:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	4313      	orrs	r3, r2
 8004596:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80045a4:	4906      	ldr	r1, [pc, #24]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80045a6:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b2:	4313      	orrs	r3, r2
 80045b4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3748      	adds	r7, #72	; 0x48
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40021000 	.word	0x40021000

080045c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c4:	b590      	push	{r4, r7, lr}
 80045c6:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	1d3b      	adds	r3, r7, #4
 80045ce:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d6:	1d3b      	adds	r3, r7, #4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 81e8 	beq.w	80049b6 <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80045e6:	4bb8      	ldr	r3, [pc, #736]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d00c      	beq.n	800460c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045f2:	4bb5      	ldr	r3, [pc, #724]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	f040 8082 	bne.w	8004704 <HAL_RCC_OscConfig+0x140>
 8004600:	4bb1      	ldr	r3, [pc, #708]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d07b      	beq.n	8004704 <HAL_RCC_OscConfig+0x140>
 800460c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004610:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004618:	fa93 f2a3 	rbit	r2, r3
 800461c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004620:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004622:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004626:	681b      	ldr	r3, [r3, #0]
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004628:	fab3 f383 	clz	r3, r3
 800462c:	b25b      	sxtb	r3, r3
 800462e:	f043 0320 	orr.w	r3, r3, #32
 8004632:	b25b      	sxtb	r3, r3
 8004634:	b2db      	uxtb	r3, r3
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b01      	cmp	r3, #1
 800463c:	d102      	bne.n	8004644 <HAL_RCC_OscConfig+0x80>
 800463e:	4ba2      	ldr	r3, [pc, #648]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	e039      	b.n	80046b8 <HAL_RCC_OscConfig+0xf4>
 8004644:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004648:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004650:	fa93 f2a3 	rbit	r2, r3
 8004654:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004658:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800465a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	fab3 f383 	clz	r3, r3
 8004664:	b25b      	sxtb	r3, r3
 8004666:	f043 0320 	orr.w	r3, r3, #32
 800466a:	b25b      	sxtb	r3, r3
 800466c:	b2db      	uxtb	r3, r3
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d102      	bne.n	800467c <HAL_RCC_OscConfig+0xb8>
 8004676:	4b94      	ldr	r3, [pc, #592]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	e01d      	b.n	80046b8 <HAL_RCC_OscConfig+0xf4>
 800467c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004680:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004684:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004688:	fa93 f2a3 	rbit	r2, r3
 800468c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004690:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004692:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	fab3 f383 	clz	r3, r3
 800469c:	b25b      	sxtb	r3, r3
 800469e:	f043 0320 	orr.w	r3, r3, #32
 80046a2:	b25b      	sxtb	r3, r3
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d102      	bne.n	80046b4 <HAL_RCC_OscConfig+0xf0>
 80046ae:	4b86      	ldr	r3, [pc, #536]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	e001      	b.n	80046b8 <HAL_RCC_OscConfig+0xf4>
 80046b4:	4b84      	ldr	r3, [pc, #528]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046bc:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c0:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80046c4:	fa92 f1a2 	rbit	r1, r2
 80046c8:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80046cc:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80046ce:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	fab2 f282 	clz	r2, r2
 80046d8:	b252      	sxtb	r2, r2
 80046da:	f042 0220 	orr.w	r2, r2, #32
 80046de:	b252      	sxtb	r2, r2
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	f002 021f 	and.w	r2, r2, #31
 80046e6:	40d3      	lsrs	r3, r2
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8161 	beq.w	80049b4 <HAL_RCC_OscConfig+0x3f0>
 80046f2:	1d3b      	adds	r3, r7, #4
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f040 815b 	bne.w	80049b4 <HAL_RCC_OscConfig+0x3f0>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	f001 b81a 	b.w	8005738 <HAL_RCC_OscConfig+0x1174>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004704:	1d3b      	adds	r3, r7, #4
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x15a>
 8004710:	4a6d      	ldr	r2, [pc, #436]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 8004712:	4b6d      	ldr	r3, [pc, #436]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	e030      	b.n	8004780 <HAL_RCC_OscConfig+0x1bc>
 800471e:	1d3b      	adds	r3, r7, #4
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10c      	bne.n	8004742 <HAL_RCC_OscConfig+0x17e>
 8004728:	4a67      	ldr	r2, [pc, #412]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 800472a:	4b67      	ldr	r3, [pc, #412]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	4a64      	ldr	r2, [pc, #400]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 8004736:	4b64      	ldr	r3, [pc, #400]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	e01e      	b.n	8004780 <HAL_RCC_OscConfig+0x1bc>
 8004742:	1d3b      	adds	r3, r7, #4
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800474c:	d10c      	bne.n	8004768 <HAL_RCC_OscConfig+0x1a4>
 800474e:	4a5e      	ldr	r2, [pc, #376]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 8004750:	4b5d      	ldr	r3, [pc, #372]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	4a5b      	ldr	r2, [pc, #364]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 800475c:	4b5a      	ldr	r3, [pc, #360]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e00b      	b.n	8004780 <HAL_RCC_OscConfig+0x1bc>
 8004768:	4a57      	ldr	r2, [pc, #348]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 800476a:	4b57      	ldr	r3, [pc, #348]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	4a54      	ldr	r2, [pc, #336]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 8004776:	4b54      	ldr	r3, [pc, #336]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800477e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004780:	4951      	ldr	r1, [pc, #324]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 8004782:	4b51      	ldr	r3, [pc, #324]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	f023 020f 	bic.w	r2, r3, #15
 800478a:	1d3b      	adds	r3, r7, #4
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4313      	orrs	r3, r2
 8004792:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004794:	1d3b      	adds	r3, r7, #4
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 8083 	beq.w	80048a6 <HAL_RCC_OscConfig+0x2e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a0:	f003 fda0 	bl	80082e4 <HAL_GetTick>
 80047a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a8:	e00a      	b.n	80047c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047aa:	f003 fd9b 	bl	80082e4 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d902      	bls.n	80047c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	f000 bfbc 	b.w	8005738 <HAL_RCC_OscConfig+0x1174>
 80047c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047c4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80047cc:	fa93 f2a3 	rbit	r2, r3
 80047d0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80047d4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80047d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80047da:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047dc:	fab3 f383 	clz	r3, r3
 80047e0:	b25b      	sxtb	r3, r3
 80047e2:	f043 0320 	orr.w	r3, r3, #32
 80047e6:	b25b      	sxtb	r3, r3
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d102      	bne.n	80047f8 <HAL_RCC_OscConfig+0x234>
 80047f2:	4b35      	ldr	r3, [pc, #212]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	e039      	b.n	800486c <HAL_RCC_OscConfig+0x2a8>
 80047f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047fc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004800:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004804:	fa93 f2a3 	rbit	r2, r3
 8004808:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800480c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800480e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	fab3 f383 	clz	r3, r3
 8004818:	b25b      	sxtb	r3, r3
 800481a:	f043 0320 	orr.w	r3, r3, #32
 800481e:	b25b      	sxtb	r3, r3
 8004820:	b2db      	uxtb	r3, r3
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d102      	bne.n	8004830 <HAL_RCC_OscConfig+0x26c>
 800482a:	4b27      	ldr	r3, [pc, #156]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	e01d      	b.n	800486c <HAL_RCC_OscConfig+0x2a8>
 8004830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004834:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004838:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800483c:	fa93 f2a3 	rbit	r2, r3
 8004840:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004844:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004846:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	fab3 f383 	clz	r3, r3
 8004850:	b25b      	sxtb	r3, r3
 8004852:	f043 0320 	orr.w	r3, r3, #32
 8004856:	b25b      	sxtb	r3, r3
 8004858:	b2db      	uxtb	r3, r3
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b04      	cmp	r3, #4
 8004860:	d102      	bne.n	8004868 <HAL_RCC_OscConfig+0x2a4>
 8004862:	4b19      	ldr	r3, [pc, #100]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	e001      	b.n	800486c <HAL_RCC_OscConfig+0x2a8>
 8004868:	4b17      	ldr	r3, [pc, #92]	; (80048c8 <HAL_RCC_OscConfig+0x304>)
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004870:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004874:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8004878:	fa92 f1a2 	rbit	r1, r2
 800487c:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8004880:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004882:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	fab2 f282 	clz	r2, r2
 800488c:	b252      	sxtb	r2, r2
 800488e:	f042 0220 	orr.w	r2, r2, #32
 8004892:	b252      	sxtb	r2, r2
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	f002 021f 	and.w	r2, r2, #31
 800489a:	40d3      	lsrs	r3, r2
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d082      	beq.n	80047aa <HAL_RCC_OscConfig+0x1e6>
 80048a4:	e087      	b.n	80049b6 <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a6:	f003 fd1d 	bl	80082e4 <HAL_GetTick>
 80048aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ae:	e00d      	b.n	80048cc <HAL_RCC_OscConfig+0x308>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048b0:	f003 fd18 	bl	80082e4 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b64      	cmp	r3, #100	; 0x64
 80048be:	d905      	bls.n	80048cc <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	f000 bf39 	b.w	8005738 <HAL_RCC_OscConfig+0x1174>
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
 80048cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048d0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80048d8:	fa93 f2a3 	rbit	r2, r3
 80048dc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80048e0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80048e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80048e6:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048e8:	fab3 f383 	clz	r3, r3
 80048ec:	b25b      	sxtb	r3, r3
 80048ee:	f043 0320 	orr.w	r3, r3, #32
 80048f2:	b25b      	sxtb	r3, r3
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	095b      	lsrs	r3, r3, #5
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d102      	bne.n	8004904 <HAL_RCC_OscConfig+0x340>
 80048fe:	4bb6      	ldr	r3, [pc, #728]	; (8004bd8 <HAL_RCC_OscConfig+0x614>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	e039      	b.n	8004978 <HAL_RCC_OscConfig+0x3b4>
 8004904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004908:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004910:	fa93 f2a3 	rbit	r2, r3
 8004914:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004918:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800491a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	fab3 f383 	clz	r3, r3
 8004924:	b25b      	sxtb	r3, r3
 8004926:	f043 0320 	orr.w	r3, r3, #32
 800492a:	b25b      	sxtb	r3, r3
 800492c:	b2db      	uxtb	r3, r3
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d102      	bne.n	800493c <HAL_RCC_OscConfig+0x378>
 8004936:	4ba8      	ldr	r3, [pc, #672]	; (8004bd8 <HAL_RCC_OscConfig+0x614>)
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	e01d      	b.n	8004978 <HAL_RCC_OscConfig+0x3b4>
 800493c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004940:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004948:	fa93 f2a3 	rbit	r2, r3
 800494c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004950:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004952:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	fab3 f383 	clz	r3, r3
 800495c:	b25b      	sxtb	r3, r3
 800495e:	f043 0320 	orr.w	r3, r3, #32
 8004962:	b25b      	sxtb	r3, r3
 8004964:	b2db      	uxtb	r3, r3
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b04      	cmp	r3, #4
 800496c:	d102      	bne.n	8004974 <HAL_RCC_OscConfig+0x3b0>
 800496e:	4b9a      	ldr	r3, [pc, #616]	; (8004bd8 <HAL_RCC_OscConfig+0x614>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	e001      	b.n	8004978 <HAL_RCC_OscConfig+0x3b4>
 8004974:	4b98      	ldr	r3, [pc, #608]	; (8004bd8 <HAL_RCC_OscConfig+0x614>)
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800497c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004980:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004984:	fa92 f1a2 	rbit	r1, r2
 8004988:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800498c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800498e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	fab2 f282 	clz	r2, r2
 8004998:	b252      	sxtb	r2, r2
 800499a:	f042 0220 	orr.w	r2, r2, #32
 800499e:	b252      	sxtb	r2, r2
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	f002 021f 	and.w	r2, r2, #31
 80049a6:	40d3      	lsrs	r3, r2
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f47f af7f 	bne.w	80048b0 <HAL_RCC_OscConfig+0x2ec>
 80049b2:	e000      	b.n	80049b6 <HAL_RCC_OscConfig+0x3f2>
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049b6:	1d3b      	adds	r3, r7, #4
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 81f4 	beq.w	8004dae <HAL_RCC_OscConfig+0x7ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80049c6:	4b84      	ldr	r3, [pc, #528]	; (8004bd8 <HAL_RCC_OscConfig+0x614>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f003 030c 	and.w	r3, r3, #12
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00d      	beq.n	80049ee <HAL_RCC_OscConfig+0x42a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80049d2:	4b81      	ldr	r3, [pc, #516]	; (8004bd8 <HAL_RCC_OscConfig+0x614>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	2b08      	cmp	r3, #8
 80049dc:	f040 8099 	bne.w	8004b12 <HAL_RCC_OscConfig+0x54e>
 80049e0:	4b7d      	ldr	r3, [pc, #500]	; (8004bd8 <HAL_RCC_OscConfig+0x614>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f040 8092 	bne.w	8004b12 <HAL_RCC_OscConfig+0x54e>
 80049ee:	2302      	movs	r3, #2
 80049f0:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f4:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80049f8:	fa93 f2a3 	rbit	r2, r3
 80049fc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004a00:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004a02:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004a06:	681b      	ldr	r3, [r3, #0]
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a08:	fab3 f383 	clz	r3, r3
 8004a0c:	b25b      	sxtb	r3, r3
 8004a0e:	f043 0320 	orr.w	r3, r3, #32
 8004a12:	b25b      	sxtb	r3, r3
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d102      	bne.n	8004a24 <HAL_RCC_OscConfig+0x460>
 8004a1e:	4b6e      	ldr	r3, [pc, #440]	; (8004bd8 <HAL_RCC_OscConfig+0x614>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	e037      	b.n	8004a94 <HAL_RCC_OscConfig+0x4d0>
 8004a24:	2302      	movs	r3, #2
 8004a26:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8004a2e:	fa93 f2a3 	rbit	r2, r3
 8004a32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004a36:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004a38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b25b      	sxtb	r3, r3
 8004a44:	f043 0320 	orr.w	r3, r3, #32
 8004a48:	b25b      	sxtb	r3, r3
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d102      	bne.n	8004a5a <HAL_RCC_OscConfig+0x496>
 8004a54:	4b60      	ldr	r3, [pc, #384]	; (8004bd8 <HAL_RCC_OscConfig+0x614>)
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	e01c      	b.n	8004a94 <HAL_RCC_OscConfig+0x4d0>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a60:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004a64:	fa93 f2a3 	rbit	r2, r3
 8004a68:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004a6c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004a6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	fab3 f383 	clz	r3, r3
 8004a78:	b25b      	sxtb	r3, r3
 8004a7a:	f043 0320 	orr.w	r3, r3, #32
 8004a7e:	b25b      	sxtb	r3, r3
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	095b      	lsrs	r3, r3, #5
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d102      	bne.n	8004a90 <HAL_RCC_OscConfig+0x4cc>
 8004a8a:	4b53      	ldr	r3, [pc, #332]	; (8004bd8 <HAL_RCC_OscConfig+0x614>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	e001      	b.n	8004a94 <HAL_RCC_OscConfig+0x4d0>
 8004a90:	4b51      	ldr	r3, [pc, #324]	; (8004bd8 <HAL_RCC_OscConfig+0x614>)
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	2202      	movs	r2, #2
 8004a96:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9a:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8004a9e:	fa92 f1a2 	rbit	r1, r2
 8004aa2:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8004aa6:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004aa8:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8004aac:	6812      	ldr	r2, [r2, #0]
 8004aae:	fab2 f282 	clz	r2, r2
 8004ab2:	b252      	sxtb	r2, r2
 8004ab4:	f042 0220 	orr.w	r2, r2, #32
 8004ab8:	b252      	sxtb	r2, r2
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	f002 021f 	and.w	r2, r2, #31
 8004ac0:	40d3      	lsrs	r3, r2
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <HAL_RCC_OscConfig+0x516>
 8004aca:	1d3b      	adds	r3, r7, #4
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d002      	beq.n	8004ada <HAL_RCC_OscConfig+0x516>
      {
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f000 be2f 	b.w	8005738 <HAL_RCC_OscConfig+0x1174>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ada:	4c3f      	ldr	r4, [pc, #252]	; (8004bd8 <HAL_RCC_OscConfig+0x614>)
 8004adc:	4b3e      	ldr	r3, [pc, #248]	; (8004bd8 <HAL_RCC_OscConfig+0x614>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ae4:	1d3b      	adds	r3, r7, #4
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6959      	ldr	r1, [r3, #20]
 8004aea:	23f8      	movs	r3, #248	; 0xf8
 8004aec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004af4:	fa93 f0a3 	rbit	r0, r3
 8004af8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004afc:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004afe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	fab3 f383 	clz	r3, r3
 8004b08:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b10:	e14d      	b.n	8004dae <HAL_RCC_OscConfig+0x7ea>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b12:	1d3b      	adds	r3, r7, #4
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80b3 	beq.w	8004c84 <HAL_RCC_OscConfig+0x6c0>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b24:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004b28:	fa93 f2a3 	rbit	r2, r3
 8004b2c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004b30:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004b32:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004b36:	681b      	ldr	r3, [r3, #0]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b38:	fab3 f383 	clz	r3, r3
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004b42:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004b46:	461a      	mov	r2, r3
 8004b48:	2301      	movs	r3, #1
 8004b4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4c:	f003 fbca 	bl	80082e4 <HAL_GetTick>
 8004b50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b54:	e00a      	b.n	8004b6c <HAL_RCC_OscConfig+0x5a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b56:	f003 fbc5 	bl	80082e4 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d902      	bls.n	8004b6c <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	f000 bde6 	b.w	8005738 <HAL_RCC_OscConfig+0x1174>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b72:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004b76:	fa93 f2a3 	rbit	r2, r3
 8004b7a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b7e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004b80:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b84:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b86:	fab3 f383 	clz	r3, r3
 8004b8a:	b25b      	sxtb	r3, r3
 8004b8c:	f043 0320 	orr.w	r3, r3, #32
 8004b90:	b25b      	sxtb	r3, r3
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d102      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x5de>
 8004b9c:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <HAL_RCC_OscConfig+0x614>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	e039      	b.n	8004c16 <HAL_RCC_OscConfig+0x652>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004bac:	fa93 f2a3 	rbit	r2, r3
 8004bb0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004bb4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004bb6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	fab3 f383 	clz	r3, r3
 8004bc0:	b25b      	sxtb	r3, r3
 8004bc2:	f043 0320 	orr.w	r3, r3, #32
 8004bc6:	b25b      	sxtb	r3, r3
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d104      	bne.n	8004bdc <HAL_RCC_OscConfig+0x618>
 8004bd2:	4b01      	ldr	r3, [pc, #4]	; (8004bd8 <HAL_RCC_OscConfig+0x614>)
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	e01e      	b.n	8004c16 <HAL_RCC_OscConfig+0x652>
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	2302      	movs	r3, #2
 8004bde:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8004be6:	fa93 f2a3 	rbit	r2, r3
 8004bea:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004bee:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004bf0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	fab3 f383 	clz	r3, r3
 8004bfa:	b25b      	sxtb	r3, r3
 8004bfc:	f043 0320 	orr.w	r3, r3, #32
 8004c00:	b25b      	sxtb	r3, r3
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d102      	bne.n	8004c12 <HAL_RCC_OscConfig+0x64e>
 8004c0c:	4bb9      	ldr	r3, [pc, #740]	; (8004ef4 <HAL_RCC_OscConfig+0x930>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	e001      	b.n	8004c16 <HAL_RCC_OscConfig+0x652>
 8004c12:	4bb8      	ldr	r3, [pc, #736]	; (8004ef4 <HAL_RCC_OscConfig+0x930>)
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	2202      	movs	r2, #2
 8004c18:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004c20:	fa92 f1a2 	rbit	r1, r2
 8004c24:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004c28:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004c2a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	fab2 f282 	clz	r2, r2
 8004c34:	b252      	sxtb	r2, r2
 8004c36:	f042 0220 	orr.w	r2, r2, #32
 8004c3a:	b252      	sxtb	r2, r2
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	f002 021f 	and.w	r2, r2, #31
 8004c42:	40d3      	lsrs	r3, r2
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d084      	beq.n	8004b56 <HAL_RCC_OscConfig+0x592>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c4c:	4ca9      	ldr	r4, [pc, #676]	; (8004ef4 <HAL_RCC_OscConfig+0x930>)
 8004c4e:	4ba9      	ldr	r3, [pc, #676]	; (8004ef4 <HAL_RCC_OscConfig+0x930>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c56:	1d3b      	adds	r3, r7, #4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6959      	ldr	r1, [r3, #20]
 8004c5c:	23f8      	movs	r3, #248	; 0xf8
 8004c5e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004c66:	fa93 f0a3 	rbit	r0, r3
 8004c6a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004c6e:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004c70:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	fab3 f383 	clz	r3, r3
 8004c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	e094      	b.n	8004dae <HAL_RCC_OscConfig+0x7ea>
 8004c84:	2301      	movs	r3, #1
 8004c86:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004c8e:	fa93 f2a3 	rbit	r2, r3
 8004c92:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004c96:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004c98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004c9c:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c9e:	fab3 f383 	clz	r3, r3
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004ca8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004cac:	461a      	mov	r2, r3
 8004cae:	2300      	movs	r3, #0
 8004cb0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb2:	f003 fb17 	bl	80082e4 <HAL_GetTick>
 8004cb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cba:	e00a      	b.n	8004cd2 <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cbc:	f003 fb12 	bl	80082e4 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d902      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	f000 bd33 	b.w	8005738 <HAL_RCC_OscConfig+0x1174>
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004cdc:	fa93 f2a3 	rbit	r2, r3
 8004ce0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004ce4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004ce6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004cea:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cec:	fab3 f383 	clz	r3, r3
 8004cf0:	b25b      	sxtb	r3, r3
 8004cf2:	f043 0320 	orr.w	r3, r3, #32
 8004cf6:	b25b      	sxtb	r3, r3
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d102      	bne.n	8004d08 <HAL_RCC_OscConfig+0x744>
 8004d02:	4b7c      	ldr	r3, [pc, #496]	; (8004ef4 <HAL_RCC_OscConfig+0x930>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	e037      	b.n	8004d78 <HAL_RCC_OscConfig+0x7b4>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004d12:	fa93 f2a3 	rbit	r2, r3
 8004d16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004d1a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004d1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	fab3 f383 	clz	r3, r3
 8004d26:	b25b      	sxtb	r3, r3
 8004d28:	f043 0320 	orr.w	r3, r3, #32
 8004d2c:	b25b      	sxtb	r3, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d102      	bne.n	8004d3e <HAL_RCC_OscConfig+0x77a>
 8004d38:	4b6e      	ldr	r3, [pc, #440]	; (8004ef4 <HAL_RCC_OscConfig+0x930>)
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	e01c      	b.n	8004d78 <HAL_RCC_OscConfig+0x7b4>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004d48:	fa93 f2a3 	rbit	r2, r3
 8004d4c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004d50:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004d52:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	fab3 f383 	clz	r3, r3
 8004d5c:	b25b      	sxtb	r3, r3
 8004d5e:	f043 0320 	orr.w	r3, r3, #32
 8004d62:	b25b      	sxtb	r3, r3
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d102      	bne.n	8004d74 <HAL_RCC_OscConfig+0x7b0>
 8004d6e:	4b61      	ldr	r3, [pc, #388]	; (8004ef4 <HAL_RCC_OscConfig+0x930>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	e001      	b.n	8004d78 <HAL_RCC_OscConfig+0x7b4>
 8004d74:	4b5f      	ldr	r3, [pc, #380]	; (8004ef4 <HAL_RCC_OscConfig+0x930>)
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	2202      	movs	r2, #2
 8004d7a:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8004d82:	fa92 f1a2 	rbit	r1, r2
 8004d86:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8004d8a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004d8c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	fab2 f282 	clz	r2, r2
 8004d96:	b252      	sxtb	r2, r2
 8004d98:	f042 0220 	orr.w	r2, r2, #32
 8004d9c:	b252      	sxtb	r2, r2
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	f002 021f 	and.w	r2, r2, #31
 8004da4:	40d3      	lsrs	r3, r2
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d186      	bne.n	8004cbc <HAL_RCC_OscConfig+0x6f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dae:	1d3b      	adds	r3, r7, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8132 	beq.w	8005022 <HAL_RCC_OscConfig+0xa5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dbe:	1d3b      	adds	r3, r7, #4
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8099 	beq.w	8004efc <HAL_RCC_OscConfig+0x938>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8004dd4:	fa93 f2a3 	rbit	r2, r3
 8004dd8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004ddc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004dde:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004de2:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004de4:	fab3 f383 	clz	r3, r3
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	461a      	mov	r2, r3
 8004dec:	4b42      	ldr	r3, [pc, #264]	; (8004ef8 <HAL_RCC_OscConfig+0x934>)
 8004dee:	4413      	add	r3, r2
 8004df0:	461a      	mov	r2, r3
 8004df2:	2301      	movs	r3, #1
 8004df4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004df6:	f003 fa75 	bl	80082e4 <HAL_GetTick>
 8004dfa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfe:	e00a      	b.n	8004e16 <HAL_RCC_OscConfig+0x852>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e00:	f003 fa70 	bl	80082e4 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d902      	bls.n	8004e16 <HAL_RCC_OscConfig+0x852>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	f000 bc91 	b.w	8005738 <HAL_RCC_OscConfig+0x1174>
 8004e16:	2302      	movs	r3, #2
 8004e18:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004e20:	fa93 f2a3 	rbit	r2, r3
 8004e24:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004e28:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004e2a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004e2e:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e30:	fab3 f383 	clz	r3, r3
 8004e34:	b25b      	sxtb	r3, r3
 8004e36:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e3a:	b25b      	sxtb	r3, r3
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d102      	bne.n	8004e4c <HAL_RCC_OscConfig+0x888>
 8004e46:	4b2b      	ldr	r3, [pc, #172]	; (8004ef4 <HAL_RCC_OscConfig+0x930>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	e037      	b.n	8004ebc <HAL_RCC_OscConfig+0x8f8>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e52:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004e56:	fa93 f2a3 	rbit	r2, r3
 8004e5a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004e5e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004e60:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b25b      	sxtb	r3, r3
 8004e6c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e70:	b25b      	sxtb	r3, r3
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	095b      	lsrs	r3, r3, #5
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d102      	bne.n	8004e82 <HAL_RCC_OscConfig+0x8be>
 8004e7c:	4b1d      	ldr	r3, [pc, #116]	; (8004ef4 <HAL_RCC_OscConfig+0x930>)
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	e01c      	b.n	8004ebc <HAL_RCC_OscConfig+0x8f8>
 8004e82:	2302      	movs	r3, #2
 8004e84:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e88:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004e8c:	fa93 f2a3 	rbit	r2, r3
 8004e90:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004e94:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004e96:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	fab3 f383 	clz	r3, r3
 8004ea0:	b25b      	sxtb	r3, r3
 8004ea2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ea6:	b25b      	sxtb	r3, r3
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	095b      	lsrs	r3, r3, #5
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d102      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x8f4>
 8004eb2:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <HAL_RCC_OscConfig+0x930>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	e001      	b.n	8004ebc <HAL_RCC_OscConfig+0x8f8>
 8004eb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ef4 <HAL_RCC_OscConfig+0x930>)
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004ec6:	fa92 f1a2 	rbit	r1, r2
 8004eca:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004ece:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004ed0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	fab2 f282 	clz	r2, r2
 8004eda:	b252      	sxtb	r2, r2
 8004edc:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004ee0:	b252      	sxtb	r2, r2
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	f002 021f 	and.w	r2, r2, #31
 8004ee8:	40d3      	lsrs	r3, r2
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d086      	beq.n	8004e00 <HAL_RCC_OscConfig+0x83c>
 8004ef2:	e096      	b.n	8005022 <HAL_RCC_OscConfig+0xa5e>
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	42420480 	.word	0x42420480
 8004efc:	2301      	movs	r3, #1
 8004efe:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f02:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8004f06:	fa93 f2a3 	rbit	r2, r3
 8004f0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004f0e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004f10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004f14:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f16:	fab3 f383 	clz	r3, r3
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4bb5      	ldr	r3, [pc, #724]	; (80051f4 <HAL_RCC_OscConfig+0xc30>)
 8004f20:	4413      	add	r3, r2
 8004f22:	461a      	mov	r2, r3
 8004f24:	2300      	movs	r3, #0
 8004f26:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f28:	f003 f9dc 	bl	80082e4 <HAL_GetTick>
 8004f2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f30:	e009      	b.n	8004f46 <HAL_RCC_OscConfig+0x982>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f32:	f003 f9d7 	bl	80082e4 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e3f8      	b.n	8005738 <HAL_RCC_OscConfig+0x1174>
 8004f46:	2302      	movs	r3, #2
 8004f48:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f4c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8004f50:	fa93 f2a3 	rbit	r2, r3
 8004f54:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004f58:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004f5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004f5e:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f60:	fab3 f383 	clz	r3, r3
 8004f64:	b25b      	sxtb	r3, r3
 8004f66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004f6a:	b25b      	sxtb	r3, r3
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d102      	bne.n	8004f7c <HAL_RCC_OscConfig+0x9b8>
 8004f76:	4ba0      	ldr	r3, [pc, #640]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	e037      	b.n	8004fec <HAL_RCC_OscConfig+0xa28>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f82:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004f86:	fa93 f2a3 	rbit	r2, r3
 8004f8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004f8e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004f90:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	fab3 f383 	clz	r3, r3
 8004f9a:	b25b      	sxtb	r3, r3
 8004f9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004fa0:	b25b      	sxtb	r3, r3
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d102      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x9ee>
 8004fac:	4b92      	ldr	r3, [pc, #584]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	e01c      	b.n	8004fec <HAL_RCC_OscConfig+0xa28>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004fbc:	fa93 f2a3 	rbit	r2, r3
 8004fc0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004fc4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004fc6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	fab3 f383 	clz	r3, r3
 8004fd0:	b25b      	sxtb	r3, r3
 8004fd2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004fd6:	b25b      	sxtb	r3, r3
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d102      	bne.n	8004fe8 <HAL_RCC_OscConfig+0xa24>
 8004fe2:	4b85      	ldr	r3, [pc, #532]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	e001      	b.n	8004fec <HAL_RCC_OscConfig+0xa28>
 8004fe8:	4b83      	ldr	r3, [pc, #524]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	2202      	movs	r2, #2
 8004fee:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8004ff6:	fa92 f1a2 	rbit	r1, r2
 8004ffa:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004ffe:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005000:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8005004:	6812      	ldr	r2, [r2, #0]
 8005006:	fab2 f282 	clz	r2, r2
 800500a:	b252      	sxtb	r2, r2
 800500c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005010:	b252      	sxtb	r2, r2
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	f002 021f 	and.w	r2, r2, #31
 8005018:	40d3      	lsrs	r3, r2
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d187      	bne.n	8004f32 <HAL_RCC_OscConfig+0x96e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005022:	1d3b      	adds	r3, r7, #4
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 818f 	beq.w	8005350 <HAL_RCC_OscConfig+0xd8c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005032:	2300      	movs	r3, #0
 8005034:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005038:	4b6f      	ldr	r3, [pc, #444]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d112      	bne.n	800506a <HAL_RCC_OscConfig+0xaa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005044:	4a6c      	ldr	r2, [pc, #432]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 8005046:	4b6c      	ldr	r3, [pc, #432]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800504e:	61d3      	str	r3, [r2, #28]
 8005050:	4b69      	ldr	r3, [pc, #420]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005058:	f107 030c 	add.w	r3, r7, #12
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	f107 030c 	add.w	r3, r7, #12
 8005062:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005064:	2301      	movs	r3, #1
 8005066:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506a:	4b64      	ldr	r3, [pc, #400]	; (80051fc <HAL_RCC_OscConfig+0xc38>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d11a      	bne.n	80050ac <HAL_RCC_OscConfig+0xae8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005076:	4a61      	ldr	r2, [pc, #388]	; (80051fc <HAL_RCC_OscConfig+0xc38>)
 8005078:	4b60      	ldr	r3, [pc, #384]	; (80051fc <HAL_RCC_OscConfig+0xc38>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005080:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005082:	f003 f92f 	bl	80082e4 <HAL_GetTick>
 8005086:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508a:	e009      	b.n	80050a0 <HAL_RCC_OscConfig+0xadc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800508c:	f003 f92a 	bl	80082e4 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b64      	cmp	r3, #100	; 0x64
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0xadc>
        {
          return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e34b      	b.n	8005738 <HAL_RCC_OscConfig+0x1174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a0:	4b56      	ldr	r3, [pc, #344]	; (80051fc <HAL_RCC_OscConfig+0xc38>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0ef      	beq.n	800508c <HAL_RCC_OscConfig+0xac8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ac:	1d3b      	adds	r3, r7, #4
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d106      	bne.n	80050c4 <HAL_RCC_OscConfig+0xb00>
 80050b6:	4a50      	ldr	r2, [pc, #320]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 80050b8:	4b4f      	ldr	r3, [pc, #316]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	6213      	str	r3, [r2, #32]
 80050c2:	e02f      	b.n	8005124 <HAL_RCC_OscConfig+0xb60>
 80050c4:	1d3b      	adds	r3, r7, #4
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10c      	bne.n	80050e8 <HAL_RCC_OscConfig+0xb24>
 80050ce:	4a4a      	ldr	r2, [pc, #296]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 80050d0:	4b49      	ldr	r3, [pc, #292]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f023 0301 	bic.w	r3, r3, #1
 80050d8:	6213      	str	r3, [r2, #32]
 80050da:	4a47      	ldr	r2, [pc, #284]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 80050dc:	4b46      	ldr	r3, [pc, #280]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	f023 0304 	bic.w	r3, r3, #4
 80050e4:	6213      	str	r3, [r2, #32]
 80050e6:	e01d      	b.n	8005124 <HAL_RCC_OscConfig+0xb60>
 80050e8:	1d3b      	adds	r3, r7, #4
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	2b05      	cmp	r3, #5
 80050f0:	d10c      	bne.n	800510c <HAL_RCC_OscConfig+0xb48>
 80050f2:	4a41      	ldr	r2, [pc, #260]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 80050f4:	4b40      	ldr	r3, [pc, #256]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	f043 0304 	orr.w	r3, r3, #4
 80050fc:	6213      	str	r3, [r2, #32]
 80050fe:	4a3e      	ldr	r2, [pc, #248]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 8005100:	4b3d      	ldr	r3, [pc, #244]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	f043 0301 	orr.w	r3, r3, #1
 8005108:	6213      	str	r3, [r2, #32]
 800510a:	e00b      	b.n	8005124 <HAL_RCC_OscConfig+0xb60>
 800510c:	4a3a      	ldr	r2, [pc, #232]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 800510e:	4b3a      	ldr	r3, [pc, #232]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f023 0301 	bic.w	r3, r3, #1
 8005116:	6213      	str	r3, [r2, #32]
 8005118:	4a37      	ldr	r2, [pc, #220]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 800511a:	4b37      	ldr	r3, [pc, #220]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f023 0304 	bic.w	r3, r3, #4
 8005122:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005124:	1d3b      	adds	r3, r7, #4
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 8087 	beq.w	800523e <HAL_RCC_OscConfig+0xc7a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005130:	f003 f8d8 	bl	80082e4 <HAL_GetTick>
 8005134:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005138:	e00b      	b.n	8005152 <HAL_RCC_OscConfig+0xb8e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800513a:	f003 f8d3 	bl	80082e4 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f241 3288 	movw	r2, #5000	; 0x1388
 800514a:	4293      	cmp	r3, r2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0xb8e>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e2f2      	b.n	8005738 <HAL_RCC_OscConfig+0x1174>
 8005152:	2302      	movs	r3, #2
 8005154:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005158:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800515c:	fa93 f2a3 	rbit	r2, r3
 8005160:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005164:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005166:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800516a:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516c:	fab3 f383 	clz	r3, r3
 8005170:	b25b      	sxtb	r3, r3
 8005172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005176:	b25b      	sxtb	r3, r3
 8005178:	b2db      	uxtb	r3, r3
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b01      	cmp	r3, #1
 8005180:	d102      	bne.n	8005188 <HAL_RCC_OscConfig+0xbc4>
 8005182:	4b1d      	ldr	r3, [pc, #116]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	e03d      	b.n	8005204 <HAL_RCC_OscConfig+0xc40>
 8005188:	2302      	movs	r3, #2
 800518a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800518e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005192:	fa93 f2a3 	rbit	r2, r3
 8005196:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800519a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800519c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	fab3 f383 	clz	r3, r3
 80051a6:	b25b      	sxtb	r3, r3
 80051a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ac:	b25b      	sxtb	r3, r3
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d102      	bne.n	80051be <HAL_RCC_OscConfig+0xbfa>
 80051b8:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	e022      	b.n	8005204 <HAL_RCC_OscConfig+0xc40>
 80051be:	2302      	movs	r3, #2
 80051c0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80051c8:	fa93 f2a3 	rbit	r2, r3
 80051cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80051d0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80051d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	fab3 f383 	clz	r3, r3
 80051dc:	b25b      	sxtb	r3, r3
 80051de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e2:	b25b      	sxtb	r3, r3
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d108      	bne.n	8005200 <HAL_RCC_OscConfig+0xc3c>
 80051ee:	4b02      	ldr	r3, [pc, #8]	; (80051f8 <HAL_RCC_OscConfig+0xc34>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	e007      	b.n	8005204 <HAL_RCC_OscConfig+0xc40>
 80051f4:	42420480 	.word	0x42420480
 80051f8:	40021000 	.word	0x40021000
 80051fc:	40007000 	.word	0x40007000
 8005200:	4bbf      	ldr	r3, [pc, #764]	; (8005500 <HAL_RCC_OscConfig+0xf3c>)
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2202      	movs	r2, #2
 8005206:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800520e:	fa92 f1a2 	rbit	r1, r2
 8005212:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005216:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005218:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800521c:	6812      	ldr	r2, [r2, #0]
 800521e:	fab2 f282 	clz	r2, r2
 8005222:	b252      	sxtb	r2, r2
 8005224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005228:	b252      	sxtb	r2, r2
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	f002 021f 	and.w	r2, r2, #31
 8005230:	40d3      	lsrs	r3, r2
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	f43f af7f 	beq.w	800513a <HAL_RCC_OscConfig+0xb76>
 800523c:	e07e      	b.n	800533c <HAL_RCC_OscConfig+0xd78>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800523e:	f003 f851 	bl	80082e4 <HAL_GetTick>
 8005242:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005246:	e00b      	b.n	8005260 <HAL_RCC_OscConfig+0xc9c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005248:	f003 f84c 	bl	80082e4 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	f241 3288 	movw	r2, #5000	; 0x1388
 8005258:	4293      	cmp	r3, r2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0xc9c>
        {
          return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e26b      	b.n	8005738 <HAL_RCC_OscConfig+0x1174>
 8005260:	2302      	movs	r3, #2
 8005262:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005266:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800526a:	fa93 f2a3 	rbit	r2, r3
 800526e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005272:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005274:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005278:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800527a:	fab3 f383 	clz	r3, r3
 800527e:	b25b      	sxtb	r3, r3
 8005280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005284:	b25b      	sxtb	r3, r3
 8005286:	b2db      	uxtb	r3, r3
 8005288:	095b      	lsrs	r3, r3, #5
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d102      	bne.n	8005296 <HAL_RCC_OscConfig+0xcd2>
 8005290:	4b9b      	ldr	r3, [pc, #620]	; (8005500 <HAL_RCC_OscConfig+0xf3c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	e037      	b.n	8005306 <HAL_RCC_OscConfig+0xd42>
 8005296:	2302      	movs	r3, #2
 8005298:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052a0:	fa93 f2a3 	rbit	r2, r3
 80052a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80052a8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80052aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	fab3 f383 	clz	r3, r3
 80052b4:	b25b      	sxtb	r3, r3
 80052b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ba:	b25b      	sxtb	r3, r3
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d102      	bne.n	80052cc <HAL_RCC_OscConfig+0xd08>
 80052c6:	4b8e      	ldr	r3, [pc, #568]	; (8005500 <HAL_RCC_OscConfig+0xf3c>)
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	e01c      	b.n	8005306 <HAL_RCC_OscConfig+0xd42>
 80052cc:	2302      	movs	r3, #2
 80052ce:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80052d6:	fa93 f2a3 	rbit	r2, r3
 80052da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80052de:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80052e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	fab3 f383 	clz	r3, r3
 80052ea:	b25b      	sxtb	r3, r3
 80052ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052f0:	b25b      	sxtb	r3, r3
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d102      	bne.n	8005302 <HAL_RCC_OscConfig+0xd3e>
 80052fc:	4b80      	ldr	r3, [pc, #512]	; (8005500 <HAL_RCC_OscConfig+0xf3c>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	e001      	b.n	8005306 <HAL_RCC_OscConfig+0xd42>
 8005302:	4b7f      	ldr	r3, [pc, #508]	; (8005500 <HAL_RCC_OscConfig+0xf3c>)
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	2202      	movs	r2, #2
 8005308:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005310:	fa92 f1a2 	rbit	r1, r2
 8005314:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8005318:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800531a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	fab2 f282 	clz	r2, r2
 8005324:	b252      	sxtb	r2, r2
 8005326:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800532a:	b252      	sxtb	r2, r2
 800532c:	b2d2      	uxtb	r2, r2
 800532e:	f002 021f 	and.w	r2, r2, #31
 8005332:	40d3      	lsrs	r3, r2
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d185      	bne.n	8005248 <HAL_RCC_OscConfig+0xc84>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800533c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005340:	2b01      	cmp	r3, #1
 8005342:	d105      	bne.n	8005350 <HAL_RCC_OscConfig+0xd8c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005344:	4a6e      	ldr	r2, [pc, #440]	; (8005500 <HAL_RCC_OscConfig+0xf3c>)
 8005346:	4b6e      	ldr	r3, [pc, #440]	; (8005500 <HAL_RCC_OscConfig+0xf3c>)
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800534e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005350:	1d3b      	adds	r3, r7, #4
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 81ed 	beq.w	8005736 <HAL_RCC_OscConfig+0x1172>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800535c:	4b68      	ldr	r3, [pc, #416]	; (8005500 <HAL_RCC_OscConfig+0xf3c>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 030c 	and.w	r3, r3, #12
 8005364:	2b08      	cmp	r3, #8
 8005366:	f000 81e4 	beq.w	8005732 <HAL_RCC_OscConfig+0x116e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800536a:	1d3b      	adds	r3, r7, #4
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	2b02      	cmp	r3, #2
 8005372:	f040 8144 	bne.w	80055fe <HAL_RCC_OscConfig+0x103a>
 8005376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800537a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005382:	fa93 f2a3 	rbit	r2, r3
 8005386:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800538a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800538c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005390:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005392:	fab3 f383 	clz	r3, r3
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800539c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80053a0:	461a      	mov	r2, r3
 80053a2:	2300      	movs	r3, #0
 80053a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a6:	f002 ff9d 	bl	80082e4 <HAL_GetTick>
 80053aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ae:	e009      	b.n	80053c4 <HAL_RCC_OscConfig+0xe00>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053b0:	f002 ff98 	bl	80082e4 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0xe00>
          {
            return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e1b9      	b.n	8005738 <HAL_RCC_OscConfig+0x1174>
 80053c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053c8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80053d0:	fa93 f2a3 	rbit	r2, r3
 80053d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80053d8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80053da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80053de:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e0:	fab3 f383 	clz	r3, r3
 80053e4:	b25b      	sxtb	r3, r3
 80053e6:	f043 0320 	orr.w	r3, r3, #32
 80053ea:	b25b      	sxtb	r3, r3
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	095b      	lsrs	r3, r3, #5
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d102      	bne.n	80053fc <HAL_RCC_OscConfig+0xe38>
 80053f6:	4b42      	ldr	r3, [pc, #264]	; (8005500 <HAL_RCC_OscConfig+0xf3c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	e039      	b.n	8005470 <HAL_RCC_OscConfig+0xeac>
 80053fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005400:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005404:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005408:	fa93 f2a3 	rbit	r2, r3
 800540c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005410:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005412:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	fab3 f383 	clz	r3, r3
 800541c:	b25b      	sxtb	r3, r3
 800541e:	f043 0320 	orr.w	r3, r3, #32
 8005422:	b25b      	sxtb	r3, r3
 8005424:	b2db      	uxtb	r3, r3
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d102      	bne.n	8005434 <HAL_RCC_OscConfig+0xe70>
 800542e:	4b34      	ldr	r3, [pc, #208]	; (8005500 <HAL_RCC_OscConfig+0xf3c>)
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	e01d      	b.n	8005470 <HAL_RCC_OscConfig+0xeac>
 8005434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005438:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005440:	fa93 f2a3 	rbit	r2, r3
 8005444:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005448:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800544a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	fab3 f383 	clz	r3, r3
 8005454:	b25b      	sxtb	r3, r3
 8005456:	f043 0320 	orr.w	r3, r3, #32
 800545a:	b25b      	sxtb	r3, r3
 800545c:	b2db      	uxtb	r3, r3
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b04      	cmp	r3, #4
 8005464:	d102      	bne.n	800546c <HAL_RCC_OscConfig+0xea8>
 8005466:	4b26      	ldr	r3, [pc, #152]	; (8005500 <HAL_RCC_OscConfig+0xf3c>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	e001      	b.n	8005470 <HAL_RCC_OscConfig+0xeac>
 800546c:	4b24      	ldr	r3, [pc, #144]	; (8005500 <HAL_RCC_OscConfig+0xf3c>)
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005474:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005478:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800547c:	fa92 f1a2 	rbit	r1, r2
 8005480:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005484:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005486:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	fab2 f282 	clz	r2, r2
 8005490:	b252      	sxtb	r2, r2
 8005492:	f042 0220 	orr.w	r2, r2, #32
 8005496:	b252      	sxtb	r2, r2
 8005498:	b2d2      	uxtb	r2, r2
 800549a:	f002 021f 	and.w	r2, r2, #31
 800549e:	40d3      	lsrs	r3, r2
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d183      	bne.n	80053b0 <HAL_RCC_OscConfig+0xdec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054a8:	4815      	ldr	r0, [pc, #84]	; (8005500 <HAL_RCC_OscConfig+0xf3c>)
 80054aa:	4b15      	ldr	r3, [pc, #84]	; (8005500 <HAL_RCC_OscConfig+0xf3c>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80054b2:	1d3b      	adds	r3, r7, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80054b8:	1d3b      	adds	r3, r7, #4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	430b      	orrs	r3, r1
 80054c0:	4313      	orrs	r3, r2
 80054c2:	6043      	str	r3, [r0, #4]
 80054c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d0:	fa93 f2a3 	rbit	r2, r3
 80054d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80054d8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80054da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80054de:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e0:	fab3 f383 	clz	r3, r3
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80054ea:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80054ee:	461a      	mov	r2, r3
 80054f0:	2301      	movs	r3, #1
 80054f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f4:	f002 fef6 	bl	80082e4 <HAL_GetTick>
 80054f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054fc:	e00c      	b.n	8005518 <HAL_RCC_OscConfig+0xf54>
 80054fe:	bf00      	nop
 8005500:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005504:	f002 feee 	bl	80082e4 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e10f      	b.n	8005738 <HAL_RCC_OscConfig+0x1174>
 8005518:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800551c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005520:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005524:	fa93 f2a3 	rbit	r2, r3
 8005528:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800552c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800552e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005532:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005534:	fab3 f383 	clz	r3, r3
 8005538:	b25b      	sxtb	r3, r3
 800553a:	f043 0320 	orr.w	r3, r3, #32
 800553e:	b25b      	sxtb	r3, r3
 8005540:	b2db      	uxtb	r3, r3
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b01      	cmp	r3, #1
 8005548:	d102      	bne.n	8005550 <HAL_RCC_OscConfig+0xf8c>
 800554a:	4b7e      	ldr	r3, [pc, #504]	; (8005744 <HAL_RCC_OscConfig+0x1180>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	e039      	b.n	80055c4 <HAL_RCC_OscConfig+0x1000>
 8005550:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005554:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005558:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800555c:	fa93 f2a3 	rbit	r2, r3
 8005560:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005564:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	fab3 f383 	clz	r3, r3
 8005570:	b25b      	sxtb	r3, r3
 8005572:	f043 0320 	orr.w	r3, r3, #32
 8005576:	b25b      	sxtb	r3, r3
 8005578:	b2db      	uxtb	r3, r3
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d102      	bne.n	8005588 <HAL_RCC_OscConfig+0xfc4>
 8005582:	4b70      	ldr	r3, [pc, #448]	; (8005744 <HAL_RCC_OscConfig+0x1180>)
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	e01d      	b.n	80055c4 <HAL_RCC_OscConfig+0x1000>
 8005588:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800558c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005590:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005594:	fa93 f2a3 	rbit	r2, r3
 8005598:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800559c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800559e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	fab3 f383 	clz	r3, r3
 80055a8:	b25b      	sxtb	r3, r3
 80055aa:	f043 0320 	orr.w	r3, r3, #32
 80055ae:	b25b      	sxtb	r3, r3
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d102      	bne.n	80055c0 <HAL_RCC_OscConfig+0xffc>
 80055ba:	4b62      	ldr	r3, [pc, #392]	; (8005744 <HAL_RCC_OscConfig+0x1180>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	e001      	b.n	80055c4 <HAL_RCC_OscConfig+0x1000>
 80055c0:	4b60      	ldr	r3, [pc, #384]	; (8005744 <HAL_RCC_OscConfig+0x1180>)
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055c8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055cc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80055d0:	fa92 f1a2 	rbit	r1, r2
 80055d4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80055d8:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80055da:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80055de:	6812      	ldr	r2, [r2, #0]
 80055e0:	fab2 f282 	clz	r2, r2
 80055e4:	b252      	sxtb	r2, r2
 80055e6:	f042 0220 	orr.w	r2, r2, #32
 80055ea:	b252      	sxtb	r2, r2
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	f002 021f 	and.w	r2, r2, #31
 80055f2:	40d3      	lsrs	r3, r2
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d083      	beq.n	8005504 <HAL_RCC_OscConfig+0xf40>
 80055fc:	e09b      	b.n	8005736 <HAL_RCC_OscConfig+0x1172>
 80055fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005602:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005606:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800560a:	fa93 f2a3 	rbit	r2, r3
 800560e:	f107 0320 	add.w	r3, r7, #32
 8005612:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005614:	f107 0320 	add.w	r3, r7, #32
 8005618:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800561a:	fab3 f383 	clz	r3, r3
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8005624:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8005628:	461a      	mov	r2, r3
 800562a:	2300      	movs	r3, #0
 800562c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800562e:	f002 fe59 	bl	80082e4 <HAL_GetTick>
 8005632:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005636:	e009      	b.n	800564c <HAL_RCC_OscConfig+0x1088>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005638:	f002 fe54 	bl	80082e4 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x1088>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e075      	b.n	8005738 <HAL_RCC_OscConfig+0x1174>
 800564c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005650:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005658:	fa93 f2a3 	rbit	r2, r3
 800565c:	f107 031c 	add.w	r3, r7, #28
 8005660:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005662:	f107 031c 	add.w	r3, r7, #28
 8005666:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005668:	fab3 f383 	clz	r3, r3
 800566c:	b25b      	sxtb	r3, r3
 800566e:	f043 0320 	orr.w	r3, r3, #32
 8005672:	b25b      	sxtb	r3, r3
 8005674:	b2db      	uxtb	r3, r3
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b01      	cmp	r3, #1
 800567c:	d102      	bne.n	8005684 <HAL_RCC_OscConfig+0x10c0>
 800567e:	4b31      	ldr	r3, [pc, #196]	; (8005744 <HAL_RCC_OscConfig+0x1180>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	e039      	b.n	80056f8 <HAL_RCC_OscConfig+0x1134>
 8005684:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005688:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005690:	fa93 f2a3 	rbit	r2, r3
 8005694:	f107 0318 	add.w	r3, r7, #24
 8005698:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800569a:	f107 0318 	add.w	r3, r7, #24
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	fab3 f383 	clz	r3, r3
 80056a4:	b25b      	sxtb	r3, r3
 80056a6:	f043 0320 	orr.w	r3, r3, #32
 80056aa:	b25b      	sxtb	r3, r3
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d102      	bne.n	80056bc <HAL_RCC_OscConfig+0x10f8>
 80056b6:	4b23      	ldr	r3, [pc, #140]	; (8005744 <HAL_RCC_OscConfig+0x1180>)
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	e01d      	b.n	80056f8 <HAL_RCC_OscConfig+0x1134>
 80056bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056c8:	fa93 f2a3 	rbit	r2, r3
 80056cc:	f107 0314 	add.w	r3, r7, #20
 80056d0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80056d2:	f107 0314 	add.w	r3, r7, #20
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	fab3 f383 	clz	r3, r3
 80056dc:	b25b      	sxtb	r3, r3
 80056de:	f043 0320 	orr.w	r3, r3, #32
 80056e2:	b25b      	sxtb	r3, r3
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	095b      	lsrs	r3, r3, #5
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d102      	bne.n	80056f4 <HAL_RCC_OscConfig+0x1130>
 80056ee:	4b15      	ldr	r3, [pc, #84]	; (8005744 <HAL_RCC_OscConfig+0x1180>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	e001      	b.n	80056f8 <HAL_RCC_OscConfig+0x1134>
 80056f4:	4b13      	ldr	r3, [pc, #76]	; (8005744 <HAL_RCC_OscConfig+0x1180>)
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056fc:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005700:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005704:	fa92 f1a2 	rbit	r1, r2
 8005708:	f107 0210 	add.w	r2, r7, #16
 800570c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800570e:	f107 0210 	add.w	r2, r7, #16
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	fab2 f282 	clz	r2, r2
 8005718:	b252      	sxtb	r2, r2
 800571a:	f042 0220 	orr.w	r2, r2, #32
 800571e:	b252      	sxtb	r2, r2
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	f002 021f 	and.w	r2, r2, #31
 8005726:	40d3      	lsrs	r3, r2
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d183      	bne.n	8005638 <HAL_RCC_OscConfig+0x1074>
 8005730:	e001      	b.n	8005736 <HAL_RCC_OscConfig+0x1172>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <HAL_RCC_OscConfig+0x1174>
    }
  }
  
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	f507 7701 	add.w	r7, r7, #516	; 0x204
 800573e:	46bd      	mov	sp, r7
 8005740:	bd90      	pop	{r4, r7, pc}
 8005742:	bf00      	nop
 8005744:	40021000 	.word	0x40021000

08005748 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b09e      	sub	sp, #120	; 0x78
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005752:	2300      	movs	r3, #0
 8005754:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8005756:	4ba3      	ldr	r3, [pc, #652]	; (80059e4 <HAL_RCC_ClockConfig+0x29c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0207 	and.w	r2, r3, #7
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d210      	bcs.n	8005786 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005764:	499f      	ldr	r1, [pc, #636]	; (80059e4 <HAL_RCC_ClockConfig+0x29c>)
 8005766:	4b9f      	ldr	r3, [pc, #636]	; (80059e4 <HAL_RCC_ClockConfig+0x29c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f023 0207 	bic.w	r2, r3, #7
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	4313      	orrs	r3, r2
 8005772:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005774:	4b9b      	ldr	r3, [pc, #620]	; (80059e4 <HAL_RCC_ClockConfig+0x29c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0207 	and.w	r2, r3, #7
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d001      	beq.n	8005786 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e1d0      	b.n	8005b28 <HAL_RCC_ClockConfig+0x3e0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d008      	beq.n	80057a4 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005792:	4995      	ldr	r1, [pc, #596]	; (80059e8 <HAL_RCC_ClockConfig+0x2a0>)
 8005794:	4b94      	ldr	r3, [pc, #592]	; (80059e8 <HAL_RCC_ClockConfig+0x2a0>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8168 	beq.w	8005a82 <HAL_RCC_ClockConfig+0x33a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d15c      	bne.n	8005874 <HAL_RCC_ClockConfig+0x12c>
 80057ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057be:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c2:	fa93 f3a3 	rbit	r3, r3
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80057c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ca:	fab3 f383 	clz	r3, r3
 80057ce:	b25b      	sxtb	r3, r3
 80057d0:	f043 0320 	orr.w	r3, r3, #32
 80057d4:	b25b      	sxtb	r3, r3
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d102      	bne.n	80057e6 <HAL_RCC_ClockConfig+0x9e>
 80057e0:	4b81      	ldr	r3, [pc, #516]	; (80059e8 <HAL_RCC_ClockConfig+0x2a0>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	e02d      	b.n	8005842 <HAL_RCC_ClockConfig+0xfa>
 80057e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057ea:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057ee:	fa93 f3a3 	rbit	r3, r3
 80057f2:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80057f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f6:	fab3 f383 	clz	r3, r3
 80057fa:	b25b      	sxtb	r3, r3
 80057fc:	f043 0320 	orr.w	r3, r3, #32
 8005800:	b25b      	sxtb	r3, r3
 8005802:	b2db      	uxtb	r3, r3
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d102      	bne.n	8005812 <HAL_RCC_ClockConfig+0xca>
 800580c:	4b76      	ldr	r3, [pc, #472]	; (80059e8 <HAL_RCC_ClockConfig+0x2a0>)
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	e017      	b.n	8005842 <HAL_RCC_ClockConfig+0xfa>
 8005812:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005816:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581a:	fa93 f3a3 	rbit	r3, r3
 800581e:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005822:	fab3 f383 	clz	r3, r3
 8005826:	b25b      	sxtb	r3, r3
 8005828:	f043 0320 	orr.w	r3, r3, #32
 800582c:	b25b      	sxtb	r3, r3
 800582e:	b2db      	uxtb	r3, r3
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b04      	cmp	r3, #4
 8005836:	d102      	bne.n	800583e <HAL_RCC_ClockConfig+0xf6>
 8005838:	4b6b      	ldr	r3, [pc, #428]	; (80059e8 <HAL_RCC_ClockConfig+0x2a0>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	e001      	b.n	8005842 <HAL_RCC_ClockConfig+0xfa>
 800583e:	4b6a      	ldr	r3, [pc, #424]	; (80059e8 <HAL_RCC_ClockConfig+0x2a0>)
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005846:	66ba      	str	r2, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005848:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800584a:	fa92 f2a2 	rbit	r2, r2
 800584e:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005852:	fab2 f282 	clz	r2, r2
 8005856:	b252      	sxtb	r2, r2
 8005858:	f042 0220 	orr.w	r2, r2, #32
 800585c:	b252      	sxtb	r2, r2
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	f002 021f 	and.w	r2, r2, #31
 8005864:	40d3      	lsrs	r3, r2
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	f040 80be 	bne.w	80059ec <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e159      	b.n	8005b28 <HAL_RCC_ClockConfig+0x3e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b02      	cmp	r3, #2
 800587a:	d15b      	bne.n	8005934 <HAL_RCC_ClockConfig+0x1ec>
 800587c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005880:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005882:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005884:	fa93 f3a3 	rbit	r3, r3
 8005888:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800588c:	fab3 f383 	clz	r3, r3
 8005890:	b25b      	sxtb	r3, r3
 8005892:	f043 0320 	orr.w	r3, r3, #32
 8005896:	b25b      	sxtb	r3, r3
 8005898:	b2db      	uxtb	r3, r3
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d102      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x160>
 80058a2:	4b51      	ldr	r3, [pc, #324]	; (80059e8 <HAL_RCC_ClockConfig+0x2a0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	e02d      	b.n	8005904 <HAL_RCC_ClockConfig+0x1bc>
 80058a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058ac:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058b0:	fa93 f3a3 	rbit	r3, r3
 80058b4:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80058b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b8:	fab3 f383 	clz	r3, r3
 80058bc:	b25b      	sxtb	r3, r3
 80058be:	f043 0320 	orr.w	r3, r3, #32
 80058c2:	b25b      	sxtb	r3, r3
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d102      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x18c>
 80058ce:	4b46      	ldr	r3, [pc, #280]	; (80059e8 <HAL_RCC_ClockConfig+0x2a0>)
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	e017      	b.n	8005904 <HAL_RCC_ClockConfig+0x1bc>
 80058d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058d8:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058dc:	fa93 f3a3 	rbit	r3, r3
 80058e0:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	fab3 f383 	clz	r3, r3
 80058e8:	b25b      	sxtb	r3, r3
 80058ea:	f043 0320 	orr.w	r3, r3, #32
 80058ee:	b25b      	sxtb	r3, r3
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d102      	bne.n	8005900 <HAL_RCC_ClockConfig+0x1b8>
 80058fa:	4b3b      	ldr	r3, [pc, #236]	; (80059e8 <HAL_RCC_ClockConfig+0x2a0>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	e001      	b.n	8005904 <HAL_RCC_ClockConfig+0x1bc>
 8005900:	4b39      	ldr	r3, [pc, #228]	; (80059e8 <HAL_RCC_ClockConfig+0x2a0>)
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005908:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800590c:	fa92 f2a2 	rbit	r2, r2
 8005910:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	fab2 f282 	clz	r2, r2
 8005918:	b252      	sxtb	r2, r2
 800591a:	f042 0220 	orr.w	r2, r2, #32
 800591e:	b252      	sxtb	r2, r2
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	f002 021f 	and.w	r2, r2, #31
 8005926:	40d3      	lsrs	r3, r2
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d15d      	bne.n	80059ec <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e0f9      	b.n	8005b28 <HAL_RCC_ClockConfig+0x3e0>
 8005934:	2302      	movs	r3, #2
 8005936:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800593a:	fa93 f3a3 	rbit	r3, r3
 800593e:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005940:	69fb      	ldr	r3, [r7, #28]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005942:	fab3 f383 	clz	r3, r3
 8005946:	b25b      	sxtb	r3, r3
 8005948:	f043 0320 	orr.w	r3, r3, #32
 800594c:	b25b      	sxtb	r3, r3
 800594e:	b2db      	uxtb	r3, r3
 8005950:	095b      	lsrs	r3, r3, #5
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	d102      	bne.n	800595e <HAL_RCC_ClockConfig+0x216>
 8005958:	4b23      	ldr	r3, [pc, #140]	; (80059e8 <HAL_RCC_ClockConfig+0x2a0>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	e02b      	b.n	80059b6 <HAL_RCC_ClockConfig+0x26e>
 800595e:	2302      	movs	r3, #2
 8005960:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005964:	fa93 f3a3 	rbit	r3, r3
 8005968:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	fab3 f383 	clz	r3, r3
 8005970:	b25b      	sxtb	r3, r3
 8005972:	f043 0320 	orr.w	r3, r3, #32
 8005976:	b25b      	sxtb	r3, r3
 8005978:	b2db      	uxtb	r3, r3
 800597a:	095b      	lsrs	r3, r3, #5
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d102      	bne.n	8005988 <HAL_RCC_ClockConfig+0x240>
 8005982:	4b19      	ldr	r3, [pc, #100]	; (80059e8 <HAL_RCC_ClockConfig+0x2a0>)
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	e016      	b.n	80059b6 <HAL_RCC_ClockConfig+0x26e>
 8005988:	2302      	movs	r3, #2
 800598a:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800598e:	fa93 f3a3 	rbit	r3, r3
 8005992:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	fab3 f383 	clz	r3, r3
 800599a:	b25b      	sxtb	r3, r3
 800599c:	f043 0320 	orr.w	r3, r3, #32
 80059a0:	b25b      	sxtb	r3, r3
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d102      	bne.n	80059b2 <HAL_RCC_ClockConfig+0x26a>
 80059ac:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <HAL_RCC_ClockConfig+0x2a0>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	e001      	b.n	80059b6 <HAL_RCC_ClockConfig+0x26e>
 80059b2:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <HAL_RCC_ClockConfig+0x2a0>)
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	2202      	movs	r2, #2
 80059b8:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059bc:	fa92 f2a2 	rbit	r2, r2
 80059c0:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	fab2 f282 	clz	r2, r2
 80059c8:	b252      	sxtb	r2, r2
 80059ca:	f042 0220 	orr.w	r2, r2, #32
 80059ce:	b252      	sxtb	r2, r2
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	f002 021f 	and.w	r2, r2, #31
 80059d6:	40d3      	lsrs	r3, r2
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d105      	bne.n	80059ec <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e0a1      	b.n	8005b28 <HAL_RCC_ClockConfig+0x3e0>
 80059e4:	40022000 	.word	0x40022000
 80059e8:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ec:	4950      	ldr	r1, [pc, #320]	; (8005b30 <HAL_RCC_ClockConfig+0x3e8>)
 80059ee:	4b50      	ldr	r3, [pc, #320]	; (8005b30 <HAL_RCC_ClockConfig+0x3e8>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f023 0203 	bic.w	r2, r3, #3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059fe:	f002 fc71 	bl	80082e4 <HAL_GetTick>
 8005a02:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d112      	bne.n	8005a32 <HAL_RCC_ClockConfig+0x2ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a0c:	e00a      	b.n	8005a24 <HAL_RCC_ClockConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a0e:	f002 fc69 	bl	80082e4 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_ClockConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e081      	b.n	8005b28 <HAL_RCC_ClockConfig+0x3e0>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a24:	4b42      	ldr	r3, [pc, #264]	; (8005b30 <HAL_RCC_ClockConfig+0x3e8>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 030c 	and.w	r3, r3, #12
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d1ee      	bne.n	8005a0e <HAL_RCC_ClockConfig+0x2c6>
 8005a30:	e027      	b.n	8005a82 <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d11d      	bne.n	8005a76 <HAL_RCC_ClockConfig+0x32e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a3a:	e00a      	b.n	8005a52 <HAL_RCC_ClockConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a3c:	f002 fc52 	bl	80082e4 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_ClockConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e06a      	b.n	8005b28 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a52:	4b37      	ldr	r3, [pc, #220]	; (8005b30 <HAL_RCC_ClockConfig+0x3e8>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f003 030c 	and.w	r3, r3, #12
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d1ee      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x2f4>
 8005a5e:	e010      	b.n	8005a82 <HAL_RCC_ClockConfig+0x33a>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a60:	f002 fc40 	bl	80082e4 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_ClockConfig+0x32e>
        {
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e058      	b.n	8005b28 <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a76:	4b2e      	ldr	r3, [pc, #184]	; (8005b30 <HAL_RCC_ClockConfig+0x3e8>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f003 030c 	and.w	r3, r3, #12
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1ee      	bne.n	8005a60 <HAL_RCC_ClockConfig+0x318>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8005a82:	4b2c      	ldr	r3, [pc, #176]	; (8005b34 <HAL_RCC_ClockConfig+0x3ec>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0207 	and.w	r2, r3, #7
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d910      	bls.n	8005ab2 <HAL_RCC_ClockConfig+0x36a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a90:	4928      	ldr	r1, [pc, #160]	; (8005b34 <HAL_RCC_ClockConfig+0x3ec>)
 8005a92:	4b28      	ldr	r3, [pc, #160]	; (8005b34 <HAL_RCC_ClockConfig+0x3ec>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f023 0207 	bic.w	r2, r3, #7
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005aa0:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <HAL_RCC_ClockConfig+0x3ec>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0207 	and.w	r2, r3, #7
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d001      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x36a>
    {
      return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e03a      	b.n	8005b28 <HAL_RCC_ClockConfig+0x3e0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x388>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005abe:	491c      	ldr	r1, [pc, #112]	; (8005b30 <HAL_RCC_ClockConfig+0x3e8>)
 8005ac0:	4b1b      	ldr	r3, [pc, #108]	; (8005b30 <HAL_RCC_ClockConfig+0x3e8>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d009      	beq.n	8005af0 <HAL_RCC_ClockConfig+0x3a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005adc:	4914      	ldr	r1, [pc, #80]	; (8005b30 <HAL_RCC_ClockConfig+0x3e8>)
 8005ade:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <HAL_RCC_ClockConfig+0x3e8>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	4313      	orrs	r3, r2
 8005aee:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005af0:	f000 f826 	bl	8005b40 <HAL_RCC_GetSysClockFreq>
 8005af4:	4601      	mov	r1, r0
 8005af6:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <HAL_RCC_ClockConfig+0x3e8>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005afe:	23f0      	movs	r3, #240	; 0xf0
 8005b00:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b04:	fa93 f3a3 	rbit	r3, r3
 8005b08:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	fab3 f383 	clz	r3, r3
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
 8005b14:	4a08      	ldr	r2, [pc, #32]	; (8005b38 <HAL_RCC_ClockConfig+0x3f0>)
 8005b16:	5cd3      	ldrb	r3, [r2, r3]
 8005b18:	fa21 f303 	lsr.w	r3, r1, r3
 8005b1c:	4a07      	ldr	r2, [pc, #28]	; (8005b3c <HAL_RCC_ClockConfig+0x3f4>)
 8005b1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005b20:	2000      	movs	r0, #0
 8005b22:	f002 fbb5 	bl	8008290 <HAL_InitTick>
  
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3778      	adds	r7, #120	; 0x78
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40021000 	.word	0x40021000
 8005b34:	40022000 	.word	0x40022000
 8005b38:	0800b2d4 	.word	0x0800b2d4
 8005b3c:	20000154 	.word	0x20000154

08005b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b08b      	sub	sp, #44	; 0x2c
 8005b44:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	61bb      	str	r3, [r7, #24]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
 8005b52:	2300      	movs	r3, #0
 8005b54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005b5a:	4b29      	ldr	r3, [pc, #164]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f003 030c 	and.w	r3, r3, #12
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d002      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0x30>
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	d003      	beq.n	8005b76 <HAL_RCC_GetSysClockFreq+0x36>
 8005b6e:	e03c      	b.n	8005bea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b70:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b72:	623b      	str	r3, [r7, #32]
      break;
 8005b74:	e03c      	b.n	8005bf0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005b7c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8005b80:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	fa93 f3a3 	rbit	r3, r3
 8005b88:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	fab3 f383 	clz	r3, r3
 8005b90:	fa22 f303 	lsr.w	r3, r2, r3
 8005b94:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b96:	5cd3      	ldrb	r3, [r2, r3]
 8005b98:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005b9a:	4b19      	ldr	r3, [pc, #100]	; (8005c00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	f003 020f 	and.w	r2, r3, #15
 8005ba2:	230f      	movs	r3, #15
 8005ba4:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	fa93 f3a3 	rbit	r3, r3
 8005bac:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	fab3 f383 	clz	r3, r3
 8005bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb8:	4a14      	ldr	r2, [pc, #80]	; (8005c0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005bba:	5cd3      	ldrb	r3, [r2, r3]
 8005bbc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8005bc8:	4a0e      	ldr	r2, [pc, #56]	; (8005c04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd8:	e004      	b.n	8005be4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005bde:	fb02 f303 	mul.w	r3, r2, r3
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	623b      	str	r3, [r7, #32]
      break;
 8005be8:	e002      	b.n	8005bf0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bea:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005bec:	623b      	str	r3, [r7, #32]
      break;
 8005bee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	372c      	adds	r7, #44	; 0x2c
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40021000 	.word	0x40021000
 8005c04:	007a1200 	.word	0x007a1200
 8005c08:	0800b2b4 	.word	0x0800b2b4
 8005c0c:	0800b2c4 	.word	0x0800b2c4
 8005c10:	003d0900 	.word	0x003d0900

08005c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c18:	4b03      	ldr	r3, [pc, #12]	; (8005c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	20000154 	.word	0x20000154

08005c2c <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	607b      	str	r3, [r7, #4]
 8005c36:	460b      	mov	r3, r1
 8005c38:	817b      	strh	r3, [r7, #10]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8005c3e:	897b      	ldrh	r3, [r7, #10]
 8005c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00b      	beq.n	8005c62 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8005c4a:	897b      	ldrh	r3, [r7, #10]
 8005c4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c50:	4613      	mov	r3, r2
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	1a9b      	subs	r3, r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	3328      	adds	r3, #40	; 0x28
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e00a      	b.n	8005c78 <HAL_PCDEx_PMAConfig+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c62:	897a      	ldrh	r2, [r7, #10]
 8005c64:	4613      	mov	r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	1a9b      	subs	r3, r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	3304      	adds	r3, #4
 8005c76:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005c78:	893b      	ldrh	r3, [r7, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d107      	bne.n	8005c8e <HAL_PCDEx_PMAConfig+0x62>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2200      	movs	r2, #0
 8005c82:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	809a      	strh	r2, [r3, #4]
 8005c8c:	e00b      	b.n	8005ca6 <HAL_PCDEx_PMAConfig+0x7a>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2201      	movs	r2, #1
 8005c92:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	0c1b      	lsrs	r3, r3, #16
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	371c      	adds	r7, #28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <PCD_WritePMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b08b      	sub	sp, #44	; 0x2c
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	80fb      	strh	r3, [r7, #6]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8005cca:	88bb      	ldrh	r3, [r7, #4]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	105b      	asrs	r3, r3, #1
 8005cd0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ce0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0; i--)
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce6:	e01b      	b.n	8005d20 <PCD_WritePMA+0x6c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	021b      	lsls	r3, r3, #8
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	1c9a      	adds	r2, r3, #2
 8005d06:	623a      	str	r2, [r7, #32]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	b292      	uxth	r2, r2
 8005d0c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	3302      	adds	r3, #2
 8005d12:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	3301      	adds	r3, #1
 8005d18:	60bb      	str	r3, [r7, #8]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e0      	bne.n	8005ce8 <PCD_WritePMA+0x34>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8005d26:	bf00      	nop
 8005d28:	372c      	adds	r7, #44	; 0x2c
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop

08005d34 <PCD_ReadPMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	; 0x24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	4611      	mov	r1, r2
 8005d40:	461a      	mov	r2, r3
 8005d42:	460b      	mov	r3, r1
 8005d44:	80fb      	strh	r3, [r7, #6]
 8005d46:	4613      	mov	r3, r2
 8005d48:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 8005d4a:	88bb      	ldrh	r3, [r7, #4]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	105b      	asrs	r3, r3, #1
 8005d50:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8005d52:	88fb      	ldrh	r3, [r7, #6]
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	461a      	mov	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d60:	61bb      	str	r3, [r7, #24]
  for (i = n; i != 0; i--)
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	61fb      	str	r3, [r7, #28]
 8005d66:	e00e      	b.n	8005d86 <PCD_ReadPMA+0x52>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	60ba      	str	r2, [r7, #8]
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	1d11      	adds	r1, r2, #4
 8005d72:	61b9      	str	r1, [r7, #24]
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	b292      	uxth	r2, r2
 8005d78:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	60bb      	str	r3, [r7, #8]
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	61fb      	str	r3, [r7, #28]
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1ed      	bne.n	8005d68 <PCD_ReadPMA+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8005d8c:	bf00      	nop
 8005d8e:	3724      	adds	r7, #36	; 0x24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e0ce      	b.n	8005f50 <HAL_PCD_Init+0x1b8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <HAL_PCD_Init+0x34>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7fb f9ea 	bl	80011a0 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2203      	movs	r2, #3
 8005dd0:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 
 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	e040      	b.n	8005e5c <HAL_PCD_Init+0xc4>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4613      	mov	r3, r2
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	1a9b      	subs	r3, r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	440b      	add	r3, r1
 8005de8:	3329      	adds	r3, #41	; 0x29
 8005dea:	2201      	movs	r2, #1
 8005dec:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	b2d8      	uxtb	r0, r3
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	4613      	mov	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	1a9b      	subs	r3, r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	440b      	add	r3, r1
 8005e00:	3328      	adds	r3, #40	; 0x28
 8005e02:	4602      	mov	r2, r0
 8005e04:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	1a9b      	subs	r3, r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	440b      	add	r3, r1
 8005e14:	332b      	adds	r3, #43	; 0x2b
 8005e16:	2200      	movs	r2, #0
 8005e18:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	440b      	add	r3, r1
 8005e28:	3334      	adds	r3, #52	; 0x34
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0;
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4613      	mov	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	3338      	adds	r3, #56	; 0x38
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0;
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4613      	mov	r3, r2
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	333c      	adds	r3, #60	; 0x3c
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 
 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d8b9      	bhi.n	8005dda <HAL_PCD_Init+0x42>
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	e046      	b.n	8005efa <HAL_PCD_Init+0x162>
 {
   hpcd->OUT_ep[i].is_in = 0;
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4613      	mov	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	f203 13cd 	addw	r3, r3, #461	; 0x1cd
 8005e7e:	2200      	movs	r2, #0
 8005e80:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	b2d8      	uxtb	r0, r3
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8005e98:	4602      	mov	r2, r0
 8005e9a:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 8005eae:	2200      	movs	r2, #0
 8005eb0:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0;
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0;
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d8b3      	bhi.n	8005e6c <HAL_PCD_Init+0xd4>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8005f2c:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8005f30:	60bb      	str	r3, [r7, #8]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	b292      	uxth	r2, r2
 8005f3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371

 return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8005f60:	2101      	movs	r1, #1
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7fb fb54 	bl	8001610 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop

08005f74 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005f74:	b590      	push	{r4, r7, lr}
 8005f76:	b089      	sub	sp, #36	; 0x24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count=0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	83fb      	strh	r3, [r7, #30]
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8005f84:	e318      	b.n	80065b8 <PCD_EP_ISR_Handler+0x644>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005f86:	89fb      	ldrh	r3, [r7, #14]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f003 030f 	and.w	r3, r3, #15
 8005f90:	76fb      	strb	r3, [r7, #27]
    
    if (EPindex == 0)
 8005f92:	7efb      	ldrb	r3, [r7, #27]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f040 812c 	bne.w	80061f2 <PCD_EP_ISR_Handler+0x27e>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8005f9a:	89fb      	ldrh	r3, [r7, #14]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f003 0310 	and.w	r3, r3, #16
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d14d      	bne.n	8006042 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3328      	adds	r3, #40	; 0x28
 8005fc2:	617b      	str	r3, [r7, #20]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	461a      	mov	r2, r3
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3302      	adds	r3, #2
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	461a      	mov	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	441a      	add	r2, r3
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8006000:	2100      	movs	r1, #0
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fb f932 	bl	800126c <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 82d1 	beq.w	80065b8 <PCD_EP_ISR_Handler+0x644>
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	2b00      	cmp	r3, #0
 800601c:	f040 82cc 	bne.w	80065b8 <PCD_EP_ISR_Handler+0x644>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006030:	b2d2      	uxtb	r2, r2
 8006032:	b292      	uxth	r2, r2
 8006034:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006040:	e2ba      	b.n	80065b8 <PCD_EP_ISR_Handler+0x644>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8006048:	617b      	str	r3, [r7, #20]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8006054:	89bb      	ldrh	r3, [r7, #12]
 8006056:	b29b      	uxth	r3, r3
 8006058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800605c:	2b00      	cmp	r3, #0
 800605e:	d031      	beq.n	80060c4 <PCD_EP_ISR_Handler+0x150>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006068:	b29b      	uxth	r3, r3
 800606a:	461a      	mov	r2, r3
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	4413      	add	r3, r2
 8006074:	3306      	adds	r3, #6
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	461a      	mov	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	619a      	str	r2, [r3, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f503 715d 	add.w	r1, r3, #884	; 0x374
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	889a      	ldrh	r2, [r3, #4]
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	f7ff fe47 	bl	8005d34 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	b299      	uxth	r1, r3
 80060b2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80060b6:	400b      	ands	r3, r1
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7fb f8a7 	bl	8001210 <HAL_PCD_SetupStageCallback>
 80060c2:	e279      	b.n	80065b8 <PCD_EP_ISR_Handler+0x644>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 80060c4:	89bb      	ldrh	r3, [r7, #12]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	b21b      	sxth	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f280 8274 	bge.w	80065b8 <PCD_EP_ISR_Handler+0x644>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b299      	uxth	r1, r3
 80060dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80060e0:	400b      	ands	r3, r1
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	4413      	add	r3, r2
 80060fa:	3306      	adds	r3, #6
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	461a      	mov	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0)
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d011      	beq.n	8006140 <PCD_EP_ISR_Handler+0x1cc>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6818      	ldr	r0, [r3, #0]
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	6919      	ldr	r1, [r3, #16]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	889a      	ldrh	r2, [r3, #4]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f7ff fe01 	bl	8005d34 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	691a      	ldr	r2, [r3, #16]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	441a      	add	r2, r3
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8006140:	2100      	movs	r1, #0
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fb f876 	bl	8001234 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006150:	b29b      	uxth	r3, r3
 8006152:	3306      	adds	r3, #6
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	461a      	mov	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006162:	613b      	str	r3, [r7, #16]
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	2b3e      	cmp	r3, #62	; 0x3e
 800616a:	d919      	bls.n	80061a0 <PCD_EP_ISR_Handler+0x22c>
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	83bb      	strh	r3, [r7, #28]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <PCD_EP_ISR_Handler+0x212>
 8006180:	8bbb      	ldrh	r3, [r7, #28]
 8006182:	3b01      	subs	r3, #1
 8006184:	83bb      	strh	r3, [r7, #28]
 8006186:	8bbb      	ldrh	r3, [r7, #28]
 8006188:	029b      	lsls	r3, r3, #10
 800618a:	b21b      	sxth	r3, r3
 800618c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006194:	b21b      	sxth	r3, r3
 8006196:	b29b      	uxth	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e012      	b.n	80061c6 <PCD_EP_ISR_Handler+0x252>
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	085b      	lsrs	r3, r3, #1
 80061a6:	83bb      	strh	r3, [r7, #28]
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <PCD_EP_ISR_Handler+0x246>
 80061b4:	8bbb      	ldrh	r3, [r7, #28]
 80061b6:	3301      	adds	r3, #1
 80061b8:	83bb      	strh	r3, [r7, #28]
 80061ba:	8bbb      	ldrh	r3, [r7, #28]
 80061bc:	029b      	lsls	r3, r3, #10
 80061be:	b29b      	uxth	r3, r3
 80061c0:	461a      	mov	r2, r3
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d6:	b29c      	uxth	r4, r3
 80061d8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80061dc:	b29c      	uxth	r4, r3
 80061de:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80061e2:	b29c      	uxth	r4, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	4b9e      	ldr	r3, [pc, #632]	; (8006464 <PCD_EP_ISR_Handler+0x4f0>)
 80061ea:	4323      	orrs	r3, r4
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	8013      	strh	r3, [r2, #0]
 80061f0:	e1e2      	b.n	80065b8 <PCD_EP_ISR_Handler+0x644>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	7efb      	ldrb	r3, [r7, #27]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29b      	uxth	r3, r3
 8006202:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8006204:	89bb      	ldrh	r3, [r7, #12]
 8006206:	b29b      	uxth	r3, r3
 8006208:	b21b      	sxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	f280 80d9 	bge.w	80063c2 <PCD_EP_ISR_Handler+0x44e>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	7efb      	ldrb	r3, [r7, #27]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	441a      	add	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4619      	mov	r1, r3
 8006222:	7efb      	ldrb	r3, [r7, #27]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	440b      	add	r3, r1
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b299      	uxth	r1, r3
 800622c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006230:	400b      	ands	r3, r1
 8006232:	b29b      	uxth	r3, r3
 8006234:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[EPindex];
 8006236:	7efa      	ldrb	r2, [r7, #27]
 8006238:	4613      	mov	r3, r2
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	1a9b      	subs	r3, r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	4413      	add	r3, r2
 8006248:	3304      	adds	r3, #4
 800624a:	617b      	str	r3, [r7, #20]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	7a9b      	ldrb	r3, [r3, #10]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d123      	bne.n	800629c <PCD_EP_ISR_Handler+0x328>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800625c:	b29b      	uxth	r3, r3
 800625e:	461a      	mov	r2, r3
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	4413      	add	r3, r2
 8006268:	3306      	adds	r3, #6
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	461a      	mov	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	b29b      	uxth	r3, r3
 800627c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006280:	83fb      	strh	r3, [r7, #30]
          if (count != 0)
 8006282:	8bfb      	ldrh	r3, [r7, #30]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d077      	beq.n	8006378 <PCD_EP_ISR_Handler+0x404>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	6919      	ldr	r1, [r3, #16]
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	889a      	ldrh	r2, [r3, #4]
 8006294:	8bfb      	ldrh	r3, [r7, #30]
 8006296:	f7ff fd4d 	bl	8005d34 <PCD_ReadPMA>
 800629a:	e06d      	b.n	8006378 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d023      	beq.n	80062fe <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062be:	b29b      	uxth	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	4413      	add	r3, r2
 80062ca:	3302      	adds	r3, #2
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	461a      	mov	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	b29b      	uxth	r3, r3
 80062de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062e2:	83fb      	strh	r3, [r7, #30]
            if (count != 0)
 80062e4:	8bfb      	ldrh	r3, [r7, #30]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d02c      	beq.n	8006344 <PCD_EP_ISR_Handler+0x3d0>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	6919      	ldr	r1, [r3, #16]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	88da      	ldrh	r2, [r3, #6]
 80062f6:	8bfb      	ldrh	r3, [r7, #30]
 80062f8:	f7ff fd1c 	bl	8005d34 <PCD_ReadPMA>
 80062fc:	e022      	b.n	8006344 <PCD_EP_ISR_Handler+0x3d0>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006306:	b29b      	uxth	r3, r3
 8006308:	461a      	mov	r2, r3
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	4413      	add	r3, r2
 8006312:	3306      	adds	r3, #6
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	461a      	mov	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	b29b      	uxth	r3, r3
 8006326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800632a:	83fb      	strh	r3, [r7, #30]
            if (count != 0)
 800632c:	8bfb      	ldrh	r3, [r7, #30]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d008      	beq.n	8006344 <PCD_EP_ISR_Handler+0x3d0>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	6919      	ldr	r1, [r3, #16]
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	891a      	ldrh	r2, [r3, #8]
 800633e:	8bfb      	ldrh	r3, [r7, #30]
 8006340:	f7ff fcf8 	bl	8005d34 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	461a      	mov	r2, r3
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	441a      	add	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4619      	mov	r1, r3
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	440b      	add	r3, r1
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	b29b      	uxth	r3, r3
 8006364:	b219      	sxth	r1, r3
 8006366:	f640 730f 	movw	r3, #3855	; 0xf0f
 800636a:	400b      	ands	r3, r1
 800636c:	b219      	sxth	r1, r3
 800636e:	4b3e      	ldr	r3, [pc, #248]	; (8006468 <PCD_EP_ISR_Handler+0x4f4>)
 8006370:	430b      	orrs	r3, r1
 8006372:	b21b      	sxth	r3, r3
 8006374:	b29b      	uxth	r3, r3
 8006376:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	699a      	ldr	r2, [r3, #24]
 800637c:	8bfb      	ldrh	r3, [r7, #30]
 800637e:	441a      	add	r2, r3
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	691a      	ldr	r2, [r3, #16]
 8006388:	8bfb      	ldrh	r3, [r7, #30]
 800638a:	441a      	add	r2, r3
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <PCD_EP_ISR_Handler+0x42e>
 8006398:	8bfa      	ldrh	r2, [r7, #30]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d206      	bcs.n	80063b0 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	4619      	mov	r1, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7fa ff43 	bl	8001234 <HAL_PCD_DataOutStageCallback>
 80063ae:	e008      	b.n	80063c2 <PCD_EP_ISR_Handler+0x44e>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	7819      	ldrb	r1, [r3, #0]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 ffd5 	bl	800736c <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 80063c2:	89bb      	ldrh	r3, [r7, #12]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f000 80f4 	beq.w	80065b8 <PCD_EP_ISR_Handler+0x644>
      {
        ep = &hpcd->IN_ep[EPindex];
 80063d0:	7efa      	ldrb	r2, [r7, #27]
 80063d2:	4613      	mov	r3, r2
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	1a9b      	subs	r3, r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	3328      	adds	r3, #40	; 0x28
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	4413      	add	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	7efb      	ldrb	r3, [r7, #27]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	441a      	add	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4619      	mov	r1, r3
 80063f4:	7efb      	ldrb	r3, [r7, #27]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006406:	b29b      	uxth	r3, r3
 8006408:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	7a9b      	ldrb	r3, [r3, #10]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d12c      	bne.n	800646c <PCD_EP_ISR_Handler+0x4f8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800641a:	b29b      	uxth	r3, r3
 800641c:	461a      	mov	r2, r3
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	4413      	add	r3, r2
 8006426:	3302      	adds	r3, #2
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	461a      	mov	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 8085 	beq.w	8006554 <PCD_EP_ISR_Handler+0x5e0>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6818      	ldr	r0, [r3, #0]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	6919      	ldr	r1, [r3, #16]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	889a      	ldrh	r2, [r3, #4]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	b29b      	uxth	r3, r3
 800645c:	f7ff fc2a 	bl	8005cb4 <PCD_WritePMA>
 8006460:	e078      	b.n	8006554 <PCD_EP_ISR_Handler+0x5e0>
 8006462:	bf00      	nop
 8006464:	ffff8080 	.word	0xffff8080
 8006468:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	461a      	mov	r2, r3
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006482:	2b00      	cmp	r3, #0
 8006484:	d026      	beq.n	80064d4 <PCD_EP_ISR_Handler+0x560>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800648e:	b29b      	uxth	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	4413      	add	r3, r2
 800649a:	3302      	adds	r3, #2
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	461a      	mov	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0)
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d031      	beq.n	8006520 <PCD_EP_ISR_Handler+0x5ac>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6818      	ldr	r0, [r3, #0]
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	6919      	ldr	r1, [r3, #16]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	88da      	ldrh	r2, [r3, #6]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	f7ff fbf1 	bl	8005cb4 <PCD_WritePMA>
 80064d2:	e025      	b.n	8006520 <PCD_EP_ISR_Handler+0x5ac>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064dc:	b29b      	uxth	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	4413      	add	r3, r2
 80064e8:	3306      	adds	r3, #6
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	461a      	mov	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0)
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <PCD_EP_ISR_Handler+0x5ac>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	6919      	ldr	r1, [r3, #16]
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	891a      	ldrh	r2, [r3, #8]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	b29b      	uxth	r3, r3
 800651c:	f7ff fbca 	bl	8005cb4 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	441a      	add	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4619      	mov	r1, r3
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	b219      	sxth	r1, r3
 8006542:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006546:	400b      	ands	r3, r1
 8006548:	b219      	sxth	r1, r3
 800654a:	4b23      	ldr	r3, [pc, #140]	; (80065d8 <PCD_EP_ISR_Handler+0x664>)
 800654c:	430b      	orrs	r3, r1
 800654e:	b21b      	sxth	r3, r3
 8006550:	b29b      	uxth	r3, r3
 8006552:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655c:	b29b      	uxth	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	4413      	add	r3, r2
 8006568:	3302      	adds	r3, #2
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	461a      	mov	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	441a      	add	r2, r3
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d106      	bne.n	80065a6 <PCD_EP_ISR_Handler+0x632>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fa fe64 	bl	800126c <HAL_PCD_DataInStageCallback>
 80065a4:	e008      	b.n	80065b8 <PCD_EP_ISR_Handler+0x644>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	7819      	ldrb	r1, [r3, #0]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f001 f808 	bl	80075c8 <HAL_PCD_EP_Transmit>
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	461a      	mov	r2, r3
 80065c4:	81fa      	strh	r2, [r7, #14]
 80065c6:	b21b      	sxth	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f6ff acdc 	blt.w	8005f86 <PCD_EP_ISR_Handler+0x12>
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
      } 
    }
  }
  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3724      	adds	r7, #36	; 0x24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd90      	pop	{r4, r7, pc}
 80065d8:	ffffc080 	.word	0xffffc080

080065dc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t wInterrupt_Mask = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	b21b      	sxth	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	da02      	bge.n	80065fe <HAL_PCD_IRQHandler+0x22>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff fcbb 	bl	8005f74 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006606:	b29b      	uxth	r3, r3
 8006608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800660c:	2b00      	cmp	r3, #0
 800660e:	d012      	beq.n	8006636 <HAL_PCD_IRQHandler+0x5a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6812      	ldr	r2, [r2, #0]
 8006618:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800661c:	b292      	uxth	r2, r2
 800661e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006622:	b292      	uxth	r2, r2
 8006624:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7fa fe47 	bl	80012bc <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 800662e:	2100      	movs	r1, #0
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f8c1 	bl	80067b8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800663e:	b29b      	uxth	r3, r3
 8006640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8006654:	b292      	uxth	r2, r2
 8006656:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800665a:	b292      	uxth	r2, r2
 800665c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006668:	b29b      	uxth	r3, r3
 800666a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <HAL_PCD_IRQHandler+0xae>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 800667e:	b292      	uxth	r2, r2
 8006680:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006684:	b292      	uxth	r2, r2
 8006686:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006692:	b29b      	uxth	r3, r3
 8006694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d023      	beq.n	80066e4 <HAL_PCD_IRQHandler+0x108>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LPMODE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6812      	ldr	r2, [r2, #0]
 80066a4:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80066a8:	b292      	uxth	r2, r2
 80066aa:	f022 0204 	bic.w	r2, r2, #4
 80066ae:	b292      	uxth	r2, r2
 80066b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 80066b4:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 80066b8:	60fb      	str	r3, [r7, #12]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	b292      	uxth	r2, r2
 80066c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7fa fe34 	bl	8001334 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6812      	ldr	r2, [r2, #0]
 80066d4:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80066d8:	b292      	uxth	r2, r2
 80066da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066de:	b292      	uxth	r2, r2
 80066e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d02f      	beq.n	8006756 <HAL_PCD_IRQHandler+0x17a>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8006702:	b292      	uxth	r2, r2
 8006704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006708:	b292      	uxth	r2, r2
 800670a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	6812      	ldr	r2, [r2, #0]
 8006716:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800671a:	b292      	uxth	r2, r2
 800671c:	f042 0208 	orr.w	r2, r2, #8
 8006720:	b292      	uxth	r2, r2
 8006722:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6812      	ldr	r2, [r2, #0]
 800672e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8006732:	b292      	uxth	r2, r2
 8006734:	f042 0204 	orr.w	r2, r2, #4
 8006738:	b292      	uxth	r2, r2
 800673a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006746:	b29b      	uxth	r3, r3
 8006748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d102      	bne.n	8006756 <HAL_PCD_IRQHandler+0x17a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f7fa fdd5 	bl	8001300 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800675e:	b29b      	uxth	r3, r3
 8006760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00e      	beq.n	8006786 <HAL_PCD_IRQHandler+0x1aa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6812      	ldr	r2, [r2, #0]
 8006770:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8006774:	b292      	uxth	r2, r2
 8006776:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800677a:	b292      	uxth	r2, r2
 800677c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7fa fd8d 	bl	80012a0 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800678e:	b29b      	uxth	r3, r3
 8006790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <HAL_PCD_IRQHandler+0x1d4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6812      	ldr	r2, [r2, #0]
 80067a0:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80067a4:	b292      	uxth	r2, r2
 80067a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067aa:	b292      	uxth	r2, r2
 80067ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80067b0:	bf00      	nop
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	460b      	mov	r3, r1
 80067c2:	70fb      	strb	r3, [r7, #3]
   __HAL_LOCK(hpcd); 
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d101      	bne.n	80067d2 <HAL_PCD_SetAddress+0x1a>
 80067ce:	2302      	movs	r3, #2
 80067d0:	e015      	b.n	80067fe <HAL_PCD_SetAddress+0x46>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

   if(address == 0) 
 80067da:	78fb      	ldrb	r3, [r7, #3]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d105      	bne.n	80067ec <HAL_PCD_SetAddress+0x34>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2280      	movs	r2, #128	; 0x80
 80067e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80067ea:	e003      	b.n	80067f4 <HAL_PCD_SetAddress+0x3c>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	78fa      	ldrb	r2, [r7, #3]
 80067f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop

0800680c <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800680c:	b490      	push	{r4, r7}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	4608      	mov	r0, r1
 8006816:	4611      	mov	r1, r2
 8006818:	461a      	mov	r2, r3
 800681a:	4603      	mov	r3, r0
 800681c:	70fb      	strb	r3, [r7, #3]
 800681e:	460b      	mov	r3, r1
 8006820:	803b      	strh	r3, [r7, #0]
 8006822:	4613      	mov	r3, r2
 8006824:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	747b      	strb	r3, [r7, #17]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800682a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800682e:	2b00      	cmp	r3, #0
 8006830:	da0b      	bge.n	800684a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006832:	78fb      	ldrb	r3, [r7, #3]
 8006834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006838:	4613      	mov	r3, r2
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	1a9b      	subs	r3, r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	3328      	adds	r3, #40	; 0x28
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	4413      	add	r3, r2
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	e00c      	b.n	8006864 <HAL_PCD_EP_Open+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006850:	4613      	mov	r3, r2
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	1a9b      	subs	r3, r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	4413      	add	r3, r2
 8006860:	3304      	adds	r3, #4
 8006862:	617b      	str	r3, [r7, #20]
  }
  ep->num   = ep_addr & 0x7F;
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800686a:	b2da      	uxtb	r2, r3
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8006870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	09db      	lsrs	r3, r3, #7
 8006878:	b2db      	uxtb	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8006880:	883a      	ldrh	r2, [r7, #0]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	78ba      	ldrb	r2, [r7, #2]
 800688a:	70da      	strb	r2, [r3, #3]
  
  __HAL_LOCK(hpcd); 
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8006892:	2b01      	cmp	r3, #1
 8006894:	d101      	bne.n	800689a <HAL_PCD_EP_Open+0x8e>
 8006896:	2302      	movs	r3, #2
 8006898:	e345      	b.n	8006f26 <HAL_PCD_EP_Open+0x71a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

  /* initialize Endpoint */
  switch (ep->type)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	78db      	ldrb	r3, [r3, #3]
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d875      	bhi.n	8006996 <HAL_PCD_EP_Open+0x18a>
 80068aa:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <HAL_PCD_EP_Open+0xa4>)
 80068ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b0:	080068c1 	.word	0x080068c1
 80068b4:	0800695f 	.word	0x0800695f
 80068b8:	080068f9 	.word	0x080068f9
 80068bc:	08006927 	.word	0x08006927
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	461a      	mov	r2, r3
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	441a      	add	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4619      	mov	r1, r3
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	440b      	add	r3, r1
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	b21b      	sxth	r3, r3
 80068e2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80068e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ea:	b21b      	sxth	r3, r3
 80068ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068f0:	b21b      	sxth	r3, r3
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	8013      	strh	r3, [r2, #0]
    break;
 80068f6:	e04e      	b.n	8006996 <HAL_PCD_EP_Open+0x18a>
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	441a      	add	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4619      	mov	r1, r3
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	440b      	add	r3, r1
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800691c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006920:	b29b      	uxth	r3, r3
 8006922:	8013      	strh	r3, [r2, #0]
    break;
 8006924:	e037      	b.n	8006996 <HAL_PCD_EP_Open+0x18a>
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	441a      	add	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4619      	mov	r1, r3
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	b21b      	sxth	r3, r3
 8006948:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800694c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006950:	b21b      	sxth	r3, r3
 8006952:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006956:	b21b      	sxth	r3, r3
 8006958:	b29b      	uxth	r3, r3
 800695a:	8013      	strh	r3, [r2, #0]
    break;
 800695c:	e01b      	b.n	8006996 <HAL_PCD_EP_Open+0x18a>
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	441a      	add	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4619      	mov	r1, r3
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	440b      	add	r3, r1
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	b21b      	sxth	r3, r3
 8006980:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006988:	b21b      	sxth	r3, r3
 800698a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800698e:	b21b      	sxth	r3, r3
 8006990:	b29b      	uxth	r3, r3
 8006992:	8013      	strh	r3, [r2, #0]
    break;
 8006994:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	441a      	add	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4619      	mov	r1, r3
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	440b      	add	r3, r1
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	b219      	sxth	r1, r3
 80069b8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80069bc:	400b      	ands	r3, r1
 80069be:	b219      	sxth	r1, r3
 80069c0:	4b89      	ldr	r3, [pc, #548]	; (8006be8 <HAL_PCD_EP_Open+0x3dc>)
 80069c2:	430b      	orrs	r3, r1
 80069c4:	b219      	sxth	r1, r3
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	b21b      	sxth	r3, r3
 80069cc:	430b      	orrs	r3, r1
 80069ce:	b21b      	sxth	r3, r3
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	7a9b      	ldrb	r3, [r3, #10]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f040 810b 	bne.w	8006bf4 <HAL_PCD_EP_Open+0x3e8>
  {
    if (ep->is_in)
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d05b      	beq.n	8006a9e <HAL_PCD_EP_Open+0x292>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	4413      	add	r3, r2
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	461a      	mov	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a08:	461a      	mov	r2, r3
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	889b      	ldrh	r3, [r3, #4]
 8006a0e:	085b      	lsrs	r3, r3, #1
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d019      	beq.n	8006a64 <HAL_PCD_EP_Open+0x258>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	461a      	mov	r2, r3
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	441a      	add	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4619      	mov	r1, r3
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	440b      	add	r3, r1
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	b219      	sxth	r1, r3
 8006a52:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006a56:	400b      	ands	r3, r1
 8006a58:	b219      	sxth	r1, r3
 8006a5a:	4b64      	ldr	r3, [pc, #400]	; (8006bec <HAL_PCD_EP_Open+0x3e0>)
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	b21b      	sxth	r3, r3
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a7e:	b29c      	uxth	r4, r3
 8006a80:	f084 0320 	eor.w	r3, r4, #32
 8006a84:	b29c      	uxth	r4, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	441a      	add	r2, r3
 8006a94:	4b54      	ldr	r3, [pc, #336]	; (8006be8 <HAL_PCD_EP_Open+0x3dc>)
 8006a96:	4323      	orrs	r3, r4
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	8013      	strh	r3, [r2, #0]
 8006a9c:	e23e      	b.n	8006f1c <HAL_PCD_EP_Open+0x710>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	00db      	lsls	r3, r3, #3
 8006ab0:	4413      	add	r3, r2
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	889b      	ldrh	r3, [r3, #4]
 8006ac8:	085b      	lsrs	r3, r3, #1
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	6013      	str	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	00db      	lsls	r3, r3, #3
 8006ae2:	4413      	add	r3, r2
 8006ae4:	3306      	adds	r3, #6
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	461a      	mov	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	2b3e      	cmp	r3, #62	; 0x3e
 8006afc:	d919      	bls.n	8006b32 <HAL_PCD_EP_Open+0x326>
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	827b      	strh	r3, [r7, #18]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f003 031f 	and.w	r3, r3, #31
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d102      	bne.n	8006b18 <HAL_PCD_EP_Open+0x30c>
 8006b12:	8a7b      	ldrh	r3, [r7, #18]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	827b      	strh	r3, [r7, #18]
 8006b18:	8a7b      	ldrh	r3, [r7, #18]
 8006b1a:	029b      	lsls	r3, r3, #10
 8006b1c:	b21b      	sxth	r3, r3
 8006b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b26:	b21b      	sxth	r3, r3
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	e012      	b.n	8006b58 <HAL_PCD_EP_Open+0x34c>
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	085b      	lsrs	r3, r3, #1
 8006b38:	827b      	strh	r3, [r7, #18]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <HAL_PCD_EP_Open+0x340>
 8006b46:	8a7b      	ldrh	r3, [r7, #18]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	827b      	strh	r3, [r7, #18]
 8006b4c:	8a7b      	ldrh	r3, [r7, #18]
 8006b4e:	029b      	lsls	r3, r3, #10
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	461a      	mov	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d019      	beq.n	8006ba6 <HAL_PCD_EP_Open+0x39a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	441a      	add	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4619      	mov	r1, r3
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	881b      	ldrh	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	b219      	sxth	r1, r3
 8006b94:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006b98:	400b      	ands	r3, r1
 8006b9a:	b219      	sxth	r1, r3
 8006b9c:	4b14      	ldr	r3, [pc, #80]	; (8006bf0 <HAL_PCD_EP_Open+0x3e4>)
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	b21b      	sxth	r3, r3
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc0:	b29c      	uxth	r4, r3
 8006bc2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006bc6:	b29c      	uxth	r4, r3
 8006bc8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006bcc:	b29c      	uxth	r4, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	441a      	add	r2, r3
 8006bdc:	4b02      	ldr	r3, [pc, #8]	; (8006be8 <HAL_PCD_EP_Open+0x3dc>)
 8006bde:	4323      	orrs	r3, r4
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	8013      	strh	r3, [r2, #0]
 8006be4:	e19a      	b.n	8006f1c <HAL_PCD_EP_Open+0x710>
 8006be6:	bf00      	nop
 8006be8:	ffff8080 	.word	0xffff8080
 8006bec:	ffff80c0 	.word	0xffff80c0
 8006bf0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	441a      	add	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4619      	mov	r1, r3
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	440b      	add	r3, r1
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	b219      	sxth	r1, r3
 8006c1c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006c20:	400b      	ands	r3, r1
 8006c22:	b219      	sxth	r1, r3
 8006c24:	4b6d      	ldr	r3, [pc, #436]	; (8006ddc <HAL_PCD_EP_Open+0x5d0>)
 8006c26:	430b      	orrs	r3, r1
 8006c28:	b21b      	sxth	r3, r3
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	461a      	mov	r2, r3
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	4413      	add	r3, r2
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	461a      	mov	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c50:	461a      	mov	r2, r3
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	88db      	ldrh	r3, [r3, #6]
 8006c56:	085b      	lsrs	r3, r3, #1
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	461a      	mov	r2, r3
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	4413      	add	r3, r2
 8006c72:	3304      	adds	r3, #4
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	461a      	mov	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c82:	461a      	mov	r2, r3
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	891b      	ldrh	r3, [r3, #8]
 8006c88:	085b      	lsrs	r3, r3, #1
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	6013      	str	r3, [r2, #0]
    
    if (ep->is_in==0)
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	785b      	ldrb	r3, [r3, #1]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f040 80a7 	bne.w	8006de8 <HAL_PCD_EP_Open+0x5dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d019      	beq.n	8006ce8 <HAL_PCD_EP_Open+0x4dc>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	441a      	add	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	b219      	sxth	r1, r3
 8006cd6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006cda:	400b      	ands	r3, r1
 8006cdc:	b219      	sxth	r1, r3
 8006cde:	4b40      	ldr	r3, [pc, #256]	; (8006de0 <HAL_PCD_EP_Open+0x5d4>)
 8006ce0:	430b      	orrs	r3, r1
 8006ce2:	b21b      	sxth	r3, r3
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	461a      	mov	r2, r3
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d019      	beq.n	8006d36 <HAL_PCD_EP_Open+0x52a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	441a      	add	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4619      	mov	r1, r3
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	440b      	add	r3, r1
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	b219      	sxth	r1, r3
 8006d24:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006d28:	400b      	ands	r3, r1
 8006d2a:	b219      	sxth	r1, r3
 8006d2c:	4b2d      	ldr	r3, [pc, #180]	; (8006de4 <HAL_PCD_EP_Open+0x5d8>)
 8006d2e:	430b      	orrs	r3, r1
 8006d30:	b21b      	sxth	r3, r3
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	441a      	add	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	440b      	add	r3, r1
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	b219      	sxth	r1, r3
 8006d58:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006d5c:	400b      	ands	r3, r1
 8006d5e:	b219      	sxth	r1, r3
 8006d60:	4b20      	ldr	r3, [pc, #128]	; (8006de4 <HAL_PCD_EP_Open+0x5d8>)
 8006d62:	430b      	orrs	r3, r1
 8006d64:	b21b      	sxth	r3, r3
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d84:	b29c      	uxth	r4, r3
 8006d86:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006d8a:	b29c      	uxth	r4, r3
 8006d8c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006d90:	b29c      	uxth	r4, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	441a      	add	r2, r3
 8006da0:	4b0e      	ldr	r3, [pc, #56]	; (8006ddc <HAL_PCD_EP_Open+0x5d0>)
 8006da2:	4323      	orrs	r3, r4
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	461a      	mov	r2, r3
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc2:	b29c      	uxth	r4, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	441a      	add	r2, r3
 8006dd2:	4b02      	ldr	r3, [pc, #8]	; (8006ddc <HAL_PCD_EP_Open+0x5d0>)
 8006dd4:	4323      	orrs	r3, r4
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	8013      	strh	r3, [r2, #0]
 8006dda:	e09f      	b.n	8006f1c <HAL_PCD_EP_Open+0x710>
 8006ddc:	ffff8080 	.word	0xffff8080
 8006de0:	ffffc080 	.word	0xffffc080
 8006de4:	ffff80c0 	.word	0xffff80c0
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d019      	beq.n	8006e36 <HAL_PCD_EP_Open+0x62a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	441a      	add	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4619      	mov	r1, r3
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	440b      	add	r3, r1
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	b219      	sxth	r1, r3
 8006e24:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006e28:	400b      	ands	r3, r1
 8006e2a:	b219      	sxth	r1, r3
 8006e2c:	4b40      	ldr	r3, [pc, #256]	; (8006f30 <HAL_PCD_EP_Open+0x724>)
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	b21b      	sxth	r3, r3
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d019      	beq.n	8006e84 <HAL_PCD_EP_Open+0x678>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	441a      	add	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4619      	mov	r1, r3
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	b219      	sxth	r1, r3
 8006e72:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006e76:	400b      	ands	r3, r1
 8006e78:	b219      	sxth	r1, r3
 8006e7a:	4b2e      	ldr	r3, [pc, #184]	; (8006f34 <HAL_PCD_EP_Open+0x728>)
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	b21b      	sxth	r3, r3
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	441a      	add	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4619      	mov	r1, r3
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	440b      	add	r3, r1
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	b219      	sxth	r1, r3
 8006ea6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006eaa:	400b      	ands	r3, r1
 8006eac:	b219      	sxth	r1, r3
 8006eae:	4b20      	ldr	r3, [pc, #128]	; (8006f30 <HAL_PCD_EP_Open+0x724>)
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	b21b      	sxth	r3, r3
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ed2:	b29c      	uxth	r4, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	441a      	add	r2, r3
 8006ee2:	4b15      	ldr	r3, [pc, #84]	; (8006f38 <HAL_PCD_EP_Open+0x72c>)
 8006ee4:	4323      	orrs	r3, r4
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f04:	b29c      	uxth	r4, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	441a      	add	r2, r3
 8006f14:	4b08      	ldr	r3, [pc, #32]	; (8006f38 <HAL_PCD_EP_Open+0x72c>)
 8006f16:	4323      	orrs	r3, r4
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	8013      	strh	r3, [r2, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return ret;
 8006f24:	7c7b      	ldrb	r3, [r7, #17]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bc90      	pop	{r4, r7}
 8006f2e:	4770      	bx	lr
 8006f30:	ffffc080 	.word	0xffffc080
 8006f34:	ffff80c0 	.word	0xffff80c0
 8006f38:	ffff8080 	.word	0xffff8080

08006f3c <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8006f3c:	b490      	push	{r4, r7}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8006f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	da0b      	bge.n	8006f68 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006f50:	78fb      	ldrb	r3, [r7, #3]
 8006f52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f56:	4613      	mov	r3, r2
 8006f58:	00db      	lsls	r3, r3, #3
 8006f5a:	1a9b      	subs	r3, r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	3328      	adds	r3, #40	; 0x28
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	4413      	add	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	e00c      	b.n	8006f82 <HAL_PCD_EP_Close+0x46>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f6e:	4613      	mov	r3, r2
 8006f70:	00db      	lsls	r3, r3, #3
 8006f72:	1a9b      	subs	r3, r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	3304      	adds	r3, #4
 8006f80:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8006f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	09db      	lsrs	r3, r3, #7
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	461a      	mov	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d101      	bne.n	8006fac <HAL_PCD_EP_Close+0x70>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e1d4      	b.n	8007356 <HAL_PCD_EP_Close+0x41a>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

  if (ep->doublebuffer == 0) 
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	7a9b      	ldrb	r3, [r3, #10]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f040 8086 	bne.w	80070ca <HAL_PCD_EP_Close+0x18e>
  {
    if (ep->is_in)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	785b      	ldrb	r3, [r3, #1]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d040      	beq.n	8007048 <HAL_PCD_EP_Close+0x10c>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	881b      	ldrh	r3, [r3, #0]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d019      	beq.n	8007014 <HAL_PCD_EP_Close+0xd8>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	441a      	add	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	b219      	sxth	r1, r3
 8007002:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007006:	400b      	ands	r3, r1
 8007008:	b219      	sxth	r1, r3
 800700a:	4b80      	ldr	r3, [pc, #512]	; (800720c <HAL_PCD_EP_Close+0x2d0>)
 800700c:	430b      	orrs	r3, r1
 800700e:	b21b      	sxth	r3, r3
 8007010:	b29b      	uxth	r3, r3
 8007012:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	461a      	mov	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800702e:	b29c      	uxth	r4, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	441a      	add	r2, r3
 800703e:	4b74      	ldr	r3, [pc, #464]	; (8007210 <HAL_PCD_EP_Close+0x2d4>)
 8007040:	4323      	orrs	r3, r4
 8007042:	b29b      	uxth	r3, r3
 8007044:	8013      	strh	r3, [r2, #0]
 8007046:	e181      	b.n	800734c <HAL_PCD_EP_Close+0x410>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29b      	uxth	r3, r3
 800705a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d019      	beq.n	8007096 <HAL_PCD_EP_Close+0x15a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	441a      	add	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4619      	mov	r1, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	440b      	add	r3, r1
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	b29b      	uxth	r3, r3
 8007082:	b219      	sxth	r1, r3
 8007084:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007088:	400b      	ands	r3, r1
 800708a:	b219      	sxth	r1, r3
 800708c:	4b61      	ldr	r3, [pc, #388]	; (8007214 <HAL_PCD_EP_Close+0x2d8>)
 800708e:	430b      	orrs	r3, r1
 8007090:	b21b      	sxth	r3, r3
 8007092:	b29b      	uxth	r3, r3
 8007094:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b0:	b29c      	uxth	r4, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	441a      	add	r2, r3
 80070c0:	4b53      	ldr	r3, [pc, #332]	; (8007210 <HAL_PCD_EP_Close+0x2d4>)
 80070c2:	4323      	orrs	r3, r4
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	8013      	strh	r3, [r2, #0]
 80070c8:	e140      	b.n	800734c <HAL_PCD_EP_Close+0x410>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	785b      	ldrb	r3, [r3, #1]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f040 80a2 	bne.w	8007218 <HAL_PCD_EP_Close+0x2dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d019      	beq.n	8007122 <HAL_PCD_EP_Close+0x1e6>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	461a      	mov	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	441a      	add	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4619      	mov	r1, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b29b      	uxth	r3, r3
 800710e:	b219      	sxth	r1, r3
 8007110:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007114:	400b      	ands	r3, r1
 8007116:	b219      	sxth	r1, r3
 8007118:	4b3e      	ldr	r3, [pc, #248]	; (8007214 <HAL_PCD_EP_Close+0x2d8>)
 800711a:	430b      	orrs	r3, r1
 800711c:	b21b      	sxth	r3, r3
 800711e:	b29b      	uxth	r3, r3
 8007120:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	b29b      	uxth	r3, r3
 8007134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007138:	2b00      	cmp	r3, #0
 800713a:	d019      	beq.n	8007170 <HAL_PCD_EP_Close+0x234>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	461a      	mov	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	441a      	add	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4619      	mov	r1, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	440b      	add	r3, r1
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	b219      	sxth	r1, r3
 800715e:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007162:	400b      	ands	r3, r1
 8007164:	b219      	sxth	r1, r3
 8007166:	4b29      	ldr	r3, [pc, #164]	; (800720c <HAL_PCD_EP_Close+0x2d0>)
 8007168:	430b      	orrs	r3, r1
 800716a:	b21b      	sxth	r3, r3
 800716c:	b29b      	uxth	r3, r3
 800716e:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	441a      	add	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4619      	mov	r1, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	440b      	add	r3, r1
 800718c:	881b      	ldrh	r3, [r3, #0]
 800718e:	b29b      	uxth	r3, r3
 8007190:	b219      	sxth	r1, r3
 8007192:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007196:	400b      	ands	r3, r1
 8007198:	b219      	sxth	r1, r3
 800719a:	4b1c      	ldr	r3, [pc, #112]	; (800720c <HAL_PCD_EP_Close+0x2d0>)
 800719c:	430b      	orrs	r3, r1
 800719e:	b21b      	sxth	r3, r3
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	461a      	mov	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	881b      	ldrh	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071be:	b29c      	uxth	r4, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	441a      	add	r2, r3
 80071ce:	4b10      	ldr	r3, [pc, #64]	; (8007210 <HAL_PCD_EP_Close+0x2d4>)
 80071d0:	4323      	orrs	r3, r4
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f0:	b29c      	uxth	r4, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	441a      	add	r2, r3
 8007200:	4b03      	ldr	r3, [pc, #12]	; (8007210 <HAL_PCD_EP_Close+0x2d4>)
 8007202:	4323      	orrs	r3, r4
 8007204:	b29b      	uxth	r3, r3
 8007206:	8013      	strh	r3, [r2, #0]
 8007208:	e0a0      	b.n	800734c <HAL_PCD_EP_Close+0x410>
 800720a:	bf00      	nop
 800720c:	ffff80c0 	.word	0xffff80c0
 8007210:	ffff8080 	.word	0xffff8080
 8007214:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	461a      	mov	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b29b      	uxth	r3, r3
 800722a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d019      	beq.n	8007266 <HAL_PCD_EP_Close+0x32a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	441a      	add	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4619      	mov	r1, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	440b      	add	r3, r1
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29b      	uxth	r3, r3
 8007252:	b219      	sxth	r1, r3
 8007254:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007258:	400b      	ands	r3, r1
 800725a:	b219      	sxth	r1, r3
 800725c:	4b40      	ldr	r3, [pc, #256]	; (8007360 <HAL_PCD_EP_Close+0x424>)
 800725e:	430b      	orrs	r3, r1
 8007260:	b21b      	sxth	r3, r3
 8007262:	b29b      	uxth	r3, r3
 8007264:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727c:	2b00      	cmp	r3, #0
 800727e:	d019      	beq.n	80072b4 <HAL_PCD_EP_Close+0x378>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	441a      	add	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4619      	mov	r1, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	440b      	add	r3, r1
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	b29b      	uxth	r3, r3
 80072a0:	b219      	sxth	r1, r3
 80072a2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80072a6:	400b      	ands	r3, r1
 80072a8:	b219      	sxth	r1, r3
 80072aa:	4b2e      	ldr	r3, [pc, #184]	; (8007364 <HAL_PCD_EP_Close+0x428>)
 80072ac:	430b      	orrs	r3, r1
 80072ae:	b21b      	sxth	r3, r3
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	461a      	mov	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	441a      	add	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4619      	mov	r1, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	440b      	add	r3, r1
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	b219      	sxth	r1, r3
 80072d6:	f640 730f 	movw	r3, #3855	; 0xf0f
 80072da:	400b      	ands	r3, r1
 80072dc:	b219      	sxth	r1, r3
 80072de:	4b20      	ldr	r3, [pc, #128]	; (8007360 <HAL_PCD_EP_Close+0x424>)
 80072e0:	430b      	orrs	r3, r1
 80072e2:	b21b      	sxth	r3, r3
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	461a      	mov	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007302:	b29c      	uxth	r4, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	461a      	mov	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	441a      	add	r2, r3
 8007312:	4b15      	ldr	r3, [pc, #84]	; (8007368 <HAL_PCD_EP_Close+0x42c>)
 8007314:	4323      	orrs	r3, r4
 8007316:	b29b      	uxth	r3, r3
 8007318:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	881b      	ldrh	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007334:	b29c      	uxth	r4, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	441a      	add	r2, r3
 8007344:	4b08      	ldr	r3, [pc, #32]	; (8007368 <HAL_PCD_EP_Close+0x42c>)
 8007346:	4323      	orrs	r3, r4
 8007348:	b29b      	uxth	r3, r3
 800734a:	8013      	strh	r3, [r2, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bc90      	pop	{r4, r7}
 800735e:	4770      	bx	lr
 8007360:	ffffc080 	.word	0xffffc080
 8007364:	ffff80c0 	.word	0xffff80c0
 8007368:	ffff8080 	.word	0xffff8080

0800736c <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800736c:	b490      	push	{r4, r7}
 800736e:	b088      	sub	sp, #32
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	607a      	str	r2, [r7, #4]
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	460b      	mov	r3, r1
 800737a:	72fb      	strb	r3, [r7, #11]
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800737c:	7afb      	ldrb	r3, [r7, #11]
 800737e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007382:	4613      	mov	r3, r2
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	1a9b      	subs	r3, r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4413      	add	r3, r2
 8007392:	3304      	adds	r3, #4
 8007394:	61bb      	str	r3, [r7, #24]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2200      	movs	r2, #0
 80073a6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	2200      	movs	r2, #0
 80073ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 80073ae:	7afb      	ldrb	r3, [r7, #11]
 80073b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	701a      	strb	r2, [r3, #0]
   
  __HAL_LOCK(hpcd); 
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d101      	bne.n	80073c8 <HAL_PCD_EP_Receive+0x5c>
 80073c4:	2302      	movs	r3, #2
 80073c6:	e0de      	b.n	8007586 <HAL_PCD_EP_Receive+0x21a>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	695a      	ldr	r2, [r3, #20]
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d909      	bls.n	80073f0 <HAL_PCD_EP_Receive+0x84>
  {
    len=ep->maxpacket;
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	695a      	ldr	r2, [r3, #20]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	1ad2      	subs	r2, r2, r3
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	615a      	str	r2, [r3, #20]
 80073ee:	e005      	b.n	80073fc <HAL_PCD_EP_Receive+0x90>
  }
  else
  {
    len=ep->xfer_len;
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0;
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	2200      	movs	r2, #0
 80073fa:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	7a9b      	ldrb	r3, [r3, #10]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d13f      	bne.n	8007484 <HAL_PCD_EP_Receive+0x118>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800740c:	b29b      	uxth	r3, r3
 800740e:	461a      	mov	r2, r3
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	4413      	add	r3, r2
 8007418:	3306      	adds	r3, #6
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	461a      	mov	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007428:	617b      	str	r3, [r7, #20]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b3e      	cmp	r3, #62	; 0x3e
 800742e:	d917      	bls.n	8007460 <HAL_PCD_EP_Receive+0xf4>
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	095b      	lsrs	r3, r3, #5
 8007434:	83fb      	strh	r3, [r7, #30]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	2b00      	cmp	r3, #0
 800743e:	d102      	bne.n	8007446 <HAL_PCD_EP_Receive+0xda>
 8007440:	8bfb      	ldrh	r3, [r7, #30]
 8007442:	3b01      	subs	r3, #1
 8007444:	83fb      	strh	r3, [r7, #30]
 8007446:	8bfb      	ldrh	r3, [r7, #30]
 8007448:	029b      	lsls	r3, r3, #10
 800744a:	b21b      	sxth	r3, r3
 800744c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007454:	b21b      	sxth	r3, r3
 8007456:	b29b      	uxth	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	601a      	str	r2, [r3, #0]
 800745e:	e06e      	b.n	800753e <HAL_PCD_EP_Receive+0x1d2>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	085b      	lsrs	r3, r3, #1
 8007464:	83fb      	strh	r3, [r7, #30]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <HAL_PCD_EP_Receive+0x10a>
 8007470:	8bfb      	ldrh	r3, [r7, #30]
 8007472:	3301      	adds	r3, #1
 8007474:	83fb      	strh	r3, [r7, #30]
 8007476:	8bfb      	ldrh	r3, [r7, #30]
 8007478:	029b      	lsls	r3, r3, #10
 800747a:	b29b      	uxth	r3, r3
 800747c:	461a      	mov	r2, r3
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	e05c      	b.n	800753e <HAL_PCD_EP_Receive+0x1d2>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	785b      	ldrb	r3, [r3, #1]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d13f      	bne.n	800750c <HAL_PCD_EP_Receive+0x1a0>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007494:	b29b      	uxth	r3, r3
 8007496:	461a      	mov	r2, r3
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	00db      	lsls	r3, r3, #3
 800749e:	4413      	add	r3, r2
 80074a0:	3306      	adds	r3, #6
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	461a      	mov	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b3e      	cmp	r3, #62	; 0x3e
 80074b6:	d917      	bls.n	80074e8 <HAL_PCD_EP_Receive+0x17c>
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	095b      	lsrs	r3, r3, #5
 80074bc:	83bb      	strh	r3, [r7, #28]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	f003 031f 	and.w	r3, r3, #31
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <HAL_PCD_EP_Receive+0x162>
 80074c8:	8bbb      	ldrh	r3, [r7, #28]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	83bb      	strh	r3, [r7, #28]
 80074ce:	8bbb      	ldrh	r3, [r7, #28]
 80074d0:	029b      	lsls	r3, r3, #10
 80074d2:	b21b      	sxth	r3, r3
 80074d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074dc:	b21b      	sxth	r3, r3
 80074de:	b29b      	uxth	r3, r3
 80074e0:	461a      	mov	r2, r3
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	e02a      	b.n	800753e <HAL_PCD_EP_Receive+0x1d2>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	83bb      	strh	r3, [r7, #28]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <HAL_PCD_EP_Receive+0x192>
 80074f8:	8bbb      	ldrh	r3, [r7, #28]
 80074fa:	3301      	adds	r3, #1
 80074fc:	83bb      	strh	r3, [r7, #28]
 80074fe:	8bbb      	ldrh	r3, [r7, #28]
 8007500:	029b      	lsls	r3, r3, #10
 8007502:	b29b      	uxth	r3, r3
 8007504:	461a      	mov	r2, r3
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	e018      	b.n	800753e <HAL_PCD_EP_Receive+0x1d2>
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	785b      	ldrb	r3, [r3, #1]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d114      	bne.n	800753e <HAL_PCD_EP_Receive+0x1d2>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800751c:	b29b      	uxth	r3, r3
 800751e:	461a      	mov	r2, r3
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	4413      	add	r3, r2
 8007528:	3306      	adds	r3, #6
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	461a      	mov	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007538:	461a      	mov	r2, r3
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	6013      	str	r3, [r2, #0]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	b29b      	uxth	r3, r3
 8007550:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007558:	b29c      	uxth	r4, r3
 800755a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800755e:	b29c      	uxth	r4, r3
 8007560:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007564:	b29c      	uxth	r4, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	441a      	add	r2, r3
 8007574:	4b06      	ldr	r3, [pc, #24]	; (8007590 <HAL_PCD_EP_Receive+0x224>)
 8007576:	4323      	orrs	r3, r4
 8007578:	b29b      	uxth	r3, r3
 800757a:	8013      	strh	r3, [r2, #0]
  
  __HAL_UNLOCK(hpcd); 
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3720      	adds	r7, #32
 800758a:	46bd      	mov	sp, r7
 800758c:	bc90      	pop	{r4, r7}
 800758e:	4770      	bx	lr
 8007590:	ffff8080 	.word	0xffff8080

08007594 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	4613      	mov	r3, r2
 80075aa:	00db      	lsls	r3, r3, #3
 80075ac:	1a9b      	subs	r3, r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	440b      	add	r3, r1
 80075b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	b29b      	uxth	r3, r3
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop

080075c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80075c8:	b590      	push	{r4, r7, lr}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	607a      	str	r2, [r7, #4]
 80075d2:	603b      	str	r3, [r7, #0]
 80075d4:	460b      	mov	r3, r1
 80075d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0;
 80075d8:	2300      	movs	r3, #0
 80075da:	82fb      	strh	r3, [r7, #22]
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80075dc:	7afb      	ldrb	r3, [r7, #11]
 80075de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075e2:	4613      	mov	r3, r2
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	1a9b      	subs	r3, r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	3328      	adds	r3, #40	; 0x28
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	4413      	add	r3, r2
 80075f0:	613b      	str	r3, [r7, #16]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2200      	movs	r2, #0
 8007602:	619a      	str	r2, [r3, #24]
  ep->is_in = 1;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	2201      	movs	r2, #1
 8007608:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 800760a:	7afb      	ldrb	r3, [r7, #11]
 800760c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007610:	b2da      	uxtb	r2, r3
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	701a      	strb	r2, [r3, #0]
  
  __HAL_LOCK(hpcd); 
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 800761c:	2b01      	cmp	r3, #1
 800761e:	d101      	bne.n	8007624 <HAL_PCD_EP_Transmit+0x5c>
 8007620:	2302      	movs	r3, #2
 8007622:	e0bb      	b.n	800779c <HAL_PCD_EP_Transmit+0x1d4>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	695a      	ldr	r2, [r3, #20]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	429a      	cmp	r2, r3
 8007636:	d909      	bls.n	800764c <HAL_PCD_EP_Transmit+0x84>
  {
    len=ep->maxpacket;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	695a      	ldr	r2, [r3, #20]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	1ad2      	subs	r2, r2, r3
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	615a      	str	r2, [r3, #20]
 800764a:	e005      	b.n	8007658 <HAL_PCD_EP_Transmit+0x90>
  }
  else
  {  
    len=ep->xfer_len;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2200      	movs	r2, #0
 8007656:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	7a9b      	ldrb	r3, [r3, #10]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d11f      	bne.n	80076a0 <HAL_PCD_EP_Transmit+0xd8>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	6919      	ldr	r1, [r3, #16]
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	889a      	ldrh	r2, [r3, #4]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	f7fe fb20 	bl	8005cb4 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800767c:	b29b      	uxth	r3, r3
 800767e:	461a      	mov	r2, r3
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	00db      	lsls	r3, r3, #3
 8007686:	4413      	add	r3, r2
 8007688:	3302      	adds	r3, #2
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	461a      	mov	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4413      	add	r3, r2
 8007694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007698:	461a      	mov	r2, r3
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	e059      	b.n	8007754 <HAL_PCD_EP_Transmit+0x18c>
  }
  else
  {
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d003      	beq.n	80076c2 <HAL_PCD_EP_Transmit+0xfa>
    {
      pmabuffer = ep->pmaaddr1;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	891b      	ldrh	r3, [r3, #8]
 80076be:	82fb      	strh	r3, [r7, #22]
 80076c0:	e002      	b.n	80076c8 <HAL_PCD_EP_Transmit+0x100>
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	88db      	ldrh	r3, [r3, #6]
 80076c6:	82fb      	strh	r3, [r7, #22]
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	6919      	ldr	r1, [r3, #16]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	8afa      	ldrh	r2, [r7, #22]
 80076d6:	f7fe faed 	bl	8005cb4 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	785b      	ldrb	r3, [r3, #1]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d11a      	bne.n	8007718 <HAL_PCD_EP_Transmit+0x150>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	461a      	mov	r2, r3
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	441a      	add	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4619      	mov	r1, r3
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	440b      	add	r3, r1
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	b219      	sxth	r1, r3
 8007704:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007708:	400b      	ands	r3, r1
 800770a:	b219      	sxth	r1, r3
 800770c:	4b25      	ldr	r3, [pc, #148]	; (80077a4 <HAL_PCD_EP_Transmit+0x1dc>)
 800770e:	430b      	orrs	r3, r1
 8007710:	b21b      	sxth	r3, r3
 8007712:	b29b      	uxth	r3, r3
 8007714:	8013      	strh	r3, [r2, #0]
 8007716:	e01d      	b.n	8007754 <HAL_PCD_EP_Transmit+0x18c>
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	785b      	ldrb	r3, [r3, #1]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d119      	bne.n	8007754 <HAL_PCD_EP_Transmit+0x18c>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	441a      	add	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4619      	mov	r1, r3
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	440b      	add	r3, r1
 800773c:	881b      	ldrh	r3, [r3, #0]
 800773e:	b29b      	uxth	r3, r3
 8007740:	b219      	sxth	r1, r3
 8007742:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007746:	400b      	ands	r3, r1
 8007748:	b219      	sxth	r1, r3
 800774a:	4b17      	ldr	r3, [pc, #92]	; (80077a8 <HAL_PCD_EP_Transmit+0x1e0>)
 800774c:	430b      	orrs	r3, r1
 800774e:	b21b      	sxth	r3, r3
 8007750:	b29b      	uxth	r3, r3
 8007752:	8013      	strh	r3, [r2, #0]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	461a      	mov	r2, r3
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800776a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800776e:	b29c      	uxth	r4, r3
 8007770:	f084 0310 	eor.w	r3, r4, #16
 8007774:	b29c      	uxth	r4, r3
 8007776:	f084 0320 	eor.w	r3, r4, #32
 800777a:	b29c      	uxth	r4, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	461a      	mov	r2, r3
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	441a      	add	r2, r3
 800778a:	4b08      	ldr	r3, [pc, #32]	; (80077ac <HAL_PCD_EP_Transmit+0x1e4>)
 800778c:	4323      	orrs	r3, r4
 800778e:	b29b      	uxth	r3, r3
 8007790:	8013      	strh	r3, [r2, #0]
  
  __HAL_UNLOCK(hpcd);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
     
  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	371c      	adds	r7, #28
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd90      	pop	{r4, r7, pc}
 80077a4:	ffff80c0 	.word	0xffff80c0
 80077a8:	ffffc080 	.word	0xffffc080
 80077ac:	ffff8080 	.word	0xffff8080

080077b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80077b0:	b490      	push	{r4, r7}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d101      	bne.n	80077ca <HAL_PCD_EP_SetStall+0x1a>
 80077c6:	2302      	movs	r3, #2
 80077c8:	e092      	b.n	80078f0 <HAL_PCD_EP_SetStall+0x140>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
   
  if ((0x80 & ep_addr) == 0x80)
 80077d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	da0b      	bge.n	80077f2 <HAL_PCD_EP_SetStall+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077e0:	4613      	mov	r3, r2
 80077e2:	00db      	lsls	r3, r3, #3
 80077e4:	1a9b      	subs	r3, r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	3328      	adds	r3, #40	; 0x28
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	4413      	add	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	e00a      	b.n	8007808 <HAL_PCD_EP_SetStall+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80077f2:	78fa      	ldrb	r2, [r7, #3]
 80077f4:	4613      	mov	r3, r2
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	1a9b      	subs	r3, r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	4413      	add	r3, r2
 8007804:	3304      	adds	r3, #4
 8007806:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2201      	movs	r2, #1
 800780c:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 800780e:	78fb      	ldrb	r3, [r7, #3]
 8007810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007814:	b2da      	uxtb	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800781a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800781e:	b2db      	uxtb	r3, r3
 8007820:	09db      	lsrs	r3, r3, #7
 8007822:	b2db      	uxtb	r3, r3
 8007824:	461a      	mov	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	705a      	strb	r2, [r3, #1]
  
  if (ep->num == 0)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d11c      	bne.n	800786c <HAL_PCD_EP_SetStall+0xbc>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	b29b      	uxth	r3, r3
 8007844:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 8007848:	401c      	ands	r4, r3
 800784a:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 800784e:	f084 0410 	eor.w	r4, r4, #16
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	441a      	add	r2, r3
 8007860:	b2a1      	uxth	r1, r4
 8007862:	4b26      	ldr	r3, [pc, #152]	; (80078fc <HAL_PCD_EP_SetStall+0x14c>)
 8007864:	430b      	orrs	r3, r1
 8007866:	b29b      	uxth	r3, r3
 8007868:	8013      	strh	r3, [r2, #0]
 800786a:	e03c      	b.n	80078e6 <HAL_PCD_EP_SetStall+0x136>
  }
  else
  {
    if (ep->is_in)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	785b      	ldrb	r3, [r3, #1]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01c      	beq.n	80078ae <HAL_PCD_EP_SetStall+0xfe>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	461a      	mov	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	4413      	add	r3, r2
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800788a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800788e:	b29c      	uxth	r4, r3
 8007890:	f084 0310 	eor.w	r3, r4, #16
 8007894:	b29c      	uxth	r4, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	441a      	add	r2, r3
 80078a4:	4b15      	ldr	r3, [pc, #84]	; (80078fc <HAL_PCD_EP_SetStall+0x14c>)
 80078a6:	4323      	orrs	r3, r4
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	8013      	strh	r3, [r2, #0]
 80078ac:	e01b      	b.n	80078e6 <HAL_PCD_EP_SetStall+0x136>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c8:	b29c      	uxth	r4, r3
 80078ca:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80078ce:	b29c      	uxth	r4, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	441a      	add	r2, r3
 80078de:	4b07      	ldr	r3, [pc, #28]	; (80078fc <HAL_PCD_EP_SetStall+0x14c>)
 80078e0:	4323      	orrs	r3, r4
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	8013      	strh	r3, [r2, #0]
    }
  }
  __HAL_UNLOCK(hpcd); 
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bc90      	pop	{r4, r7}
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	ffff8080 	.word	0xffff8080

08007900 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007900:	b490      	push	{r4, r7}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 800790c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007910:	2b00      	cmp	r3, #0
 8007912:	da0b      	bge.n	800792c <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800791a:	4613      	mov	r3, r2
 800791c:	00db      	lsls	r3, r3, #3
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	3328      	adds	r3, #40	; 0x28
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	4413      	add	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	e00a      	b.n	8007942 <HAL_PCD_EP_ClrStall+0x42>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800792c:	78fa      	ldrb	r2, [r7, #3]
 800792e:	4613      	mov	r3, r2
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	1a9b      	subs	r3, r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	3304      	adds	r3, #4
 8007940:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8007948:	78fb      	ldrb	r3, [r7, #3]
 800794a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800794e:	b2da      	uxtb	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8007954:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007958:	b2db      	uxtb	r3, r3
 800795a:	09db      	lsrs	r3, r3, #7
 800795c:	b2db      	uxtb	r3, r3
 800795e:	461a      	mov	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 800796a:	2b01      	cmp	r3, #1
 800796c:	d101      	bne.n	8007972 <HAL_PCD_EP_ClrStall+0x72>
 800796e:	2302      	movs	r3, #2
 8007970:	e099      	b.n	8007aa6 <HAL_PCD_EP_ClrStall+0x1a6>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  if (ep->is_in)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d046      	beq.n	8007a10 <HAL_PCD_EP_ClrStall+0x110>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	4413      	add	r3, r2
 8007990:	881b      	ldrh	r3, [r3, #0]
 8007992:	b29b      	uxth	r3, r3
 8007994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007998:	2b00      	cmp	r3, #0
 800799a:	d019      	beq.n	80079d0 <HAL_PCD_EP_ClrStall+0xd0>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	461a      	mov	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	441a      	add	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4619      	mov	r1, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	b219      	sxth	r1, r3
 80079be:	f640 730f 	movw	r3, #3855	; 0xf0f
 80079c2:	400b      	ands	r3, r1
 80079c4:	b219      	sxth	r1, r3
 80079c6:	4b3a      	ldr	r3, [pc, #232]	; (8007ab0 <HAL_PCD_EP_ClrStall+0x1b0>)
 80079c8:	430b      	orrs	r3, r1
 80079ca:	b21b      	sxth	r3, r3
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	461a      	mov	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ea:	b29c      	uxth	r4, r3
 80079ec:	f084 0310 	eor.w	r3, r4, #16
 80079f0:	b29c      	uxth	r4, r3
 80079f2:	f084 0320 	eor.w	r3, r4, #32
 80079f6:	b29c      	uxth	r4, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	461a      	mov	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	441a      	add	r2, r3
 8007a06:	4b2b      	ldr	r3, [pc, #172]	; (8007ab4 <HAL_PCD_EP_ClrStall+0x1b4>)
 8007a08:	4323      	orrs	r3, r4
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	8013      	strh	r3, [r2, #0]
 8007a0e:	e045      	b.n	8007a9c <HAL_PCD_EP_ClrStall+0x19c>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	461a      	mov	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d019      	beq.n	8007a5e <HAL_PCD_EP_ClrStall+0x15e>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	441a      	add	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	b219      	sxth	r1, r3
 8007a4c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007a50:	400b      	ands	r3, r1
 8007a52:	b219      	sxth	r1, r3
 8007a54:	4b18      	ldr	r3, [pc, #96]	; (8007ab8 <HAL_PCD_EP_ClrStall+0x1b8>)
 8007a56:	430b      	orrs	r3, r1
 8007a58:	b21b      	sxth	r3, r3
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	881b      	ldrh	r3, [r3, #0]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a78:	b29c      	uxth	r4, r3
 8007a7a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007a7e:	b29c      	uxth	r4, r3
 8007a80:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007a84:	b29c      	uxth	r4, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	441a      	add	r2, r3
 8007a94:	4b07      	ldr	r3, [pc, #28]	; (8007ab4 <HAL_PCD_EP_ClrStall+0x1b4>)
 8007a96:	4323      	orrs	r3, r4
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	8013      	strh	r3, [r2, #0]
  }
  __HAL_UNLOCK(hpcd); 
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
    
  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bc90      	pop	{r4, r7}
 8007aae:	4770      	bx	lr
 8007ab0:	ffff80c0 	.word	0xffff80c0
 8007ab4:	ffff8080 	.word	0xffff8080
 8007ab8:	ffffc080 	.word	0xffffc080

08007abc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b087      	sub	sp, #28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007aca:	2300      	movs	r3, #0
 8007acc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8007ad2:	e154      	b.n	8007d7e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	2101      	movs	r1, #1
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 8146 	beq.w	8007d78 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d003      	beq.n	8007afc <HAL_GPIO_Init+0x40>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	2b12      	cmp	r3, #18
 8007afa:	d123      	bne.n	8007b44 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	08da      	lsrs	r2, r3, #3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3208      	adds	r2, #8
 8007b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b08:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f003 0307 	and.w	r3, r3, #7
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	220f      	movs	r2, #15
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	43db      	mvns	r3, r3
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	691a      	ldr	r2, [r3, #16]
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	08da      	lsrs	r2, r3, #3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	3208      	adds	r2, #8
 8007b3e:	6939      	ldr	r1, [r7, #16]
 8007b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	2203      	movs	r2, #3
 8007b50:	fa02 f303 	lsl.w	r3, r2, r3
 8007b54:	43db      	mvns	r3, r3
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	4013      	ands	r3, r2
 8007b5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f003 0203 	and.w	r2, r3, #3
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d00b      	beq.n	8007b98 <HAL_GPIO_Init+0xdc>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d007      	beq.n	8007b98 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007b8c:	2b11      	cmp	r3, #17
 8007b8e:	d003      	beq.n	8007b98 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2b12      	cmp	r3, #18
 8007b96:	d130      	bne.n	8007bfa <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	005b      	lsls	r3, r3, #1
 8007ba2:	2203      	movs	r2, #3
 8007ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba8:	43db      	mvns	r3, r3
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	4013      	ands	r3, r2
 8007bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	68da      	ldr	r2, [r3, #12]
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	005b      	lsls	r3, r3, #1
 8007bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007bce:	2201      	movs	r2, #1
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd6:	43db      	mvns	r3, r3
 8007bd8:	693a      	ldr	r2, [r7, #16]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	091b      	lsrs	r3, r3, #4
 8007be4:	f003 0201 	and.w	r2, r3, #1
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	fa02 f303 	lsl.w	r3, r2, r3
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	2203      	movs	r2, #3
 8007c06:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0a:	43db      	mvns	r3, r3
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	4013      	ands	r3, r2
 8007c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	689a      	ldr	r2, [r3, #8]
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 80a0 	beq.w	8007d78 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c38:	4a58      	ldr	r2, [pc, #352]	; (8007d9c <HAL_GPIO_Init+0x2e0>)
 8007c3a:	4b58      	ldr	r3, [pc, #352]	; (8007d9c <HAL_GPIO_Init+0x2e0>)
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	f043 0301 	orr.w	r3, r3, #1
 8007c42:	6193      	str	r3, [r2, #24]
 8007c44:	4b55      	ldr	r3, [pc, #340]	; (8007d9c <HAL_GPIO_Init+0x2e0>)
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	60bb      	str	r3, [r7, #8]
 8007c4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8007c50:	4a53      	ldr	r2, [pc, #332]	; (8007da0 <HAL_GPIO_Init+0x2e4>)
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	089b      	lsrs	r3, r3, #2
 8007c56:	3302      	adds	r3, #2
 8007c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f003 0303 	and.w	r3, r3, #3
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	220f      	movs	r2, #15
 8007c68:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	4013      	ands	r3, r2
 8007c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007c7a:	d019      	beq.n	8007cb0 <HAL_GPIO_Init+0x1f4>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a49      	ldr	r2, [pc, #292]	; (8007da4 <HAL_GPIO_Init+0x2e8>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d013      	beq.n	8007cac <HAL_GPIO_Init+0x1f0>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a48      	ldr	r2, [pc, #288]	; (8007da8 <HAL_GPIO_Init+0x2ec>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d00d      	beq.n	8007ca8 <HAL_GPIO_Init+0x1ec>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a47      	ldr	r2, [pc, #284]	; (8007dac <HAL_GPIO_Init+0x2f0>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d007      	beq.n	8007ca4 <HAL_GPIO_Init+0x1e8>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a46      	ldr	r2, [pc, #280]	; (8007db0 <HAL_GPIO_Init+0x2f4>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d101      	bne.n	8007ca0 <HAL_GPIO_Init+0x1e4>
 8007c9c:	2304      	movs	r3, #4
 8007c9e:	e008      	b.n	8007cb2 <HAL_GPIO_Init+0x1f6>
 8007ca0:	2305      	movs	r3, #5
 8007ca2:	e006      	b.n	8007cb2 <HAL_GPIO_Init+0x1f6>
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e004      	b.n	8007cb2 <HAL_GPIO_Init+0x1f6>
 8007ca8:	2302      	movs	r3, #2
 8007caa:	e002      	b.n	8007cb2 <HAL_GPIO_Init+0x1f6>
 8007cac:	2301      	movs	r3, #1
 8007cae:	e000      	b.n	8007cb2 <HAL_GPIO_Init+0x1f6>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	f002 0203 	and.w	r2, r2, #3
 8007cb8:	0092      	lsls	r2, r2, #2
 8007cba:	4093      	lsls	r3, r2
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007cc2:	4937      	ldr	r1, [pc, #220]	; (8007da0 <HAL_GPIO_Init+0x2e4>)
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	089b      	lsrs	r3, r3, #2
 8007cc8:	3302      	adds	r3, #2
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007cd0:	4b38      	ldr	r3, [pc, #224]	; (8007db4 <HAL_GPIO_Init+0x2f8>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	43db      	mvns	r3, r3
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007cf4:	4a2f      	ldr	r2, [pc, #188]	; (8007db4 <HAL_GPIO_Init+0x2f8>)
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007cfa:	4b2e      	ldr	r3, [pc, #184]	; (8007db4 <HAL_GPIO_Init+0x2f8>)
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	43db      	mvns	r3, r3
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	4013      	ands	r3, r2
 8007d08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007d1e:	4a25      	ldr	r2, [pc, #148]	; (8007db4 <HAL_GPIO_Init+0x2f8>)
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007d24:	4b23      	ldr	r3, [pc, #140]	; (8007db4 <HAL_GPIO_Init+0x2f8>)
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	43db      	mvns	r3, r3
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	4013      	ands	r3, r2
 8007d32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d003      	beq.n	8007d48 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007d48:	4a1a      	ldr	r2, [pc, #104]	; (8007db4 <HAL_GPIO_Init+0x2f8>)
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007d4e:	4b19      	ldr	r3, [pc, #100]	; (8007db4 <HAL_GPIO_Init+0x2f8>)
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	43db      	mvns	r3, r3
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007d72:	4a10      	ldr	r2, [pc, #64]	; (8007db4 <HAL_GPIO_Init+0x2f8>)
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	fa22 f303 	lsr.w	r3, r2, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f47f aea3 	bne.w	8007ad4 <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 8007d8e:	bf00      	nop
 8007d90:	371c      	adds	r7, #28
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	40021000 	.word	0x40021000
 8007da0:	40010000 	.word	0x40010000
 8007da4:	48000400 	.word	0x48000400
 8007da8:	48000800 	.word	0x48000800
 8007dac:	48000c00 	.word	0x48000c00
 8007db0:	48001000 	.word	0x48001000
 8007db4:	40010400 	.word	0x40010400

08007db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	691a      	ldr	r2, [r3, #16]
 8007dc8:	887b      	ldrh	r3, [r7, #2]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d002      	beq.n	8007dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	73fb      	strb	r3, [r7, #15]
 8007dd4:	e001      	b.n	8007dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	807b      	strh	r3, [r7, #2]
 8007df4:	4613      	mov	r3, r2
 8007df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007df8:	787b      	ldrb	r3, [r7, #1]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007dfe:	887a      	ldrh	r2, [r7, #2]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007e04:	e002      	b.n	8007e0c <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007e06:	887a      	ldrh	r2, [r7, #2]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	695a      	ldr	r2, [r3, #20]
 8007e28:	887b      	ldrh	r3, [r7, #2]
 8007e2a:	405a      	eors	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	615a      	str	r2, [r3, #20]
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007e48:	231f      	movs	r3, #31
 8007e4a:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0)){}
 8007e4c:	bf00      	nop
 8007e4e:	2201      	movs	r2, #1
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	409a      	lsls	r2, r3
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	4013      	ands	r3, r2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d104      	bne.n	8007e66 <HAL_CRCEx_Polynomial_Set+0x2a>
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	1e5a      	subs	r2, r3, #1
 8007e60:	617a      	str	r2, [r7, #20]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1f3      	bne.n	8007e4e <HAL_CRCEx_Polynomial_Set+0x12>

  switch (PolyLength)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2b18      	cmp	r3, #24
 8007e6a:	d844      	bhi.n	8007ef6 <HAL_CRCEx_Polynomial_Set+0xba>
 8007e6c:	a201      	add	r2, pc, #4	; (adr r2, 8007e74 <HAL_CRCEx_Polynomial_Set+0x38>)
 8007e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e72:	bf00      	nop
 8007e74:	08007ef7 	.word	0x08007ef7
 8007e78:	08007ef7 	.word	0x08007ef7
 8007e7c:	08007ef7 	.word	0x08007ef7
 8007e80:	08007ef7 	.word	0x08007ef7
 8007e84:	08007ef7 	.word	0x08007ef7
 8007e88:	08007ef7 	.word	0x08007ef7
 8007e8c:	08007ef7 	.word	0x08007ef7
 8007e90:	08007ef7 	.word	0x08007ef7
 8007e94:	08007eed 	.word	0x08007eed
 8007e98:	08007ef7 	.word	0x08007ef7
 8007e9c:	08007ef7 	.word	0x08007ef7
 8007ea0:	08007ef7 	.word	0x08007ef7
 8007ea4:	08007ef7 	.word	0x08007ef7
 8007ea8:	08007ef7 	.word	0x08007ef7
 8007eac:	08007ef7 	.word	0x08007ef7
 8007eb0:	08007ef7 	.word	0x08007ef7
 8007eb4:	08007ee3 	.word	0x08007ee3
 8007eb8:	08007ef7 	.word	0x08007ef7
 8007ebc:	08007ef7 	.word	0x08007ef7
 8007ec0:	08007ef7 	.word	0x08007ef7
 8007ec4:	08007ef7 	.word	0x08007ef7
 8007ec8:	08007ef7 	.word	0x08007ef7
 8007ecc:	08007ef7 	.word	0x08007ef7
 8007ed0:	08007ef7 	.word	0x08007ef7
 8007ed4:	08007ed9 	.word	0x08007ed9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B) 
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2b06      	cmp	r3, #6
 8007edc:	d90d      	bls.n	8007efa <HAL_CRCEx_Polynomial_Set+0xbe>
      {
        return  HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e01f      	b.n	8007f22 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b07      	cmp	r3, #7
 8007ee6:	d90a      	bls.n	8007efe <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e01a      	b.n	8007f22 <HAL_CRCEx_Polynomial_Set+0xe6>
      }      
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2b0f      	cmp	r3, #15
 8007ef0:	d907      	bls.n	8007f02 <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e015      	b.n	8007f22 <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break; 
    default:
      break;                  
 8007ef6:	bf00      	nop
 8007ef8:	e004      	b.n	8007f04 <HAL_CRCEx_Polynomial_Set+0xc8>
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B) 
      {
        return  HAL_ERROR;
      }
      break;
 8007efa:	bf00      	nop
 8007efc:	e002      	b.n	8007f04 <HAL_CRCEx_Polynomial_Set+0xc8>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        return  HAL_ERROR;
      }      
      break;
 8007efe:	bf00      	nop
 8007f00:	e000      	b.n	8007f04 <HAL_CRCEx_Polynomial_Set+0xc8>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
      }      
      break;
 8007f02:	bf00      	nop
    default:
      break;                  
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	6812      	ldr	r2, [r2, #0]
 8007f14:	6892      	ldr	r2, [r2, #8]
 8007f16:	f022 0118 	bic.w	r1, r2, #24
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	371c      	adds	r7, #28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop

08007f30 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc: CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e054      	b.n	8007fec <HAL_CRC_Init+0xbc>
  }
  
  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	7f5b      	ldrb	r3, [r3, #29]
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d105      	bne.n	8007f58 <HAL_CRC_Init+0x28>
  {   
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7f9 fcc0 	bl	80018d8 <HAL_CRC_MspInit>
  }
  
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	791b      	ldrb	r3, [r3, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10c      	bne.n	8007f80 <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a22      	ldr	r2, [pc, #136]	; (8007ff4 <HAL_CRC_Init+0xc4>)
 8007f6c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	6812      	ldr	r2, [r2, #0]
 8007f76:	6892      	ldr	r2, [r2, #8]
 8007f78:	f022 0218 	bic.w	r2, r2, #24
 8007f7c:	609a      	str	r2, [r3, #8]
 8007f7e:	e00c      	b.n	8007f9a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6899      	ldr	r1, [r3, #8]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7ff ff56 	bl	8007e3c <HAL_CRCEx_Polynomial_Set>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e028      	b.n	8007fec <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	795b      	ldrb	r3, [r3, #5]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d105      	bne.n	8007fae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8007faa:	611a      	str	r2, [r3, #16]
 8007fac:	e004      	b.n	8007fb8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	6912      	ldr	r2, [r2, #16]
 8007fb6:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	6812      	ldr	r2, [r2, #0]
 8007fc0:	6892      	ldr	r2, [r2, #8]
 8007fc2:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	6952      	ldr	r2, [r2, #20]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	6812      	ldr	r2, [r2, #0]
 8007fd6:	6892      	ldr	r2, [r2, #8]
 8007fd8:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	6992      	ldr	r2, [r2, #24]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	04c11db7 	.word	0x04c11db7

08007ff8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f003 0307 	and.w	r3, r3, #7
 8008006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008008:	4b0c      	ldr	r3, [pc, #48]	; (800803c <NVIC_SetPriorityGrouping+0x44>)
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008014:	4013      	ands	r3, r2
 8008016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8008020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008028:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800802a:	4a04      	ldr	r2, [pc, #16]	; (800803c <NVIC_SetPriorityGrouping+0x44>)
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	60d3      	str	r3, [r2, #12]
}
 8008030:	bf00      	nop
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	e000ed00 	.word	0xe000ed00

08008040 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8008040:	b480      	push	{r7}
 8008042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008044:	4b04      	ldr	r3, [pc, #16]	; (8008058 <NVIC_GetPriorityGrouping+0x18>)
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800804c:	0a1b      	lsrs	r3, r3, #8
}
 800804e:	4618      	mov	r0, r3
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	e000ed00 	.word	0xe000ed00

0800805c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008066:	4909      	ldr	r1, [pc, #36]	; (800808c <NVIC_EnableIRQ+0x30>)
 8008068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800806c:	095b      	lsrs	r3, r3, #5
 800806e:	79fa      	ldrb	r2, [r7, #7]
 8008070:	f002 021f 	and.w	r2, r2, #31
 8008074:	2001      	movs	r0, #1
 8008076:	fa00 f202 	lsl.w	r2, r0, r2
 800807a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800807e:	bf00      	nop
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	e000e100 	.word	0xe000e100

08008090 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	6039      	str	r1, [r7, #0]
 800809a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800809c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	da0b      	bge.n	80080bc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080a4:	490d      	ldr	r1, [pc, #52]	; (80080dc <NVIC_SetPriority+0x4c>)
 80080a6:	79fb      	ldrb	r3, [r7, #7]
 80080a8:	f003 030f 	and.w	r3, r3, #15
 80080ac:	3b04      	subs	r3, #4
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	b2d2      	uxtb	r2, r2
 80080b2:	0112      	lsls	r2, r2, #4
 80080b4:	b2d2      	uxtb	r2, r2
 80080b6:	440b      	add	r3, r1
 80080b8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80080ba:	e009      	b.n	80080d0 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080bc:	4908      	ldr	r1, [pc, #32]	; (80080e0 <NVIC_SetPriority+0x50>)
 80080be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	b2d2      	uxtb	r2, r2
 80080c6:	0112      	lsls	r2, r2, #4
 80080c8:	b2d2      	uxtb	r2, r2
 80080ca:	440b      	add	r3, r1
 80080cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr
 80080dc:	e000ed00 	.word	0xe000ed00
 80080e0:	e000e100 	.word	0xe000e100

080080e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b089      	sub	sp, #36	; 0x24
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	f1c3 0307 	rsb	r3, r3, #7
 80080fe:	2b04      	cmp	r3, #4
 8008100:	bf28      	it	cs
 8008102:	2304      	movcs	r3, #4
 8008104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	3304      	adds	r3, #4
 800810a:	2b06      	cmp	r3, #6
 800810c:	d902      	bls.n	8008114 <NVIC_EncodePriority+0x30>
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	3b03      	subs	r3, #3
 8008112:	e000      	b.n	8008116 <NVIC_EncodePriority+0x32>
 8008114:	2300      	movs	r3, #0
 8008116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008118:	2201      	movs	r2, #1
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	fa02 f303 	lsl.w	r3, r2, r3
 8008120:	1e5a      	subs	r2, r3, #1
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	401a      	ands	r2, r3
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800812a:	2101      	movs	r1, #1
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	fa01 f303 	lsl.w	r3, r1, r3
 8008132:	1e59      	subs	r1, r3, #1
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8008138:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800813a:	4618      	mov	r0, r3
 800813c:	3724      	adds	r7, #36	; 0x24
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop

08008148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3b01      	subs	r3, #1
 8008154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008158:	d301      	bcc.n	800815e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800815a:	2301      	movs	r3, #1
 800815c:	e00f      	b.n	800817e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800815e:	4a0a      	ldr	r2, [pc, #40]	; (8008188 <SysTick_Config+0x40>)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3b01      	subs	r3, #1
 8008164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008166:	210f      	movs	r1, #15
 8008168:	f04f 30ff 	mov.w	r0, #4294967295
 800816c:	f7ff ff90 	bl	8008090 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008170:	4b05      	ldr	r3, [pc, #20]	; (8008188 <SysTick_Config+0x40>)
 8008172:	2200      	movs	r2, #0
 8008174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008176:	4b04      	ldr	r3, [pc, #16]	; (8008188 <SysTick_Config+0x40>)
 8008178:	2207      	movs	r2, #7
 800817a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	e000e010 	.word	0xe000e010

0800818c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7ff ff2f 	bl	8007ff8 <NVIC_SetPriorityGrouping>
}
 800819a:	bf00      	nop
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop

080081a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	4603      	mov	r3, r0
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80081b2:	2300      	movs	r3, #0
 80081b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80081b6:	f7ff ff43 	bl	8008040 <NVIC_GetPriorityGrouping>
 80081ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	68b9      	ldr	r1, [r7, #8]
 80081c0:	6978      	ldr	r0, [r7, #20]
 80081c2:	f7ff ff8f 	bl	80080e4 <NVIC_EncodePriority>
 80081c6:	4602      	mov	r2, r0
 80081c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081cc:	4611      	mov	r1, r2
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7ff ff5e 	bl	8008090 <NVIC_SetPriority>
}
 80081d4:	bf00      	nop
 80081d6:	3718      	adds	r7, #24
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80081e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff ff36 	bl	800805c <NVIC_EnableIRQ>
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7ff ffa1 	bl	8008148 <SysTick_Config>
 8008206:	4603      	mov	r3, r0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b04      	cmp	r3, #4
 800821c:	d106      	bne.n	800822c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800821e:	4a09      	ldr	r2, [pc, #36]	; (8008244 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008220:	4b08      	ldr	r3, [pc, #32]	; (8008244 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f043 0304 	orr.w	r3, r3, #4
 8008228:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800822a:	e005      	b.n	8008238 <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800822c:	4a05      	ldr	r2, [pc, #20]	; (8008244 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800822e:	4b05      	ldr	r3, [pc, #20]	; (8008244 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f023 0304 	bic.w	r3, r3, #4
 8008236:	6013      	str	r3, [r2, #0]
  }
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	e000e010 	.word	0xe000e010

08008248 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800824c:	f000 f802 	bl	8008254 <HAL_SYSTICK_Callback>
}
 8008250:	bf00      	nop
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8008254:	b480      	push	{r7}
 8008256:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8008258:	bf00      	nop
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop

08008264 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008268:	4a08      	ldr	r2, [pc, #32]	; (800828c <HAL_Init+0x28>)
 800826a:	4b08      	ldr	r3, [pc, #32]	; (800828c <HAL_Init+0x28>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f043 0310 	orr.w	r3, r3, #16
 8008272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008274:	2003      	movs	r0, #3
 8008276:	f7ff ff89 	bl	800818c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800827a:	2000      	movs	r0, #0
 800827c:	f000 f808 	bl	8008290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008280:	f7f9 fae8 	bl	8001854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	40022000 	.word	0x40022000

08008290 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 8008298:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <HAL_InitTick+0x30>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a09      	ldr	r2, [pc, #36]	; (80082c4 <HAL_InitTick+0x34>)
 800829e:	fba2 2303 	umull	r2, r3, r2, r3
 80082a2:	099b      	lsrs	r3, r3, #6
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff ffa7 	bl	80081f8 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80082aa:	2200      	movs	r2, #0
 80082ac:	6879      	ldr	r1, [r7, #4]
 80082ae:	f04f 30ff 	mov.w	r0, #4294967295
 80082b2:	f7ff ff77 	bl	80081a4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	20000154 	.word	0x20000154
 80082c4:	10624dd3 	.word	0x10624dd3

080082c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80082c8:	b480      	push	{r7}
 80082ca:	af00      	add	r7, sp, #0
  uwTick++;
 80082cc:	4b04      	ldr	r3, [pc, #16]	; (80082e0 <HAL_IncTick+0x18>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3301      	adds	r3, #1
 80082d2:	4a03      	ldr	r2, [pc, #12]	; (80082e0 <HAL_IncTick+0x18>)
 80082d4:	6013      	str	r3, [r2, #0]
}
 80082d6:	bf00      	nop
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	200011b4 	.word	0x200011b4

080082e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80082e4:	b480      	push	{r7}
 80082e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80082e8:	4b03      	ldr	r3, [pc, #12]	; (80082f8 <HAL_GetTick+0x14>)
 80082ea:	681b      	ldr	r3, [r3, #0]
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	200011b4 	.word	0x200011b4

080082fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008304:	f7ff ffee 	bl	80082e4 <HAL_GetTick>
 8008308:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800830a:	bf00      	nop
 800830c:	f7ff ffea 	bl	80082e4 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	1ad2      	subs	r2, r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	429a      	cmp	r2, r3
 800831a:	d3f7      	bcc.n	800830c <HAL_Delay+0x10>
  {
  }
}
 800831c:	bf00      	nop
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008324:	b480      	push	{r7}
 8008326:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008328:	4a1f      	ldr	r2, [pc, #124]	; (80083a8 <SystemInit+0x84>)
 800832a:	4b1f      	ldr	r3, [pc, #124]	; (80083a8 <SystemInit+0x84>)
 800832c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8008338:	4a1c      	ldr	r2, [pc, #112]	; (80083ac <SystemInit+0x88>)
 800833a:	4b1c      	ldr	r3, [pc, #112]	; (80083ac <SystemInit+0x88>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f043 0301 	orr.w	r3, r3, #1
 8008342:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8008344:	4919      	ldr	r1, [pc, #100]	; (80083ac <SystemInit+0x88>)
 8008346:	4b19      	ldr	r3, [pc, #100]	; (80083ac <SystemInit+0x88>)
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	4b19      	ldr	r3, [pc, #100]	; (80083b0 <SystemInit+0x8c>)
 800834c:	4013      	ands	r3, r2
 800834e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8008350:	4a16      	ldr	r2, [pc, #88]	; (80083ac <SystemInit+0x88>)
 8008352:	4b16      	ldr	r3, [pc, #88]	; (80083ac <SystemInit+0x88>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800835a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800835e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008360:	4a12      	ldr	r2, [pc, #72]	; (80083ac <SystemInit+0x88>)
 8008362:	4b12      	ldr	r3, [pc, #72]	; (80083ac <SystemInit+0x88>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800836a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800836c:	4a0f      	ldr	r2, [pc, #60]	; (80083ac <SystemInit+0x88>)
 800836e:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <SystemInit+0x88>)
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8008376:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8008378:	4a0c      	ldr	r2, [pc, #48]	; (80083ac <SystemInit+0x88>)
 800837a:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <SystemInit+0x88>)
 800837c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837e:	f023 030f 	bic.w	r3, r3, #15
 8008382:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8008384:	4909      	ldr	r1, [pc, #36]	; (80083ac <SystemInit+0x88>)
 8008386:	4b09      	ldr	r3, [pc, #36]	; (80083ac <SystemInit+0x88>)
 8008388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800838a:	4b0a      	ldr	r3, [pc, #40]	; (80083b4 <SystemInit+0x90>)
 800838c:	4013      	ands	r3, r2
 800838e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8008390:	4b06      	ldr	r3, [pc, #24]	; (80083ac <SystemInit+0x88>)
 8008392:	2200      	movs	r2, #0
 8008394:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008396:	4b04      	ldr	r3, [pc, #16]	; (80083a8 <SystemInit+0x84>)
 8008398:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800839c:	609a      	str	r2, [r3, #8]
#endif
}
 800839e:	bf00      	nop
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	e000ed00 	.word	0xe000ed00
 80083ac:	40021000 	.word	0x40021000
 80083b0:	f87fc00c 	.word	0xf87fc00c
 80083b4:	ff00fccc 	.word	0xff00fccc

080083b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80083b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80083f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80083bc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80083be:	e003      	b.n	80083c8 <LoopCopyDataInit>

080083c0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80083c0:	4b0c      	ldr	r3, [pc, #48]	; (80083f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80083c2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80083c4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80083c6:	3104      	adds	r1, #4

080083c8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80083c8:	480b      	ldr	r0, [pc, #44]	; (80083f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80083ca:	4b0c      	ldr	r3, [pc, #48]	; (80083fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80083cc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80083ce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80083d0:	d3f6      	bcc.n	80083c0 <CopyDataInit>
	ldr	r2, =_sbss
 80083d2:	4a0b      	ldr	r2, [pc, #44]	; (8008400 <LoopForever+0x12>)
	b	LoopFillZerobss
 80083d4:	e002      	b.n	80083dc <LoopFillZerobss>

080083d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80083d6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80083d8:	f842 3b04 	str.w	r3, [r2], #4

080083dc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80083dc:	4b09      	ldr	r3, [pc, #36]	; (8008404 <LoopForever+0x16>)
	cmp	r2, r3
 80083de:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80083e0:	d3f9      	bcc.n	80083d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80083e2:	f7ff ff9f 	bl	8008324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083e6:	f000 f811 	bl	800840c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80083ea:	f7f9 fad7 	bl	800199c <main>

080083ee <LoopForever>:

LoopForever:
    b LoopForever
 80083ee:	e7fe      	b.n	80083ee <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80083f0:	20008000 	.word	0x20008000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80083f4:	0800b45c 	.word	0x0800b45c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80083f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80083fc:	20000694 	.word	0x20000694
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8008400:	20000694 	.word	0x20000694
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8008404:	200011bc 	.word	0x200011bc

08008408 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008408:	e7fe      	b.n	8008408 <ADC1_2_IRQHandler>
	...

0800840c <__libc_init_array>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	4b0e      	ldr	r3, [pc, #56]	; (8008448 <__libc_init_array+0x3c>)
 8008410:	4c0e      	ldr	r4, [pc, #56]	; (800844c <__libc_init_array+0x40>)
 8008412:	1ae4      	subs	r4, r4, r3
 8008414:	10a4      	asrs	r4, r4, #2
 8008416:	2500      	movs	r5, #0
 8008418:	461e      	mov	r6, r3
 800841a:	42a5      	cmp	r5, r4
 800841c:	d004      	beq.n	8008428 <__libc_init_array+0x1c>
 800841e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008422:	4798      	blx	r3
 8008424:	3501      	adds	r5, #1
 8008426:	e7f8      	b.n	800841a <__libc_init_array+0xe>
 8008428:	f002 fef2 	bl	800b210 <_init>
 800842c:	4c08      	ldr	r4, [pc, #32]	; (8008450 <__libc_init_array+0x44>)
 800842e:	4b09      	ldr	r3, [pc, #36]	; (8008454 <__libc_init_array+0x48>)
 8008430:	1ae4      	subs	r4, r4, r3
 8008432:	10a4      	asrs	r4, r4, #2
 8008434:	2500      	movs	r5, #0
 8008436:	461e      	mov	r6, r3
 8008438:	42a5      	cmp	r5, r4
 800843a:	d004      	beq.n	8008446 <__libc_init_array+0x3a>
 800843c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008440:	4798      	blx	r3
 8008442:	3501      	adds	r5, #1
 8008444:	e7f8      	b.n	8008438 <__libc_init_array+0x2c>
 8008446:	bd70      	pop	{r4, r5, r6, pc}
 8008448:	0800b454 	.word	0x0800b454
 800844c:	0800b454 	.word	0x0800b454
 8008450:	0800b458 	.word	0x0800b458
 8008454:	0800b454 	.word	0x0800b454

08008458 <malloc>:
 8008458:	4b02      	ldr	r3, [pc, #8]	; (8008464 <malloc+0xc>)
 800845a:	4601      	mov	r1, r0
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	f000 b80b 	b.w	8008478 <_malloc_r>
 8008462:	bf00      	nop
 8008464:	20000658 	.word	0x20000658

08008468 <free>:
 8008468:	4b02      	ldr	r3, [pc, #8]	; (8008474 <free+0xc>)
 800846a:	4601      	mov	r1, r0
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	f002 b8b1 	b.w	800a5d4 <_free_r>
 8008472:	bf00      	nop
 8008474:	20000658 	.word	0x20000658

08008478 <_malloc_r>:
 8008478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	f101 040b 	add.w	r4, r1, #11
 8008480:	2c16      	cmp	r4, #22
 8008482:	b085      	sub	sp, #20
 8008484:	4681      	mov	r9, r0
 8008486:	d903      	bls.n	8008490 <_malloc_r+0x18>
 8008488:	f034 0407 	bics.w	r4, r4, #7
 800848c:	d501      	bpl.n	8008492 <_malloc_r+0x1a>
 800848e:	e002      	b.n	8008496 <_malloc_r+0x1e>
 8008490:	2410      	movs	r4, #16
 8008492:	428c      	cmp	r4, r1
 8008494:	d203      	bcs.n	800849e <_malloc_r+0x26>
 8008496:	230c      	movs	r3, #12
 8008498:	f8c9 3000 	str.w	r3, [r9]
 800849c:	e1ea      	b.n	8008874 <_malloc_r+0x3fc>
 800849e:	4648      	mov	r0, r9
 80084a0:	f000 fa15 	bl	80088ce <__malloc_lock>
 80084a4:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80084a8:	4d9e      	ldr	r5, [pc, #632]	; (8008724 <_malloc_r+0x2ac>)
 80084aa:	d217      	bcs.n	80084dc <_malloc_r+0x64>
 80084ac:	f104 0208 	add.w	r2, r4, #8
 80084b0:	442a      	add	r2, r5
 80084b2:	f1a2 0108 	sub.w	r1, r2, #8
 80084b6:	6856      	ldr	r6, [r2, #4]
 80084b8:	428e      	cmp	r6, r1
 80084ba:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80084be:	d102      	bne.n	80084c6 <_malloc_r+0x4e>
 80084c0:	68d6      	ldr	r6, [r2, #12]
 80084c2:	42b2      	cmp	r2, r6
 80084c4:	d008      	beq.n	80084d8 <_malloc_r+0x60>
 80084c6:	6873      	ldr	r3, [r6, #4]
 80084c8:	68f2      	ldr	r2, [r6, #12]
 80084ca:	68b1      	ldr	r1, [r6, #8]
 80084cc:	f023 0303 	bic.w	r3, r3, #3
 80084d0:	60ca      	str	r2, [r1, #12]
 80084d2:	4433      	add	r3, r6
 80084d4:	6091      	str	r1, [r2, #8]
 80084d6:	e02f      	b.n	8008538 <_malloc_r+0xc0>
 80084d8:	3302      	adds	r3, #2
 80084da:	e03d      	b.n	8008558 <_malloc_r+0xe0>
 80084dc:	0a63      	lsrs	r3, r4, #9
 80084de:	d01a      	beq.n	8008516 <_malloc_r+0x9e>
 80084e0:	2b04      	cmp	r3, #4
 80084e2:	d802      	bhi.n	80084ea <_malloc_r+0x72>
 80084e4:	09a3      	lsrs	r3, r4, #6
 80084e6:	3338      	adds	r3, #56	; 0x38
 80084e8:	e018      	b.n	800851c <_malloc_r+0xa4>
 80084ea:	2b14      	cmp	r3, #20
 80084ec:	d801      	bhi.n	80084f2 <_malloc_r+0x7a>
 80084ee:	335b      	adds	r3, #91	; 0x5b
 80084f0:	e014      	b.n	800851c <_malloc_r+0xa4>
 80084f2:	2b54      	cmp	r3, #84	; 0x54
 80084f4:	d802      	bhi.n	80084fc <_malloc_r+0x84>
 80084f6:	0b23      	lsrs	r3, r4, #12
 80084f8:	336e      	adds	r3, #110	; 0x6e
 80084fa:	e00f      	b.n	800851c <_malloc_r+0xa4>
 80084fc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008500:	d802      	bhi.n	8008508 <_malloc_r+0x90>
 8008502:	0be3      	lsrs	r3, r4, #15
 8008504:	3377      	adds	r3, #119	; 0x77
 8008506:	e009      	b.n	800851c <_malloc_r+0xa4>
 8008508:	f240 5254 	movw	r2, #1364	; 0x554
 800850c:	4293      	cmp	r3, r2
 800850e:	d804      	bhi.n	800851a <_malloc_r+0xa2>
 8008510:	0ca3      	lsrs	r3, r4, #18
 8008512:	337c      	adds	r3, #124	; 0x7c
 8008514:	e002      	b.n	800851c <_malloc_r+0xa4>
 8008516:	233f      	movs	r3, #63	; 0x3f
 8008518:	e000      	b.n	800851c <_malloc_r+0xa4>
 800851a:	237e      	movs	r3, #126	; 0x7e
 800851c:	1c5a      	adds	r2, r3, #1
 800851e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8008522:	f1a2 0008 	sub.w	r0, r2, #8
 8008526:	6856      	ldr	r6, [r2, #4]
 8008528:	e00c      	b.n	8008544 <_malloc_r+0xcc>
 800852a:	2900      	cmp	r1, #0
 800852c:	68f1      	ldr	r1, [r6, #12]
 800852e:	db08      	blt.n	8008542 <_malloc_r+0xca>
 8008530:	68b3      	ldr	r3, [r6, #8]
 8008532:	60d9      	str	r1, [r3, #12]
 8008534:	608b      	str	r3, [r1, #8]
 8008536:	18b3      	adds	r3, r6, r2
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	f042 0201 	orr.w	r2, r2, #1
 800853e:	605a      	str	r2, [r3, #4]
 8008540:	e1a3      	b.n	800888a <_malloc_r+0x412>
 8008542:	460e      	mov	r6, r1
 8008544:	4286      	cmp	r6, r0
 8008546:	d006      	beq.n	8008556 <_malloc_r+0xde>
 8008548:	6872      	ldr	r2, [r6, #4]
 800854a:	f022 0203 	bic.w	r2, r2, #3
 800854e:	1b11      	subs	r1, r2, r4
 8008550:	290f      	cmp	r1, #15
 8008552:	ddea      	ble.n	800852a <_malloc_r+0xb2>
 8008554:	3b01      	subs	r3, #1
 8008556:	3301      	adds	r3, #1
 8008558:	4a72      	ldr	r2, [pc, #456]	; (8008724 <_malloc_r+0x2ac>)
 800855a:	692e      	ldr	r6, [r5, #16]
 800855c:	f102 0708 	add.w	r7, r2, #8
 8008560:	42be      	cmp	r6, r7
 8008562:	4639      	mov	r1, r7
 8008564:	d079      	beq.n	800865a <_malloc_r+0x1e2>
 8008566:	6870      	ldr	r0, [r6, #4]
 8008568:	f020 0003 	bic.w	r0, r0, #3
 800856c:	ebc4 0e00 	rsb	lr, r4, r0
 8008570:	f1be 0f0f 	cmp.w	lr, #15
 8008574:	dd0d      	ble.n	8008592 <_malloc_r+0x11a>
 8008576:	1933      	adds	r3, r6, r4
 8008578:	f044 0401 	orr.w	r4, r4, #1
 800857c:	6074      	str	r4, [r6, #4]
 800857e:	6153      	str	r3, [r2, #20]
 8008580:	6113      	str	r3, [r2, #16]
 8008582:	f04e 0201 	orr.w	r2, lr, #1
 8008586:	60df      	str	r7, [r3, #12]
 8008588:	609f      	str	r7, [r3, #8]
 800858a:	605a      	str	r2, [r3, #4]
 800858c:	f843 e00e 	str.w	lr, [r3, lr]
 8008590:	e17b      	b.n	800888a <_malloc_r+0x412>
 8008592:	f1be 0f00 	cmp.w	lr, #0
 8008596:	6157      	str	r7, [r2, #20]
 8008598:	6117      	str	r7, [r2, #16]
 800859a:	db05      	blt.n	80085a8 <_malloc_r+0x130>
 800859c:	4430      	add	r0, r6
 800859e:	6843      	ldr	r3, [r0, #4]
 80085a0:	f043 0301 	orr.w	r3, r3, #1
 80085a4:	6043      	str	r3, [r0, #4]
 80085a6:	e170      	b.n	800888a <_malloc_r+0x412>
 80085a8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80085ac:	d215      	bcs.n	80085da <_malloc_r+0x162>
 80085ae:	08c0      	lsrs	r0, r0, #3
 80085b0:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 80085b4:	2701      	movs	r7, #1
 80085b6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80085ba:	6857      	ldr	r7, [r2, #4]
 80085bc:	3001      	adds	r0, #1
 80085be:	ea4e 0707 	orr.w	r7, lr, r7
 80085c2:	6057      	str	r7, [r2, #4]
 80085c4:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 80085c8:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 80085cc:	f8c6 e008 	str.w	lr, [r6, #8]
 80085d0:	3f08      	subs	r7, #8
 80085d2:	60f7      	str	r7, [r6, #12]
 80085d4:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 80085d8:	e03d      	b.n	8008656 <_malloc_r+0x1de>
 80085da:	0a42      	lsrs	r2, r0, #9
 80085dc:	2a04      	cmp	r2, #4
 80085de:	d802      	bhi.n	80085e6 <_malloc_r+0x16e>
 80085e0:	0982      	lsrs	r2, r0, #6
 80085e2:	3238      	adds	r2, #56	; 0x38
 80085e4:	e015      	b.n	8008612 <_malloc_r+0x19a>
 80085e6:	2a14      	cmp	r2, #20
 80085e8:	d801      	bhi.n	80085ee <_malloc_r+0x176>
 80085ea:	325b      	adds	r2, #91	; 0x5b
 80085ec:	e011      	b.n	8008612 <_malloc_r+0x19a>
 80085ee:	2a54      	cmp	r2, #84	; 0x54
 80085f0:	d802      	bhi.n	80085f8 <_malloc_r+0x180>
 80085f2:	0b02      	lsrs	r2, r0, #12
 80085f4:	326e      	adds	r2, #110	; 0x6e
 80085f6:	e00c      	b.n	8008612 <_malloc_r+0x19a>
 80085f8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80085fc:	d802      	bhi.n	8008604 <_malloc_r+0x18c>
 80085fe:	0bc2      	lsrs	r2, r0, #15
 8008600:	3277      	adds	r2, #119	; 0x77
 8008602:	e006      	b.n	8008612 <_malloc_r+0x19a>
 8008604:	f240 5754 	movw	r7, #1364	; 0x554
 8008608:	42ba      	cmp	r2, r7
 800860a:	bf9a      	itte	ls
 800860c:	0c82      	lsrls	r2, r0, #18
 800860e:	327c      	addls	r2, #124	; 0x7c
 8008610:	227e      	movhi	r2, #126	; 0x7e
 8008612:	1c57      	adds	r7, r2, #1
 8008614:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8008618:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800861c:	f8df c104 	ldr.w	ip, [pc, #260]	; 8008724 <_malloc_r+0x2ac>
 8008620:	45be      	cmp	lr, r7
 8008622:	d10d      	bne.n	8008640 <_malloc_r+0x1c8>
 8008624:	2001      	movs	r0, #1
 8008626:	1092      	asrs	r2, r2, #2
 8008628:	fa00 f202 	lsl.w	r2, r0, r2
 800862c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8008630:	4310      	orrs	r0, r2
 8008632:	f8cc 0004 	str.w	r0, [ip, #4]
 8008636:	4672      	mov	r2, lr
 8008638:	e009      	b.n	800864e <_malloc_r+0x1d6>
 800863a:	68bf      	ldr	r7, [r7, #8]
 800863c:	45be      	cmp	lr, r7
 800863e:	d004      	beq.n	800864a <_malloc_r+0x1d2>
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	f022 0203 	bic.w	r2, r2, #3
 8008646:	4290      	cmp	r0, r2
 8008648:	d3f7      	bcc.n	800863a <_malloc_r+0x1c2>
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	46be      	mov	lr, r7
 800864e:	60f2      	str	r2, [r6, #12]
 8008650:	f8c6 e008 	str.w	lr, [r6, #8]
 8008654:	6096      	str	r6, [r2, #8]
 8008656:	f8ce 600c 	str.w	r6, [lr, #12]
 800865a:	2001      	movs	r0, #1
 800865c:	109a      	asrs	r2, r3, #2
 800865e:	fa00 f202 	lsl.w	r2, r0, r2
 8008662:	6868      	ldr	r0, [r5, #4]
 8008664:	4282      	cmp	r2, r0
 8008666:	d85f      	bhi.n	8008728 <_malloc_r+0x2b0>
 8008668:	4202      	tst	r2, r0
 800866a:	d106      	bne.n	800867a <_malloc_r+0x202>
 800866c:	f023 0303 	bic.w	r3, r3, #3
 8008670:	0052      	lsls	r2, r2, #1
 8008672:	4202      	tst	r2, r0
 8008674:	f103 0304 	add.w	r3, r3, #4
 8008678:	d0fa      	beq.n	8008670 <_malloc_r+0x1f8>
 800867a:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 800867e:	46c2      	mov	sl, r8
 8008680:	469c      	mov	ip, r3
 8008682:	f8da 600c 	ldr.w	r6, [sl, #12]
 8008686:	4556      	cmp	r6, sl
 8008688:	d02c      	beq.n	80086e4 <_malloc_r+0x26c>
 800868a:	6870      	ldr	r0, [r6, #4]
 800868c:	68f7      	ldr	r7, [r6, #12]
 800868e:	f020 0003 	bic.w	r0, r0, #3
 8008692:	ebc4 0e00 	rsb	lr, r4, r0
 8008696:	f1be 0f0f 	cmp.w	lr, #15
 800869a:	dd11      	ble.n	80086c0 <_malloc_r+0x248>
 800869c:	1933      	adds	r3, r6, r4
 800869e:	f044 0401 	orr.w	r4, r4, #1
 80086a2:	6074      	str	r4, [r6, #4]
 80086a4:	f856 2f08 	ldr.w	r2, [r6, #8]!
 80086a8:	60d7      	str	r7, [r2, #12]
 80086aa:	60ba      	str	r2, [r7, #8]
 80086ac:	f04e 0201 	orr.w	r2, lr, #1
 80086b0:	616b      	str	r3, [r5, #20]
 80086b2:	612b      	str	r3, [r5, #16]
 80086b4:	60d9      	str	r1, [r3, #12]
 80086b6:	6099      	str	r1, [r3, #8]
 80086b8:	605a      	str	r2, [r3, #4]
 80086ba:	f843 e00e 	str.w	lr, [r3, lr]
 80086be:	e00b      	b.n	80086d8 <_malloc_r+0x260>
 80086c0:	f1be 0f00 	cmp.w	lr, #0
 80086c4:	db0c      	blt.n	80086e0 <_malloc_r+0x268>
 80086c6:	1833      	adds	r3, r6, r0
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	f042 0201 	orr.w	r2, r2, #1
 80086ce:	605a      	str	r2, [r3, #4]
 80086d0:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80086d4:	60df      	str	r7, [r3, #12]
 80086d6:	60bb      	str	r3, [r7, #8]
 80086d8:	4648      	mov	r0, r9
 80086da:	f000 f8f9 	bl	80088d0 <__malloc_unlock>
 80086de:	e0d8      	b.n	8008892 <_malloc_r+0x41a>
 80086e0:	463e      	mov	r6, r7
 80086e2:	e7d0      	b.n	8008686 <_malloc_r+0x20e>
 80086e4:	f10c 0c01 	add.w	ip, ip, #1
 80086e8:	f01c 0f03 	tst.w	ip, #3
 80086ec:	f10a 0a08 	add.w	sl, sl, #8
 80086f0:	d1c7      	bne.n	8008682 <_malloc_r+0x20a>
 80086f2:	0798      	lsls	r0, r3, #30
 80086f4:	d104      	bne.n	8008700 <_malloc_r+0x288>
 80086f6:	686b      	ldr	r3, [r5, #4]
 80086f8:	ea23 0302 	bic.w	r3, r3, r2
 80086fc:	606b      	str	r3, [r5, #4]
 80086fe:	e005      	b.n	800870c <_malloc_r+0x294>
 8008700:	f858 0908 	ldr.w	r0, [r8], #-8
 8008704:	4580      	cmp	r8, r0
 8008706:	f103 33ff 	add.w	r3, r3, #4294967295
 800870a:	d0f2      	beq.n	80086f2 <_malloc_r+0x27a>
 800870c:	6868      	ldr	r0, [r5, #4]
 800870e:	0052      	lsls	r2, r2, #1
 8008710:	4282      	cmp	r2, r0
 8008712:	d809      	bhi.n	8008728 <_malloc_r+0x2b0>
 8008714:	b142      	cbz	r2, 8008728 <_malloc_r+0x2b0>
 8008716:	4663      	mov	r3, ip
 8008718:	4202      	tst	r2, r0
 800871a:	d1ae      	bne.n	800867a <_malloc_r+0x202>
 800871c:	3304      	adds	r3, #4
 800871e:	0052      	lsls	r2, r2, #1
 8008720:	e7fa      	b.n	8008718 <_malloc_r+0x2a0>
 8008722:	bf00      	nop
 8008724:	20000158 	.word	0x20000158
 8008728:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800872c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8008730:	f026 0603 	bic.w	r6, r6, #3
 8008734:	42b4      	cmp	r4, r6
 8008736:	d803      	bhi.n	8008740 <_malloc_r+0x2c8>
 8008738:	1b33      	subs	r3, r6, r4
 800873a:	2b0f      	cmp	r3, #15
 800873c:	f300 809c 	bgt.w	8008878 <_malloc_r+0x400>
 8008740:	4a56      	ldr	r2, [pc, #344]	; (800889c <_malloc_r+0x424>)
 8008742:	4957      	ldr	r1, [pc, #348]	; (80088a0 <_malloc_r+0x428>)
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	6808      	ldr	r0, [r1, #0]
 8008748:	9101      	str	r1, [sp, #4]
 800874a:	f102 0810 	add.w	r8, r2, #16
 800874e:	4a55      	ldr	r2, [pc, #340]	; (80088a4 <_malloc_r+0x42c>)
 8008750:	9203      	str	r2, [sp, #12]
 8008752:	3001      	adds	r0, #1
 8008754:	bf18      	it	ne
 8008756:	f102 31ff 	addne.w	r1, r2, #4294967295
 800875a:	44a0      	add	r8, r4
 800875c:	bf1e      	ittt	ne
 800875e:	4488      	addne	r8, r1
 8008760:	4251      	negne	r1, r2
 8008762:	ea01 0808 	andne.w	r8, r1, r8
 8008766:	eb0b 0306 	add.w	r3, fp, r6
 800876a:	4641      	mov	r1, r8
 800876c:	4648      	mov	r0, r9
 800876e:	9302      	str	r3, [sp, #8]
 8008770:	f000 f8b0 	bl	80088d4 <_sbrk_r>
 8008774:	1c42      	adds	r2, r0, #1
 8008776:	4607      	mov	r7, r0
 8008778:	d06f      	beq.n	800885a <_malloc_r+0x3e2>
 800877a:	9b02      	ldr	r3, [sp, #8]
 800877c:	9a03      	ldr	r2, [sp, #12]
 800877e:	4283      	cmp	r3, r0
 8008780:	d901      	bls.n	8008786 <_malloc_r+0x30e>
 8008782:	45ab      	cmp	fp, r5
 8008784:	d169      	bne.n	800885a <_malloc_r+0x3e2>
 8008786:	f8df a128 	ldr.w	sl, [pc, #296]	; 80088b0 <_malloc_r+0x438>
 800878a:	f8df c128 	ldr.w	ip, [pc, #296]	; 80088b4 <_malloc_r+0x43c>
 800878e:	f8da 0000 	ldr.w	r0, [sl]
 8008792:	42bb      	cmp	r3, r7
 8008794:	4440      	add	r0, r8
 8008796:	f8ca 0000 	str.w	r0, [sl]
 800879a:	d108      	bne.n	80087ae <_malloc_r+0x336>
 800879c:	ea13 0f0c 	tst.w	r3, ip
 80087a0:	d105      	bne.n	80087ae <_malloc_r+0x336>
 80087a2:	68ab      	ldr	r3, [r5, #8]
 80087a4:	4446      	add	r6, r8
 80087a6:	f046 0601 	orr.w	r6, r6, #1
 80087aa:	605e      	str	r6, [r3, #4]
 80087ac:	e049      	b.n	8008842 <_malloc_r+0x3ca>
 80087ae:	9901      	ldr	r1, [sp, #4]
 80087b0:	f8d1 e000 	ldr.w	lr, [r1]
 80087b4:	f1be 3fff 	cmp.w	lr, #4294967295
 80087b8:	bf15      	itete	ne
 80087ba:	1afb      	subne	r3, r7, r3
 80087bc:	4b38      	ldreq	r3, [pc, #224]	; (80088a0 <_malloc_r+0x428>)
 80087be:	181b      	addne	r3, r3, r0
 80087c0:	601f      	streq	r7, [r3, #0]
 80087c2:	bf18      	it	ne
 80087c4:	f8ca 3000 	strne.w	r3, [sl]
 80087c8:	f017 0307 	ands.w	r3, r7, #7
 80087cc:	bf1c      	itt	ne
 80087ce:	f1c3 0308 	rsbne	r3, r3, #8
 80087d2:	18ff      	addne	r7, r7, r3
 80087d4:	44b8      	add	r8, r7
 80087d6:	441a      	add	r2, r3
 80087d8:	ea08 080c 	and.w	r8, r8, ip
 80087dc:	ebc8 0802 	rsb	r8, r8, r2
 80087e0:	4641      	mov	r1, r8
 80087e2:	4648      	mov	r0, r9
 80087e4:	f000 f876 	bl	80088d4 <_sbrk_r>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	bf04      	itt	eq
 80087ec:	4638      	moveq	r0, r7
 80087ee:	f04f 0800 	moveq.w	r8, #0
 80087f2:	f8da 3000 	ldr.w	r3, [sl]
 80087f6:	60af      	str	r7, [r5, #8]
 80087f8:	1bc2      	subs	r2, r0, r7
 80087fa:	4442      	add	r2, r8
 80087fc:	4443      	add	r3, r8
 80087fe:	f042 0201 	orr.w	r2, r2, #1
 8008802:	45ab      	cmp	fp, r5
 8008804:	f8ca 3000 	str.w	r3, [sl]
 8008808:	607a      	str	r2, [r7, #4]
 800880a:	d01a      	beq.n	8008842 <_malloc_r+0x3ca>
 800880c:	2e0f      	cmp	r6, #15
 800880e:	d802      	bhi.n	8008816 <_malloc_r+0x39e>
 8008810:	2301      	movs	r3, #1
 8008812:	607b      	str	r3, [r7, #4]
 8008814:	e021      	b.n	800885a <_malloc_r+0x3e2>
 8008816:	f8db 3004 	ldr.w	r3, [fp, #4]
 800881a:	3e0c      	subs	r6, #12
 800881c:	f026 0607 	bic.w	r6, r6, #7
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	4333      	orrs	r3, r6
 8008826:	f8cb 3004 	str.w	r3, [fp, #4]
 800882a:	eb0b 0306 	add.w	r3, fp, r6
 800882e:	2205      	movs	r2, #5
 8008830:	2e0f      	cmp	r6, #15
 8008832:	605a      	str	r2, [r3, #4]
 8008834:	609a      	str	r2, [r3, #8]
 8008836:	d904      	bls.n	8008842 <_malloc_r+0x3ca>
 8008838:	f10b 0108 	add.w	r1, fp, #8
 800883c:	4648      	mov	r0, r9
 800883e:	f001 fec9 	bl	800a5d4 <_free_r>
 8008842:	4a19      	ldr	r2, [pc, #100]	; (80088a8 <_malloc_r+0x430>)
 8008844:	f8da 3000 	ldr.w	r3, [sl]
 8008848:	6811      	ldr	r1, [r2, #0]
 800884a:	428b      	cmp	r3, r1
 800884c:	bf88      	it	hi
 800884e:	6013      	strhi	r3, [r2, #0]
 8008850:	4a16      	ldr	r2, [pc, #88]	; (80088ac <_malloc_r+0x434>)
 8008852:	6811      	ldr	r1, [r2, #0]
 8008854:	428b      	cmp	r3, r1
 8008856:	bf88      	it	hi
 8008858:	6013      	strhi	r3, [r2, #0]
 800885a:	68ab      	ldr	r3, [r5, #8]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	f022 0203 	bic.w	r2, r2, #3
 8008862:	4294      	cmp	r4, r2
 8008864:	eba2 0304 	sub.w	r3, r2, r4
 8008868:	d801      	bhi.n	800886e <_malloc_r+0x3f6>
 800886a:	2b0f      	cmp	r3, #15
 800886c:	dc04      	bgt.n	8008878 <_malloc_r+0x400>
 800886e:	4648      	mov	r0, r9
 8008870:	f000 f82e 	bl	80088d0 <__malloc_unlock>
 8008874:	2600      	movs	r6, #0
 8008876:	e00c      	b.n	8008892 <_malloc_r+0x41a>
 8008878:	68ae      	ldr	r6, [r5, #8]
 800887a:	f044 0201 	orr.w	r2, r4, #1
 800887e:	4434      	add	r4, r6
 8008880:	f043 0301 	orr.w	r3, r3, #1
 8008884:	6072      	str	r2, [r6, #4]
 8008886:	60ac      	str	r4, [r5, #8]
 8008888:	6063      	str	r3, [r4, #4]
 800888a:	4648      	mov	r0, r9
 800888c:	f000 f820 	bl	80088d0 <__malloc_unlock>
 8008890:	3608      	adds	r6, #8
 8008892:	4630      	mov	r0, r6
 8008894:	b005      	add	sp, #20
 8008896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800889a:	bf00      	nop
 800889c:	200008e0 	.word	0x200008e0
 80088a0:	20000564 	.word	0x20000564
 80088a4:	00000080 	.word	0x00000080
 80088a8:	200008dc 	.word	0x200008dc
 80088ac:	200008d8 	.word	0x200008d8
 80088b0:	200008e4 	.word	0x200008e4
 80088b4:	0000007f 	.word	0x0000007f

080088b8 <memcpy>:
 80088b8:	b510      	push	{r4, lr}
 80088ba:	1e43      	subs	r3, r0, #1
 80088bc:	440a      	add	r2, r1
 80088be:	4291      	cmp	r1, r2
 80088c0:	d004      	beq.n	80088cc <memcpy+0x14>
 80088c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ca:	e7f8      	b.n	80088be <memcpy+0x6>
 80088cc:	bd10      	pop	{r4, pc}

080088ce <__malloc_lock>:
 80088ce:	4770      	bx	lr

080088d0 <__malloc_unlock>:
 80088d0:	4770      	bx	lr
	...

080088d4 <_sbrk_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4c06      	ldr	r4, [pc, #24]	; (80088f0 <_sbrk_r+0x1c>)
 80088d8:	2300      	movs	r3, #0
 80088da:	4605      	mov	r5, r0
 80088dc:	4608      	mov	r0, r1
 80088de:	6023      	str	r3, [r4, #0]
 80088e0:	f002 fc88 	bl	800b1f4 <_sbrk>
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	d102      	bne.n	80088ee <_sbrk_r+0x1a>
 80088e8:	6823      	ldr	r3, [r4, #0]
 80088ea:	b103      	cbz	r3, 80088ee <_sbrk_r+0x1a>
 80088ec:	602b      	str	r3, [r5, #0]
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
 80088f0:	200011b8 	.word	0x200011b8

080088f4 <sprintf>:
 80088f4:	b40e      	push	{r1, r2, r3}
 80088f6:	b500      	push	{lr}
 80088f8:	b09c      	sub	sp, #112	; 0x70
 80088fa:	f44f 7102 	mov.w	r1, #520	; 0x208
 80088fe:	ab1d      	add	r3, sp, #116	; 0x74
 8008900:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008904:	9002      	str	r0, [sp, #8]
 8008906:	9006      	str	r0, [sp, #24]
 8008908:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800890c:	480a      	ldr	r0, [pc, #40]	; (8008938 <sprintf+0x44>)
 800890e:	9104      	str	r1, [sp, #16]
 8008910:	9107      	str	r1, [sp, #28]
 8008912:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008916:	f853 2b04 	ldr.w	r2, [r3], #4
 800891a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800891e:	6800      	ldr	r0, [r0, #0]
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	a902      	add	r1, sp, #8
 8008924:	f000 f80c 	bl	8008940 <_svfprintf_r>
 8008928:	9b02      	ldr	r3, [sp, #8]
 800892a:	2200      	movs	r2, #0
 800892c:	701a      	strb	r2, [r3, #0]
 800892e:	b01c      	add	sp, #112	; 0x70
 8008930:	f85d eb04 	ldr.w	lr, [sp], #4
 8008934:	b003      	add	sp, #12
 8008936:	4770      	bx	lr
 8008938:	20000658 	.word	0x20000658
 800893c:	00000000 	.word	0x00000000

08008940 <_svfprintf_r>:
 8008940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008944:	b0bd      	sub	sp, #244	; 0xf4
 8008946:	468b      	mov	fp, r1
 8008948:	9205      	str	r2, [sp, #20]
 800894a:	461f      	mov	r7, r3
 800894c:	4682      	mov	sl, r0
 800894e:	f001 feff 	bl	800a750 <_localeconv_r>
 8008952:	6803      	ldr	r3, [r0, #0]
 8008954:	930d      	str	r3, [sp, #52]	; 0x34
 8008956:	4618      	mov	r0, r3
 8008958:	f7f7 fc8a 	bl	8000270 <strlen>
 800895c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008960:	9008      	str	r0, [sp, #32]
 8008962:	0619      	lsls	r1, r3, #24
 8008964:	d515      	bpl.n	8008992 <_svfprintf_r+0x52>
 8008966:	f8db 3010 	ldr.w	r3, [fp, #16]
 800896a:	b993      	cbnz	r3, 8008992 <_svfprintf_r+0x52>
 800896c:	2140      	movs	r1, #64	; 0x40
 800896e:	4650      	mov	r0, sl
 8008970:	f7ff fd82 	bl	8008478 <_malloc_r>
 8008974:	f8cb 0000 	str.w	r0, [fp]
 8008978:	f8cb 0010 	str.w	r0, [fp, #16]
 800897c:	b930      	cbnz	r0, 800898c <_svfprintf_r+0x4c>
 800897e:	230c      	movs	r3, #12
 8008980:	f8ca 3000 	str.w	r3, [sl]
 8008984:	f04f 30ff 	mov.w	r0, #4294967295
 8008988:	f000 bf95 	b.w	80098b6 <_svfprintf_r+0xf76>
 800898c:	2340      	movs	r3, #64	; 0x40
 800898e:	f8cb 3014 	str.w	r3, [fp, #20]
 8008992:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8008bf8 <_svfprintf_r+0x2b8>
 8008996:	ed8d 7b06 	vstr	d7, [sp, #24]
 800899a:	2300      	movs	r3, #0
 800899c:	ac2c      	add	r4, sp, #176	; 0xb0
 800899e:	941f      	str	r4, [sp, #124]	; 0x7c
 80089a0:	9321      	str	r3, [sp, #132]	; 0x84
 80089a2:	9320      	str	r3, [sp, #128]	; 0x80
 80089a4:	9304      	str	r3, [sp, #16]
 80089a6:	9311      	str	r3, [sp, #68]	; 0x44
 80089a8:	9310      	str	r3, [sp, #64]	; 0x40
 80089aa:	930a      	str	r3, [sp, #40]	; 0x28
 80089ac:	9d05      	ldr	r5, [sp, #20]
 80089ae:	462b      	mov	r3, r5
 80089b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089b4:	b11a      	cbz	r2, 80089be <_svfprintf_r+0x7e>
 80089b6:	2a25      	cmp	r2, #37	; 0x25
 80089b8:	d001      	beq.n	80089be <_svfprintf_r+0x7e>
 80089ba:	461d      	mov	r5, r3
 80089bc:	e7f7      	b.n	80089ae <_svfprintf_r+0x6e>
 80089be:	9b05      	ldr	r3, [sp, #20]
 80089c0:	1aee      	subs	r6, r5, r3
 80089c2:	d017      	beq.n	80089f4 <_svfprintf_r+0xb4>
 80089c4:	e884 0048 	stmia.w	r4, {r3, r6}
 80089c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089ca:	4433      	add	r3, r6
 80089cc:	9321      	str	r3, [sp, #132]	; 0x84
 80089ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80089d0:	3301      	adds	r3, #1
 80089d2:	2b07      	cmp	r3, #7
 80089d4:	9320      	str	r3, [sp, #128]	; 0x80
 80089d6:	dc01      	bgt.n	80089dc <_svfprintf_r+0x9c>
 80089d8:	3408      	adds	r4, #8
 80089da:	e008      	b.n	80089ee <_svfprintf_r+0xae>
 80089dc:	aa1f      	add	r2, sp, #124	; 0x7c
 80089de:	4659      	mov	r1, fp
 80089e0:	4650      	mov	r0, sl
 80089e2:	f002 f98f 	bl	800ad04 <__ssprint_r>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	f040 862c 	bne.w	8009644 <_svfprintf_r+0xd04>
 80089ec:	ac2c      	add	r4, sp, #176	; 0xb0
 80089ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f0:	4433      	add	r3, r6
 80089f2:	930a      	str	r3, [sp, #40]	; 0x28
 80089f4:	782b      	ldrb	r3, [r5, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 861d 	beq.w	8009636 <_svfprintf_r+0xcf6>
 80089fc:	2200      	movs	r2, #0
 80089fe:	1c6b      	adds	r3, r5, #1
 8008a00:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008a04:	4611      	mov	r1, r2
 8008a06:	f04f 39ff 	mov.w	r9, #4294967295
 8008a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a0c:	4615      	mov	r5, r2
 8008a0e:	200a      	movs	r0, #10
 8008a10:	1c5e      	adds	r6, r3, #1
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	9605      	str	r6, [sp, #20]
 8008a16:	9302      	str	r3, [sp, #8]
 8008a18:	9b02      	ldr	r3, [sp, #8]
 8008a1a:	3b20      	subs	r3, #32
 8008a1c:	2b58      	cmp	r3, #88	; 0x58
 8008a1e:	f200 8263 	bhi.w	8008ee8 <_svfprintf_r+0x5a8>
 8008a22:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008a26:	005c      	.short	0x005c
 8008a28:	02610261 	.word	0x02610261
 8008a2c:	0261006b 	.word	0x0261006b
 8008a30:	02610261 	.word	0x02610261
 8008a34:	02610261 	.word	0x02610261
 8008a38:	006e0261 	.word	0x006e0261
 8008a3c:	02610059 	.word	0x02610059
 8008a40:	007c0079 	.word	0x007c0079
 8008a44:	00a30261 	.word	0x00a30261
 8008a48:	00a600a6 	.word	0x00a600a6
 8008a4c:	00a600a6 	.word	0x00a600a6
 8008a50:	00a600a6 	.word	0x00a600a6
 8008a54:	00a600a6 	.word	0x00a600a6
 8008a58:	026100a6 	.word	0x026100a6
 8008a5c:	02610261 	.word	0x02610261
 8008a60:	02610261 	.word	0x02610261
 8008a64:	02610261 	.word	0x02610261
 8008a68:	02610261 	.word	0x02610261
 8008a6c:	00d60261 	.word	0x00d60261
 8008a70:	0261010b 	.word	0x0261010b
 8008a74:	0261010b 	.word	0x0261010b
 8008a78:	02610261 	.word	0x02610261
 8008a7c:	00b90261 	.word	0x00b90261
 8008a80:	02610261 	.word	0x02610261
 8008a84:	02610152 	.word	0x02610152
 8008a88:	02610261 	.word	0x02610261
 8008a8c:	02610261 	.word	0x02610261
 8008a90:	02610199 	.word	0x02610199
 8008a94:	00660261 	.word	0x00660261
 8008a98:	02610261 	.word	0x02610261
 8008a9c:	02610261 	.word	0x02610261
 8008aa0:	02610261 	.word	0x02610261
 8008aa4:	02610261 	.word	0x02610261
 8008aa8:	02610261 	.word	0x02610261
 8008aac:	006100cd 	.word	0x006100cd
 8008ab0:	010b010b 	.word	0x010b010b
 8008ab4:	00bc010b 	.word	0x00bc010b
 8008ab8:	02610061 	.word	0x02610061
 8008abc:	00bf0261 	.word	0x00bf0261
 8008ac0:	01340261 	.word	0x01340261
 8008ac4:	016f0154 	.word	0x016f0154
 8008ac8:	026100ca 	.word	0x026100ca
 8008acc:	02610180 	.word	0x02610180
 8008ad0:	0261019b 	.word	0x0261019b
 8008ad4:	01b30261 	.word	0x01b30261
 8008ad8:	2201      	movs	r2, #1
 8008ada:	212b      	movs	r1, #43	; 0x2b
 8008adc:	e002      	b.n	8008ae4 <_svfprintf_r+0x1a4>
 8008ade:	b909      	cbnz	r1, 8008ae4 <_svfprintf_r+0x1a4>
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	2120      	movs	r1, #32
 8008ae4:	9b05      	ldr	r3, [sp, #20]
 8008ae6:	e793      	b.n	8008a10 <_svfprintf_r+0xd0>
 8008ae8:	2a00      	cmp	r2, #0
 8008aea:	d077      	beq.n	8008bdc <_svfprintf_r+0x29c>
 8008aec:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8008af0:	e074      	b.n	8008bdc <_svfprintf_r+0x29c>
 8008af2:	b10a      	cbz	r2, 8008af8 <_svfprintf_r+0x1b8>
 8008af4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8008af8:	4b41      	ldr	r3, [pc, #260]	; (8008c00 <_svfprintf_r+0x2c0>)
 8008afa:	e14b      	b.n	8008d94 <_svfprintf_r+0x454>
 8008afc:	f045 0501 	orr.w	r5, r5, #1
 8008b00:	e7f0      	b.n	8008ae4 <_svfprintf_r+0x1a4>
 8008b02:	683e      	ldr	r6, [r7, #0]
 8008b04:	9609      	str	r6, [sp, #36]	; 0x24
 8008b06:	2e00      	cmp	r6, #0
 8008b08:	f107 0304 	add.w	r3, r7, #4
 8008b0c:	db01      	blt.n	8008b12 <_svfprintf_r+0x1d2>
 8008b0e:	461f      	mov	r7, r3
 8008b10:	e7e8      	b.n	8008ae4 <_svfprintf_r+0x1a4>
 8008b12:	4276      	negs	r6, r6
 8008b14:	9609      	str	r6, [sp, #36]	; 0x24
 8008b16:	461f      	mov	r7, r3
 8008b18:	f045 0504 	orr.w	r5, r5, #4
 8008b1c:	e7e2      	b.n	8008ae4 <_svfprintf_r+0x1a4>
 8008b1e:	9e05      	ldr	r6, [sp, #20]
 8008b20:	9b05      	ldr	r3, [sp, #20]
 8008b22:	7836      	ldrb	r6, [r6, #0]
 8008b24:	9602      	str	r6, [sp, #8]
 8008b26:	2e2a      	cmp	r6, #42	; 0x2a
 8008b28:	f103 0301 	add.w	r3, r3, #1
 8008b2c:	d002      	beq.n	8008b34 <_svfprintf_r+0x1f4>
 8008b2e:	f04f 0900 	mov.w	r9, #0
 8008b32:	e00a      	b.n	8008b4a <_svfprintf_r+0x20a>
 8008b34:	f8d7 9000 	ldr.w	r9, [r7]
 8008b38:	9305      	str	r3, [sp, #20]
 8008b3a:	1d3e      	adds	r6, r7, #4
 8008b3c:	f1b9 0f00 	cmp.w	r9, #0
 8008b40:	4637      	mov	r7, r6
 8008b42:	dacf      	bge.n	8008ae4 <_svfprintf_r+0x1a4>
 8008b44:	f04f 39ff 	mov.w	r9, #4294967295
 8008b48:	e7cc      	b.n	8008ae4 <_svfprintf_r+0x1a4>
 8008b4a:	9305      	str	r3, [sp, #20]
 8008b4c:	9b02      	ldr	r3, [sp, #8]
 8008b4e:	3b30      	subs	r3, #48	; 0x30
 8008b50:	2b09      	cmp	r3, #9
 8008b52:	d808      	bhi.n	8008b66 <_svfprintf_r+0x226>
 8008b54:	fb00 3909 	mla	r9, r0, r9, r3
 8008b58:	9b05      	ldr	r3, [sp, #20]
 8008b5a:	461e      	mov	r6, r3
 8008b5c:	f816 3b01 	ldrb.w	r3, [r6], #1
 8008b60:	9302      	str	r3, [sp, #8]
 8008b62:	4633      	mov	r3, r6
 8008b64:	e7f1      	b.n	8008b4a <_svfprintf_r+0x20a>
 8008b66:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8008b6a:	e755      	b.n	8008a18 <_svfprintf_r+0xd8>
 8008b6c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8008b70:	e7b8      	b.n	8008ae4 <_svfprintf_r+0x1a4>
 8008b72:	2300      	movs	r3, #0
 8008b74:	9309      	str	r3, [sp, #36]	; 0x24
 8008b76:	9b02      	ldr	r3, [sp, #8]
 8008b78:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b7a:	3b30      	subs	r3, #48	; 0x30
 8008b7c:	fb00 3306 	mla	r3, r0, r6, r3
 8008b80:	9309      	str	r3, [sp, #36]	; 0x24
 8008b82:	9b05      	ldr	r3, [sp, #20]
 8008b84:	461e      	mov	r6, r3
 8008b86:	f816 3b01 	ldrb.w	r3, [r6], #1
 8008b8a:	9302      	str	r3, [sp, #8]
 8008b8c:	9b02      	ldr	r3, [sp, #8]
 8008b8e:	9605      	str	r6, [sp, #20]
 8008b90:	3b30      	subs	r3, #48	; 0x30
 8008b92:	2b09      	cmp	r3, #9
 8008b94:	d9ef      	bls.n	8008b76 <_svfprintf_r+0x236>
 8008b96:	e73f      	b.n	8008a18 <_svfprintf_r+0xd8>
 8008b98:	f045 0508 	orr.w	r5, r5, #8
 8008b9c:	e7a2      	b.n	8008ae4 <_svfprintf_r+0x1a4>
 8008b9e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8008ba2:	e79f      	b.n	8008ae4 <_svfprintf_r+0x1a4>
 8008ba4:	9b05      	ldr	r3, [sp, #20]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b6c      	cmp	r3, #108	; 0x6c
 8008baa:	d103      	bne.n	8008bb4 <_svfprintf_r+0x274>
 8008bac:	9b05      	ldr	r3, [sp, #20]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	9305      	str	r3, [sp, #20]
 8008bb2:	e002      	b.n	8008bba <_svfprintf_r+0x27a>
 8008bb4:	f045 0510 	orr.w	r5, r5, #16
 8008bb8:	e794      	b.n	8008ae4 <_svfprintf_r+0x1a4>
 8008bba:	f045 0520 	orr.w	r5, r5, #32
 8008bbe:	e791      	b.n	8008ae4 <_svfprintf_r+0x1a4>
 8008bc0:	1d3b      	adds	r3, r7, #4
 8008bc2:	9303      	str	r3, [sp, #12]
 8008bc4:	2600      	movs	r6, #0
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8008bcc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008bd0:	e199      	b.n	8008f06 <_svfprintf_r+0x5c6>
 8008bd2:	b10a      	cbz	r2, 8008bd8 <_svfprintf_r+0x298>
 8008bd4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8008bd8:	f045 0510 	orr.w	r5, r5, #16
 8008bdc:	06aa      	lsls	r2, r5, #26
 8008bde:	d511      	bpl.n	8008c04 <_svfprintf_r+0x2c4>
 8008be0:	3707      	adds	r7, #7
 8008be2:	f027 0707 	bic.w	r7, r7, #7
 8008be6:	f107 0308 	add.w	r3, r7, #8
 8008bea:	9303      	str	r3, [sp, #12]
 8008bec:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008bf0:	e017      	b.n	8008c22 <_svfprintf_r+0x2e2>
 8008bf2:	bf00      	nop
 8008bf4:	f3af 8000 	nop.w
	...
 8008c00:	0800b304 	.word	0x0800b304
 8008c04:	f015 0f10 	tst.w	r5, #16
 8008c08:	f107 0304 	add.w	r3, r7, #4
 8008c0c:	d002      	beq.n	8008c14 <_svfprintf_r+0x2d4>
 8008c0e:	9303      	str	r3, [sp, #12]
 8008c10:	683e      	ldr	r6, [r7, #0]
 8008c12:	e005      	b.n	8008c20 <_svfprintf_r+0x2e0>
 8008c14:	683e      	ldr	r6, [r7, #0]
 8008c16:	9303      	str	r3, [sp, #12]
 8008c18:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008c1c:	bf18      	it	ne
 8008c1e:	b236      	sxthne	r6, r6
 8008c20:	17f7      	asrs	r7, r6, #31
 8008c22:	2e00      	cmp	r6, #0
 8008c24:	f177 0300 	sbcs.w	r3, r7, #0
 8008c28:	f280 80de 	bge.w	8008de8 <_svfprintf_r+0x4a8>
 8008c2c:	4276      	negs	r6, r6
 8008c2e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8008c32:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8008c36:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8008c3a:	e0d5      	b.n	8008de8 <_svfprintf_r+0x4a8>
 8008c3c:	b10a      	cbz	r2, 8008c42 <_svfprintf_r+0x302>
 8008c3e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8008c42:	3707      	adds	r7, #7
 8008c44:	f027 0707 	bic.w	r7, r7, #7
 8008c48:	f107 0308 	add.w	r3, r7, #8
 8008c4c:	9303      	str	r3, [sp, #12]
 8008c4e:	ed97 7b00 	vldr	d7, [r7]
 8008c52:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c56:	9b06      	ldr	r3, [sp, #24]
 8008c58:	9312      	str	r3, [sp, #72]	; 0x48
 8008c5a:	9b07      	ldr	r3, [sp, #28]
 8008c5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c60:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c62:	f04f 32ff 	mov.w	r2, #4294967295
 8008c66:	4bab      	ldr	r3, [pc, #684]	; (8008f14 <_svfprintf_r+0x5d4>)
 8008c68:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008c6c:	f7f7 ff5a 	bl	8000b24 <__aeabi_dcmpun>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	f040 84f1 	bne.w	8009658 <_svfprintf_r+0xd18>
 8008c76:	f04f 32ff 	mov.w	r2, #4294967295
 8008c7a:	4ba6      	ldr	r3, [pc, #664]	; (8008f14 <_svfprintf_r+0x5d4>)
 8008c7c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008c80:	f7f7 ff32 	bl	8000ae8 <__aeabi_dcmple>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	f040 84e7 	bne.w	8009658 <_svfprintf_r+0xd18>
 8008c8a:	f000 bdfd 	b.w	8009888 <_svfprintf_r+0xf48>
 8008c8e:	b10a      	cbz	r2, 8008c94 <_svfprintf_r+0x354>
 8008c90:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8008c94:	f015 0f20 	tst.w	r5, #32
 8008c98:	f107 0304 	add.w	r3, r7, #4
 8008c9c:	d007      	beq.n	8008cae <_svfprintf_r+0x36e>
 8008c9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	17ce      	asrs	r6, r1, #31
 8008ca4:	4608      	mov	r0, r1
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	e9c2 0100 	strd	r0, r1, [r2]
 8008cac:	e00b      	b.n	8008cc6 <_svfprintf_r+0x386>
 8008cae:	06e9      	lsls	r1, r5, #27
 8008cb0:	d406      	bmi.n	8008cc0 <_svfprintf_r+0x380>
 8008cb2:	066a      	lsls	r2, r5, #25
 8008cb4:	d504      	bpl.n	8008cc0 <_svfprintf_r+0x380>
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8008cbc:	8011      	strh	r1, [r2, #0]
 8008cbe:	e002      	b.n	8008cc6 <_svfprintf_r+0x386>
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008cc4:	6011      	str	r1, [r2, #0]
 8008cc6:	461f      	mov	r7, r3
 8008cc8:	e670      	b.n	80089ac <_svfprintf_r+0x6c>
 8008cca:	f045 0510 	orr.w	r5, r5, #16
 8008cce:	f015 0320 	ands.w	r3, r5, #32
 8008cd2:	d009      	beq.n	8008ce8 <_svfprintf_r+0x3a8>
 8008cd4:	3707      	adds	r7, #7
 8008cd6:	f027 0707 	bic.w	r7, r7, #7
 8008cda:	f107 0308 	add.w	r3, r7, #8
 8008cde:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008ce2:	9303      	str	r3, [sp, #12]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	e07b      	b.n	8008de0 <_svfprintf_r+0x4a0>
 8008ce8:	1d3a      	adds	r2, r7, #4
 8008cea:	f015 0110 	ands.w	r1, r5, #16
 8008cee:	9203      	str	r2, [sp, #12]
 8008cf0:	d105      	bne.n	8008cfe <_svfprintf_r+0x3be>
 8008cf2:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8008cf6:	d002      	beq.n	8008cfe <_svfprintf_r+0x3be>
 8008cf8:	883e      	ldrh	r6, [r7, #0]
 8008cfa:	2700      	movs	r7, #0
 8008cfc:	e7f2      	b.n	8008ce4 <_svfprintf_r+0x3a4>
 8008cfe:	683e      	ldr	r6, [r7, #0]
 8008d00:	2700      	movs	r7, #0
 8008d02:	e06d      	b.n	8008de0 <_svfprintf_r+0x4a0>
 8008d04:	1d3b      	adds	r3, r7, #4
 8008d06:	9303      	str	r3, [sp, #12]
 8008d08:	2330      	movs	r3, #48	; 0x30
 8008d0a:	2278      	movs	r2, #120	; 0x78
 8008d0c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8008d10:	4b81      	ldr	r3, [pc, #516]	; (8008f18 <_svfprintf_r+0x5d8>)
 8008d12:	683e      	ldr	r6, [r7, #0]
 8008d14:	9311      	str	r3, [sp, #68]	; 0x44
 8008d16:	2700      	movs	r7, #0
 8008d18:	f045 0502 	orr.w	r5, r5, #2
 8008d1c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8008d20:	2302      	movs	r3, #2
 8008d22:	9202      	str	r2, [sp, #8]
 8008d24:	e05c      	b.n	8008de0 <_svfprintf_r+0x4a0>
 8008d26:	2600      	movs	r6, #0
 8008d28:	1d3b      	adds	r3, r7, #4
 8008d2a:	45b1      	cmp	r9, r6
 8008d2c:	9303      	str	r3, [sp, #12]
 8008d2e:	f8d7 8000 	ldr.w	r8, [r7]
 8008d32:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008d36:	db0a      	blt.n	8008d4e <_svfprintf_r+0x40e>
 8008d38:	464a      	mov	r2, r9
 8008d3a:	4631      	mov	r1, r6
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	f7f7 fa47 	bl	80001d0 <memchr>
 8008d42:	2800      	cmp	r0, #0
 8008d44:	f000 80ea 	beq.w	8008f1c <_svfprintf_r+0x5dc>
 8008d48:	ebc8 0900 	rsb	r9, r8, r0
 8008d4c:	e0e7      	b.n	8008f1e <_svfprintf_r+0x5de>
 8008d4e:	4640      	mov	r0, r8
 8008d50:	f7f7 fa8e 	bl	8000270 <strlen>
 8008d54:	4681      	mov	r9, r0
 8008d56:	e0e2      	b.n	8008f1e <_svfprintf_r+0x5de>
 8008d58:	f045 0510 	orr.w	r5, r5, #16
 8008d5c:	06ae      	lsls	r6, r5, #26
 8008d5e:	d508      	bpl.n	8008d72 <_svfprintf_r+0x432>
 8008d60:	3707      	adds	r7, #7
 8008d62:	f027 0707 	bic.w	r7, r7, #7
 8008d66:	f107 0308 	add.w	r3, r7, #8
 8008d6a:	9303      	str	r3, [sp, #12]
 8008d6c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008d70:	e00a      	b.n	8008d88 <_svfprintf_r+0x448>
 8008d72:	1d3b      	adds	r3, r7, #4
 8008d74:	f015 0f10 	tst.w	r5, #16
 8008d78:	9303      	str	r3, [sp, #12]
 8008d7a:	d103      	bne.n	8008d84 <_svfprintf_r+0x444>
 8008d7c:	0668      	lsls	r0, r5, #25
 8008d7e:	d501      	bpl.n	8008d84 <_svfprintf_r+0x444>
 8008d80:	883e      	ldrh	r6, [r7, #0]
 8008d82:	e000      	b.n	8008d86 <_svfprintf_r+0x446>
 8008d84:	683e      	ldr	r6, [r7, #0]
 8008d86:	2700      	movs	r7, #0
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e029      	b.n	8008de0 <_svfprintf_r+0x4a0>
 8008d8c:	b10a      	cbz	r2, 8008d92 <_svfprintf_r+0x452>
 8008d8e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8008d92:	4b61      	ldr	r3, [pc, #388]	; (8008f18 <_svfprintf_r+0x5d8>)
 8008d94:	9311      	str	r3, [sp, #68]	; 0x44
 8008d96:	06a9      	lsls	r1, r5, #26
 8008d98:	d508      	bpl.n	8008dac <_svfprintf_r+0x46c>
 8008d9a:	3707      	adds	r7, #7
 8008d9c:	f027 0707 	bic.w	r7, r7, #7
 8008da0:	f107 0308 	add.w	r3, r7, #8
 8008da4:	9303      	str	r3, [sp, #12]
 8008da6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008daa:	e00a      	b.n	8008dc2 <_svfprintf_r+0x482>
 8008dac:	1d3b      	adds	r3, r7, #4
 8008dae:	f015 0f10 	tst.w	r5, #16
 8008db2:	9303      	str	r3, [sp, #12]
 8008db4:	d103      	bne.n	8008dbe <_svfprintf_r+0x47e>
 8008db6:	066a      	lsls	r2, r5, #25
 8008db8:	d501      	bpl.n	8008dbe <_svfprintf_r+0x47e>
 8008dba:	883e      	ldrh	r6, [r7, #0]
 8008dbc:	e000      	b.n	8008dc0 <_svfprintf_r+0x480>
 8008dbe:	683e      	ldr	r6, [r7, #0]
 8008dc0:	2700      	movs	r7, #0
 8008dc2:	07eb      	lsls	r3, r5, #31
 8008dc4:	d50b      	bpl.n	8008dde <_svfprintf_r+0x49e>
 8008dc6:	ea56 0307 	orrs.w	r3, r6, r7
 8008dca:	d008      	beq.n	8008dde <_svfprintf_r+0x49e>
 8008dcc:	2330      	movs	r3, #48	; 0x30
 8008dce:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8008dd2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008dd6:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8008dda:	f045 0502 	orr.w	r5, r5, #2
 8008dde:	2302      	movs	r3, #2
 8008de0:	2200      	movs	r2, #0
 8008de2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008de6:	e000      	b.n	8008dea <_svfprintf_r+0x4aa>
 8008de8:	2301      	movs	r3, #1
 8008dea:	f1b9 0f00 	cmp.w	r9, #0
 8008dee:	f2c0 855c 	blt.w	80098aa <_svfprintf_r+0xf6a>
 8008df2:	ea56 0207 	orrs.w	r2, r6, r7
 8008df6:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8008dfa:	d103      	bne.n	8008e04 <_svfprintf_r+0x4c4>
 8008dfc:	f1b9 0f00 	cmp.w	r9, #0
 8008e00:	d05f      	beq.n	8008ec2 <_svfprintf_r+0x582>
 8008e02:	e006      	b.n	8008e12 <_svfprintf_r+0x4d2>
 8008e04:	460d      	mov	r5, r1
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d025      	beq.n	8008e56 <_svfprintf_r+0x516>
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d046      	beq.n	8008e9c <_svfprintf_r+0x55c>
 8008e0e:	4629      	mov	r1, r5
 8008e10:	e007      	b.n	8008e22 <_svfprintf_r+0x4e2>
 8008e12:	460d      	mov	r5, r1
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d022      	beq.n	8008e5e <_svfprintf_r+0x51e>
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d03d      	beq.n	8008e98 <_svfprintf_r+0x558>
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	2600      	movs	r6, #0
 8008e20:	2700      	movs	r7, #0
 8008e22:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8008e26:	08f2      	lsrs	r2, r6, #3
 8008e28:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8008e2c:	08f8      	lsrs	r0, r7, #3
 8008e2e:	f006 0307 	and.w	r3, r6, #7
 8008e32:	4607      	mov	r7, r0
 8008e34:	4616      	mov	r6, r2
 8008e36:	3330      	adds	r3, #48	; 0x30
 8008e38:	ea56 0207 	orrs.w	r2, r6, r7
 8008e3c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8008e40:	d1f1      	bne.n	8008e26 <_svfprintf_r+0x4e6>
 8008e42:	07e8      	lsls	r0, r5, #31
 8008e44:	d548      	bpl.n	8008ed8 <_svfprintf_r+0x598>
 8008e46:	2b30      	cmp	r3, #48	; 0x30
 8008e48:	d046      	beq.n	8008ed8 <_svfprintf_r+0x598>
 8008e4a:	2330      	movs	r3, #48	; 0x30
 8008e4c:	f808 3c01 	strb.w	r3, [r8, #-1]
 8008e50:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e54:	e040      	b.n	8008ed8 <_svfprintf_r+0x598>
 8008e56:	2f00      	cmp	r7, #0
 8008e58:	bf08      	it	eq
 8008e5a:	2e0a      	cmpeq	r6, #10
 8008e5c:	d205      	bcs.n	8008e6a <_svfprintf_r+0x52a>
 8008e5e:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8008e62:	3630      	adds	r6, #48	; 0x30
 8008e64:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8008e68:	e029      	b.n	8008ebe <_svfprintf_r+0x57e>
 8008e6a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8008e6e:	4630      	mov	r0, r6
 8008e70:	4639      	mov	r1, r7
 8008e72:	220a      	movs	r2, #10
 8008e74:	2300      	movs	r3, #0
 8008e76:	f7f7 fe93 	bl	8000ba0 <__aeabi_uldivmod>
 8008e7a:	3230      	adds	r2, #48	; 0x30
 8008e7c:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8008e80:	2300      	movs	r3, #0
 8008e82:	4630      	mov	r0, r6
 8008e84:	4639      	mov	r1, r7
 8008e86:	220a      	movs	r2, #10
 8008e88:	f7f7 fe8a 	bl	8000ba0 <__aeabi_uldivmod>
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	460f      	mov	r7, r1
 8008e90:	ea56 0307 	orrs.w	r3, r6, r7
 8008e94:	d1eb      	bne.n	8008e6e <_svfprintf_r+0x52e>
 8008e96:	e012      	b.n	8008ebe <_svfprintf_r+0x57e>
 8008e98:	2600      	movs	r6, #0
 8008e9a:	2700      	movs	r7, #0
 8008e9c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8008ea0:	f006 030f 	and.w	r3, r6, #15
 8008ea4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ea6:	5cd3      	ldrb	r3, [r2, r3]
 8008ea8:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8008eac:	0933      	lsrs	r3, r6, #4
 8008eae:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8008eb2:	093a      	lsrs	r2, r7, #4
 8008eb4:	461e      	mov	r6, r3
 8008eb6:	4617      	mov	r7, r2
 8008eb8:	ea56 0307 	orrs.w	r3, r6, r7
 8008ebc:	d1f0      	bne.n	8008ea0 <_svfprintf_r+0x560>
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	e00a      	b.n	8008ed8 <_svfprintf_r+0x598>
 8008ec2:	b93b      	cbnz	r3, 8008ed4 <_svfprintf_r+0x594>
 8008ec4:	07ea      	lsls	r2, r5, #31
 8008ec6:	d505      	bpl.n	8008ed4 <_svfprintf_r+0x594>
 8008ec8:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8008ecc:	2330      	movs	r3, #48	; 0x30
 8008ece:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8008ed2:	e001      	b.n	8008ed8 <_svfprintf_r+0x598>
 8008ed4:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8008ed8:	464e      	mov	r6, r9
 8008eda:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8008ede:	ebc8 0909 	rsb	r9, r8, r9
 8008ee2:	460d      	mov	r5, r1
 8008ee4:	2700      	movs	r7, #0
 8008ee6:	e01b      	b.n	8008f20 <_svfprintf_r+0x5e0>
 8008ee8:	b10a      	cbz	r2, 8008eee <_svfprintf_r+0x5ae>
 8008eea:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8008eee:	9b02      	ldr	r3, [sp, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 83a0 	beq.w	8009636 <_svfprintf_r+0xcf6>
 8008ef6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008efa:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8008efe:	2600      	movs	r6, #0
 8008f00:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008f04:	9703      	str	r7, [sp, #12]
 8008f06:	f04f 0901 	mov.w	r9, #1
 8008f0a:	4637      	mov	r7, r6
 8008f0c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8008f10:	e006      	b.n	8008f20 <_svfprintf_r+0x5e0>
 8008f12:	bf00      	nop
 8008f14:	7fefffff 	.word	0x7fefffff
 8008f18:	0800b315 	.word	0x0800b315
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	4637      	mov	r7, r6
 8008f20:	454e      	cmp	r6, r9
 8008f22:	4633      	mov	r3, r6
 8008f24:	bfb8      	it	lt
 8008f26:	464b      	movlt	r3, r9
 8008f28:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f2a:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8008f2e:	b113      	cbz	r3, 8008f36 <_svfprintf_r+0x5f6>
 8008f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f32:	3301      	adds	r3, #1
 8008f34:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f36:	f015 0302 	ands.w	r3, r5, #2
 8008f3a:	9314      	str	r3, [sp, #80]	; 0x50
 8008f3c:	bf1e      	ittt	ne
 8008f3e:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8008f40:	3302      	addne	r3, #2
 8008f42:	930b      	strne	r3, [sp, #44]	; 0x2c
 8008f44:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8008f48:	9315      	str	r3, [sp, #84]	; 0x54
 8008f4a:	d139      	bne.n	8008fc0 <_svfprintf_r+0x680>
 8008f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f50:	1a9b      	subs	r3, r3, r2
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	930c      	str	r3, [sp, #48]	; 0x30
 8008f56:	dd33      	ble.n	8008fc0 <_svfprintf_r+0x680>
 8008f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f5a:	2b10      	cmp	r3, #16
 8008f5c:	4ba6      	ldr	r3, [pc, #664]	; (80091f8 <_svfprintf_r+0x8b8>)
 8008f5e:	6023      	str	r3, [r4, #0]
 8008f60:	dd18      	ble.n	8008f94 <_svfprintf_r+0x654>
 8008f62:	2310      	movs	r3, #16
 8008f64:	6063      	str	r3, [r4, #4]
 8008f66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f68:	3310      	adds	r3, #16
 8008f6a:	9321      	str	r3, [sp, #132]	; 0x84
 8008f6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008f6e:	3301      	adds	r3, #1
 8008f70:	2b07      	cmp	r3, #7
 8008f72:	9320      	str	r3, [sp, #128]	; 0x80
 8008f74:	dc01      	bgt.n	8008f7a <_svfprintf_r+0x63a>
 8008f76:	3408      	adds	r4, #8
 8008f78:	e008      	b.n	8008f8c <_svfprintf_r+0x64c>
 8008f7a:	aa1f      	add	r2, sp, #124	; 0x7c
 8008f7c:	4659      	mov	r1, fp
 8008f7e:	4650      	mov	r0, sl
 8008f80:	f001 fec0 	bl	800ad04 <__ssprint_r>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	f040 835d 	bne.w	8009644 <_svfprintf_r+0xd04>
 8008f8a:	ac2c      	add	r4, sp, #176	; 0xb0
 8008f8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f8e:	3b10      	subs	r3, #16
 8008f90:	930c      	str	r3, [sp, #48]	; 0x30
 8008f92:	e7e1      	b.n	8008f58 <_svfprintf_r+0x618>
 8008f94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f96:	6063      	str	r3, [r4, #4]
 8008f98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f9c:	4413      	add	r3, r2
 8008f9e:	9321      	str	r3, [sp, #132]	; 0x84
 8008fa0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	2b07      	cmp	r3, #7
 8008fa6:	9320      	str	r3, [sp, #128]	; 0x80
 8008fa8:	dc01      	bgt.n	8008fae <_svfprintf_r+0x66e>
 8008faa:	3408      	adds	r4, #8
 8008fac:	e008      	b.n	8008fc0 <_svfprintf_r+0x680>
 8008fae:	aa1f      	add	r2, sp, #124	; 0x7c
 8008fb0:	4659      	mov	r1, fp
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	f001 fea6 	bl	800ad04 <__ssprint_r>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	f040 8343 	bne.w	8009644 <_svfprintf_r+0xd04>
 8008fbe:	ac2c      	add	r4, sp, #176	; 0xb0
 8008fc0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8008fc4:	b1bb      	cbz	r3, 8008ff6 <_svfprintf_r+0x6b6>
 8008fc6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8008fca:	6023      	str	r3, [r4, #0]
 8008fcc:	2301      	movs	r3, #1
 8008fce:	6063      	str	r3, [r4, #4]
 8008fd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	9321      	str	r3, [sp, #132]	; 0x84
 8008fd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008fd8:	3301      	adds	r3, #1
 8008fda:	2b07      	cmp	r3, #7
 8008fdc:	9320      	str	r3, [sp, #128]	; 0x80
 8008fde:	dc01      	bgt.n	8008fe4 <_svfprintf_r+0x6a4>
 8008fe0:	3408      	adds	r4, #8
 8008fe2:	e008      	b.n	8008ff6 <_svfprintf_r+0x6b6>
 8008fe4:	aa1f      	add	r2, sp, #124	; 0x7c
 8008fe6:	4659      	mov	r1, fp
 8008fe8:	4650      	mov	r0, sl
 8008fea:	f001 fe8b 	bl	800ad04 <__ssprint_r>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	f040 8328 	bne.w	8009644 <_svfprintf_r+0xd04>
 8008ff4:	ac2c      	add	r4, sp, #176	; 0xb0
 8008ff6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ff8:	b1b3      	cbz	r3, 8009028 <_svfprintf_r+0x6e8>
 8008ffa:	ab18      	add	r3, sp, #96	; 0x60
 8008ffc:	6023      	str	r3, [r4, #0]
 8008ffe:	2302      	movs	r3, #2
 8009000:	6063      	str	r3, [r4, #4]
 8009002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009004:	3302      	adds	r3, #2
 8009006:	9321      	str	r3, [sp, #132]	; 0x84
 8009008:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800900a:	3301      	adds	r3, #1
 800900c:	2b07      	cmp	r3, #7
 800900e:	9320      	str	r3, [sp, #128]	; 0x80
 8009010:	dc01      	bgt.n	8009016 <_svfprintf_r+0x6d6>
 8009012:	3408      	adds	r4, #8
 8009014:	e008      	b.n	8009028 <_svfprintf_r+0x6e8>
 8009016:	aa1f      	add	r2, sp, #124	; 0x7c
 8009018:	4659      	mov	r1, fp
 800901a:	4650      	mov	r0, sl
 800901c:	f001 fe72 	bl	800ad04 <__ssprint_r>
 8009020:	2800      	cmp	r0, #0
 8009022:	f040 830f 	bne.w	8009644 <_svfprintf_r+0xd04>
 8009026:	ac2c      	add	r4, sp, #176	; 0xb0
 8009028:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800902a:	2b80      	cmp	r3, #128	; 0x80
 800902c:	d135      	bne.n	800909a <_svfprintf_r+0x75a>
 800902e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009030:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009032:	1a9b      	subs	r3, r3, r2
 8009034:	2b00      	cmp	r3, #0
 8009036:	dd30      	ble.n	800909a <_svfprintf_r+0x75a>
 8009038:	4a70      	ldr	r2, [pc, #448]	; (80091fc <_svfprintf_r+0x8bc>)
 800903a:	6022      	str	r2, [r4, #0]
 800903c:	2b10      	cmp	r3, #16
 800903e:	dd18      	ble.n	8009072 <_svfprintf_r+0x732>
 8009040:	2210      	movs	r2, #16
 8009042:	6062      	str	r2, [r4, #4]
 8009044:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009046:	3210      	adds	r2, #16
 8009048:	9221      	str	r2, [sp, #132]	; 0x84
 800904a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800904c:	3201      	adds	r2, #1
 800904e:	2a07      	cmp	r2, #7
 8009050:	9220      	str	r2, [sp, #128]	; 0x80
 8009052:	dc01      	bgt.n	8009058 <_svfprintf_r+0x718>
 8009054:	3408      	adds	r4, #8
 8009056:	e00a      	b.n	800906e <_svfprintf_r+0x72e>
 8009058:	aa1f      	add	r2, sp, #124	; 0x7c
 800905a:	4659      	mov	r1, fp
 800905c:	4650      	mov	r0, sl
 800905e:	930c      	str	r3, [sp, #48]	; 0x30
 8009060:	f001 fe50 	bl	800ad04 <__ssprint_r>
 8009064:	2800      	cmp	r0, #0
 8009066:	f040 82ed 	bne.w	8009644 <_svfprintf_r+0xd04>
 800906a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800906c:	ac2c      	add	r4, sp, #176	; 0xb0
 800906e:	3b10      	subs	r3, #16
 8009070:	e7e2      	b.n	8009038 <_svfprintf_r+0x6f8>
 8009072:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009074:	6063      	str	r3, [r4, #4]
 8009076:	4413      	add	r3, r2
 8009078:	9321      	str	r3, [sp, #132]	; 0x84
 800907a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800907c:	3301      	adds	r3, #1
 800907e:	2b07      	cmp	r3, #7
 8009080:	9320      	str	r3, [sp, #128]	; 0x80
 8009082:	dc01      	bgt.n	8009088 <_svfprintf_r+0x748>
 8009084:	3408      	adds	r4, #8
 8009086:	e008      	b.n	800909a <_svfprintf_r+0x75a>
 8009088:	aa1f      	add	r2, sp, #124	; 0x7c
 800908a:	4659      	mov	r1, fp
 800908c:	4650      	mov	r0, sl
 800908e:	f001 fe39 	bl	800ad04 <__ssprint_r>
 8009092:	2800      	cmp	r0, #0
 8009094:	f040 82d6 	bne.w	8009644 <_svfprintf_r+0xd04>
 8009098:	ac2c      	add	r4, sp, #176	; 0xb0
 800909a:	ebc9 0606 	rsb	r6, r9, r6
 800909e:	2e00      	cmp	r6, #0
 80090a0:	dd2e      	ble.n	8009100 <_svfprintf_r+0x7c0>
 80090a2:	4b56      	ldr	r3, [pc, #344]	; (80091fc <_svfprintf_r+0x8bc>)
 80090a4:	6023      	str	r3, [r4, #0]
 80090a6:	2e10      	cmp	r6, #16
 80090a8:	dd16      	ble.n	80090d8 <_svfprintf_r+0x798>
 80090aa:	2310      	movs	r3, #16
 80090ac:	6063      	str	r3, [r4, #4]
 80090ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090b0:	3310      	adds	r3, #16
 80090b2:	9321      	str	r3, [sp, #132]	; 0x84
 80090b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80090b6:	3301      	adds	r3, #1
 80090b8:	2b07      	cmp	r3, #7
 80090ba:	9320      	str	r3, [sp, #128]	; 0x80
 80090bc:	dc01      	bgt.n	80090c2 <_svfprintf_r+0x782>
 80090be:	3408      	adds	r4, #8
 80090c0:	e008      	b.n	80090d4 <_svfprintf_r+0x794>
 80090c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80090c4:	4659      	mov	r1, fp
 80090c6:	4650      	mov	r0, sl
 80090c8:	f001 fe1c 	bl	800ad04 <__ssprint_r>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	f040 82b9 	bne.w	8009644 <_svfprintf_r+0xd04>
 80090d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80090d4:	3e10      	subs	r6, #16
 80090d6:	e7e4      	b.n	80090a2 <_svfprintf_r+0x762>
 80090d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80090da:	9821      	ldr	r0, [sp, #132]	; 0x84
 80090dc:	6066      	str	r6, [r4, #4]
 80090de:	3301      	adds	r3, #1
 80090e0:	4406      	add	r6, r0
 80090e2:	2b07      	cmp	r3, #7
 80090e4:	9621      	str	r6, [sp, #132]	; 0x84
 80090e6:	9320      	str	r3, [sp, #128]	; 0x80
 80090e8:	dc01      	bgt.n	80090ee <_svfprintf_r+0x7ae>
 80090ea:	3408      	adds	r4, #8
 80090ec:	e008      	b.n	8009100 <_svfprintf_r+0x7c0>
 80090ee:	aa1f      	add	r2, sp, #124	; 0x7c
 80090f0:	4659      	mov	r1, fp
 80090f2:	4650      	mov	r0, sl
 80090f4:	f001 fe06 	bl	800ad04 <__ssprint_r>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	f040 82a3 	bne.w	8009644 <_svfprintf_r+0xd04>
 80090fe:	ac2c      	add	r4, sp, #176	; 0xb0
 8009100:	05eb      	lsls	r3, r5, #23
 8009102:	d414      	bmi.n	800912e <_svfprintf_r+0x7ee>
 8009104:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009106:	e884 0300 	stmia.w	r4, {r8, r9}
 800910a:	444b      	add	r3, r9
 800910c:	9321      	str	r3, [sp, #132]	; 0x84
 800910e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009110:	3301      	adds	r3, #1
 8009112:	2b07      	cmp	r3, #7
 8009114:	9320      	str	r3, [sp, #128]	; 0x80
 8009116:	f340 8244 	ble.w	80095a2 <_svfprintf_r+0xc62>
 800911a:	aa1f      	add	r2, sp, #124	; 0x7c
 800911c:	4659      	mov	r1, fp
 800911e:	4650      	mov	r0, sl
 8009120:	f001 fdf0 	bl	800ad04 <__ssprint_r>
 8009124:	2800      	cmp	r0, #0
 8009126:	f040 828d 	bne.w	8009644 <_svfprintf_r+0xd04>
 800912a:	ac2c      	add	r4, sp, #176	; 0xb0
 800912c:	e23a      	b.n	80095a4 <_svfprintf_r+0xc64>
 800912e:	9b02      	ldr	r3, [sp, #8]
 8009130:	2b65      	cmp	r3, #101	; 0x65
 8009132:	f340 81ad 	ble.w	8009490 <_svfprintf_r+0xb50>
 8009136:	2200      	movs	r2, #0
 8009138:	2300      	movs	r3, #0
 800913a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800913e:	f7f7 fcbf 	bl	8000ac0 <__aeabi_dcmpeq>
 8009142:	2800      	cmp	r0, #0
 8009144:	d05e      	beq.n	8009204 <_svfprintf_r+0x8c4>
 8009146:	4b2e      	ldr	r3, [pc, #184]	; (8009200 <_svfprintf_r+0x8c0>)
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	2301      	movs	r3, #1
 800914c:	6063      	str	r3, [r4, #4]
 800914e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009150:	3301      	adds	r3, #1
 8009152:	9321      	str	r3, [sp, #132]	; 0x84
 8009154:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009156:	3301      	adds	r3, #1
 8009158:	2b07      	cmp	r3, #7
 800915a:	9320      	str	r3, [sp, #128]	; 0x80
 800915c:	dc01      	bgt.n	8009162 <_svfprintf_r+0x822>
 800915e:	3408      	adds	r4, #8
 8009160:	e008      	b.n	8009174 <_svfprintf_r+0x834>
 8009162:	aa1f      	add	r2, sp, #124	; 0x7c
 8009164:	4659      	mov	r1, fp
 8009166:	4650      	mov	r0, sl
 8009168:	f001 fdcc 	bl	800ad04 <__ssprint_r>
 800916c:	2800      	cmp	r0, #0
 800916e:	f040 8269 	bne.w	8009644 <_svfprintf_r+0xd04>
 8009172:	ac2c      	add	r4, sp, #176	; 0xb0
 8009174:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009176:	9a04      	ldr	r2, [sp, #16]
 8009178:	4293      	cmp	r3, r2
 800917a:	db02      	blt.n	8009182 <_svfprintf_r+0x842>
 800917c:	07ee      	lsls	r6, r5, #31
 800917e:	f140 8211 	bpl.w	80095a4 <_svfprintf_r+0xc64>
 8009182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	9b08      	ldr	r3, [sp, #32]
 8009188:	6063      	str	r3, [r4, #4]
 800918a:	9a08      	ldr	r2, [sp, #32]
 800918c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800918e:	4413      	add	r3, r2
 8009190:	9321      	str	r3, [sp, #132]	; 0x84
 8009192:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009194:	3301      	adds	r3, #1
 8009196:	2b07      	cmp	r3, #7
 8009198:	9320      	str	r3, [sp, #128]	; 0x80
 800919a:	dc01      	bgt.n	80091a0 <_svfprintf_r+0x860>
 800919c:	3408      	adds	r4, #8
 800919e:	e008      	b.n	80091b2 <_svfprintf_r+0x872>
 80091a0:	aa1f      	add	r2, sp, #124	; 0x7c
 80091a2:	4659      	mov	r1, fp
 80091a4:	4650      	mov	r0, sl
 80091a6:	f001 fdad 	bl	800ad04 <__ssprint_r>
 80091aa:	2800      	cmp	r0, #0
 80091ac:	f040 824a 	bne.w	8009644 <_svfprintf_r+0xd04>
 80091b0:	ac2c      	add	r4, sp, #176	; 0xb0
 80091b2:	9b04      	ldr	r3, [sp, #16]
 80091b4:	1e5e      	subs	r6, r3, #1
 80091b6:	2e00      	cmp	r6, #0
 80091b8:	f340 81f4 	ble.w	80095a4 <_svfprintf_r+0xc64>
 80091bc:	4f0f      	ldr	r7, [pc, #60]	; (80091fc <_svfprintf_r+0x8bc>)
 80091be:	f04f 0810 	mov.w	r8, #16
 80091c2:	2e10      	cmp	r6, #16
 80091c4:	f340 8159 	ble.w	800947a <_svfprintf_r+0xb3a>
 80091c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091ca:	3310      	adds	r3, #16
 80091cc:	9321      	str	r3, [sp, #132]	; 0x84
 80091ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80091d0:	3301      	adds	r3, #1
 80091d2:	2b07      	cmp	r3, #7
 80091d4:	e884 0180 	stmia.w	r4, {r7, r8}
 80091d8:	9320      	str	r3, [sp, #128]	; 0x80
 80091da:	dc01      	bgt.n	80091e0 <_svfprintf_r+0x8a0>
 80091dc:	3408      	adds	r4, #8
 80091de:	e008      	b.n	80091f2 <_svfprintf_r+0x8b2>
 80091e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80091e2:	4659      	mov	r1, fp
 80091e4:	4650      	mov	r0, sl
 80091e6:	f001 fd8d 	bl	800ad04 <__ssprint_r>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	f040 822a 	bne.w	8009644 <_svfprintf_r+0xd04>
 80091f0:	ac2c      	add	r4, sp, #176	; 0xb0
 80091f2:	3e10      	subs	r6, #16
 80091f4:	e7e5      	b.n	80091c2 <_svfprintf_r+0x882>
 80091f6:	bf00      	nop
 80091f8:	0800b328 	.word	0x0800b328
 80091fc:	0800b2e4 	.word	0x0800b2e4
 8009200:	0800b326 	.word	0x0800b326
 8009204:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009206:	2b00      	cmp	r3, #0
 8009208:	dc7c      	bgt.n	8009304 <_svfprintf_r+0x9c4>
 800920a:	4b9f      	ldr	r3, [pc, #636]	; (8009488 <_svfprintf_r+0xb48>)
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	2301      	movs	r3, #1
 8009210:	6063      	str	r3, [r4, #4]
 8009212:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009214:	3301      	adds	r3, #1
 8009216:	9321      	str	r3, [sp, #132]	; 0x84
 8009218:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800921a:	3301      	adds	r3, #1
 800921c:	2b07      	cmp	r3, #7
 800921e:	9320      	str	r3, [sp, #128]	; 0x80
 8009220:	dc01      	bgt.n	8009226 <_svfprintf_r+0x8e6>
 8009222:	3408      	adds	r4, #8
 8009224:	e008      	b.n	8009238 <_svfprintf_r+0x8f8>
 8009226:	aa1f      	add	r2, sp, #124	; 0x7c
 8009228:	4659      	mov	r1, fp
 800922a:	4650      	mov	r0, sl
 800922c:	f001 fd6a 	bl	800ad04 <__ssprint_r>
 8009230:	2800      	cmp	r0, #0
 8009232:	f040 8207 	bne.w	8009644 <_svfprintf_r+0xd04>
 8009236:	ac2c      	add	r4, sp, #176	; 0xb0
 8009238:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800923a:	b923      	cbnz	r3, 8009246 <_svfprintf_r+0x906>
 800923c:	9b04      	ldr	r3, [sp, #16]
 800923e:	b913      	cbnz	r3, 8009246 <_svfprintf_r+0x906>
 8009240:	07e8      	lsls	r0, r5, #31
 8009242:	f140 81af 	bpl.w	80095a4 <_svfprintf_r+0xc64>
 8009246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	9b08      	ldr	r3, [sp, #32]
 800924c:	6063      	str	r3, [r4, #4]
 800924e:	9a08      	ldr	r2, [sp, #32]
 8009250:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009252:	4413      	add	r3, r2
 8009254:	9321      	str	r3, [sp, #132]	; 0x84
 8009256:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009258:	3301      	adds	r3, #1
 800925a:	2b07      	cmp	r3, #7
 800925c:	9320      	str	r3, [sp, #128]	; 0x80
 800925e:	dc02      	bgt.n	8009266 <_svfprintf_r+0x926>
 8009260:	f104 0308 	add.w	r3, r4, #8
 8009264:	e008      	b.n	8009278 <_svfprintf_r+0x938>
 8009266:	aa1f      	add	r2, sp, #124	; 0x7c
 8009268:	4659      	mov	r1, fp
 800926a:	4650      	mov	r0, sl
 800926c:	f001 fd4a 	bl	800ad04 <__ssprint_r>
 8009270:	2800      	cmp	r0, #0
 8009272:	f040 81e7 	bne.w	8009644 <_svfprintf_r+0xd04>
 8009276:	ab2c      	add	r3, sp, #176	; 0xb0
 8009278:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800927a:	4276      	negs	r6, r6
 800927c:	2e00      	cmp	r6, #0
 800927e:	dd30      	ble.n	80092e2 <_svfprintf_r+0x9a2>
 8009280:	4f82      	ldr	r7, [pc, #520]	; (800948c <_svfprintf_r+0xb4c>)
 8009282:	2410      	movs	r4, #16
 8009284:	2e10      	cmp	r6, #16
 8009286:	dd16      	ble.n	80092b6 <_svfprintf_r+0x976>
 8009288:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800928a:	601f      	str	r7, [r3, #0]
 800928c:	3210      	adds	r2, #16
 800928e:	9221      	str	r2, [sp, #132]	; 0x84
 8009290:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009292:	605c      	str	r4, [r3, #4]
 8009294:	3201      	adds	r2, #1
 8009296:	2a07      	cmp	r2, #7
 8009298:	9220      	str	r2, [sp, #128]	; 0x80
 800929a:	dc01      	bgt.n	80092a0 <_svfprintf_r+0x960>
 800929c:	3308      	adds	r3, #8
 800929e:	e008      	b.n	80092b2 <_svfprintf_r+0x972>
 80092a0:	aa1f      	add	r2, sp, #124	; 0x7c
 80092a2:	4659      	mov	r1, fp
 80092a4:	4650      	mov	r0, sl
 80092a6:	f001 fd2d 	bl	800ad04 <__ssprint_r>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	f040 81ca 	bne.w	8009644 <_svfprintf_r+0xd04>
 80092b0:	ab2c      	add	r3, sp, #176	; 0xb0
 80092b2:	3e10      	subs	r6, #16
 80092b4:	e7e6      	b.n	8009284 <_svfprintf_r+0x944>
 80092b6:	4a75      	ldr	r2, [pc, #468]	; (800948c <_svfprintf_r+0xb4c>)
 80092b8:	e883 0044 	stmia.w	r3, {r2, r6}
 80092bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092be:	4416      	add	r6, r2
 80092c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092c2:	9621      	str	r6, [sp, #132]	; 0x84
 80092c4:	3201      	adds	r2, #1
 80092c6:	2a07      	cmp	r2, #7
 80092c8:	9220      	str	r2, [sp, #128]	; 0x80
 80092ca:	dc01      	bgt.n	80092d0 <_svfprintf_r+0x990>
 80092cc:	3308      	adds	r3, #8
 80092ce:	e008      	b.n	80092e2 <_svfprintf_r+0x9a2>
 80092d0:	aa1f      	add	r2, sp, #124	; 0x7c
 80092d2:	4659      	mov	r1, fp
 80092d4:	4650      	mov	r0, sl
 80092d6:	f001 fd15 	bl	800ad04 <__ssprint_r>
 80092da:	2800      	cmp	r0, #0
 80092dc:	f040 81b2 	bne.w	8009644 <_svfprintf_r+0xd04>
 80092e0:	ab2c      	add	r3, sp, #176	; 0xb0
 80092e2:	9a04      	ldr	r2, [sp, #16]
 80092e4:	605a      	str	r2, [r3, #4]
 80092e6:	9904      	ldr	r1, [sp, #16]
 80092e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092ea:	f8c3 8000 	str.w	r8, [r3]
 80092ee:	440a      	add	r2, r1
 80092f0:	9221      	str	r2, [sp, #132]	; 0x84
 80092f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092f4:	3201      	adds	r2, #1
 80092f6:	2a07      	cmp	r2, #7
 80092f8:	9220      	str	r2, [sp, #128]	; 0x80
 80092fa:	f73f af0e 	bgt.w	800911a <_svfprintf_r+0x7da>
 80092fe:	f103 0408 	add.w	r4, r3, #8
 8009302:	e14f      	b.n	80095a4 <_svfprintf_r+0xc64>
 8009304:	9b04      	ldr	r3, [sp, #16]
 8009306:	42bb      	cmp	r3, r7
 8009308:	bfa8      	it	ge
 800930a:	463b      	movge	r3, r7
 800930c:	2b00      	cmp	r3, #0
 800930e:	461e      	mov	r6, r3
 8009310:	dd15      	ble.n	800933e <_svfprintf_r+0x9fe>
 8009312:	6063      	str	r3, [r4, #4]
 8009314:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009316:	f8c4 8000 	str.w	r8, [r4]
 800931a:	4433      	add	r3, r6
 800931c:	9321      	str	r3, [sp, #132]	; 0x84
 800931e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009320:	3301      	adds	r3, #1
 8009322:	2b07      	cmp	r3, #7
 8009324:	9320      	str	r3, [sp, #128]	; 0x80
 8009326:	dc01      	bgt.n	800932c <_svfprintf_r+0x9ec>
 8009328:	3408      	adds	r4, #8
 800932a:	e008      	b.n	800933e <_svfprintf_r+0x9fe>
 800932c:	aa1f      	add	r2, sp, #124	; 0x7c
 800932e:	4659      	mov	r1, fp
 8009330:	4650      	mov	r0, sl
 8009332:	f001 fce7 	bl	800ad04 <__ssprint_r>
 8009336:	2800      	cmp	r0, #0
 8009338:	f040 8184 	bne.w	8009644 <_svfprintf_r+0xd04>
 800933c:	ac2c      	add	r4, sp, #176	; 0xb0
 800933e:	2e00      	cmp	r6, #0
 8009340:	bfac      	ite	ge
 8009342:	1bbe      	subge	r6, r7, r6
 8009344:	463e      	movlt	r6, r7
 8009346:	2e00      	cmp	r6, #0
 8009348:	dd30      	ble.n	80093ac <_svfprintf_r+0xa6c>
 800934a:	f04f 0910 	mov.w	r9, #16
 800934e:	4b4f      	ldr	r3, [pc, #316]	; (800948c <_svfprintf_r+0xb4c>)
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	2e10      	cmp	r6, #16
 8009354:	dd16      	ble.n	8009384 <_svfprintf_r+0xa44>
 8009356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009358:	f8c4 9004 	str.w	r9, [r4, #4]
 800935c:	3310      	adds	r3, #16
 800935e:	9321      	str	r3, [sp, #132]	; 0x84
 8009360:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009362:	3301      	adds	r3, #1
 8009364:	2b07      	cmp	r3, #7
 8009366:	9320      	str	r3, [sp, #128]	; 0x80
 8009368:	dc01      	bgt.n	800936e <_svfprintf_r+0xa2e>
 800936a:	3408      	adds	r4, #8
 800936c:	e008      	b.n	8009380 <_svfprintf_r+0xa40>
 800936e:	aa1f      	add	r2, sp, #124	; 0x7c
 8009370:	4659      	mov	r1, fp
 8009372:	4650      	mov	r0, sl
 8009374:	f001 fcc6 	bl	800ad04 <__ssprint_r>
 8009378:	2800      	cmp	r0, #0
 800937a:	f040 8163 	bne.w	8009644 <_svfprintf_r+0xd04>
 800937e:	ac2c      	add	r4, sp, #176	; 0xb0
 8009380:	3e10      	subs	r6, #16
 8009382:	e7e4      	b.n	800934e <_svfprintf_r+0xa0e>
 8009384:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009386:	6066      	str	r6, [r4, #4]
 8009388:	441e      	add	r6, r3
 800938a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800938c:	9621      	str	r6, [sp, #132]	; 0x84
 800938e:	3301      	adds	r3, #1
 8009390:	2b07      	cmp	r3, #7
 8009392:	9320      	str	r3, [sp, #128]	; 0x80
 8009394:	dc01      	bgt.n	800939a <_svfprintf_r+0xa5a>
 8009396:	3408      	adds	r4, #8
 8009398:	e008      	b.n	80093ac <_svfprintf_r+0xa6c>
 800939a:	aa1f      	add	r2, sp, #124	; 0x7c
 800939c:	4659      	mov	r1, fp
 800939e:	4650      	mov	r0, sl
 80093a0:	f001 fcb0 	bl	800ad04 <__ssprint_r>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	f040 814d 	bne.w	8009644 <_svfprintf_r+0xd04>
 80093aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80093ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093ae:	9a04      	ldr	r2, [sp, #16]
 80093b0:	4293      	cmp	r3, r2
 80093b2:	4447      	add	r7, r8
 80093b4:	db01      	blt.n	80093ba <_svfprintf_r+0xa7a>
 80093b6:	07e9      	lsls	r1, r5, #31
 80093b8:	d517      	bpl.n	80093ea <_svfprintf_r+0xaaa>
 80093ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	9b08      	ldr	r3, [sp, #32]
 80093c0:	6063      	str	r3, [r4, #4]
 80093c2:	9a08      	ldr	r2, [sp, #32]
 80093c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093c6:	4413      	add	r3, r2
 80093c8:	9321      	str	r3, [sp, #132]	; 0x84
 80093ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80093cc:	3301      	adds	r3, #1
 80093ce:	2b07      	cmp	r3, #7
 80093d0:	9320      	str	r3, [sp, #128]	; 0x80
 80093d2:	dc01      	bgt.n	80093d8 <_svfprintf_r+0xa98>
 80093d4:	3408      	adds	r4, #8
 80093d6:	e008      	b.n	80093ea <_svfprintf_r+0xaaa>
 80093d8:	aa1f      	add	r2, sp, #124	; 0x7c
 80093da:	4659      	mov	r1, fp
 80093dc:	4650      	mov	r0, sl
 80093de:	f001 fc91 	bl	800ad04 <__ssprint_r>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	f040 812e 	bne.w	8009644 <_svfprintf_r+0xd04>
 80093e8:	ac2c      	add	r4, sp, #176	; 0xb0
 80093ea:	9b04      	ldr	r3, [sp, #16]
 80093ec:	9a04      	ldr	r2, [sp, #16]
 80093ee:	eb08 0603 	add.w	r6, r8, r3
 80093f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093f4:	1bf6      	subs	r6, r6, r7
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	429e      	cmp	r6, r3
 80093fa:	bfa8      	it	ge
 80093fc:	461e      	movge	r6, r3
 80093fe:	2e00      	cmp	r6, #0
 8009400:	dd14      	ble.n	800942c <_svfprintf_r+0xaec>
 8009402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009404:	6027      	str	r7, [r4, #0]
 8009406:	4433      	add	r3, r6
 8009408:	9321      	str	r3, [sp, #132]	; 0x84
 800940a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800940c:	6066      	str	r6, [r4, #4]
 800940e:	3301      	adds	r3, #1
 8009410:	2b07      	cmp	r3, #7
 8009412:	9320      	str	r3, [sp, #128]	; 0x80
 8009414:	dc01      	bgt.n	800941a <_svfprintf_r+0xada>
 8009416:	3408      	adds	r4, #8
 8009418:	e008      	b.n	800942c <_svfprintf_r+0xaec>
 800941a:	aa1f      	add	r2, sp, #124	; 0x7c
 800941c:	4659      	mov	r1, fp
 800941e:	4650      	mov	r0, sl
 8009420:	f001 fc70 	bl	800ad04 <__ssprint_r>
 8009424:	2800      	cmp	r0, #0
 8009426:	f040 810d 	bne.w	8009644 <_svfprintf_r+0xd04>
 800942a:	ac2c      	add	r4, sp, #176	; 0xb0
 800942c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800942e:	9a04      	ldr	r2, [sp, #16]
 8009430:	2e00      	cmp	r6, #0
 8009432:	eba2 0303 	sub.w	r3, r2, r3
 8009436:	bfac      	ite	ge
 8009438:	1b9e      	subge	r6, r3, r6
 800943a:	461e      	movlt	r6, r3
 800943c:	2e00      	cmp	r6, #0
 800943e:	f340 80b1 	ble.w	80095a4 <_svfprintf_r+0xc64>
 8009442:	4f12      	ldr	r7, [pc, #72]	; (800948c <_svfprintf_r+0xb4c>)
 8009444:	f04f 0810 	mov.w	r8, #16
 8009448:	2e10      	cmp	r6, #16
 800944a:	dd16      	ble.n	800947a <_svfprintf_r+0xb3a>
 800944c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800944e:	3310      	adds	r3, #16
 8009450:	9321      	str	r3, [sp, #132]	; 0x84
 8009452:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009454:	3301      	adds	r3, #1
 8009456:	2b07      	cmp	r3, #7
 8009458:	e884 0180 	stmia.w	r4, {r7, r8}
 800945c:	9320      	str	r3, [sp, #128]	; 0x80
 800945e:	dc01      	bgt.n	8009464 <_svfprintf_r+0xb24>
 8009460:	3408      	adds	r4, #8
 8009462:	e008      	b.n	8009476 <_svfprintf_r+0xb36>
 8009464:	aa1f      	add	r2, sp, #124	; 0x7c
 8009466:	4659      	mov	r1, fp
 8009468:	4650      	mov	r0, sl
 800946a:	f001 fc4b 	bl	800ad04 <__ssprint_r>
 800946e:	2800      	cmp	r0, #0
 8009470:	f040 80e8 	bne.w	8009644 <_svfprintf_r+0xd04>
 8009474:	ac2c      	add	r4, sp, #176	; 0xb0
 8009476:	3e10      	subs	r6, #16
 8009478:	e7e6      	b.n	8009448 <_svfprintf_r+0xb08>
 800947a:	4b04      	ldr	r3, [pc, #16]	; (800948c <_svfprintf_r+0xb4c>)
 800947c:	e884 0048 	stmia.w	r4, {r3, r6}
 8009480:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009482:	441e      	add	r6, r3
 8009484:	9621      	str	r6, [sp, #132]	; 0x84
 8009486:	e642      	b.n	800910e <_svfprintf_r+0x7ce>
 8009488:	0800b326 	.word	0x0800b326
 800948c:	0800b2e4 	.word	0x0800b2e4
 8009490:	9b04      	ldr	r3, [sp, #16]
 8009492:	2b01      	cmp	r3, #1
 8009494:	dc01      	bgt.n	800949a <_svfprintf_r+0xb5a>
 8009496:	07ea      	lsls	r2, r5, #31
 8009498:	d573      	bpl.n	8009582 <_svfprintf_r+0xc42>
 800949a:	2301      	movs	r3, #1
 800949c:	6063      	str	r3, [r4, #4]
 800949e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094a0:	f8c4 8000 	str.w	r8, [r4]
 80094a4:	3301      	adds	r3, #1
 80094a6:	9321      	str	r3, [sp, #132]	; 0x84
 80094a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80094aa:	3301      	adds	r3, #1
 80094ac:	2b07      	cmp	r3, #7
 80094ae:	9320      	str	r3, [sp, #128]	; 0x80
 80094b0:	dc01      	bgt.n	80094b6 <_svfprintf_r+0xb76>
 80094b2:	3408      	adds	r4, #8
 80094b4:	e008      	b.n	80094c8 <_svfprintf_r+0xb88>
 80094b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80094b8:	4659      	mov	r1, fp
 80094ba:	4650      	mov	r0, sl
 80094bc:	f001 fc22 	bl	800ad04 <__ssprint_r>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	f040 80bf 	bne.w	8009644 <_svfprintf_r+0xd04>
 80094c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80094c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094ca:	6023      	str	r3, [r4, #0]
 80094cc:	9b08      	ldr	r3, [sp, #32]
 80094ce:	6063      	str	r3, [r4, #4]
 80094d0:	9a08      	ldr	r2, [sp, #32]
 80094d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094d4:	4413      	add	r3, r2
 80094d6:	9321      	str	r3, [sp, #132]	; 0x84
 80094d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80094da:	3301      	adds	r3, #1
 80094dc:	2b07      	cmp	r3, #7
 80094de:	9320      	str	r3, [sp, #128]	; 0x80
 80094e0:	dc01      	bgt.n	80094e6 <_svfprintf_r+0xba6>
 80094e2:	3408      	adds	r4, #8
 80094e4:	e008      	b.n	80094f8 <_svfprintf_r+0xbb8>
 80094e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80094e8:	4659      	mov	r1, fp
 80094ea:	4650      	mov	r0, sl
 80094ec:	f001 fc0a 	bl	800ad04 <__ssprint_r>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	f040 80a7 	bne.w	8009644 <_svfprintf_r+0xd04>
 80094f6:	ac2c      	add	r4, sp, #176	; 0xb0
 80094f8:	2300      	movs	r3, #0
 80094fa:	2200      	movs	r2, #0
 80094fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009500:	f7f7 fade 	bl	8000ac0 <__aeabi_dcmpeq>
 8009504:	9b04      	ldr	r3, [sp, #16]
 8009506:	1e5e      	subs	r6, r3, #1
 8009508:	b9b8      	cbnz	r0, 800953a <_svfprintf_r+0xbfa>
 800950a:	f108 0301 	add.w	r3, r8, #1
 800950e:	e884 0048 	stmia.w	r4, {r3, r6}
 8009512:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009514:	9a04      	ldr	r2, [sp, #16]
 8009516:	3b01      	subs	r3, #1
 8009518:	4413      	add	r3, r2
 800951a:	9321      	str	r3, [sp, #132]	; 0x84
 800951c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800951e:	3301      	adds	r3, #1
 8009520:	2b07      	cmp	r3, #7
 8009522:	9320      	str	r3, [sp, #128]	; 0x80
 8009524:	dd34      	ble.n	8009590 <_svfprintf_r+0xc50>
 8009526:	aa1f      	add	r2, sp, #124	; 0x7c
 8009528:	4659      	mov	r1, fp
 800952a:	4650      	mov	r0, sl
 800952c:	f001 fbea 	bl	800ad04 <__ssprint_r>
 8009530:	2800      	cmp	r0, #0
 8009532:	f040 8087 	bne.w	8009644 <_svfprintf_r+0xd04>
 8009536:	ac2c      	add	r4, sp, #176	; 0xb0
 8009538:	e02b      	b.n	8009592 <_svfprintf_r+0xc52>
 800953a:	2e00      	cmp	r6, #0
 800953c:	dd29      	ble.n	8009592 <_svfprintf_r+0xc52>
 800953e:	4fa7      	ldr	r7, [pc, #668]	; (80097dc <_svfprintf_r+0xe9c>)
 8009540:	f04f 0810 	mov.w	r8, #16
 8009544:	2e10      	cmp	r6, #16
 8009546:	dd15      	ble.n	8009574 <_svfprintf_r+0xc34>
 8009548:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800954a:	3310      	adds	r3, #16
 800954c:	9321      	str	r3, [sp, #132]	; 0x84
 800954e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009550:	3301      	adds	r3, #1
 8009552:	2b07      	cmp	r3, #7
 8009554:	e884 0180 	stmia.w	r4, {r7, r8}
 8009558:	9320      	str	r3, [sp, #128]	; 0x80
 800955a:	dc01      	bgt.n	8009560 <_svfprintf_r+0xc20>
 800955c:	3408      	adds	r4, #8
 800955e:	e007      	b.n	8009570 <_svfprintf_r+0xc30>
 8009560:	aa1f      	add	r2, sp, #124	; 0x7c
 8009562:	4659      	mov	r1, fp
 8009564:	4650      	mov	r0, sl
 8009566:	f001 fbcd 	bl	800ad04 <__ssprint_r>
 800956a:	2800      	cmp	r0, #0
 800956c:	d16a      	bne.n	8009644 <_svfprintf_r+0xd04>
 800956e:	ac2c      	add	r4, sp, #176	; 0xb0
 8009570:	3e10      	subs	r6, #16
 8009572:	e7e7      	b.n	8009544 <_svfprintf_r+0xc04>
 8009574:	4b99      	ldr	r3, [pc, #612]	; (80097dc <_svfprintf_r+0xe9c>)
 8009576:	e884 0048 	stmia.w	r4, {r3, r6}
 800957a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800957c:	441e      	add	r6, r3
 800957e:	9621      	str	r6, [sp, #132]	; 0x84
 8009580:	e7cc      	b.n	800951c <_svfprintf_r+0xbdc>
 8009582:	2301      	movs	r3, #1
 8009584:	6063      	str	r3, [r4, #4]
 8009586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009588:	f8c4 8000 	str.w	r8, [r4]
 800958c:	3301      	adds	r3, #1
 800958e:	e7c4      	b.n	800951a <_svfprintf_r+0xbda>
 8009590:	3408      	adds	r4, #8
 8009592:	ab1b      	add	r3, sp, #108	; 0x6c
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009598:	6063      	str	r3, [r4, #4]
 800959a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800959c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800959e:	4413      	add	r3, r2
 80095a0:	e5b4      	b.n	800910c <_svfprintf_r+0x7cc>
 80095a2:	3408      	adds	r4, #8
 80095a4:	076b      	lsls	r3, r5, #29
 80095a6:	d40b      	bmi.n	80095c0 <_svfprintf_r+0xc80>
 80095a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095ae:	428a      	cmp	r2, r1
 80095b0:	bfac      	ite	ge
 80095b2:	189b      	addge	r3, r3, r2
 80095b4:	185b      	addlt	r3, r3, r1
 80095b6:	930a      	str	r3, [sp, #40]	; 0x28
 80095b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d035      	beq.n	800962a <_svfprintf_r+0xcea>
 80095be:	e02e      	b.n	800961e <_svfprintf_r+0xcde>
 80095c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095c4:	1a9d      	subs	r5, r3, r2
 80095c6:	2d00      	cmp	r5, #0
 80095c8:	ddee      	ble.n	80095a8 <_svfprintf_r+0xc68>
 80095ca:	2610      	movs	r6, #16
 80095cc:	4b84      	ldr	r3, [pc, #528]	; (80097e0 <_svfprintf_r+0xea0>)
 80095ce:	6023      	str	r3, [r4, #0]
 80095d0:	2d10      	cmp	r5, #16
 80095d2:	dd13      	ble.n	80095fc <_svfprintf_r+0xcbc>
 80095d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095d6:	6066      	str	r6, [r4, #4]
 80095d8:	3310      	adds	r3, #16
 80095da:	9321      	str	r3, [sp, #132]	; 0x84
 80095dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80095de:	3301      	adds	r3, #1
 80095e0:	2b07      	cmp	r3, #7
 80095e2:	9320      	str	r3, [sp, #128]	; 0x80
 80095e4:	dc01      	bgt.n	80095ea <_svfprintf_r+0xcaa>
 80095e6:	3408      	adds	r4, #8
 80095e8:	e006      	b.n	80095f8 <_svfprintf_r+0xcb8>
 80095ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80095ec:	4659      	mov	r1, fp
 80095ee:	4650      	mov	r0, sl
 80095f0:	f001 fb88 	bl	800ad04 <__ssprint_r>
 80095f4:	bb30      	cbnz	r0, 8009644 <_svfprintf_r+0xd04>
 80095f6:	ac2c      	add	r4, sp, #176	; 0xb0
 80095f8:	3d10      	subs	r5, #16
 80095fa:	e7e7      	b.n	80095cc <_svfprintf_r+0xc8c>
 80095fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095fe:	6065      	str	r5, [r4, #4]
 8009600:	441d      	add	r5, r3
 8009602:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009604:	9521      	str	r5, [sp, #132]	; 0x84
 8009606:	3301      	adds	r3, #1
 8009608:	2b07      	cmp	r3, #7
 800960a:	9320      	str	r3, [sp, #128]	; 0x80
 800960c:	ddcc      	ble.n	80095a8 <_svfprintf_r+0xc68>
 800960e:	aa1f      	add	r2, sp, #124	; 0x7c
 8009610:	4659      	mov	r1, fp
 8009612:	4650      	mov	r0, sl
 8009614:	f001 fb76 	bl	800ad04 <__ssprint_r>
 8009618:	2800      	cmp	r0, #0
 800961a:	d0c5      	beq.n	80095a8 <_svfprintf_r+0xc68>
 800961c:	e012      	b.n	8009644 <_svfprintf_r+0xd04>
 800961e:	aa1f      	add	r2, sp, #124	; 0x7c
 8009620:	4659      	mov	r1, fp
 8009622:	4650      	mov	r0, sl
 8009624:	f001 fb6e 	bl	800ad04 <__ssprint_r>
 8009628:	b960      	cbnz	r0, 8009644 <_svfprintf_r+0xd04>
 800962a:	2300      	movs	r3, #0
 800962c:	9320      	str	r3, [sp, #128]	; 0x80
 800962e:	9f03      	ldr	r7, [sp, #12]
 8009630:	ac2c      	add	r4, sp, #176	; 0xb0
 8009632:	f7ff b9bb 	b.w	80089ac <_svfprintf_r+0x6c>
 8009636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009638:	b123      	cbz	r3, 8009644 <_svfprintf_r+0xd04>
 800963a:	aa1f      	add	r2, sp, #124	; 0x7c
 800963c:	4659      	mov	r1, fp
 800963e:	4650      	mov	r0, sl
 8009640:	f001 fb60 	bl	800ad04 <__ssprint_r>
 8009644:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8009648:	f013 0f40 	tst.w	r3, #64	; 0x40
 800964c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800964e:	bf18      	it	ne
 8009650:	f04f 33ff 	movne.w	r3, #4294967295
 8009654:	4618      	mov	r0, r3
 8009656:	e12e      	b.n	80098b6 <_svfprintf_r+0xf76>
 8009658:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800965c:	4610      	mov	r0, r2
 800965e:	4619      	mov	r1, r3
 8009660:	f7f7 fa60 	bl	8000b24 <__aeabi_dcmpun>
 8009664:	b160      	cbz	r0, 8009680 <_svfprintf_r+0xd40>
 8009666:	4b5f      	ldr	r3, [pc, #380]	; (80097e4 <_svfprintf_r+0xea4>)
 8009668:	4a5f      	ldr	r2, [pc, #380]	; (80097e8 <_svfprintf_r+0xea8>)
 800966a:	9902      	ldr	r1, [sp, #8]
 800966c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8009670:	2947      	cmp	r1, #71	; 0x47
 8009672:	bfcc      	ite	gt
 8009674:	4690      	movgt	r8, r2
 8009676:	4698      	movle	r8, r3
 8009678:	f04f 0903 	mov.w	r9, #3
 800967c:	2600      	movs	r6, #0
 800967e:	e44e      	b.n	8008f1e <_svfprintf_r+0x5de>
 8009680:	f1b9 3fff 	cmp.w	r9, #4294967295
 8009684:	d00a      	beq.n	800969c <_svfprintf_r+0xd5c>
 8009686:	9b02      	ldr	r3, [sp, #8]
 8009688:	f023 0320 	bic.w	r3, r3, #32
 800968c:	2b47      	cmp	r3, #71	; 0x47
 800968e:	d107      	bne.n	80096a0 <_svfprintf_r+0xd60>
 8009690:	f1b9 0f00 	cmp.w	r9, #0
 8009694:	bf08      	it	eq
 8009696:	f04f 0901 	moveq.w	r9, #1
 800969a:	e001      	b.n	80096a0 <_svfprintf_r+0xd60>
 800969c:	f04f 0906 	mov.w	r9, #6
 80096a0:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80096a4:	930c      	str	r3, [sp, #48]	; 0x30
 80096a6:	9b07      	ldr	r3, [sp, #28]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	da07      	bge.n	80096bc <_svfprintf_r+0xd7c>
 80096ac:	9b06      	ldr	r3, [sp, #24]
 80096ae:	930e      	str	r3, [sp, #56]	; 0x38
 80096b0:	9b07      	ldr	r3, [sp, #28]
 80096b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80096b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80096b8:	232d      	movs	r3, #45	; 0x2d
 80096ba:	e004      	b.n	80096c6 <_svfprintf_r+0xd86>
 80096bc:	ed9d 7b06 	vldr	d7, [sp, #24]
 80096c0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80096c4:	2300      	movs	r3, #0
 80096c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80096c8:	9b02      	ldr	r3, [sp, #8]
 80096ca:	f023 0720 	bic.w	r7, r3, #32
 80096ce:	2f46      	cmp	r7, #70	; 0x46
 80096d0:	d004      	beq.n	80096dc <_svfprintf_r+0xd9c>
 80096d2:	2f45      	cmp	r7, #69	; 0x45
 80096d4:	d105      	bne.n	80096e2 <_svfprintf_r+0xda2>
 80096d6:	f109 0601 	add.w	r6, r9, #1
 80096da:	e003      	b.n	80096e4 <_svfprintf_r+0xda4>
 80096dc:	464e      	mov	r6, r9
 80096de:	2103      	movs	r1, #3
 80096e0:	e001      	b.n	80096e6 <_svfprintf_r+0xda6>
 80096e2:	464e      	mov	r6, r9
 80096e4:	2102      	movs	r1, #2
 80096e6:	ab1d      	add	r3, sp, #116	; 0x74
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	ab1a      	add	r3, sp, #104	; 0x68
 80096ec:	9300      	str	r3, [sp, #0]
 80096ee:	4632      	mov	r2, r6
 80096f0:	ab19      	add	r3, sp, #100	; 0x64
 80096f2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80096f6:	4650      	mov	r0, sl
 80096f8:	f000 f976 	bl	80099e8 <_dtoa_r>
 80096fc:	2f47      	cmp	r7, #71	; 0x47
 80096fe:	4680      	mov	r8, r0
 8009700:	d102      	bne.n	8009708 <_svfprintf_r+0xdc8>
 8009702:	07eb      	lsls	r3, r5, #31
 8009704:	f140 80cd 	bpl.w	80098a2 <_svfprintf_r+0xf62>
 8009708:	eb08 0306 	add.w	r3, r8, r6
 800970c:	2f46      	cmp	r7, #70	; 0x46
 800970e:	9304      	str	r3, [sp, #16]
 8009710:	d111      	bne.n	8009736 <_svfprintf_r+0xdf6>
 8009712:	f898 3000 	ldrb.w	r3, [r8]
 8009716:	2b30      	cmp	r3, #48	; 0x30
 8009718:	d109      	bne.n	800972e <_svfprintf_r+0xdee>
 800971a:	2200      	movs	r2, #0
 800971c:	2300      	movs	r3, #0
 800971e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009722:	f7f7 f9cd 	bl	8000ac0 <__aeabi_dcmpeq>
 8009726:	b910      	cbnz	r0, 800972e <_svfprintf_r+0xdee>
 8009728:	f1c6 0601 	rsb	r6, r6, #1
 800972c:	9619      	str	r6, [sp, #100]	; 0x64
 800972e:	9a04      	ldr	r2, [sp, #16]
 8009730:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009732:	441a      	add	r2, r3
 8009734:	9204      	str	r2, [sp, #16]
 8009736:	2200      	movs	r2, #0
 8009738:	2300      	movs	r3, #0
 800973a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800973e:	f7f7 f9bf 	bl	8000ac0 <__aeabi_dcmpeq>
 8009742:	b908      	cbnz	r0, 8009748 <_svfprintf_r+0xe08>
 8009744:	2230      	movs	r2, #48	; 0x30
 8009746:	e002      	b.n	800974e <_svfprintf_r+0xe0e>
 8009748:	9b04      	ldr	r3, [sp, #16]
 800974a:	931d      	str	r3, [sp, #116]	; 0x74
 800974c:	e007      	b.n	800975e <_svfprintf_r+0xe1e>
 800974e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009750:	9904      	ldr	r1, [sp, #16]
 8009752:	4299      	cmp	r1, r3
 8009754:	d903      	bls.n	800975e <_svfprintf_r+0xe1e>
 8009756:	1c59      	adds	r1, r3, #1
 8009758:	911d      	str	r1, [sp, #116]	; 0x74
 800975a:	701a      	strb	r2, [r3, #0]
 800975c:	e7f7      	b.n	800974e <_svfprintf_r+0xe0e>
 800975e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009760:	2f47      	cmp	r7, #71	; 0x47
 8009762:	ebc8 0303 	rsb	r3, r8, r3
 8009766:	9304      	str	r3, [sp, #16]
 8009768:	d108      	bne.n	800977c <_svfprintf_r+0xe3c>
 800976a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800976c:	1cdf      	adds	r7, r3, #3
 800976e:	db01      	blt.n	8009774 <_svfprintf_r+0xe34>
 8009770:	4599      	cmp	r9, r3
 8009772:	da68      	bge.n	8009846 <_svfprintf_r+0xf06>
 8009774:	9b02      	ldr	r3, [sp, #8]
 8009776:	3b02      	subs	r3, #2
 8009778:	9302      	str	r3, [sp, #8]
 800977a:	e002      	b.n	8009782 <_svfprintf_r+0xe42>
 800977c:	9b02      	ldr	r3, [sp, #8]
 800977e:	2b65      	cmp	r3, #101	; 0x65
 8009780:	dc4a      	bgt.n	8009818 <_svfprintf_r+0xed8>
 8009782:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009784:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8009788:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 800978c:	3b01      	subs	r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	9319      	str	r3, [sp, #100]	; 0x64
 8009792:	bfba      	itte	lt
 8009794:	425b      	neglt	r3, r3
 8009796:	222d      	movlt	r2, #45	; 0x2d
 8009798:	222b      	movge	r2, #43	; 0x2b
 800979a:	2b09      	cmp	r3, #9
 800979c:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80097a0:	dd24      	ble.n	80097ec <_svfprintf_r+0xeac>
 80097a2:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80097a6:	200a      	movs	r0, #10
 80097a8:	fb93 f1f0 	sdiv	r1, r3, r0
 80097ac:	fb00 3311 	mls	r3, r0, r1, r3
 80097b0:	3330      	adds	r3, #48	; 0x30
 80097b2:	2909      	cmp	r1, #9
 80097b4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80097b8:	460b      	mov	r3, r1
 80097ba:	dcf5      	bgt.n	80097a8 <_svfprintf_r+0xe68>
 80097bc:	3330      	adds	r3, #48	; 0x30
 80097be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80097c2:	1e51      	subs	r1, r2, #1
 80097c4:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80097c8:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80097cc:	4281      	cmp	r1, r0
 80097ce:	461a      	mov	r2, r3
 80097d0:	d213      	bcs.n	80097fa <_svfprintf_r+0xeba>
 80097d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097d6:	f803 2b01 	strb.w	r2, [r3], #1
 80097da:	e7f7      	b.n	80097cc <_svfprintf_r+0xe8c>
 80097dc:	0800b2e4 	.word	0x0800b2e4
 80097e0:	0800b328 	.word	0x0800b328
 80097e4:	0800b2fc 	.word	0x0800b2fc
 80097e8:	0800b300 	.word	0x0800b300
 80097ec:	2230      	movs	r2, #48	; 0x30
 80097ee:	4413      	add	r3, r2
 80097f0:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80097f4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80097f8:	aa1c      	add	r2, sp, #112	; 0x70
 80097fa:	ab1b      	add	r3, sp, #108	; 0x6c
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	9a04      	ldr	r2, [sp, #16]
 8009800:	9310      	str	r3, [sp, #64]	; 0x40
 8009802:	2a01      	cmp	r2, #1
 8009804:	eb03 0902 	add.w	r9, r3, r2
 8009808:	dc02      	bgt.n	8009810 <_svfprintf_r+0xed0>
 800980a:	f015 0701 	ands.w	r7, r5, #1
 800980e:	d032      	beq.n	8009876 <_svfprintf_r+0xf36>
 8009810:	9b08      	ldr	r3, [sp, #32]
 8009812:	2700      	movs	r7, #0
 8009814:	4499      	add	r9, r3
 8009816:	e02e      	b.n	8009876 <_svfprintf_r+0xf36>
 8009818:	9b02      	ldr	r3, [sp, #8]
 800981a:	2b66      	cmp	r3, #102	; 0x66
 800981c:	d113      	bne.n	8009846 <_svfprintf_r+0xf06>
 800981e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009820:	2b00      	cmp	r3, #0
 8009822:	dd07      	ble.n	8009834 <_svfprintf_r+0xef4>
 8009824:	f1b9 0f00 	cmp.w	r9, #0
 8009828:	d101      	bne.n	800982e <_svfprintf_r+0xeee>
 800982a:	07ee      	lsls	r6, r5, #31
 800982c:	d521      	bpl.n	8009872 <_svfprintf_r+0xf32>
 800982e:	9a08      	ldr	r2, [sp, #32]
 8009830:	4413      	add	r3, r2
 8009832:	e006      	b.n	8009842 <_svfprintf_r+0xf02>
 8009834:	f1b9 0f00 	cmp.w	r9, #0
 8009838:	d101      	bne.n	800983e <_svfprintf_r+0xefe>
 800983a:	07ed      	lsls	r5, r5, #31
 800983c:	d514      	bpl.n	8009868 <_svfprintf_r+0xf28>
 800983e:	9b08      	ldr	r3, [sp, #32]
 8009840:	3301      	adds	r3, #1
 8009842:	444b      	add	r3, r9
 8009844:	e015      	b.n	8009872 <_svfprintf_r+0xf32>
 8009846:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009848:	9a04      	ldr	r2, [sp, #16]
 800984a:	4293      	cmp	r3, r2
 800984c:	db03      	blt.n	8009856 <_svfprintf_r+0xf16>
 800984e:	07e8      	lsls	r0, r5, #31
 8009850:	d50d      	bpl.n	800986e <_svfprintf_r+0xf2e>
 8009852:	9a08      	ldr	r2, [sp, #32]
 8009854:	e006      	b.n	8009864 <_svfprintf_r+0xf24>
 8009856:	9a04      	ldr	r2, [sp, #16]
 8009858:	9908      	ldr	r1, [sp, #32]
 800985a:	2b00      	cmp	r3, #0
 800985c:	440a      	add	r2, r1
 800985e:	dc05      	bgt.n	800986c <_svfprintf_r+0xf2c>
 8009860:	f1c3 0301 	rsb	r3, r3, #1
 8009864:	4413      	add	r3, r2
 8009866:	e002      	b.n	800986e <_svfprintf_r+0xf2e>
 8009868:	2301      	movs	r3, #1
 800986a:	e002      	b.n	8009872 <_svfprintf_r+0xf32>
 800986c:	4613      	mov	r3, r2
 800986e:	2267      	movs	r2, #103	; 0x67
 8009870:	9202      	str	r2, [sp, #8]
 8009872:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8009874:	4699      	mov	r9, r3
 8009876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009878:	b113      	cbz	r3, 8009880 <_svfprintf_r+0xf40>
 800987a:	232d      	movs	r3, #45	; 0x2d
 800987c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8009880:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009882:	2600      	movs	r6, #0
 8009884:	f7ff bb4c 	b.w	8008f20 <_svfprintf_r+0x5e0>
 8009888:	2200      	movs	r2, #0
 800988a:	2300      	movs	r3, #0
 800988c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009890:	f7f7 f920 	bl	8000ad4 <__aeabi_dcmplt>
 8009894:	b110      	cbz	r0, 800989c <_svfprintf_r+0xf5c>
 8009896:	232d      	movs	r3, #45	; 0x2d
 8009898:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800989c:	4b07      	ldr	r3, [pc, #28]	; (80098bc <_svfprintf_r+0xf7c>)
 800989e:	4a08      	ldr	r2, [pc, #32]	; (80098c0 <_svfprintf_r+0xf80>)
 80098a0:	e6e3      	b.n	800966a <_svfprintf_r+0xd2a>
 80098a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098a4:	1a1b      	subs	r3, r3, r0
 80098a6:	9304      	str	r3, [sp, #16]
 80098a8:	e75f      	b.n	800976a <_svfprintf_r+0xe2a>
 80098aa:	ea56 0207 	orrs.w	r2, r6, r7
 80098ae:	f47f aaaa 	bne.w	8008e06 <_svfprintf_r+0x4c6>
 80098b2:	f7ff baaf 	b.w	8008e14 <_svfprintf_r+0x4d4>
 80098b6:	b03d      	add	sp, #244	; 0xf4
 80098b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098bc:	0800b2f4 	.word	0x0800b2f4
 80098c0:	0800b2f8 	.word	0x0800b2f8

080098c4 <quorem>:
 80098c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	6903      	ldr	r3, [r0, #16]
 80098ca:	690c      	ldr	r4, [r1, #16]
 80098cc:	429c      	cmp	r4, r3
 80098ce:	4680      	mov	r8, r0
 80098d0:	f300 8083 	bgt.w	80099da <quorem+0x116>
 80098d4:	3c01      	subs	r4, #1
 80098d6:	f101 0714 	add.w	r7, r1, #20
 80098da:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80098de:	f100 0614 	add.w	r6, r0, #20
 80098e2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80098e6:	eb06 030e 	add.w	r3, r6, lr
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	3501      	adds	r5, #1
 80098ee:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80098f2:	fbb3 f5f5 	udiv	r5, r3, r5
 80098f6:	eb07 090e 	add.w	r9, r7, lr
 80098fa:	2d00      	cmp	r5, #0
 80098fc:	d039      	beq.n	8009972 <quorem+0xae>
 80098fe:	f04f 0a00 	mov.w	sl, #0
 8009902:	4638      	mov	r0, r7
 8009904:	46b4      	mov	ip, r6
 8009906:	46d3      	mov	fp, sl
 8009908:	f850 2b04 	ldr.w	r2, [r0], #4
 800990c:	b293      	uxth	r3, r2
 800990e:	fb05 a303 	mla	r3, r5, r3, sl
 8009912:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009916:	b29b      	uxth	r3, r3
 8009918:	ebc3 030b 	rsb	r3, r3, fp
 800991c:	0c12      	lsrs	r2, r2, #16
 800991e:	f8bc b000 	ldrh.w	fp, [ip]
 8009922:	fb05 a202 	mla	r2, r5, r2, sl
 8009926:	fa13 f38b 	uxtah	r3, r3, fp
 800992a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800992e:	fa1f fb82 	uxth.w	fp, r2
 8009932:	f8dc 2000 	ldr.w	r2, [ip]
 8009936:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800993a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800993e:	b29b      	uxth	r3, r3
 8009940:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009944:	4581      	cmp	r9, r0
 8009946:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800994a:	f84c 3b04 	str.w	r3, [ip], #4
 800994e:	d2db      	bcs.n	8009908 <quorem+0x44>
 8009950:	f856 300e 	ldr.w	r3, [r6, lr]
 8009954:	b96b      	cbnz	r3, 8009972 <quorem+0xae>
 8009956:	9b01      	ldr	r3, [sp, #4]
 8009958:	3b04      	subs	r3, #4
 800995a:	429e      	cmp	r6, r3
 800995c:	461a      	mov	r2, r3
 800995e:	d302      	bcc.n	8009966 <quorem+0xa2>
 8009960:	f8c8 4010 	str.w	r4, [r8, #16]
 8009964:	e005      	b.n	8009972 <quorem+0xae>
 8009966:	6812      	ldr	r2, [r2, #0]
 8009968:	3b04      	subs	r3, #4
 800996a:	2a00      	cmp	r2, #0
 800996c:	d1f8      	bne.n	8009960 <quorem+0x9c>
 800996e:	3c01      	subs	r4, #1
 8009970:	e7f3      	b.n	800995a <quorem+0x96>
 8009972:	4640      	mov	r0, r8
 8009974:	f001 f8fd 	bl	800ab72 <__mcmp>
 8009978:	2800      	cmp	r0, #0
 800997a:	db2c      	blt.n	80099d6 <quorem+0x112>
 800997c:	3501      	adds	r5, #1
 800997e:	4630      	mov	r0, r6
 8009980:	f04f 0e00 	mov.w	lr, #0
 8009984:	f857 1b04 	ldr.w	r1, [r7], #4
 8009988:	f8d0 c000 	ldr.w	ip, [r0]
 800998c:	b28a      	uxth	r2, r1
 800998e:	ebc2 030e 	rsb	r3, r2, lr
 8009992:	0c09      	lsrs	r1, r1, #16
 8009994:	fa13 f38c 	uxtah	r3, r3, ip
 8009998:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 800999c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099a6:	45b9      	cmp	r9, r7
 80099a8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80099ac:	f840 3b04 	str.w	r3, [r0], #4
 80099b0:	d2e8      	bcs.n	8009984 <quorem+0xc0>
 80099b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80099b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80099ba:	b962      	cbnz	r2, 80099d6 <quorem+0x112>
 80099bc:	3b04      	subs	r3, #4
 80099be:	429e      	cmp	r6, r3
 80099c0:	461a      	mov	r2, r3
 80099c2:	d302      	bcc.n	80099ca <quorem+0x106>
 80099c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80099c8:	e005      	b.n	80099d6 <quorem+0x112>
 80099ca:	6812      	ldr	r2, [r2, #0]
 80099cc:	3b04      	subs	r3, #4
 80099ce:	2a00      	cmp	r2, #0
 80099d0:	d1f8      	bne.n	80099c4 <quorem+0x100>
 80099d2:	3c01      	subs	r4, #1
 80099d4:	e7f3      	b.n	80099be <quorem+0xfa>
 80099d6:	4628      	mov	r0, r5
 80099d8:	e000      	b.n	80099dc <quorem+0x118>
 80099da:	2000      	movs	r0, #0
 80099dc:	b003      	add	sp, #12
 80099de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e2:	0000      	movs	r0, r0
 80099e4:	0000      	movs	r0, r0
	...

080099e8 <_dtoa_r>:
 80099e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	ec59 8b10 	vmov	r8, r9, d0
 80099f0:	b097      	sub	sp, #92	; 0x5c
 80099f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099f4:	9106      	str	r1, [sp, #24]
 80099f6:	4682      	mov	sl, r0
 80099f8:	9209      	str	r2, [sp, #36]	; 0x24
 80099fa:	9310      	str	r3, [sp, #64]	; 0x40
 80099fc:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80099fe:	e9cd 8900 	strd	r8, r9, [sp]
 8009a02:	b945      	cbnz	r5, 8009a16 <_dtoa_r+0x2e>
 8009a04:	2010      	movs	r0, #16
 8009a06:	f7fe fd27 	bl	8008458 <malloc>
 8009a0a:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8009a0e:	6045      	str	r5, [r0, #4]
 8009a10:	6085      	str	r5, [r0, #8]
 8009a12:	6005      	str	r5, [r0, #0]
 8009a14:	60c5      	str	r5, [r0, #12]
 8009a16:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8009a1a:	6819      	ldr	r1, [r3, #0]
 8009a1c:	b159      	cbz	r1, 8009a36 <_dtoa_r+0x4e>
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	604a      	str	r2, [r1, #4]
 8009a22:	2301      	movs	r3, #1
 8009a24:	4093      	lsls	r3, r2
 8009a26:	608b      	str	r3, [r1, #8]
 8009a28:	4650      	mov	r0, sl
 8009a2a:	f000 feca 	bl	800a7c2 <_Bfree>
 8009a2e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8009a32:	2200      	movs	r2, #0
 8009a34:	601a      	str	r2, [r3, #0]
 8009a36:	9b01      	ldr	r3, [sp, #4]
 8009a38:	4a9f      	ldr	r2, [pc, #636]	; (8009cb8 <_dtoa_r+0x2d0>)
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	bfbf      	itttt	lt
 8009a3e:	2301      	movlt	r3, #1
 8009a40:	6023      	strlt	r3, [r4, #0]
 8009a42:	9b01      	ldrlt	r3, [sp, #4]
 8009a44:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009a48:	bfb8      	it	lt
 8009a4a:	9301      	strlt	r3, [sp, #4]
 8009a4c:	9f01      	ldr	r7, [sp, #4]
 8009a4e:	bfa4      	itt	ge
 8009a50:	2300      	movge	r3, #0
 8009a52:	6023      	strge	r3, [r4, #0]
 8009a54:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8009a58:	0d1b      	lsrs	r3, r3, #20
 8009a5a:	051b      	lsls	r3, r3, #20
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d11d      	bne.n	8009a9c <_dtoa_r+0xb4>
 8009a60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a62:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a66:	6013      	str	r3, [r2, #0]
 8009a68:	9b00      	ldr	r3, [sp, #0]
 8009a6a:	b943      	cbnz	r3, 8009a7e <_dtoa_r+0x96>
 8009a6c:	4a93      	ldr	r2, [pc, #588]	; (8009cbc <_dtoa_r+0x2d4>)
 8009a6e:	4b94      	ldr	r3, [pc, #592]	; (8009cc0 <_dtoa_r+0x2d8>)
 8009a70:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8009a74:	2800      	cmp	r0, #0
 8009a76:	bf14      	ite	ne
 8009a78:	4618      	movne	r0, r3
 8009a7a:	4610      	moveq	r0, r2
 8009a7c:	e000      	b.n	8009a80 <_dtoa_r+0x98>
 8009a7e:	4890      	ldr	r0, [pc, #576]	; (8009cc0 <_dtoa_r+0x2d8>)
 8009a80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f000 854a 	beq.w	800a51c <_dtoa_r+0xb34>
 8009a88:	78c3      	ldrb	r3, [r0, #3]
 8009a8a:	b113      	cbz	r3, 8009a92 <_dtoa_r+0xaa>
 8009a8c:	f100 0308 	add.w	r3, r0, #8
 8009a90:	e000      	b.n	8009a94 <_dtoa_r+0xac>
 8009a92:	1cc3      	adds	r3, r0, #3
 8009a94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a96:	6013      	str	r3, [r2, #0]
 8009a98:	f000 bd40 	b.w	800a51c <_dtoa_r+0xb34>
 8009a9c:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	f7f7 f80a 	bl	8000ac0 <__aeabi_dcmpeq>
 8009aac:	4680      	mov	r8, r0
 8009aae:	b158      	cbz	r0, 8009ac8 <_dtoa_r+0xe0>
 8009ab0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	6013      	str	r3, [r2, #0]
 8009ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 8522 	beq.w	800a502 <_dtoa_r+0xb1a>
 8009abe:	4881      	ldr	r0, [pc, #516]	; (8009cc4 <_dtoa_r+0x2dc>)
 8009ac0:	6018      	str	r0, [r3, #0]
 8009ac2:	3801      	subs	r0, #1
 8009ac4:	f000 bd2a 	b.w	800a51c <_dtoa_r+0xb34>
 8009ac8:	aa14      	add	r2, sp, #80	; 0x50
 8009aca:	a915      	add	r1, sp, #84	; 0x54
 8009acc:	ec45 4b10 	vmov	d0, r4, r5
 8009ad0:	4650      	mov	r0, sl
 8009ad2:	f001 f8c9 	bl	800ac68 <__d2b>
 8009ad6:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009ada:	9002      	str	r0, [sp, #8]
 8009adc:	b15e      	cbz	r6, 8009af6 <_dtoa_r+0x10e>
 8009ade:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009ae2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009aec:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8009af0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8009af4:	e01d      	b.n	8009b32 <_dtoa_r+0x14a>
 8009af6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009af8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009afa:	441e      	add	r6, r3
 8009afc:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8009b00:	2b20      	cmp	r3, #32
 8009b02:	dd0a      	ble.n	8009b1a <_dtoa_r+0x132>
 8009b04:	9a00      	ldr	r2, [sp, #0]
 8009b06:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8009b0a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009b0e:	fa22 f000 	lsr.w	r0, r2, r0
 8009b12:	fa07 f303 	lsl.w	r3, r7, r3
 8009b16:	4318      	orrs	r0, r3
 8009b18:	e004      	b.n	8009b24 <_dtoa_r+0x13c>
 8009b1a:	f1c3 0020 	rsb	r0, r3, #32
 8009b1e:	9b00      	ldr	r3, [sp, #0]
 8009b20:	fa03 f000 	lsl.w	r0, r3, r0
 8009b24:	f7f6 fcee 	bl	8000504 <__aeabi_ui2d>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009b2e:	3e01      	subs	r6, #1
 8009b30:	9311      	str	r3, [sp, #68]	; 0x44
 8009b32:	2200      	movs	r2, #0
 8009b34:	4b64      	ldr	r3, [pc, #400]	; (8009cc8 <_dtoa_r+0x2e0>)
 8009b36:	f7f6 fba7 	bl	8000288 <__aeabi_dsub>
 8009b3a:	a359      	add	r3, pc, #356	; (adr r3, 8009ca0 <_dtoa_r+0x2b8>)
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	f7f6 fd56 	bl	80005f0 <__aeabi_dmul>
 8009b44:	a358      	add	r3, pc, #352	; (adr r3, 8009ca8 <_dtoa_r+0x2c0>)
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	f7f6 fb9f 	bl	800028c <__adddf3>
 8009b4e:	4604      	mov	r4, r0
 8009b50:	4630      	mov	r0, r6
 8009b52:	460d      	mov	r5, r1
 8009b54:	f7f6 fce6 	bl	8000524 <__aeabi_i2d>
 8009b58:	a355      	add	r3, pc, #340	; (adr r3, 8009cb0 <_dtoa_r+0x2c8>)
 8009b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5e:	f7f6 fd47 	bl	80005f0 <__aeabi_dmul>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	4620      	mov	r0, r4
 8009b68:	4629      	mov	r1, r5
 8009b6a:	f7f6 fb8f 	bl	800028c <__adddf3>
 8009b6e:	4604      	mov	r4, r0
 8009b70:	460d      	mov	r5, r1
 8009b72:	f7f6 ffed 	bl	8000b50 <__aeabi_d2iz>
 8009b76:	2200      	movs	r2, #0
 8009b78:	4683      	mov	fp, r0
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	4629      	mov	r1, r5
 8009b80:	f7f6 ffa8 	bl	8000ad4 <__aeabi_dcmplt>
 8009b84:	b158      	cbz	r0, 8009b9e <_dtoa_r+0x1b6>
 8009b86:	4658      	mov	r0, fp
 8009b88:	f7f6 fccc 	bl	8000524 <__aeabi_i2d>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4620      	mov	r0, r4
 8009b92:	4629      	mov	r1, r5
 8009b94:	f7f6 ff94 	bl	8000ac0 <__aeabi_dcmpeq>
 8009b98:	b908      	cbnz	r0, 8009b9e <_dtoa_r+0x1b6>
 8009b9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b9e:	f1bb 0f16 	cmp.w	fp, #22
 8009ba2:	d80d      	bhi.n	8009bc0 <_dtoa_r+0x1d8>
 8009ba4:	4949      	ldr	r1, [pc, #292]	; (8009ccc <_dtoa_r+0x2e4>)
 8009ba6:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009baa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bb2:	f7f6 ffad 	bl	8000b10 <__aeabi_dcmpgt>
 8009bb6:	b130      	cbz	r0, 8009bc6 <_dtoa_r+0x1de>
 8009bb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	e000      	b.n	8009bc2 <_dtoa_r+0x1da>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	930d      	str	r3, [sp, #52]	; 0x34
 8009bc4:	e000      	b.n	8009bc8 <_dtoa_r+0x1e0>
 8009bc6:	900d      	str	r0, [sp, #52]	; 0x34
 8009bc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bca:	1b9e      	subs	r6, r3, r6
 8009bcc:	1e73      	subs	r3, r6, #1
 8009bce:	9305      	str	r3, [sp, #20]
 8009bd0:	bf43      	ittte	mi
 8009bd2:	f1c3 0900 	rsbmi	r9, r3, #0
 8009bd6:	2300      	movmi	r3, #0
 8009bd8:	9305      	strmi	r3, [sp, #20]
 8009bda:	f04f 0900 	movpl.w	r9, #0
 8009bde:	f1bb 0f00 	cmp.w	fp, #0
 8009be2:	db07      	blt.n	8009bf4 <_dtoa_r+0x20c>
 8009be4:	9b05      	ldr	r3, [sp, #20]
 8009be6:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8009bea:	445b      	add	r3, fp
 8009bec:	9305      	str	r3, [sp, #20]
 8009bee:	2300      	movs	r3, #0
 8009bf0:	9307      	str	r3, [sp, #28]
 8009bf2:	e006      	b.n	8009c02 <_dtoa_r+0x21a>
 8009bf4:	f1cb 0300 	rsb	r3, fp, #0
 8009bf8:	9307      	str	r3, [sp, #28]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	ebcb 0909 	rsb	r9, fp, r9
 8009c00:	930c      	str	r3, [sp, #48]	; 0x30
 8009c02:	9b06      	ldr	r3, [sp, #24]
 8009c04:	2b09      	cmp	r3, #9
 8009c06:	d827      	bhi.n	8009c58 <_dtoa_r+0x270>
 8009c08:	2b05      	cmp	r3, #5
 8009c0a:	bfc4      	itt	gt
 8009c0c:	3b04      	subgt	r3, #4
 8009c0e:	9306      	strgt	r3, [sp, #24]
 8009c10:	9b06      	ldr	r3, [sp, #24]
 8009c12:	f1a3 0302 	sub.w	r3, r3, #2
 8009c16:	bfcc      	ite	gt
 8009c18:	2500      	movgt	r5, #0
 8009c1a:	2501      	movle	r5, #1
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d820      	bhi.n	8009c62 <_dtoa_r+0x27a>
 8009c20:	e8df f003 	tbb	[pc, r3]
 8009c24:	04020e06 	.word	0x04020e06
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e002      	b.n	8009c32 <_dtoa_r+0x24a>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e008      	b.n	8009c42 <_dtoa_r+0x25a>
 8009c30:	2300      	movs	r3, #0
 8009c32:	9308      	str	r3, [sp, #32]
 8009c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	dd1c      	ble.n	8009c74 <_dtoa_r+0x28c>
 8009c3a:	9303      	str	r3, [sp, #12]
 8009c3c:	4698      	mov	r8, r3
 8009c3e:	e01e      	b.n	8009c7e <_dtoa_r+0x296>
 8009c40:	2300      	movs	r3, #0
 8009c42:	9308      	str	r3, [sp, #32]
 8009c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c46:	445b      	add	r3, fp
 8009c48:	f103 0801 	add.w	r8, r3, #1
 8009c4c:	9303      	str	r3, [sp, #12]
 8009c4e:	4643      	mov	r3, r8
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	bfb8      	it	lt
 8009c54:	2301      	movlt	r3, #1
 8009c56:	e012      	b.n	8009c7e <_dtoa_r+0x296>
 8009c58:	2501      	movs	r5, #1
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	9306      	str	r3, [sp, #24]
 8009c5e:	9508      	str	r5, [sp, #32]
 8009c60:	e001      	b.n	8009c66 <_dtoa_r+0x27e>
 8009c62:	2301      	movs	r3, #1
 8009c64:	9308      	str	r3, [sp, #32]
 8009c66:	f04f 33ff 	mov.w	r3, #4294967295
 8009c6a:	9303      	str	r3, [sp, #12]
 8009c6c:	4698      	mov	r8, r3
 8009c6e:	2200      	movs	r2, #0
 8009c70:	2312      	movs	r3, #18
 8009c72:	e003      	b.n	8009c7c <_dtoa_r+0x294>
 8009c74:	2301      	movs	r3, #1
 8009c76:	9303      	str	r3, [sp, #12]
 8009c78:	4698      	mov	r8, r3
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c7e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8009c82:	2200      	movs	r2, #0
 8009c84:	6062      	str	r2, [r4, #4]
 8009c86:	2104      	movs	r1, #4
 8009c88:	f101 0214 	add.w	r2, r1, #20
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d81f      	bhi.n	8009cd0 <_dtoa_r+0x2e8>
 8009c90:	6862      	ldr	r2, [r4, #4]
 8009c92:	3201      	adds	r2, #1
 8009c94:	6062      	str	r2, [r4, #4]
 8009c96:	0049      	lsls	r1, r1, #1
 8009c98:	e7f6      	b.n	8009c88 <_dtoa_r+0x2a0>
 8009c9a:	bf00      	nop
 8009c9c:	f3af 8000 	nop.w
 8009ca0:	636f4361 	.word	0x636f4361
 8009ca4:	3fd287a7 	.word	0x3fd287a7
 8009ca8:	8b60c8b3 	.word	0x8b60c8b3
 8009cac:	3fc68a28 	.word	0x3fc68a28
 8009cb0:	509f79fb 	.word	0x509f79fb
 8009cb4:	3fd34413 	.word	0x3fd34413
 8009cb8:	7ff00000 	.word	0x7ff00000
 8009cbc:	0800b338 	.word	0x0800b338
 8009cc0:	0800b341 	.word	0x0800b341
 8009cc4:	0800b327 	.word	0x0800b327
 8009cc8:	3ff80000 	.word	0x3ff80000
 8009ccc:	0800b350 	.word	0x0800b350
 8009cd0:	6861      	ldr	r1, [r4, #4]
 8009cd2:	4650      	mov	r0, sl
 8009cd4:	f000 fd40 	bl	800a758 <_Balloc>
 8009cd8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8009cdc:	6020      	str	r0, [r4, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	9304      	str	r3, [sp, #16]
 8009ce2:	f1b8 0f0e 	cmp.w	r8, #14
 8009ce6:	f200 815d 	bhi.w	8009fa4 <_dtoa_r+0x5bc>
 8009cea:	2d00      	cmp	r5, #0
 8009cec:	f000 815a 	beq.w	8009fa4 <_dtoa_r+0x5bc>
 8009cf0:	ed9d 7b00 	vldr	d7, [sp]
 8009cf4:	f1bb 0f00 	cmp.w	fp, #0
 8009cf8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8009cfc:	dd31      	ble.n	8009d62 <_dtoa_r+0x37a>
 8009cfe:	4aa0      	ldr	r2, [pc, #640]	; (8009f80 <_dtoa_r+0x598>)
 8009d00:	f00b 030f 	and.w	r3, fp, #15
 8009d04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d08:	ed93 7b00 	vldr	d7, [r3]
 8009d0c:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009d10:	06e2      	lsls	r2, r4, #27
 8009d12:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009d16:	d50c      	bpl.n	8009d32 <_dtoa_r+0x34a>
 8009d18:	4b9a      	ldr	r3, [pc, #616]	; (8009f84 <_dtoa_r+0x59c>)
 8009d1a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009d1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d22:	f7f6 fd8f 	bl	8000844 <__aeabi_ddiv>
 8009d26:	f004 040f 	and.w	r4, r4, #15
 8009d2a:	e9cd 0100 	strd	r0, r1, [sp]
 8009d2e:	2603      	movs	r6, #3
 8009d30:	e000      	b.n	8009d34 <_dtoa_r+0x34c>
 8009d32:	2602      	movs	r6, #2
 8009d34:	4d93      	ldr	r5, [pc, #588]	; (8009f84 <_dtoa_r+0x59c>)
 8009d36:	b16c      	cbz	r4, 8009d54 <_dtoa_r+0x36c>
 8009d38:	07e3      	lsls	r3, r4, #31
 8009d3a:	d508      	bpl.n	8009d4e <_dtoa_r+0x366>
 8009d3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d44:	f7f6 fc54 	bl	80005f0 <__aeabi_dmul>
 8009d48:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009d4c:	3601      	adds	r6, #1
 8009d4e:	1064      	asrs	r4, r4, #1
 8009d50:	3508      	adds	r5, #8
 8009d52:	e7f0      	b.n	8009d36 <_dtoa_r+0x34e>
 8009d54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d5c:	f7f6 fd72 	bl	8000844 <__aeabi_ddiv>
 8009d60:	e020      	b.n	8009da4 <_dtoa_r+0x3bc>
 8009d62:	f1cb 0400 	rsb	r4, fp, #0
 8009d66:	b304      	cbz	r4, 8009daa <_dtoa_r+0x3c2>
 8009d68:	4b85      	ldr	r3, [pc, #532]	; (8009f80 <_dtoa_r+0x598>)
 8009d6a:	4d86      	ldr	r5, [pc, #536]	; (8009f84 <_dtoa_r+0x59c>)
 8009d6c:	f004 020f 	and.w	r2, r4, #15
 8009d70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009d7c:	f7f6 fc38 	bl	80005f0 <__aeabi_dmul>
 8009d80:	e9cd 0100 	strd	r0, r1, [sp]
 8009d84:	1124      	asrs	r4, r4, #4
 8009d86:	2300      	movs	r3, #0
 8009d88:	2602      	movs	r6, #2
 8009d8a:	b154      	cbz	r4, 8009da2 <_dtoa_r+0x3ba>
 8009d8c:	07e7      	lsls	r7, r4, #31
 8009d8e:	d505      	bpl.n	8009d9c <_dtoa_r+0x3b4>
 8009d90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d94:	f7f6 fc2c 	bl	80005f0 <__aeabi_dmul>
 8009d98:	3601      	adds	r6, #1
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	1064      	asrs	r4, r4, #1
 8009d9e:	3508      	adds	r5, #8
 8009da0:	e7f3      	b.n	8009d8a <_dtoa_r+0x3a2>
 8009da2:	b11b      	cbz	r3, 8009dac <_dtoa_r+0x3c4>
 8009da4:	e9cd 0100 	strd	r0, r1, [sp]
 8009da8:	e000      	b.n	8009dac <_dtoa_r+0x3c4>
 8009daa:	2602      	movs	r6, #2
 8009dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dae:	b1eb      	cbz	r3, 8009dec <_dtoa_r+0x404>
 8009db0:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009db4:	2200      	movs	r2, #0
 8009db6:	4b74      	ldr	r3, [pc, #464]	; (8009f88 <_dtoa_r+0x5a0>)
 8009db8:	4620      	mov	r0, r4
 8009dba:	4629      	mov	r1, r5
 8009dbc:	f7f6 fe8a 	bl	8000ad4 <__aeabi_dcmplt>
 8009dc0:	b1a0      	cbz	r0, 8009dec <_dtoa_r+0x404>
 8009dc2:	f1b8 0f00 	cmp.w	r8, #0
 8009dc6:	d011      	beq.n	8009dec <_dtoa_r+0x404>
 8009dc8:	9b03      	ldr	r3, [sp, #12]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f340 80e6 	ble.w	8009f9c <_dtoa_r+0x5b4>
 8009dd0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	4b6c      	ldr	r3, [pc, #432]	; (8009f8c <_dtoa_r+0x5a4>)
 8009dda:	4620      	mov	r0, r4
 8009ddc:	4629      	mov	r1, r5
 8009dde:	f7f6 fc07 	bl	80005f0 <__aeabi_dmul>
 8009de2:	3601      	adds	r6, #1
 8009de4:	e9cd 0100 	strd	r0, r1, [sp]
 8009de8:	9f03      	ldr	r7, [sp, #12]
 8009dea:	e002      	b.n	8009df2 <_dtoa_r+0x40a>
 8009dec:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009df0:	4647      	mov	r7, r8
 8009df2:	4630      	mov	r0, r6
 8009df4:	f7f6 fb96 	bl	8000524 <__aeabi_i2d>
 8009df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dfc:	f7f6 fbf8 	bl	80005f0 <__aeabi_dmul>
 8009e00:	2200      	movs	r2, #0
 8009e02:	4b63      	ldr	r3, [pc, #396]	; (8009f90 <_dtoa_r+0x5a8>)
 8009e04:	f7f6 fa42 	bl	800028c <__adddf3>
 8009e08:	4604      	mov	r4, r0
 8009e0a:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8009e0e:	b9cf      	cbnz	r7, 8009e44 <_dtoa_r+0x45c>
 8009e10:	2200      	movs	r2, #0
 8009e12:	4b60      	ldr	r3, [pc, #384]	; (8009f94 <_dtoa_r+0x5ac>)
 8009e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e18:	f7f6 fa36 	bl	8000288 <__aeabi_dsub>
 8009e1c:	4622      	mov	r2, r4
 8009e1e:	462b      	mov	r3, r5
 8009e20:	e9cd 0100 	strd	r0, r1, [sp]
 8009e24:	f7f6 fe74 	bl	8000b10 <__aeabi_dcmpgt>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	f040 8241 	bne.w	800a2b0 <_dtoa_r+0x8c8>
 8009e2e:	4622      	mov	r2, r4
 8009e30:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009e34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e38:	f7f6 fe4c 	bl	8000ad4 <__aeabi_dcmplt>
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	f040 822e 	bne.w	800a29e <_dtoa_r+0x8b6>
 8009e42:	e0ab      	b.n	8009f9c <_dtoa_r+0x5b4>
 8009e44:	9a08      	ldr	r2, [sp, #32]
 8009e46:	4b4e      	ldr	r3, [pc, #312]	; (8009f80 <_dtoa_r+0x598>)
 8009e48:	1e79      	subs	r1, r7, #1
 8009e4a:	2a00      	cmp	r2, #0
 8009e4c:	d04a      	beq.n	8009ee4 <_dtoa_r+0x4fc>
 8009e4e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	2000      	movs	r0, #0
 8009e58:	494f      	ldr	r1, [pc, #316]	; (8009f98 <_dtoa_r+0x5b0>)
 8009e5a:	f7f6 fcf3 	bl	8000844 <__aeabi_ddiv>
 8009e5e:	4622      	mov	r2, r4
 8009e60:	462b      	mov	r3, r5
 8009e62:	f7f6 fa11 	bl	8000288 <__aeabi_dsub>
 8009e66:	9c04      	ldr	r4, [sp, #16]
 8009e68:	4605      	mov	r5, r0
 8009e6a:	460e      	mov	r6, r1
 8009e6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e70:	f7f6 fe6e 	bl	8000b50 <__aeabi_d2iz>
 8009e74:	9012      	str	r0, [sp, #72]	; 0x48
 8009e76:	f7f6 fb55 	bl	8000524 <__aeabi_i2d>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e82:	f7f6 fa01 	bl	8000288 <__aeabi_dsub>
 8009e86:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e88:	3330      	adds	r3, #48	; 0x30
 8009e8a:	f804 3b01 	strb.w	r3, [r4], #1
 8009e8e:	462a      	mov	r2, r5
 8009e90:	4633      	mov	r3, r6
 8009e92:	e9cd 0100 	strd	r0, r1, [sp]
 8009e96:	f7f6 fe1d 	bl	8000ad4 <__aeabi_dcmplt>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	f040 8321 	bne.w	800a4e2 <_dtoa_r+0xafa>
 8009ea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ea4:	2000      	movs	r0, #0
 8009ea6:	4938      	ldr	r1, [pc, #224]	; (8009f88 <_dtoa_r+0x5a0>)
 8009ea8:	f7f6 f9ee 	bl	8000288 <__aeabi_dsub>
 8009eac:	462a      	mov	r2, r5
 8009eae:	4633      	mov	r3, r6
 8009eb0:	f7f6 fe10 	bl	8000ad4 <__aeabi_dcmplt>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	f040 80d2 	bne.w	800a05e <_dtoa_r+0x676>
 8009eba:	9b04      	ldr	r3, [sp, #16]
 8009ebc:	1ae3      	subs	r3, r4, r3
 8009ebe:	42bb      	cmp	r3, r7
 8009ec0:	da6c      	bge.n	8009f9c <_dtoa_r+0x5b4>
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	4b31      	ldr	r3, [pc, #196]	; (8009f8c <_dtoa_r+0x5a4>)
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	4631      	mov	r1, r6
 8009eca:	f7f6 fb91 	bl	80005f0 <__aeabi_dmul>
 8009ece:	2200      	movs	r2, #0
 8009ed0:	4605      	mov	r5, r0
 8009ed2:	460e      	mov	r6, r1
 8009ed4:	4b2d      	ldr	r3, [pc, #180]	; (8009f8c <_dtoa_r+0x5a4>)
 8009ed6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009eda:	f7f6 fb89 	bl	80005f0 <__aeabi_dmul>
 8009ede:	e9cd 0100 	strd	r0, r1, [sp]
 8009ee2:	e7c3      	b.n	8009e6c <_dtoa_r+0x484>
 8009ee4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009ee8:	4622      	mov	r2, r4
 8009eea:	462b      	mov	r3, r5
 8009eec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ef0:	f7f6 fb7e 	bl	80005f0 <__aeabi_dmul>
 8009ef4:	9b04      	ldr	r3, [sp, #16]
 8009ef6:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8009efa:	19dc      	adds	r4, r3, r7
 8009efc:	461d      	mov	r5, r3
 8009efe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f02:	f7f6 fe25 	bl	8000b50 <__aeabi_d2iz>
 8009f06:	4606      	mov	r6, r0
 8009f08:	f7f6 fb0c 	bl	8000524 <__aeabi_i2d>
 8009f0c:	3630      	adds	r6, #48	; 0x30
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f16:	f7f6 f9b7 	bl	8000288 <__aeabi_dsub>
 8009f1a:	f805 6b01 	strb.w	r6, [r5], #1
 8009f1e:	42ac      	cmp	r4, r5
 8009f20:	e9cd 0100 	strd	r0, r1, [sp]
 8009f24:	f04f 0200 	mov.w	r2, #0
 8009f28:	d123      	bne.n	8009f72 <_dtoa_r+0x58a>
 8009f2a:	4b1b      	ldr	r3, [pc, #108]	; (8009f98 <_dtoa_r+0x5b0>)
 8009f2c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8009f30:	f7f6 f9ac 	bl	800028c <__adddf3>
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f3c:	f7f6 fde8 	bl	8000b10 <__aeabi_dcmpgt>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	f040 808c 	bne.w	800a05e <_dtoa_r+0x676>
 8009f46:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	4912      	ldr	r1, [pc, #72]	; (8009f98 <_dtoa_r+0x5b0>)
 8009f4e:	f7f6 f99b 	bl	8000288 <__aeabi_dsub>
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f5a:	f7f6 fdbb 	bl	8000ad4 <__aeabi_dcmplt>
 8009f5e:	b1e8      	cbz	r0, 8009f9c <_dtoa_r+0x5b4>
 8009f60:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8009f64:	2b30      	cmp	r3, #48	; 0x30
 8009f66:	f104 32ff 	add.w	r2, r4, #4294967295
 8009f6a:	f040 82ba 	bne.w	800a4e2 <_dtoa_r+0xafa>
 8009f6e:	4614      	mov	r4, r2
 8009f70:	e7f6      	b.n	8009f60 <_dtoa_r+0x578>
 8009f72:	4b06      	ldr	r3, [pc, #24]	; (8009f8c <_dtoa_r+0x5a4>)
 8009f74:	f7f6 fb3c 	bl	80005f0 <__aeabi_dmul>
 8009f78:	e9cd 0100 	strd	r0, r1, [sp]
 8009f7c:	e7bf      	b.n	8009efe <_dtoa_r+0x516>
 8009f7e:	bf00      	nop
 8009f80:	0800b350 	.word	0x0800b350
 8009f84:	0800b418 	.word	0x0800b418
 8009f88:	3ff00000 	.word	0x3ff00000
 8009f8c:	40240000 	.word	0x40240000
 8009f90:	401c0000 	.word	0x401c0000
 8009f94:	40140000 	.word	0x40140000
 8009f98:	3fe00000 	.word	0x3fe00000
 8009f9c:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8009fa0:	e88d 0018 	stmia.w	sp, {r3, r4}
 8009fa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	db7c      	blt.n	800a0a4 <_dtoa_r+0x6bc>
 8009faa:	f1bb 0f0e 	cmp.w	fp, #14
 8009fae:	dc79      	bgt.n	800a0a4 <_dtoa_r+0x6bc>
 8009fb0:	4b8f      	ldr	r3, [pc, #572]	; (800a1f0 <_dtoa_r+0x808>)
 8009fb2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009fb6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	da14      	bge.n	8009fea <_dtoa_r+0x602>
 8009fc0:	f1b8 0f00 	cmp.w	r8, #0
 8009fc4:	dc11      	bgt.n	8009fea <_dtoa_r+0x602>
 8009fc6:	f040 816c 	bne.w	800a2a2 <_dtoa_r+0x8ba>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	4b89      	ldr	r3, [pc, #548]	; (800a1f4 <_dtoa_r+0x80c>)
 8009fce:	4630      	mov	r0, r6
 8009fd0:	4639      	mov	r1, r7
 8009fd2:	f7f6 fb0d 	bl	80005f0 <__aeabi_dmul>
 8009fd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fda:	f7f6 fd8f 	bl	8000afc <__aeabi_dcmpge>
 8009fde:	4645      	mov	r5, r8
 8009fe0:	4646      	mov	r6, r8
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	f040 815f 	bne.w	800a2a6 <_dtoa_r+0x8be>
 8009fe8:	e166      	b.n	800a2b8 <_dtoa_r+0x8d0>
 8009fea:	9c04      	ldr	r4, [sp, #16]
 8009fec:	4632      	mov	r2, r6
 8009fee:	463b      	mov	r3, r7
 8009ff0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ff4:	f7f6 fc26 	bl	8000844 <__aeabi_ddiv>
 8009ff8:	f7f6 fdaa 	bl	8000b50 <__aeabi_d2iz>
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	f7f6 fa91 	bl	8000524 <__aeabi_i2d>
 800a002:	4632      	mov	r2, r6
 800a004:	463b      	mov	r3, r7
 800a006:	f7f6 faf3 	bl	80005f0 <__aeabi_dmul>
 800a00a:	460b      	mov	r3, r1
 800a00c:	4602      	mov	r2, r0
 800a00e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a012:	f7f6 f939 	bl	8000288 <__aeabi_dsub>
 800a016:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800a01a:	f804 eb01 	strb.w	lr, [r4], #1
 800a01e:	9b04      	ldr	r3, [sp, #16]
 800a020:	ebc3 0e04 	rsb	lr, r3, r4
 800a024:	45f0      	cmp	r8, lr
 800a026:	e9cd 0100 	strd	r0, r1, [sp]
 800a02a:	d12e      	bne.n	800a08a <_dtoa_r+0x6a2>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	f7f6 f92c 	bl	800028c <__adddf3>
 800a034:	4680      	mov	r8, r0
 800a036:	4689      	mov	r9, r1
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	4630      	mov	r0, r6
 800a03e:	4639      	mov	r1, r7
 800a040:	f7f6 fd48 	bl	8000ad4 <__aeabi_dcmplt>
 800a044:	b978      	cbnz	r0, 800a066 <_dtoa_r+0x67e>
 800a046:	4642      	mov	r2, r8
 800a048:	464b      	mov	r3, r9
 800a04a:	4630      	mov	r0, r6
 800a04c:	4639      	mov	r1, r7
 800a04e:	f7f6 fd37 	bl	8000ac0 <__aeabi_dcmpeq>
 800a052:	2800      	cmp	r0, #0
 800a054:	f000 8247 	beq.w	800a4e6 <_dtoa_r+0xafe>
 800a058:	07e9      	lsls	r1, r5, #31
 800a05a:	d404      	bmi.n	800a066 <_dtoa_r+0x67e>
 800a05c:	e243      	b.n	800a4e6 <_dtoa_r+0xafe>
 800a05e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a062:	e000      	b.n	800a066 <_dtoa_r+0x67e>
 800a064:	461c      	mov	r4, r3
 800a066:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800a06a:	2a39      	cmp	r2, #57	; 0x39
 800a06c:	f104 33ff 	add.w	r3, r4, #4294967295
 800a070:	d107      	bne.n	800a082 <_dtoa_r+0x69a>
 800a072:	9a04      	ldr	r2, [sp, #16]
 800a074:	429a      	cmp	r2, r3
 800a076:	d1f5      	bne.n	800a064 <_dtoa_r+0x67c>
 800a078:	9904      	ldr	r1, [sp, #16]
 800a07a:	2230      	movs	r2, #48	; 0x30
 800a07c:	f10b 0b01 	add.w	fp, fp, #1
 800a080:	700a      	strb	r2, [r1, #0]
 800a082:	781a      	ldrb	r2, [r3, #0]
 800a084:	3201      	adds	r2, #1
 800a086:	701a      	strb	r2, [r3, #0]
 800a088:	e22d      	b.n	800a4e6 <_dtoa_r+0xafe>
 800a08a:	2200      	movs	r2, #0
 800a08c:	4b5a      	ldr	r3, [pc, #360]	; (800a1f8 <_dtoa_r+0x810>)
 800a08e:	f7f6 faaf 	bl	80005f0 <__aeabi_dmul>
 800a092:	2200      	movs	r2, #0
 800a094:	2300      	movs	r3, #0
 800a096:	e9cd 0100 	strd	r0, r1, [sp]
 800a09a:	f7f6 fd11 	bl	8000ac0 <__aeabi_dcmpeq>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d0a4      	beq.n	8009fec <_dtoa_r+0x604>
 800a0a2:	e220      	b.n	800a4e6 <_dtoa_r+0xafe>
 800a0a4:	9a08      	ldr	r2, [sp, #32]
 800a0a6:	2a00      	cmp	r2, #0
 800a0a8:	d02d      	beq.n	800a106 <_dtoa_r+0x71e>
 800a0aa:	9a06      	ldr	r2, [sp, #24]
 800a0ac:	2a01      	cmp	r2, #1
 800a0ae:	dc0a      	bgt.n	800a0c6 <_dtoa_r+0x6de>
 800a0b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a0b2:	b112      	cbz	r2, 800a0ba <_dtoa_r+0x6d2>
 800a0b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a0b8:	e002      	b.n	800a0c0 <_dtoa_r+0x6d8>
 800a0ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0bc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0c0:	9d07      	ldr	r5, [sp, #28]
 800a0c2:	464c      	mov	r4, r9
 800a0c4:	e015      	b.n	800a0f2 <_dtoa_r+0x70a>
 800a0c6:	9b07      	ldr	r3, [sp, #28]
 800a0c8:	f108 35ff 	add.w	r5, r8, #4294967295
 800a0cc:	42ab      	cmp	r3, r5
 800a0ce:	bfbf      	itttt	lt
 800a0d0:	9b07      	ldrlt	r3, [sp, #28]
 800a0d2:	9507      	strlt	r5, [sp, #28]
 800a0d4:	1aea      	sublt	r2, r5, r3
 800a0d6:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800a0d8:	bfb7      	itett	lt
 800a0da:	189b      	addlt	r3, r3, r2
 800a0dc:	1b5d      	subge	r5, r3, r5
 800a0de:	930c      	strlt	r3, [sp, #48]	; 0x30
 800a0e0:	2500      	movlt	r5, #0
 800a0e2:	f1b8 0f00 	cmp.w	r8, #0
 800a0e6:	bfb9      	ittee	lt
 800a0e8:	ebc8 0409 	rsblt	r4, r8, r9
 800a0ec:	2300      	movlt	r3, #0
 800a0ee:	464c      	movge	r4, r9
 800a0f0:	4643      	movge	r3, r8
 800a0f2:	9a05      	ldr	r2, [sp, #20]
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	441a      	add	r2, r3
 800a0f8:	4650      	mov	r0, sl
 800a0fa:	4499      	add	r9, r3
 800a0fc:	9205      	str	r2, [sp, #20]
 800a0fe:	f000 fbff 	bl	800a900 <__i2b>
 800a102:	4606      	mov	r6, r0
 800a104:	e002      	b.n	800a10c <_dtoa_r+0x724>
 800a106:	9d07      	ldr	r5, [sp, #28]
 800a108:	9e08      	ldr	r6, [sp, #32]
 800a10a:	464c      	mov	r4, r9
 800a10c:	b15c      	cbz	r4, 800a126 <_dtoa_r+0x73e>
 800a10e:	9b05      	ldr	r3, [sp, #20]
 800a110:	2b00      	cmp	r3, #0
 800a112:	dd08      	ble.n	800a126 <_dtoa_r+0x73e>
 800a114:	42a3      	cmp	r3, r4
 800a116:	9a05      	ldr	r2, [sp, #20]
 800a118:	bfa8      	it	ge
 800a11a:	4623      	movge	r3, r4
 800a11c:	ebc3 0909 	rsb	r9, r3, r9
 800a120:	1ae4      	subs	r4, r4, r3
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	9305      	str	r3, [sp, #20]
 800a126:	9b07      	ldr	r3, [sp, #28]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	dd1d      	ble.n	800a168 <_dtoa_r+0x780>
 800a12c:	9b08      	ldr	r3, [sp, #32]
 800a12e:	b1ab      	cbz	r3, 800a15c <_dtoa_r+0x774>
 800a130:	b185      	cbz	r5, 800a154 <_dtoa_r+0x76c>
 800a132:	4631      	mov	r1, r6
 800a134:	462a      	mov	r2, r5
 800a136:	4650      	mov	r0, sl
 800a138:	f000 fc7c 	bl	800aa34 <__pow5mult>
 800a13c:	9a02      	ldr	r2, [sp, #8]
 800a13e:	4601      	mov	r1, r0
 800a140:	4606      	mov	r6, r0
 800a142:	4650      	mov	r0, sl
 800a144:	f000 fbe5 	bl	800a912 <__multiply>
 800a148:	9902      	ldr	r1, [sp, #8]
 800a14a:	4607      	mov	r7, r0
 800a14c:	4650      	mov	r0, sl
 800a14e:	f000 fb38 	bl	800a7c2 <_Bfree>
 800a152:	9702      	str	r7, [sp, #8]
 800a154:	9b07      	ldr	r3, [sp, #28]
 800a156:	1b5a      	subs	r2, r3, r5
 800a158:	d006      	beq.n	800a168 <_dtoa_r+0x780>
 800a15a:	e000      	b.n	800a15e <_dtoa_r+0x776>
 800a15c:	9a07      	ldr	r2, [sp, #28]
 800a15e:	9902      	ldr	r1, [sp, #8]
 800a160:	4650      	mov	r0, sl
 800a162:	f000 fc67 	bl	800aa34 <__pow5mult>
 800a166:	9002      	str	r0, [sp, #8]
 800a168:	2101      	movs	r1, #1
 800a16a:	4650      	mov	r0, sl
 800a16c:	f000 fbc8 	bl	800a900 <__i2b>
 800a170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a172:	4605      	mov	r5, r0
 800a174:	b35b      	cbz	r3, 800a1ce <_dtoa_r+0x7e6>
 800a176:	461a      	mov	r2, r3
 800a178:	4601      	mov	r1, r0
 800a17a:	4650      	mov	r0, sl
 800a17c:	f000 fc5a 	bl	800aa34 <__pow5mult>
 800a180:	9b06      	ldr	r3, [sp, #24]
 800a182:	2b01      	cmp	r3, #1
 800a184:	4605      	mov	r5, r0
 800a186:	dc18      	bgt.n	800a1ba <_dtoa_r+0x7d2>
 800a188:	9b00      	ldr	r3, [sp, #0]
 800a18a:	b983      	cbnz	r3, 800a1ae <_dtoa_r+0x7c6>
 800a18c:	9b01      	ldr	r3, [sp, #4]
 800a18e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a192:	b973      	cbnz	r3, 800a1b2 <_dtoa_r+0x7ca>
 800a194:	9b01      	ldr	r3, [sp, #4]
 800a196:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800a19a:	0d3f      	lsrs	r7, r7, #20
 800a19c:	053f      	lsls	r7, r7, #20
 800a19e:	b14f      	cbz	r7, 800a1b4 <_dtoa_r+0x7cc>
 800a1a0:	9b05      	ldr	r3, [sp, #20]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	f109 0901 	add.w	r9, r9, #1
 800a1a8:	9305      	str	r3, [sp, #20]
 800a1aa:	2701      	movs	r7, #1
 800a1ac:	e002      	b.n	800a1b4 <_dtoa_r+0x7cc>
 800a1ae:	2700      	movs	r7, #0
 800a1b0:	e000      	b.n	800a1b4 <_dtoa_r+0x7cc>
 800a1b2:	9f00      	ldr	r7, [sp, #0]
 800a1b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1b6:	b173      	cbz	r3, 800a1d6 <_dtoa_r+0x7ee>
 800a1b8:	e000      	b.n	800a1bc <_dtoa_r+0x7d4>
 800a1ba:	2700      	movs	r7, #0
 800a1bc:	692b      	ldr	r3, [r5, #16]
 800a1be:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a1c2:	6918      	ldr	r0, [r3, #16]
 800a1c4:	f000 fb4f 	bl	800a866 <__hi0bits>
 800a1c8:	f1c0 0020 	rsb	r0, r0, #32
 800a1cc:	e004      	b.n	800a1d8 <_dtoa_r+0x7f0>
 800a1ce:	9b06      	ldr	r3, [sp, #24]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	ddd9      	ble.n	800a188 <_dtoa_r+0x7a0>
 800a1d4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800a1d6:	2001      	movs	r0, #1
 800a1d8:	9b05      	ldr	r3, [sp, #20]
 800a1da:	4418      	add	r0, r3
 800a1dc:	f010 001f 	ands.w	r0, r0, #31
 800a1e0:	d00e      	beq.n	800a200 <_dtoa_r+0x818>
 800a1e2:	f1c0 0320 	rsb	r3, r0, #32
 800a1e6:	2b04      	cmp	r3, #4
 800a1e8:	dd08      	ble.n	800a1fc <_dtoa_r+0x814>
 800a1ea:	f1c0 001c 	rsb	r0, r0, #28
 800a1ee:	e008      	b.n	800a202 <_dtoa_r+0x81a>
 800a1f0:	0800b350 	.word	0x0800b350
 800a1f4:	40140000 	.word	0x40140000
 800a1f8:	40240000 	.word	0x40240000
 800a1fc:	d006      	beq.n	800a20c <_dtoa_r+0x824>
 800a1fe:	4618      	mov	r0, r3
 800a200:	301c      	adds	r0, #28
 800a202:	9b05      	ldr	r3, [sp, #20]
 800a204:	4403      	add	r3, r0
 800a206:	4481      	add	r9, r0
 800a208:	4404      	add	r4, r0
 800a20a:	9305      	str	r3, [sp, #20]
 800a20c:	f1b9 0f00 	cmp.w	r9, #0
 800a210:	dd05      	ble.n	800a21e <_dtoa_r+0x836>
 800a212:	464a      	mov	r2, r9
 800a214:	9902      	ldr	r1, [sp, #8]
 800a216:	4650      	mov	r0, sl
 800a218:	f000 fc5a 	bl	800aad0 <__lshift>
 800a21c:	9002      	str	r0, [sp, #8]
 800a21e:	9b05      	ldr	r3, [sp, #20]
 800a220:	2b00      	cmp	r3, #0
 800a222:	dd05      	ble.n	800a230 <_dtoa_r+0x848>
 800a224:	4629      	mov	r1, r5
 800a226:	461a      	mov	r2, r3
 800a228:	4650      	mov	r0, sl
 800a22a:	f000 fc51 	bl	800aad0 <__lshift>
 800a22e:	4605      	mov	r5, r0
 800a230:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a232:	b1eb      	cbz	r3, 800a270 <_dtoa_r+0x888>
 800a234:	4629      	mov	r1, r5
 800a236:	9802      	ldr	r0, [sp, #8]
 800a238:	f000 fc9b 	bl	800ab72 <__mcmp>
 800a23c:	2800      	cmp	r0, #0
 800a23e:	da17      	bge.n	800a270 <_dtoa_r+0x888>
 800a240:	2300      	movs	r3, #0
 800a242:	220a      	movs	r2, #10
 800a244:	9902      	ldr	r1, [sp, #8]
 800a246:	4650      	mov	r0, sl
 800a248:	f000 fad2 	bl	800a7f0 <__multadd>
 800a24c:	9b08      	ldr	r3, [sp, #32]
 800a24e:	9002      	str	r0, [sp, #8]
 800a250:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a254:	2b00      	cmp	r3, #0
 800a256:	f000 8158 	beq.w	800a50a <_dtoa_r+0xb22>
 800a25a:	2300      	movs	r3, #0
 800a25c:	4631      	mov	r1, r6
 800a25e:	220a      	movs	r2, #10
 800a260:	4650      	mov	r0, sl
 800a262:	f000 fac5 	bl	800a7f0 <__multadd>
 800a266:	9b03      	ldr	r3, [sp, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	4606      	mov	r6, r0
 800a26c:	dc37      	bgt.n	800a2de <_dtoa_r+0x8f6>
 800a26e:	e033      	b.n	800a2d8 <_dtoa_r+0x8f0>
 800a270:	f1b8 0f00 	cmp.w	r8, #0
 800a274:	dc2a      	bgt.n	800a2cc <_dtoa_r+0x8e4>
 800a276:	9b06      	ldr	r3, [sp, #24]
 800a278:	2b02      	cmp	r3, #2
 800a27a:	dd27      	ble.n	800a2cc <_dtoa_r+0x8e4>
 800a27c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a280:	9b03      	ldr	r3, [sp, #12]
 800a282:	b983      	cbnz	r3, 800a2a6 <_dtoa_r+0x8be>
 800a284:	4629      	mov	r1, r5
 800a286:	2205      	movs	r2, #5
 800a288:	4650      	mov	r0, sl
 800a28a:	f000 fab1 	bl	800a7f0 <__multadd>
 800a28e:	4601      	mov	r1, r0
 800a290:	4605      	mov	r5, r0
 800a292:	9802      	ldr	r0, [sp, #8]
 800a294:	f000 fc6d 	bl	800ab72 <__mcmp>
 800a298:	2800      	cmp	r0, #0
 800a29a:	dc0d      	bgt.n	800a2b8 <_dtoa_r+0x8d0>
 800a29c:	e003      	b.n	800a2a6 <_dtoa_r+0x8be>
 800a29e:	463d      	mov	r5, r7
 800a2a0:	e000      	b.n	800a2a4 <_dtoa_r+0x8bc>
 800a2a2:	2500      	movs	r5, #0
 800a2a4:	462e      	mov	r6, r5
 800a2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a8:	9c04      	ldr	r4, [sp, #16]
 800a2aa:	ea6f 0b03 	mvn.w	fp, r3
 800a2ae:	e00a      	b.n	800a2c6 <_dtoa_r+0x8de>
 800a2b0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a2b4:	463d      	mov	r5, r7
 800a2b6:	463e      	mov	r6, r7
 800a2b8:	9b04      	ldr	r3, [sp, #16]
 800a2ba:	9a04      	ldr	r2, [sp, #16]
 800a2bc:	1c5c      	adds	r4, r3, #1
 800a2be:	2331      	movs	r3, #49	; 0x31
 800a2c0:	7013      	strb	r3, [r2, #0]
 800a2c2:	f10b 0b01 	add.w	fp, fp, #1
 800a2c6:	46b0      	mov	r8, r6
 800a2c8:	2600      	movs	r6, #0
 800a2ca:	e0f7      	b.n	800a4bc <_dtoa_r+0xad4>
 800a2cc:	9b08      	ldr	r3, [sp, #32]
 800a2ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2d2:	b923      	cbnz	r3, 800a2de <_dtoa_r+0x8f6>
 800a2d4:	9c04      	ldr	r4, [sp, #16]
 800a2d6:	e0b1      	b.n	800a43c <_dtoa_r+0xa54>
 800a2d8:	9b06      	ldr	r3, [sp, #24]
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	dcd0      	bgt.n	800a280 <_dtoa_r+0x898>
 800a2de:	2c00      	cmp	r4, #0
 800a2e0:	dd05      	ble.n	800a2ee <_dtoa_r+0x906>
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	4622      	mov	r2, r4
 800a2e6:	4650      	mov	r0, sl
 800a2e8:	f000 fbf2 	bl	800aad0 <__lshift>
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	b19f      	cbz	r7, 800a318 <_dtoa_r+0x930>
 800a2f0:	6871      	ldr	r1, [r6, #4]
 800a2f2:	4650      	mov	r0, sl
 800a2f4:	f000 fa30 	bl	800a758 <_Balloc>
 800a2f8:	6932      	ldr	r2, [r6, #16]
 800a2fa:	3202      	adds	r2, #2
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	0092      	lsls	r2, r2, #2
 800a300:	f106 010c 	add.w	r1, r6, #12
 800a304:	300c      	adds	r0, #12
 800a306:	f7fe fad7 	bl	80088b8 <memcpy>
 800a30a:	2201      	movs	r2, #1
 800a30c:	4621      	mov	r1, r4
 800a30e:	4650      	mov	r0, sl
 800a310:	f000 fbde 	bl	800aad0 <__lshift>
 800a314:	4680      	mov	r8, r0
 800a316:	e000      	b.n	800a31a <_dtoa_r+0x932>
 800a318:	46b0      	mov	r8, r6
 800a31a:	9b00      	ldr	r3, [sp, #0]
 800a31c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800a320:	f003 0301 	and.w	r3, r3, #1
 800a324:	9305      	str	r3, [sp, #20]
 800a326:	4629      	mov	r1, r5
 800a328:	9802      	ldr	r0, [sp, #8]
 800a32a:	f7ff facb 	bl	80098c4 <quorem>
 800a32e:	4631      	mov	r1, r6
 800a330:	4604      	mov	r4, r0
 800a332:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800a336:	9802      	ldr	r0, [sp, #8]
 800a338:	f000 fc1b 	bl	800ab72 <__mcmp>
 800a33c:	4642      	mov	r2, r8
 800a33e:	9000      	str	r0, [sp, #0]
 800a340:	4629      	mov	r1, r5
 800a342:	4650      	mov	r0, sl
 800a344:	f000 fc31 	bl	800abaa <__mdiff>
 800a348:	68c3      	ldr	r3, [r0, #12]
 800a34a:	4602      	mov	r2, r0
 800a34c:	b93b      	cbnz	r3, 800a35e <_dtoa_r+0x976>
 800a34e:	4601      	mov	r1, r0
 800a350:	9007      	str	r0, [sp, #28]
 800a352:	9802      	ldr	r0, [sp, #8]
 800a354:	f000 fc0d 	bl	800ab72 <__mcmp>
 800a358:	9a07      	ldr	r2, [sp, #28]
 800a35a:	4603      	mov	r3, r0
 800a35c:	e000      	b.n	800a360 <_dtoa_r+0x978>
 800a35e:	2301      	movs	r3, #1
 800a360:	4611      	mov	r1, r2
 800a362:	4650      	mov	r0, sl
 800a364:	9307      	str	r3, [sp, #28]
 800a366:	f000 fa2c 	bl	800a7c2 <_Bfree>
 800a36a:	9b07      	ldr	r3, [sp, #28]
 800a36c:	b94b      	cbnz	r3, 800a382 <_dtoa_r+0x99a>
 800a36e:	9a06      	ldr	r2, [sp, #24]
 800a370:	b93a      	cbnz	r2, 800a382 <_dtoa_r+0x99a>
 800a372:	9a05      	ldr	r2, [sp, #20]
 800a374:	b92a      	cbnz	r2, 800a382 <_dtoa_r+0x99a>
 800a376:	2f39      	cmp	r7, #57	; 0x39
 800a378:	d028      	beq.n	800a3cc <_dtoa_r+0x9e4>
 800a37a:	9b00      	ldr	r3, [sp, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	dc1a      	bgt.n	800a3b6 <_dtoa_r+0x9ce>
 800a380:	e01b      	b.n	800a3ba <_dtoa_r+0x9d2>
 800a382:	9a00      	ldr	r2, [sp, #0]
 800a384:	2a00      	cmp	r2, #0
 800a386:	db04      	blt.n	800a392 <_dtoa_r+0x9aa>
 800a388:	d11a      	bne.n	800a3c0 <_dtoa_r+0x9d8>
 800a38a:	9a06      	ldr	r2, [sp, #24]
 800a38c:	b9c2      	cbnz	r2, 800a3c0 <_dtoa_r+0x9d8>
 800a38e:	9a05      	ldr	r2, [sp, #20]
 800a390:	b9b2      	cbnz	r2, 800a3c0 <_dtoa_r+0x9d8>
 800a392:	2b00      	cmp	r3, #0
 800a394:	dd11      	ble.n	800a3ba <_dtoa_r+0x9d2>
 800a396:	2201      	movs	r2, #1
 800a398:	9902      	ldr	r1, [sp, #8]
 800a39a:	4650      	mov	r0, sl
 800a39c:	f000 fb98 	bl	800aad0 <__lshift>
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	9002      	str	r0, [sp, #8]
 800a3a4:	f000 fbe5 	bl	800ab72 <__mcmp>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	dc02      	bgt.n	800a3b2 <_dtoa_r+0x9ca>
 800a3ac:	d105      	bne.n	800a3ba <_dtoa_r+0x9d2>
 800a3ae:	07fa      	lsls	r2, r7, #31
 800a3b0:	d503      	bpl.n	800a3ba <_dtoa_r+0x9d2>
 800a3b2:	2f39      	cmp	r7, #57	; 0x39
 800a3b4:	d00a      	beq.n	800a3cc <_dtoa_r+0x9e4>
 800a3b6:	f104 0731 	add.w	r7, r4, #49	; 0x31
 800a3ba:	f109 0401 	add.w	r4, r9, #1
 800a3be:	e00c      	b.n	800a3da <_dtoa_r+0x9f2>
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f109 0401 	add.w	r4, r9, #1
 800a3c6:	dd0b      	ble.n	800a3e0 <_dtoa_r+0x9f8>
 800a3c8:	2f39      	cmp	r7, #57	; 0x39
 800a3ca:	d105      	bne.n	800a3d8 <_dtoa_r+0x9f0>
 800a3cc:	2339      	movs	r3, #57	; 0x39
 800a3ce:	f889 3000 	strb.w	r3, [r9]
 800a3d2:	f109 0901 	add.w	r9, r9, #1
 800a3d6:	e054      	b.n	800a482 <_dtoa_r+0xa9a>
 800a3d8:	3701      	adds	r7, #1
 800a3da:	f889 7000 	strb.w	r7, [r9]
 800a3de:	e06d      	b.n	800a4bc <_dtoa_r+0xad4>
 800a3e0:	9b04      	ldr	r3, [sp, #16]
 800a3e2:	9a03      	ldr	r2, [sp, #12]
 800a3e4:	f804 7c01 	strb.w	r7, [r4, #-1]
 800a3e8:	1ae3      	subs	r3, r4, r3
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	46a1      	mov	r9, r4
 800a3ee:	d03a      	beq.n	800a466 <_dtoa_r+0xa7e>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	220a      	movs	r2, #10
 800a3f4:	9902      	ldr	r1, [sp, #8]
 800a3f6:	4650      	mov	r0, sl
 800a3f8:	f000 f9fa 	bl	800a7f0 <__multadd>
 800a3fc:	4546      	cmp	r6, r8
 800a3fe:	9002      	str	r0, [sp, #8]
 800a400:	f04f 0300 	mov.w	r3, #0
 800a404:	f04f 020a 	mov.w	r2, #10
 800a408:	4631      	mov	r1, r6
 800a40a:	4650      	mov	r0, sl
 800a40c:	d104      	bne.n	800a418 <_dtoa_r+0xa30>
 800a40e:	f000 f9ef 	bl	800a7f0 <__multadd>
 800a412:	4606      	mov	r6, r0
 800a414:	4680      	mov	r8, r0
 800a416:	e786      	b.n	800a326 <_dtoa_r+0x93e>
 800a418:	f000 f9ea 	bl	800a7f0 <__multadd>
 800a41c:	4641      	mov	r1, r8
 800a41e:	4606      	mov	r6, r0
 800a420:	2300      	movs	r3, #0
 800a422:	220a      	movs	r2, #10
 800a424:	4650      	mov	r0, sl
 800a426:	f000 f9e3 	bl	800a7f0 <__multadd>
 800a42a:	4680      	mov	r8, r0
 800a42c:	e77b      	b.n	800a326 <_dtoa_r+0x93e>
 800a42e:	2300      	movs	r3, #0
 800a430:	220a      	movs	r2, #10
 800a432:	9902      	ldr	r1, [sp, #8]
 800a434:	4650      	mov	r0, sl
 800a436:	f000 f9db 	bl	800a7f0 <__multadd>
 800a43a:	9002      	str	r0, [sp, #8]
 800a43c:	4629      	mov	r1, r5
 800a43e:	9802      	ldr	r0, [sp, #8]
 800a440:	f7ff fa40 	bl	80098c4 <quorem>
 800a444:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800a448:	f804 7b01 	strb.w	r7, [r4], #1
 800a44c:	9b04      	ldr	r3, [sp, #16]
 800a44e:	9a03      	ldr	r2, [sp, #12]
 800a450:	1ae3      	subs	r3, r4, r3
 800a452:	4293      	cmp	r3, r2
 800a454:	dbeb      	blt.n	800a42e <_dtoa_r+0xa46>
 800a456:	9b04      	ldr	r3, [sp, #16]
 800a458:	2a01      	cmp	r2, #1
 800a45a:	bfac      	ite	ge
 800a45c:	189b      	addge	r3, r3, r2
 800a45e:	3301      	addlt	r3, #1
 800a460:	46b0      	mov	r8, r6
 800a462:	4699      	mov	r9, r3
 800a464:	2600      	movs	r6, #0
 800a466:	2201      	movs	r2, #1
 800a468:	9902      	ldr	r1, [sp, #8]
 800a46a:	4650      	mov	r0, sl
 800a46c:	f000 fb30 	bl	800aad0 <__lshift>
 800a470:	4629      	mov	r1, r5
 800a472:	9002      	str	r0, [sp, #8]
 800a474:	f000 fb7d 	bl	800ab72 <__mcmp>
 800a478:	2800      	cmp	r0, #0
 800a47a:	dc02      	bgt.n	800a482 <_dtoa_r+0xa9a>
 800a47c:	d115      	bne.n	800a4aa <_dtoa_r+0xac2>
 800a47e:	07fb      	lsls	r3, r7, #31
 800a480:	d513      	bpl.n	800a4aa <_dtoa_r+0xac2>
 800a482:	464c      	mov	r4, r9
 800a484:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800a488:	2b39      	cmp	r3, #57	; 0x39
 800a48a:	f104 32ff 	add.w	r2, r4, #4294967295
 800a48e:	d109      	bne.n	800a4a4 <_dtoa_r+0xabc>
 800a490:	9b04      	ldr	r3, [sp, #16]
 800a492:	4293      	cmp	r3, r2
 800a494:	d104      	bne.n	800a4a0 <_dtoa_r+0xab8>
 800a496:	f10b 0b01 	add.w	fp, fp, #1
 800a49a:	2331      	movs	r3, #49	; 0x31
 800a49c:	9a04      	ldr	r2, [sp, #16]
 800a49e:	e002      	b.n	800a4a6 <_dtoa_r+0xabe>
 800a4a0:	4614      	mov	r4, r2
 800a4a2:	e7ef      	b.n	800a484 <_dtoa_r+0xa9c>
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	7013      	strb	r3, [r2, #0]
 800a4a8:	e008      	b.n	800a4bc <_dtoa_r+0xad4>
 800a4aa:	464c      	mov	r4, r9
 800a4ac:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800a4b0:	2b30      	cmp	r3, #48	; 0x30
 800a4b2:	f104 32ff 	add.w	r2, r4, #4294967295
 800a4b6:	d101      	bne.n	800a4bc <_dtoa_r+0xad4>
 800a4b8:	4614      	mov	r4, r2
 800a4ba:	e7f7      	b.n	800a4ac <_dtoa_r+0xac4>
 800a4bc:	4629      	mov	r1, r5
 800a4be:	4650      	mov	r0, sl
 800a4c0:	f000 f97f 	bl	800a7c2 <_Bfree>
 800a4c4:	f1b8 0f00 	cmp.w	r8, #0
 800a4c8:	d00d      	beq.n	800a4e6 <_dtoa_r+0xafe>
 800a4ca:	b12e      	cbz	r6, 800a4d8 <_dtoa_r+0xaf0>
 800a4cc:	4546      	cmp	r6, r8
 800a4ce:	d003      	beq.n	800a4d8 <_dtoa_r+0xaf0>
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4650      	mov	r0, sl
 800a4d4:	f000 f975 	bl	800a7c2 <_Bfree>
 800a4d8:	4641      	mov	r1, r8
 800a4da:	4650      	mov	r0, sl
 800a4dc:	f000 f971 	bl	800a7c2 <_Bfree>
 800a4e0:	e001      	b.n	800a4e6 <_dtoa_r+0xafe>
 800a4e2:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a4e6:	9902      	ldr	r1, [sp, #8]
 800a4e8:	4650      	mov	r0, sl
 800a4ea:	f000 f96a 	bl	800a7c2 <_Bfree>
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a4f2:	7023      	strb	r3, [r4, #0]
 800a4f4:	f10b 0301 	add.w	r3, fp, #1
 800a4f8:	6013      	str	r3, [r2, #0]
 800a4fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4fc:	b11b      	cbz	r3, 800a506 <_dtoa_r+0xb1e>
 800a4fe:	601c      	str	r4, [r3, #0]
 800a500:	e001      	b.n	800a506 <_dtoa_r+0xb1e>
 800a502:	4808      	ldr	r0, [pc, #32]	; (800a524 <_dtoa_r+0xb3c>)
 800a504:	e00a      	b.n	800a51c <_dtoa_r+0xb34>
 800a506:	9804      	ldr	r0, [sp, #16]
 800a508:	e008      	b.n	800a51c <_dtoa_r+0xb34>
 800a50a:	9b03      	ldr	r3, [sp, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f73f aee1 	bgt.w	800a2d4 <_dtoa_r+0x8ec>
 800a512:	9b06      	ldr	r3, [sp, #24]
 800a514:	2b02      	cmp	r3, #2
 800a516:	f77f aedd 	ble.w	800a2d4 <_dtoa_r+0x8ec>
 800a51a:	e6b1      	b.n	800a280 <_dtoa_r+0x898>
 800a51c:	b017      	add	sp, #92	; 0x5c
 800a51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a522:	bf00      	nop
 800a524:	0800b326 	.word	0x0800b326

0800a528 <_malloc_trim_r>:
 800a528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a52c:	4f25      	ldr	r7, [pc, #148]	; (800a5c4 <_malloc_trim_r+0x9c>)
 800a52e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800a5d0 <_malloc_trim_r+0xa8>
 800a532:	4689      	mov	r9, r1
 800a534:	4606      	mov	r6, r0
 800a536:	f7fe f9ca 	bl	80088ce <__malloc_lock>
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	685d      	ldr	r5, [r3, #4]
 800a53e:	f1a8 0411 	sub.w	r4, r8, #17
 800a542:	f025 0503 	bic.w	r5, r5, #3
 800a546:	442c      	add	r4, r5
 800a548:	ebc9 0404 	rsb	r4, r9, r4
 800a54c:	fbb4 f4f8 	udiv	r4, r4, r8
 800a550:	3c01      	subs	r4, #1
 800a552:	fb08 f404 	mul.w	r4, r8, r4
 800a556:	4544      	cmp	r4, r8
 800a558:	da05      	bge.n	800a566 <_malloc_trim_r+0x3e>
 800a55a:	4630      	mov	r0, r6
 800a55c:	f7fe f9b8 	bl	80088d0 <__malloc_unlock>
 800a560:	2000      	movs	r0, #0
 800a562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a566:	2100      	movs	r1, #0
 800a568:	4630      	mov	r0, r6
 800a56a:	f7fe f9b3 	bl	80088d4 <_sbrk_r>
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	442b      	add	r3, r5
 800a572:	4298      	cmp	r0, r3
 800a574:	d1f1      	bne.n	800a55a <_malloc_trim_r+0x32>
 800a576:	4261      	negs	r1, r4
 800a578:	4630      	mov	r0, r6
 800a57a:	f7fe f9ab 	bl	80088d4 <_sbrk_r>
 800a57e:	3001      	adds	r0, #1
 800a580:	d110      	bne.n	800a5a4 <_malloc_trim_r+0x7c>
 800a582:	2100      	movs	r1, #0
 800a584:	4630      	mov	r0, r6
 800a586:	f7fe f9a5 	bl	80088d4 <_sbrk_r>
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	1a83      	subs	r3, r0, r2
 800a58e:	2b0f      	cmp	r3, #15
 800a590:	dde3      	ble.n	800a55a <_malloc_trim_r+0x32>
 800a592:	490d      	ldr	r1, [pc, #52]	; (800a5c8 <_malloc_trim_r+0xa0>)
 800a594:	6809      	ldr	r1, [r1, #0]
 800a596:	1a40      	subs	r0, r0, r1
 800a598:	490c      	ldr	r1, [pc, #48]	; (800a5cc <_malloc_trim_r+0xa4>)
 800a59a:	f043 0301 	orr.w	r3, r3, #1
 800a59e:	6008      	str	r0, [r1, #0]
 800a5a0:	6053      	str	r3, [r2, #4]
 800a5a2:	e7da      	b.n	800a55a <_malloc_trim_r+0x32>
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	4a09      	ldr	r2, [pc, #36]	; (800a5cc <_malloc_trim_r+0xa4>)
 800a5a8:	1b2d      	subs	r5, r5, r4
 800a5aa:	f045 0501 	orr.w	r5, r5, #1
 800a5ae:	605d      	str	r5, [r3, #4]
 800a5b0:	6813      	ldr	r3, [r2, #0]
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	1b1c      	subs	r4, r3, r4
 800a5b6:	6014      	str	r4, [r2, #0]
 800a5b8:	f7fe f98a 	bl	80088d0 <__malloc_unlock>
 800a5bc:	2001      	movs	r0, #1
 800a5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20000158 	.word	0x20000158
 800a5c8:	20000564 	.word	0x20000564
 800a5cc:	200008e4 	.word	0x200008e4
 800a5d0:	00000080 	.word	0x00000080

0800a5d4 <_free_r>:
 800a5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d8:	4604      	mov	r4, r0
 800a5da:	4688      	mov	r8, r1
 800a5dc:	2900      	cmp	r1, #0
 800a5de:	f000 80ad 	beq.w	800a73c <_free_r+0x168>
 800a5e2:	f7fe f974 	bl	80088ce <__malloc_lock>
 800a5e6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a5ea:	4d55      	ldr	r5, [pc, #340]	; (800a740 <_free_r+0x16c>)
 800a5ec:	f022 0001 	bic.w	r0, r2, #1
 800a5f0:	f1a8 0308 	sub.w	r3, r8, #8
 800a5f4:	181f      	adds	r7, r3, r0
 800a5f6:	68a9      	ldr	r1, [r5, #8]
 800a5f8:	687e      	ldr	r6, [r7, #4]
 800a5fa:	428f      	cmp	r7, r1
 800a5fc:	f026 0603 	bic.w	r6, r6, #3
 800a600:	f002 0201 	and.w	r2, r2, #1
 800a604:	d11b      	bne.n	800a63e <_free_r+0x6a>
 800a606:	4430      	add	r0, r6
 800a608:	b93a      	cbnz	r2, 800a61a <_free_r+0x46>
 800a60a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800a60e:	1a9b      	subs	r3, r3, r2
 800a610:	4410      	add	r0, r2
 800a612:	6899      	ldr	r1, [r3, #8]
 800a614:	68da      	ldr	r2, [r3, #12]
 800a616:	60ca      	str	r2, [r1, #12]
 800a618:	6091      	str	r1, [r2, #8]
 800a61a:	f040 0201 	orr.w	r2, r0, #1
 800a61e:	605a      	str	r2, [r3, #4]
 800a620:	60ab      	str	r3, [r5, #8]
 800a622:	4b48      	ldr	r3, [pc, #288]	; (800a744 <_free_r+0x170>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4298      	cmp	r0, r3
 800a628:	d304      	bcc.n	800a634 <_free_r+0x60>
 800a62a:	4b47      	ldr	r3, [pc, #284]	; (800a748 <_free_r+0x174>)
 800a62c:	4620      	mov	r0, r4
 800a62e:	6819      	ldr	r1, [r3, #0]
 800a630:	f7ff ff7a 	bl	800a528 <_malloc_trim_r>
 800a634:	4620      	mov	r0, r4
 800a636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a63a:	f7fe b949 	b.w	80088d0 <__malloc_unlock>
 800a63e:	607e      	str	r6, [r7, #4]
 800a640:	b97a      	cbnz	r2, 800a662 <_free_r+0x8e>
 800a642:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800a646:	1a5b      	subs	r3, r3, r1
 800a648:	4408      	add	r0, r1
 800a64a:	6899      	ldr	r1, [r3, #8]
 800a64c:	f105 0e08 	add.w	lr, r5, #8
 800a650:	4571      	cmp	r1, lr
 800a652:	d008      	beq.n	800a666 <_free_r+0x92>
 800a654:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800a658:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a65c:	f8ce 1008 	str.w	r1, [lr, #8]
 800a660:	e002      	b.n	800a668 <_free_r+0x94>
 800a662:	2200      	movs	r2, #0
 800a664:	e000      	b.n	800a668 <_free_r+0x94>
 800a666:	2201      	movs	r2, #1
 800a668:	19b9      	adds	r1, r7, r6
 800a66a:	6849      	ldr	r1, [r1, #4]
 800a66c:	07c9      	lsls	r1, r1, #31
 800a66e:	d40e      	bmi.n	800a68e <_free_r+0xba>
 800a670:	4430      	add	r0, r6
 800a672:	68b9      	ldr	r1, [r7, #8]
 800a674:	b942      	cbnz	r2, 800a688 <_free_r+0xb4>
 800a676:	4e35      	ldr	r6, [pc, #212]	; (800a74c <_free_r+0x178>)
 800a678:	42b1      	cmp	r1, r6
 800a67a:	d105      	bne.n	800a688 <_free_r+0xb4>
 800a67c:	616b      	str	r3, [r5, #20]
 800a67e:	612b      	str	r3, [r5, #16]
 800a680:	2201      	movs	r2, #1
 800a682:	60d9      	str	r1, [r3, #12]
 800a684:	6099      	str	r1, [r3, #8]
 800a686:	e002      	b.n	800a68e <_free_r+0xba>
 800a688:	68fe      	ldr	r6, [r7, #12]
 800a68a:	60ce      	str	r6, [r1, #12]
 800a68c:	60b1      	str	r1, [r6, #8]
 800a68e:	f040 0101 	orr.w	r1, r0, #1
 800a692:	6059      	str	r1, [r3, #4]
 800a694:	5018      	str	r0, [r3, r0]
 800a696:	2a00      	cmp	r2, #0
 800a698:	d1cc      	bne.n	800a634 <_free_r+0x60>
 800a69a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a69e:	d212      	bcs.n	800a6c6 <_free_r+0xf2>
 800a6a0:	08c0      	lsrs	r0, r0, #3
 800a6a2:	1081      	asrs	r1, r0, #2
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	fa02 f101 	lsl.w	r1, r2, r1
 800a6aa:	686a      	ldr	r2, [r5, #4]
 800a6ac:	3001      	adds	r0, #1
 800a6ae:	430a      	orrs	r2, r1
 800a6b0:	606a      	str	r2, [r5, #4]
 800a6b2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800a6b6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800a6ba:	6099      	str	r1, [r3, #8]
 800a6bc:	3a08      	subs	r2, #8
 800a6be:	60da      	str	r2, [r3, #12]
 800a6c0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800a6c4:	e038      	b.n	800a738 <_free_r+0x164>
 800a6c6:	0a42      	lsrs	r2, r0, #9
 800a6c8:	2a04      	cmp	r2, #4
 800a6ca:	d802      	bhi.n	800a6d2 <_free_r+0xfe>
 800a6cc:	0982      	lsrs	r2, r0, #6
 800a6ce:	3238      	adds	r2, #56	; 0x38
 800a6d0:	e015      	b.n	800a6fe <_free_r+0x12a>
 800a6d2:	2a14      	cmp	r2, #20
 800a6d4:	d801      	bhi.n	800a6da <_free_r+0x106>
 800a6d6:	325b      	adds	r2, #91	; 0x5b
 800a6d8:	e011      	b.n	800a6fe <_free_r+0x12a>
 800a6da:	2a54      	cmp	r2, #84	; 0x54
 800a6dc:	d802      	bhi.n	800a6e4 <_free_r+0x110>
 800a6de:	0b02      	lsrs	r2, r0, #12
 800a6e0:	326e      	adds	r2, #110	; 0x6e
 800a6e2:	e00c      	b.n	800a6fe <_free_r+0x12a>
 800a6e4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a6e8:	d802      	bhi.n	800a6f0 <_free_r+0x11c>
 800a6ea:	0bc2      	lsrs	r2, r0, #15
 800a6ec:	3277      	adds	r2, #119	; 0x77
 800a6ee:	e006      	b.n	800a6fe <_free_r+0x12a>
 800a6f0:	f240 5154 	movw	r1, #1364	; 0x554
 800a6f4:	428a      	cmp	r2, r1
 800a6f6:	bf9a      	itte	ls
 800a6f8:	0c82      	lsrls	r2, r0, #18
 800a6fa:	327c      	addls	r2, #124	; 0x7c
 800a6fc:	227e      	movhi	r2, #126	; 0x7e
 800a6fe:	1c51      	adds	r1, r2, #1
 800a700:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800a704:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800a708:	4f0d      	ldr	r7, [pc, #52]	; (800a740 <_free_r+0x16c>)
 800a70a:	428e      	cmp	r6, r1
 800a70c:	d10b      	bne.n	800a726 <_free_r+0x152>
 800a70e:	2101      	movs	r1, #1
 800a710:	1092      	asrs	r2, r2, #2
 800a712:	fa01 f202 	lsl.w	r2, r1, r2
 800a716:	6879      	ldr	r1, [r7, #4]
 800a718:	4311      	orrs	r1, r2
 800a71a:	6079      	str	r1, [r7, #4]
 800a71c:	4631      	mov	r1, r6
 800a71e:	e008      	b.n	800a732 <_free_r+0x15e>
 800a720:	6889      	ldr	r1, [r1, #8]
 800a722:	428e      	cmp	r6, r1
 800a724:	d004      	beq.n	800a730 <_free_r+0x15c>
 800a726:	684a      	ldr	r2, [r1, #4]
 800a728:	f022 0203 	bic.w	r2, r2, #3
 800a72c:	4290      	cmp	r0, r2
 800a72e:	d3f7      	bcc.n	800a720 <_free_r+0x14c>
 800a730:	68ce      	ldr	r6, [r1, #12]
 800a732:	60de      	str	r6, [r3, #12]
 800a734:	6099      	str	r1, [r3, #8]
 800a736:	60b3      	str	r3, [r6, #8]
 800a738:	60cb      	str	r3, [r1, #12]
 800a73a:	e77b      	b.n	800a634 <_free_r+0x60>
 800a73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a740:	20000158 	.word	0x20000158
 800a744:	20000560 	.word	0x20000560
 800a748:	200008e0 	.word	0x200008e0
 800a74c:	20000160 	.word	0x20000160

0800a750 <_localeconv_r>:
 800a750:	4800      	ldr	r0, [pc, #0]	; (800a754 <_localeconv_r+0x4>)
 800a752:	4770      	bx	lr
 800a754:	2000065c 	.word	0x2000065c

0800a758 <_Balloc>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a75c:	4604      	mov	r4, r0
 800a75e:	460e      	mov	r6, r1
 800a760:	b93d      	cbnz	r5, 800a772 <_Balloc+0x1a>
 800a762:	2010      	movs	r0, #16
 800a764:	f7fd fe78 	bl	8008458 <malloc>
 800a768:	6260      	str	r0, [r4, #36]	; 0x24
 800a76a:	6045      	str	r5, [r0, #4]
 800a76c:	6085      	str	r5, [r0, #8]
 800a76e:	6005      	str	r5, [r0, #0]
 800a770:	60c5      	str	r5, [r0, #12]
 800a772:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a774:	68eb      	ldr	r3, [r5, #12]
 800a776:	b143      	cbz	r3, 800a78a <_Balloc+0x32>
 800a778:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a780:	b178      	cbz	r0, 800a7a2 <_Balloc+0x4a>
 800a782:	6802      	ldr	r2, [r0, #0]
 800a784:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a788:	e017      	b.n	800a7ba <_Balloc+0x62>
 800a78a:	2221      	movs	r2, #33	; 0x21
 800a78c:	2104      	movs	r1, #4
 800a78e:	4620      	mov	r0, r4
 800a790:	f000 fb37 	bl	800ae02 <_calloc_r>
 800a794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a796:	60e8      	str	r0, [r5, #12]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1ec      	bne.n	800a778 <_Balloc+0x20>
 800a79e:	2000      	movs	r0, #0
 800a7a0:	bd70      	pop	{r4, r5, r6, pc}
 800a7a2:	2101      	movs	r1, #1
 800a7a4:	fa01 f506 	lsl.w	r5, r1, r6
 800a7a8:	1d6a      	adds	r2, r5, #5
 800a7aa:	0092      	lsls	r2, r2, #2
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	f000 fb28 	bl	800ae02 <_calloc_r>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d0f3      	beq.n	800a79e <_Balloc+0x46>
 800a7b6:	6046      	str	r6, [r0, #4]
 800a7b8:	6085      	str	r5, [r0, #8]
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	6103      	str	r3, [r0, #16]
 800a7be:	60c3      	str	r3, [r0, #12]
 800a7c0:	bd70      	pop	{r4, r5, r6, pc}

0800a7c2 <_Bfree>:
 800a7c2:	b570      	push	{r4, r5, r6, lr}
 800a7c4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	460d      	mov	r5, r1
 800a7ca:	b93c      	cbnz	r4, 800a7dc <_Bfree+0x1a>
 800a7cc:	2010      	movs	r0, #16
 800a7ce:	f7fd fe43 	bl	8008458 <malloc>
 800a7d2:	6270      	str	r0, [r6, #36]	; 0x24
 800a7d4:	6044      	str	r4, [r0, #4]
 800a7d6:	6084      	str	r4, [r0, #8]
 800a7d8:	6004      	str	r4, [r0, #0]
 800a7da:	60c4      	str	r4, [r0, #12]
 800a7dc:	b13d      	cbz	r5, 800a7ee <_Bfree+0x2c>
 800a7de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a7e0:	686a      	ldr	r2, [r5, #4]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7e8:	6029      	str	r1, [r5, #0]
 800a7ea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a7ee:	bd70      	pop	{r4, r5, r6, pc}

0800a7f0 <__multadd>:
 800a7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f4:	690d      	ldr	r5, [r1, #16]
 800a7f6:	461f      	mov	r7, r3
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	f101 0e14 	add.w	lr, r1, #20
 800a800:	2300      	movs	r3, #0
 800a802:	f8de 0000 	ldr.w	r0, [lr]
 800a806:	b281      	uxth	r1, r0
 800a808:	fb02 7101 	mla	r1, r2, r1, r7
 800a80c:	0c0f      	lsrs	r7, r1, #16
 800a80e:	0c00      	lsrs	r0, r0, #16
 800a810:	fb02 7000 	mla	r0, r2, r0, r7
 800a814:	b289      	uxth	r1, r1
 800a816:	3301      	adds	r3, #1
 800a818:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a81c:	429d      	cmp	r5, r3
 800a81e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a822:	f84e 1b04 	str.w	r1, [lr], #4
 800a826:	dcec      	bgt.n	800a802 <__multadd+0x12>
 800a828:	b1d7      	cbz	r7, 800a860 <__multadd+0x70>
 800a82a:	68a3      	ldr	r3, [r4, #8]
 800a82c:	429d      	cmp	r5, r3
 800a82e:	db12      	blt.n	800a856 <__multadd+0x66>
 800a830:	6861      	ldr	r1, [r4, #4]
 800a832:	4630      	mov	r0, r6
 800a834:	3101      	adds	r1, #1
 800a836:	f7ff ff8f 	bl	800a758 <_Balloc>
 800a83a:	6922      	ldr	r2, [r4, #16]
 800a83c:	3202      	adds	r2, #2
 800a83e:	f104 010c 	add.w	r1, r4, #12
 800a842:	4680      	mov	r8, r0
 800a844:	0092      	lsls	r2, r2, #2
 800a846:	300c      	adds	r0, #12
 800a848:	f7fe f836 	bl	80088b8 <memcpy>
 800a84c:	4621      	mov	r1, r4
 800a84e:	4630      	mov	r0, r6
 800a850:	f7ff ffb7 	bl	800a7c2 <_Bfree>
 800a854:	4644      	mov	r4, r8
 800a856:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a85a:	3501      	adds	r5, #1
 800a85c:	615f      	str	r7, [r3, #20]
 800a85e:	6125      	str	r5, [r4, #16]
 800a860:	4620      	mov	r0, r4
 800a862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a866 <__hi0bits>:
 800a866:	0c03      	lsrs	r3, r0, #16
 800a868:	041b      	lsls	r3, r3, #16
 800a86a:	b913      	cbnz	r3, 800a872 <__hi0bits+0xc>
 800a86c:	0400      	lsls	r0, r0, #16
 800a86e:	2310      	movs	r3, #16
 800a870:	e000      	b.n	800a874 <__hi0bits+0xe>
 800a872:	2300      	movs	r3, #0
 800a874:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a878:	bf04      	itt	eq
 800a87a:	0200      	lsleq	r0, r0, #8
 800a87c:	3308      	addeq	r3, #8
 800a87e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a882:	bf04      	itt	eq
 800a884:	0100      	lsleq	r0, r0, #4
 800a886:	3304      	addeq	r3, #4
 800a888:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a88c:	bf04      	itt	eq
 800a88e:	0080      	lsleq	r0, r0, #2
 800a890:	3302      	addeq	r3, #2
 800a892:	2800      	cmp	r0, #0
 800a894:	db03      	blt.n	800a89e <__hi0bits+0x38>
 800a896:	0042      	lsls	r2, r0, #1
 800a898:	d503      	bpl.n	800a8a2 <__hi0bits+0x3c>
 800a89a:	1c58      	adds	r0, r3, #1
 800a89c:	4770      	bx	lr
 800a89e:	4618      	mov	r0, r3
 800a8a0:	4770      	bx	lr
 800a8a2:	2020      	movs	r0, #32
 800a8a4:	4770      	bx	lr

0800a8a6 <__lo0bits>:
 800a8a6:	6803      	ldr	r3, [r0, #0]
 800a8a8:	f013 0207 	ands.w	r2, r3, #7
 800a8ac:	d00b      	beq.n	800a8c6 <__lo0bits+0x20>
 800a8ae:	07d9      	lsls	r1, r3, #31
 800a8b0:	d422      	bmi.n	800a8f8 <__lo0bits+0x52>
 800a8b2:	079a      	lsls	r2, r3, #30
 800a8b4:	bf4b      	itete	mi
 800a8b6:	085b      	lsrmi	r3, r3, #1
 800a8b8:	089b      	lsrpl	r3, r3, #2
 800a8ba:	6003      	strmi	r3, [r0, #0]
 800a8bc:	6003      	strpl	r3, [r0, #0]
 800a8be:	bf4c      	ite	mi
 800a8c0:	2001      	movmi	r0, #1
 800a8c2:	2002      	movpl	r0, #2
 800a8c4:	4770      	bx	lr
 800a8c6:	b299      	uxth	r1, r3
 800a8c8:	b909      	cbnz	r1, 800a8ce <__lo0bits+0x28>
 800a8ca:	0c1b      	lsrs	r3, r3, #16
 800a8cc:	2210      	movs	r2, #16
 800a8ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a8d2:	bf04      	itt	eq
 800a8d4:	0a1b      	lsreq	r3, r3, #8
 800a8d6:	3208      	addeq	r2, #8
 800a8d8:	0719      	lsls	r1, r3, #28
 800a8da:	bf04      	itt	eq
 800a8dc:	091b      	lsreq	r3, r3, #4
 800a8de:	3204      	addeq	r2, #4
 800a8e0:	0799      	lsls	r1, r3, #30
 800a8e2:	bf04      	itt	eq
 800a8e4:	089b      	lsreq	r3, r3, #2
 800a8e6:	3202      	addeq	r2, #2
 800a8e8:	07d9      	lsls	r1, r3, #31
 800a8ea:	d402      	bmi.n	800a8f2 <__lo0bits+0x4c>
 800a8ec:	085b      	lsrs	r3, r3, #1
 800a8ee:	d005      	beq.n	800a8fc <__lo0bits+0x56>
 800a8f0:	3201      	adds	r2, #1
 800a8f2:	6003      	str	r3, [r0, #0]
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	4770      	bx	lr
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	4770      	bx	lr
 800a8fc:	2020      	movs	r0, #32
 800a8fe:	4770      	bx	lr

0800a900 <__i2b>:
 800a900:	b510      	push	{r4, lr}
 800a902:	460c      	mov	r4, r1
 800a904:	2101      	movs	r1, #1
 800a906:	f7ff ff27 	bl	800a758 <_Balloc>
 800a90a:	2201      	movs	r2, #1
 800a90c:	6144      	str	r4, [r0, #20]
 800a90e:	6102      	str	r2, [r0, #16]
 800a910:	bd10      	pop	{r4, pc}

0800a912 <__multiply>:
 800a912:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a916:	4614      	mov	r4, r2
 800a918:	690a      	ldr	r2, [r1, #16]
 800a91a:	6923      	ldr	r3, [r4, #16]
 800a91c:	429a      	cmp	r2, r3
 800a91e:	bfb8      	it	lt
 800a920:	460b      	movlt	r3, r1
 800a922:	4688      	mov	r8, r1
 800a924:	bfbc      	itt	lt
 800a926:	46a0      	movlt	r8, r4
 800a928:	461c      	movlt	r4, r3
 800a92a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a92e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a932:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a936:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a93a:	eb07 0609 	add.w	r6, r7, r9
 800a93e:	429e      	cmp	r6, r3
 800a940:	bfc8      	it	gt
 800a942:	3101      	addgt	r1, #1
 800a944:	f7ff ff08 	bl	800a758 <_Balloc>
 800a948:	f100 0514 	add.w	r5, r0, #20
 800a94c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800a950:	462b      	mov	r3, r5
 800a952:	2200      	movs	r2, #0
 800a954:	4563      	cmp	r3, ip
 800a956:	d202      	bcs.n	800a95e <__multiply+0x4c>
 800a958:	f843 2b04 	str.w	r2, [r3], #4
 800a95c:	e7fa      	b.n	800a954 <__multiply+0x42>
 800a95e:	f104 0214 	add.w	r2, r4, #20
 800a962:	f108 0114 	add.w	r1, r8, #20
 800a966:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a96a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	9b00      	ldr	r3, [sp, #0]
 800a972:	9201      	str	r2, [sp, #4]
 800a974:	4293      	cmp	r3, r2
 800a976:	d957      	bls.n	800aa28 <__multiply+0x116>
 800a978:	f8b2 b000 	ldrh.w	fp, [r2]
 800a97c:	f1bb 0f00 	cmp.w	fp, #0
 800a980:	d023      	beq.n	800a9ca <__multiply+0xb8>
 800a982:	4689      	mov	r9, r1
 800a984:	46ae      	mov	lr, r5
 800a986:	f04f 0800 	mov.w	r8, #0
 800a98a:	f859 4b04 	ldr.w	r4, [r9], #4
 800a98e:	f8be a000 	ldrh.w	sl, [lr]
 800a992:	b2a3      	uxth	r3, r4
 800a994:	fb0b a303 	mla	r3, fp, r3, sl
 800a998:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a99c:	f8de 4000 	ldr.w	r4, [lr]
 800a9a0:	4443      	add	r3, r8
 800a9a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a9a6:	fb0b 840a 	mla	r4, fp, sl, r8
 800a9aa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a9ae:	46f2      	mov	sl, lr
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a9b6:	454f      	cmp	r7, r9
 800a9b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a9bc:	f84a 3b04 	str.w	r3, [sl], #4
 800a9c0:	d901      	bls.n	800a9c6 <__multiply+0xb4>
 800a9c2:	46d6      	mov	lr, sl
 800a9c4:	e7e1      	b.n	800a98a <__multiply+0x78>
 800a9c6:	f8ce 8004 	str.w	r8, [lr, #4]
 800a9ca:	9b01      	ldr	r3, [sp, #4]
 800a9cc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a9d0:	3204      	adds	r2, #4
 800a9d2:	f1ba 0f00 	cmp.w	sl, #0
 800a9d6:	d021      	beq.n	800aa1c <__multiply+0x10a>
 800a9d8:	682b      	ldr	r3, [r5, #0]
 800a9da:	462c      	mov	r4, r5
 800a9dc:	4689      	mov	r9, r1
 800a9de:	f04f 0800 	mov.w	r8, #0
 800a9e2:	f8b9 e000 	ldrh.w	lr, [r9]
 800a9e6:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800a9ea:	fb0a be0e 	mla	lr, sl, lr, fp
 800a9ee:	44f0      	add	r8, lr
 800a9f0:	46a3      	mov	fp, r4
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800a9f8:	f84b 3b04 	str.w	r3, [fp], #4
 800a9fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa00:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 800aa04:	0c1b      	lsrs	r3, r3, #16
 800aa06:	fb0a e303 	mla	r3, sl, r3, lr
 800aa0a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 800aa0e:	454f      	cmp	r7, r9
 800aa10:	ea4f 4813 	mov.w	r8, r3, lsr #16
 800aa14:	d901      	bls.n	800aa1a <__multiply+0x108>
 800aa16:	465c      	mov	r4, fp
 800aa18:	e7e3      	b.n	800a9e2 <__multiply+0xd0>
 800aa1a:	6063      	str	r3, [r4, #4]
 800aa1c:	3504      	adds	r5, #4
 800aa1e:	e7a7      	b.n	800a970 <__multiply+0x5e>
 800aa20:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 800aa24:	b913      	cbnz	r3, 800aa2c <__multiply+0x11a>
 800aa26:	3e01      	subs	r6, #1
 800aa28:	2e00      	cmp	r6, #0
 800aa2a:	dcf9      	bgt.n	800aa20 <__multiply+0x10e>
 800aa2c:	6106      	str	r6, [r0, #16]
 800aa2e:	b003      	add	sp, #12
 800aa30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa34 <__pow5mult>:
 800aa34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa38:	4615      	mov	r5, r2
 800aa3a:	f012 0203 	ands.w	r2, r2, #3
 800aa3e:	4606      	mov	r6, r0
 800aa40:	460f      	mov	r7, r1
 800aa42:	d007      	beq.n	800aa54 <__pow5mult+0x20>
 800aa44:	3a01      	subs	r2, #1
 800aa46:	4c21      	ldr	r4, [pc, #132]	; (800aacc <__pow5mult+0x98>)
 800aa48:	2300      	movs	r3, #0
 800aa4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa4e:	f7ff fecf 	bl	800a7f0 <__multadd>
 800aa52:	4607      	mov	r7, r0
 800aa54:	10ad      	asrs	r5, r5, #2
 800aa56:	d036      	beq.n	800aac6 <__pow5mult+0x92>
 800aa58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aa5a:	b93c      	cbnz	r4, 800aa6c <__pow5mult+0x38>
 800aa5c:	2010      	movs	r0, #16
 800aa5e:	f7fd fcfb 	bl	8008458 <malloc>
 800aa62:	6270      	str	r0, [r6, #36]	; 0x24
 800aa64:	6044      	str	r4, [r0, #4]
 800aa66:	6084      	str	r4, [r0, #8]
 800aa68:	6004      	str	r4, [r0, #0]
 800aa6a:	60c4      	str	r4, [r0, #12]
 800aa6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa74:	b94c      	cbnz	r4, 800aa8a <__pow5mult+0x56>
 800aa76:	f240 2171 	movw	r1, #625	; 0x271
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	f7ff ff40 	bl	800a900 <__i2b>
 800aa80:	2300      	movs	r3, #0
 800aa82:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa86:	4604      	mov	r4, r0
 800aa88:	6003      	str	r3, [r0, #0]
 800aa8a:	f04f 0800 	mov.w	r8, #0
 800aa8e:	07eb      	lsls	r3, r5, #31
 800aa90:	d50a      	bpl.n	800aaa8 <__pow5mult+0x74>
 800aa92:	4639      	mov	r1, r7
 800aa94:	4622      	mov	r2, r4
 800aa96:	4630      	mov	r0, r6
 800aa98:	f7ff ff3b 	bl	800a912 <__multiply>
 800aa9c:	4639      	mov	r1, r7
 800aa9e:	4681      	mov	r9, r0
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	f7ff fe8e 	bl	800a7c2 <_Bfree>
 800aaa6:	464f      	mov	r7, r9
 800aaa8:	106d      	asrs	r5, r5, #1
 800aaaa:	d00c      	beq.n	800aac6 <__pow5mult+0x92>
 800aaac:	6820      	ldr	r0, [r4, #0]
 800aaae:	b108      	cbz	r0, 800aab4 <__pow5mult+0x80>
 800aab0:	4604      	mov	r4, r0
 800aab2:	e7ec      	b.n	800aa8e <__pow5mult+0x5a>
 800aab4:	4622      	mov	r2, r4
 800aab6:	4621      	mov	r1, r4
 800aab8:	4630      	mov	r0, r6
 800aaba:	f7ff ff2a 	bl	800a912 <__multiply>
 800aabe:	6020      	str	r0, [r4, #0]
 800aac0:	f8c0 8000 	str.w	r8, [r0]
 800aac4:	e7f4      	b.n	800aab0 <__pow5mult+0x7c>
 800aac6:	4638      	mov	r0, r7
 800aac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aacc:	0800b440 	.word	0x0800b440

0800aad0 <__lshift>:
 800aad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aad4:	460c      	mov	r4, r1
 800aad6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aada:	6926      	ldr	r6, [r4, #16]
 800aadc:	6849      	ldr	r1, [r1, #4]
 800aade:	68a3      	ldr	r3, [r4, #8]
 800aae0:	4456      	add	r6, sl
 800aae2:	4607      	mov	r7, r0
 800aae4:	4691      	mov	r9, r2
 800aae6:	1c75      	adds	r5, r6, #1
 800aae8:	42ab      	cmp	r3, r5
 800aaea:	da02      	bge.n	800aaf2 <__lshift+0x22>
 800aaec:	3101      	adds	r1, #1
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	e7fa      	b.n	800aae8 <__lshift+0x18>
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	f7ff fe30 	bl	800a758 <_Balloc>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	4680      	mov	r8, r0
 800aafc:	f100 0114 	add.w	r1, r0, #20
 800ab00:	461a      	mov	r2, r3
 800ab02:	4553      	cmp	r3, sl
 800ab04:	da03      	bge.n	800ab0e <__lshift+0x3e>
 800ab06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	e7f9      	b.n	800ab02 <__lshift+0x32>
 800ab0e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800ab12:	6920      	ldr	r0, [r4, #16]
 800ab14:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ab18:	f019 091f 	ands.w	r9, r9, #31
 800ab1c:	f104 0114 	add.w	r1, r4, #20
 800ab20:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800ab24:	d014      	beq.n	800ab50 <__lshift+0x80>
 800ab26:	f1c9 0c20 	rsb	ip, r9, #32
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	6808      	ldr	r0, [r1, #0]
 800ab2e:	fa00 f009 	lsl.w	r0, r0, r9
 800ab32:	4302      	orrs	r2, r0
 800ab34:	469a      	mov	sl, r3
 800ab36:	f843 2b04 	str.w	r2, [r3], #4
 800ab3a:	f851 2b04 	ldr.w	r2, [r1], #4
 800ab3e:	458e      	cmp	lr, r1
 800ab40:	fa22 f20c 	lsr.w	r2, r2, ip
 800ab44:	d8f2      	bhi.n	800ab2c <__lshift+0x5c>
 800ab46:	f8ca 2004 	str.w	r2, [sl, #4]
 800ab4a:	b142      	cbz	r2, 800ab5e <__lshift+0x8e>
 800ab4c:	1cb5      	adds	r5, r6, #2
 800ab4e:	e006      	b.n	800ab5e <__lshift+0x8e>
 800ab50:	3b04      	subs	r3, #4
 800ab52:	f851 2b04 	ldr.w	r2, [r1], #4
 800ab56:	f843 2f04 	str.w	r2, [r3, #4]!
 800ab5a:	458e      	cmp	lr, r1
 800ab5c:	d8f9      	bhi.n	800ab52 <__lshift+0x82>
 800ab5e:	3d01      	subs	r5, #1
 800ab60:	4638      	mov	r0, r7
 800ab62:	f8c8 5010 	str.w	r5, [r8, #16]
 800ab66:	4621      	mov	r1, r4
 800ab68:	f7ff fe2b 	bl	800a7c2 <_Bfree>
 800ab6c:	4640      	mov	r0, r8
 800ab6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ab72 <__mcmp>:
 800ab72:	6903      	ldr	r3, [r0, #16]
 800ab74:	690a      	ldr	r2, [r1, #16]
 800ab76:	1a9b      	subs	r3, r3, r2
 800ab78:	b510      	push	{r4, lr}
 800ab7a:	d111      	bne.n	800aba0 <__mcmp+0x2e>
 800ab7c:	0092      	lsls	r2, r2, #2
 800ab7e:	3014      	adds	r0, #20
 800ab80:	3114      	adds	r1, #20
 800ab82:	1883      	adds	r3, r0, r2
 800ab84:	440a      	add	r2, r1
 800ab86:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800ab8a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ab8e:	428c      	cmp	r4, r1
 800ab90:	d002      	beq.n	800ab98 <__mcmp+0x26>
 800ab92:	d307      	bcc.n	800aba4 <__mcmp+0x32>
 800ab94:	2001      	movs	r0, #1
 800ab96:	bd10      	pop	{r4, pc}
 800ab98:	4298      	cmp	r0, r3
 800ab9a:	d3f4      	bcc.n	800ab86 <__mcmp+0x14>
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	bd10      	pop	{r4, pc}
 800aba0:	4618      	mov	r0, r3
 800aba2:	bd10      	pop	{r4, pc}
 800aba4:	f04f 30ff 	mov.w	r0, #4294967295
 800aba8:	bd10      	pop	{r4, pc}

0800abaa <__mdiff>:
 800abaa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abae:	460c      	mov	r4, r1
 800abb0:	4607      	mov	r7, r0
 800abb2:	4611      	mov	r1, r2
 800abb4:	4620      	mov	r0, r4
 800abb6:	4615      	mov	r5, r2
 800abb8:	f7ff ffdb 	bl	800ab72 <__mcmp>
 800abbc:	1e06      	subs	r6, r0, #0
 800abbe:	d108      	bne.n	800abd2 <__mdiff+0x28>
 800abc0:	4631      	mov	r1, r6
 800abc2:	4638      	mov	r0, r7
 800abc4:	f7ff fdc8 	bl	800a758 <_Balloc>
 800abc8:	2301      	movs	r3, #1
 800abca:	6103      	str	r3, [r0, #16]
 800abcc:	6146      	str	r6, [r0, #20]
 800abce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abd2:	bfbc      	itt	lt
 800abd4:	4623      	movlt	r3, r4
 800abd6:	462c      	movlt	r4, r5
 800abd8:	4638      	mov	r0, r7
 800abda:	6861      	ldr	r1, [r4, #4]
 800abdc:	bfba      	itte	lt
 800abde:	461d      	movlt	r5, r3
 800abe0:	2601      	movlt	r6, #1
 800abe2:	2600      	movge	r6, #0
 800abe4:	f7ff fdb8 	bl	800a758 <_Balloc>
 800abe8:	692b      	ldr	r3, [r5, #16]
 800abea:	60c6      	str	r6, [r0, #12]
 800abec:	6926      	ldr	r6, [r4, #16]
 800abee:	f105 0914 	add.w	r9, r5, #20
 800abf2:	3414      	adds	r4, #20
 800abf4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800abf8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800abfc:	f100 0514 	add.w	r5, r0, #20
 800ac00:	f04f 0c00 	mov.w	ip, #0
 800ac04:	f854 3b04 	ldr.w	r3, [r4], #4
 800ac08:	f859 2b04 	ldr.w	r2, [r9], #4
 800ac0c:	fa1c f183 	uxtah	r1, ip, r3
 800ac10:	fa1f fe82 	uxth.w	lr, r2
 800ac14:	0c12      	lsrs	r2, r2, #16
 800ac16:	ebce 0101 	rsb	r1, lr, r1
 800ac1a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800ac1e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ac22:	b289      	uxth	r1, r1
 800ac24:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ac28:	45c8      	cmp	r8, r9
 800ac2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ac2e:	46a6      	mov	lr, r4
 800ac30:	f845 3b04 	str.w	r3, [r5], #4
 800ac34:	d8e6      	bhi.n	800ac04 <__mdiff+0x5a>
 800ac36:	45be      	cmp	lr, r7
 800ac38:	d20e      	bcs.n	800ac58 <__mdiff+0xae>
 800ac3a:	f85e 1b04 	ldr.w	r1, [lr], #4
 800ac3e:	fa1c f281 	uxtah	r2, ip, r1
 800ac42:	1413      	asrs	r3, r2, #16
 800ac44:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800ac48:	b292      	uxth	r2, r2
 800ac4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ac4e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ac52:	f845 2b04 	str.w	r2, [r5], #4
 800ac56:	e7ee      	b.n	800ac36 <__mdiff+0x8c>
 800ac58:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ac5c:	b90b      	cbnz	r3, 800ac62 <__mdiff+0xb8>
 800ac5e:	3e01      	subs	r6, #1
 800ac60:	e7fa      	b.n	800ac58 <__mdiff+0xae>
 800ac62:	6106      	str	r6, [r0, #16]
 800ac64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ac68 <__d2b>:
 800ac68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac6c:	460e      	mov	r6, r1
 800ac6e:	2101      	movs	r1, #1
 800ac70:	ec59 8b10 	vmov	r8, r9, d0
 800ac74:	4615      	mov	r5, r2
 800ac76:	f7ff fd6f 	bl	800a758 <_Balloc>
 800ac7a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ac7e:	4607      	mov	r7, r0
 800ac80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac84:	b10c      	cbz	r4, 800ac8a <__d2b+0x22>
 800ac86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac8a:	9301      	str	r3, [sp, #4]
 800ac8c:	f1b8 0f00 	cmp.w	r8, #0
 800ac90:	d019      	beq.n	800acc6 <__d2b+0x5e>
 800ac92:	a802      	add	r0, sp, #8
 800ac94:	f840 8d08 	str.w	r8, [r0, #-8]!
 800ac98:	f7ff fe05 	bl	800a8a6 <__lo0bits>
 800ac9c:	9b00      	ldr	r3, [sp, #0]
 800ac9e:	b148      	cbz	r0, 800acb4 <__d2b+0x4c>
 800aca0:	9a01      	ldr	r2, [sp, #4]
 800aca2:	f1c0 0120 	rsb	r1, r0, #32
 800aca6:	fa02 f101 	lsl.w	r1, r2, r1
 800acaa:	430b      	orrs	r3, r1
 800acac:	40c2      	lsrs	r2, r0
 800acae:	617b      	str	r3, [r7, #20]
 800acb0:	9201      	str	r2, [sp, #4]
 800acb2:	e000      	b.n	800acb6 <__d2b+0x4e>
 800acb4:	617b      	str	r3, [r7, #20]
 800acb6:	9b01      	ldr	r3, [sp, #4]
 800acb8:	61bb      	str	r3, [r7, #24]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	bf14      	ite	ne
 800acbe:	2102      	movne	r1, #2
 800acc0:	2101      	moveq	r1, #1
 800acc2:	6139      	str	r1, [r7, #16]
 800acc4:	e007      	b.n	800acd6 <__d2b+0x6e>
 800acc6:	a801      	add	r0, sp, #4
 800acc8:	f7ff fded 	bl	800a8a6 <__lo0bits>
 800accc:	9b01      	ldr	r3, [sp, #4]
 800acce:	617b      	str	r3, [r7, #20]
 800acd0:	2101      	movs	r1, #1
 800acd2:	6139      	str	r1, [r7, #16]
 800acd4:	3020      	adds	r0, #32
 800acd6:	b134      	cbz	r4, 800ace6 <__d2b+0x7e>
 800acd8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800acdc:	4404      	add	r4, r0
 800acde:	6034      	str	r4, [r6, #0]
 800ace0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ace4:	e009      	b.n	800acfa <__d2b+0x92>
 800ace6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800acea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800acee:	6030      	str	r0, [r6, #0]
 800acf0:	6918      	ldr	r0, [r3, #16]
 800acf2:	f7ff fdb8 	bl	800a866 <__hi0bits>
 800acf6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800acfa:	6028      	str	r0, [r5, #0]
 800acfc:	4638      	mov	r0, r7
 800acfe:	b003      	add	sp, #12
 800ad00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ad04 <__ssprint_r>:
 800ad04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	4693      	mov	fp, r2
 800ad0a:	6892      	ldr	r2, [r2, #8]
 800ad0c:	4681      	mov	r9, r0
 800ad0e:	460c      	mov	r4, r1
 800ad10:	b34a      	cbz	r2, 800ad66 <__ssprint_r+0x62>
 800ad12:	2300      	movs	r3, #0
 800ad14:	f8db a000 	ldr.w	sl, [fp]
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	461f      	mov	r7, r3
 800ad1c:	e006      	b.n	800ad2c <__ssprint_r+0x28>
 800ad1e:	f8da 3000 	ldr.w	r3, [sl]
 800ad22:	f8da 7004 	ldr.w	r7, [sl, #4]
 800ad26:	9301      	str	r3, [sp, #4]
 800ad28:	f10a 0a08 	add.w	sl, sl, #8
 800ad2c:	2f00      	cmp	r7, #0
 800ad2e:	d0f6      	beq.n	800ad1e <__ssprint_r+0x1a>
 800ad30:	68a6      	ldr	r6, [r4, #8]
 800ad32:	42b7      	cmp	r7, r6
 800ad34:	d360      	bcc.n	800adf8 <__ssprint_r+0xf4>
 800ad36:	89a0      	ldrh	r0, [r4, #12]
 800ad38:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800ad3c:	d117      	bne.n	800ad6e <__ssprint_r+0x6a>
 800ad3e:	42b7      	cmp	r7, r6
 800ad40:	d35a      	bcc.n	800adf8 <__ssprint_r+0xf4>
 800ad42:	4632      	mov	r2, r6
 800ad44:	9901      	ldr	r1, [sp, #4]
 800ad46:	6820      	ldr	r0, [r4, #0]
 800ad48:	f000 f888 	bl	800ae5c <memmove>
 800ad4c:	68a2      	ldr	r2, [r4, #8]
 800ad4e:	1b92      	subs	r2, r2, r6
 800ad50:	60a2      	str	r2, [r4, #8]
 800ad52:	6822      	ldr	r2, [r4, #0]
 800ad54:	4416      	add	r6, r2
 800ad56:	f8db 2008 	ldr.w	r2, [fp, #8]
 800ad5a:	6026      	str	r6, [r4, #0]
 800ad5c:	1bd7      	subs	r7, r2, r7
 800ad5e:	f8cb 7008 	str.w	r7, [fp, #8]
 800ad62:	2f00      	cmp	r7, #0
 800ad64:	d1db      	bne.n	800ad1e <__ssprint_r+0x1a>
 800ad66:	2000      	movs	r0, #0
 800ad68:	f8cb 0004 	str.w	r0, [fp, #4]
 800ad6c:	e046      	b.n	800adfc <__ssprint_r+0xf8>
 800ad6e:	6825      	ldr	r5, [r4, #0]
 800ad70:	6921      	ldr	r1, [r4, #16]
 800ad72:	ebc1 0805 	rsb	r8, r1, r5
 800ad76:	f108 0201 	add.w	r2, r8, #1
 800ad7a:	6965      	ldr	r5, [r4, #20]
 800ad7c:	443a      	add	r2, r7
 800ad7e:	2302      	movs	r3, #2
 800ad80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad84:	fb95 f5f3 	sdiv	r5, r5, r3
 800ad88:	4295      	cmp	r5, r2
 800ad8a:	bf38      	it	cc
 800ad8c:	4615      	movcc	r5, r2
 800ad8e:	0543      	lsls	r3, r0, #21
 800ad90:	d510      	bpl.n	800adb4 <__ssprint_r+0xb0>
 800ad92:	4629      	mov	r1, r5
 800ad94:	4648      	mov	r0, r9
 800ad96:	f7fd fb6f 	bl	8008478 <_malloc_r>
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	b1a0      	cbz	r0, 800adc8 <__ssprint_r+0xc4>
 800ad9e:	4642      	mov	r2, r8
 800ada0:	6921      	ldr	r1, [r4, #16]
 800ada2:	f7fd fd89 	bl	80088b8 <memcpy>
 800ada6:	89a2      	ldrh	r2, [r4, #12]
 800ada8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800adac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800adb0:	81a2      	strh	r2, [r4, #12]
 800adb2:	e018      	b.n	800ade6 <__ssprint_r+0xe2>
 800adb4:	462a      	mov	r2, r5
 800adb6:	4648      	mov	r0, r9
 800adb8:	f000 f874 	bl	800aea4 <_realloc_r>
 800adbc:	4606      	mov	r6, r0
 800adbe:	b990      	cbnz	r0, 800ade6 <__ssprint_r+0xe2>
 800adc0:	6921      	ldr	r1, [r4, #16]
 800adc2:	4648      	mov	r0, r9
 800adc4:	f7ff fc06 	bl	800a5d4 <_free_r>
 800adc8:	220c      	movs	r2, #12
 800adca:	f8c9 2000 	str.w	r2, [r9]
 800adce:	89a2      	ldrh	r2, [r4, #12]
 800add0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800add4:	81a2      	strh	r2, [r4, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	f8cb 2008 	str.w	r2, [fp, #8]
 800addc:	f8cb 2004 	str.w	r2, [fp, #4]
 800ade0:	f04f 30ff 	mov.w	r0, #4294967295
 800ade4:	e00a      	b.n	800adfc <__ssprint_r+0xf8>
 800ade6:	6126      	str	r6, [r4, #16]
 800ade8:	6165      	str	r5, [r4, #20]
 800adea:	4446      	add	r6, r8
 800adec:	ebc8 0505 	rsb	r5, r8, r5
 800adf0:	6026      	str	r6, [r4, #0]
 800adf2:	60a5      	str	r5, [r4, #8]
 800adf4:	463e      	mov	r6, r7
 800adf6:	e7a2      	b.n	800ad3e <__ssprint_r+0x3a>
 800adf8:	463e      	mov	r6, r7
 800adfa:	e7a2      	b.n	800ad42 <__ssprint_r+0x3e>
 800adfc:	b003      	add	sp, #12
 800adfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae02 <_calloc_r>:
 800ae02:	b510      	push	{r4, lr}
 800ae04:	4351      	muls	r1, r2
 800ae06:	f7fd fb37 	bl	8008478 <_malloc_r>
 800ae0a:	4604      	mov	r4, r0
 800ae0c:	b320      	cbz	r0, 800ae58 <_calloc_r+0x56>
 800ae0e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ae12:	f022 0203 	bic.w	r2, r2, #3
 800ae16:	3a04      	subs	r2, #4
 800ae18:	2a24      	cmp	r2, #36	; 0x24
 800ae1a:	d81a      	bhi.n	800ae52 <_calloc_r+0x50>
 800ae1c:	2a13      	cmp	r2, #19
 800ae1e:	d912      	bls.n	800ae46 <_calloc_r+0x44>
 800ae20:	2100      	movs	r1, #0
 800ae22:	2a1b      	cmp	r2, #27
 800ae24:	6001      	str	r1, [r0, #0]
 800ae26:	6041      	str	r1, [r0, #4]
 800ae28:	d802      	bhi.n	800ae30 <_calloc_r+0x2e>
 800ae2a:	f100 0308 	add.w	r3, r0, #8
 800ae2e:	e00b      	b.n	800ae48 <_calloc_r+0x46>
 800ae30:	2a24      	cmp	r2, #36	; 0x24
 800ae32:	6081      	str	r1, [r0, #8]
 800ae34:	60c1      	str	r1, [r0, #12]
 800ae36:	bf11      	iteee	ne
 800ae38:	f100 0310 	addne.w	r3, r0, #16
 800ae3c:	6101      	streq	r1, [r0, #16]
 800ae3e:	f100 0318 	addeq.w	r3, r0, #24
 800ae42:	6141      	streq	r1, [r0, #20]
 800ae44:	e000      	b.n	800ae48 <_calloc_r+0x46>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2200      	movs	r2, #0
 800ae4a:	601a      	str	r2, [r3, #0]
 800ae4c:	605a      	str	r2, [r3, #4]
 800ae4e:	609a      	str	r2, [r3, #8]
 800ae50:	e002      	b.n	800ae58 <_calloc_r+0x56>
 800ae52:	2100      	movs	r1, #0
 800ae54:	f000 f81d 	bl	800ae92 <memset>
 800ae58:	4620      	mov	r0, r4
 800ae5a:	bd10      	pop	{r4, pc}

0800ae5c <memmove>:
 800ae5c:	4288      	cmp	r0, r1
 800ae5e:	b510      	push	{r4, lr}
 800ae60:	eb01 0302 	add.w	r3, r1, r2
 800ae64:	d801      	bhi.n	800ae6a <memmove+0xe>
 800ae66:	1e42      	subs	r2, r0, #1
 800ae68:	e00b      	b.n	800ae82 <memmove+0x26>
 800ae6a:	4298      	cmp	r0, r3
 800ae6c:	d2fb      	bcs.n	800ae66 <memmove+0xa>
 800ae6e:	1881      	adds	r1, r0, r2
 800ae70:	1ad2      	subs	r2, r2, r3
 800ae72:	42d3      	cmn	r3, r2
 800ae74:	d004      	beq.n	800ae80 <memmove+0x24>
 800ae76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae7a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ae7e:	e7f8      	b.n	800ae72 <memmove+0x16>
 800ae80:	bd10      	pop	{r4, pc}
 800ae82:	4299      	cmp	r1, r3
 800ae84:	d004      	beq.n	800ae90 <memmove+0x34>
 800ae86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae8a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ae8e:	e7f8      	b.n	800ae82 <memmove+0x26>
 800ae90:	bd10      	pop	{r4, pc}

0800ae92 <memset>:
 800ae92:	4402      	add	r2, r0
 800ae94:	4603      	mov	r3, r0
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d002      	beq.n	800aea0 <memset+0xe>
 800ae9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae9e:	e7fa      	b.n	800ae96 <memset+0x4>
 800aea0:	4770      	bx	lr
	...

0800aea4 <_realloc_r>:
 800aea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea8:	4681      	mov	r9, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	b929      	cbnz	r1, 800aeba <_realloc_r+0x16>
 800aeae:	4611      	mov	r1, r2
 800aeb0:	b003      	add	sp, #12
 800aeb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb6:	f7fd badf 	b.w	8008478 <_malloc_r>
 800aeba:	9201      	str	r2, [sp, #4]
 800aebc:	f7fd fd07 	bl	80088ce <__malloc_lock>
 800aec0:	9a01      	ldr	r2, [sp, #4]
 800aec2:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800aec6:	f102 080b 	add.w	r8, r2, #11
 800aeca:	f1b8 0f16 	cmp.w	r8, #22
 800aece:	f1a4 0b08 	sub.w	fp, r4, #8
 800aed2:	f02e 0503 	bic.w	r5, lr, #3
 800aed6:	d903      	bls.n	800aee0 <_realloc_r+0x3c>
 800aed8:	f038 0807 	bics.w	r8, r8, #7
 800aedc:	d502      	bpl.n	800aee4 <_realloc_r+0x40>
 800aede:	e003      	b.n	800aee8 <_realloc_r+0x44>
 800aee0:	f04f 0810 	mov.w	r8, #16
 800aee4:	4590      	cmp	r8, r2
 800aee6:	d204      	bcs.n	800aef2 <_realloc_r+0x4e>
 800aee8:	230c      	movs	r3, #12
 800aeea:	f8c9 3000 	str.w	r3, [r9]
 800aeee:	2000      	movs	r0, #0
 800aef0:	e17d      	b.n	800b1ee <_realloc_r+0x34a>
 800aef2:	45a8      	cmp	r8, r5
 800aef4:	f340 8150 	ble.w	800b198 <_realloc_r+0x2f4>
 800aef8:	4ba6      	ldr	r3, [pc, #664]	; (800b194 <_realloc_r+0x2f0>)
 800aefa:	6898      	ldr	r0, [r3, #8]
 800aefc:	eb0b 0105 	add.w	r1, fp, r5
 800af00:	4281      	cmp	r1, r0
 800af02:	684f      	ldr	r7, [r1, #4]
 800af04:	d005      	beq.n	800af12 <_realloc_r+0x6e>
 800af06:	f027 0601 	bic.w	r6, r7, #1
 800af0a:	440e      	add	r6, r1
 800af0c:	6876      	ldr	r6, [r6, #4]
 800af0e:	07f6      	lsls	r6, r6, #31
 800af10:	d426      	bmi.n	800af60 <_realloc_r+0xbc>
 800af12:	f027 0a03 	bic.w	sl, r7, #3
 800af16:	4281      	cmp	r1, r0
 800af18:	eb05 070a 	add.w	r7, r5, sl
 800af1c:	d118      	bne.n	800af50 <_realloc_r+0xac>
 800af1e:	f108 0610 	add.w	r6, r8, #16
 800af22:	42b7      	cmp	r7, r6
 800af24:	db1f      	blt.n	800af66 <_realloc_r+0xc2>
 800af26:	eb0b 0008 	add.w	r0, fp, r8
 800af2a:	ebc8 0707 	rsb	r7, r8, r7
 800af2e:	f047 0701 	orr.w	r7, r7, #1
 800af32:	6098      	str	r0, [r3, #8]
 800af34:	6047      	str	r7, [r0, #4]
 800af36:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	ea43 0308 	orr.w	r3, r3, r8
 800af42:	4648      	mov	r0, r9
 800af44:	f844 3c04 	str.w	r3, [r4, #-4]
 800af48:	f7fd fcc2 	bl	80088d0 <__malloc_unlock>
 800af4c:	4620      	mov	r0, r4
 800af4e:	e14e      	b.n	800b1ee <_realloc_r+0x34a>
 800af50:	45b8      	cmp	r8, r7
 800af52:	dc08      	bgt.n	800af66 <_realloc_r+0xc2>
 800af54:	68cb      	ldr	r3, [r1, #12]
 800af56:	688a      	ldr	r2, [r1, #8]
 800af58:	463d      	mov	r5, r7
 800af5a:	60d3      	str	r3, [r2, #12]
 800af5c:	609a      	str	r2, [r3, #8]
 800af5e:	e11b      	b.n	800b198 <_realloc_r+0x2f4>
 800af60:	f04f 0a00 	mov.w	sl, #0
 800af64:	4651      	mov	r1, sl
 800af66:	f01e 0f01 	tst.w	lr, #1
 800af6a:	f040 80c3 	bne.w	800b0f4 <_realloc_r+0x250>
 800af6e:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800af72:	ebc7 070b 	rsb	r7, r7, fp
 800af76:	687e      	ldr	r6, [r7, #4]
 800af78:	f026 0603 	bic.w	r6, r6, #3
 800af7c:	442e      	add	r6, r5
 800af7e:	2900      	cmp	r1, #0
 800af80:	f000 8083 	beq.w	800b08a <_realloc_r+0x1e6>
 800af84:	4281      	cmp	r1, r0
 800af86:	44b2      	add	sl, r6
 800af88:	d147      	bne.n	800b01a <_realloc_r+0x176>
 800af8a:	f108 0110 	add.w	r1, r8, #16
 800af8e:	458a      	cmp	sl, r1
 800af90:	db7b      	blt.n	800b08a <_realloc_r+0x1e6>
 800af92:	463e      	mov	r6, r7
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800af9a:	60ca      	str	r2, [r1, #12]
 800af9c:	6091      	str	r1, [r2, #8]
 800af9e:	1f2a      	subs	r2, r5, #4
 800afa0:	2a24      	cmp	r2, #36	; 0x24
 800afa2:	d825      	bhi.n	800aff0 <_realloc_r+0x14c>
 800afa4:	2a13      	cmp	r2, #19
 800afa6:	d91b      	bls.n	800afe0 <_realloc_r+0x13c>
 800afa8:	6821      	ldr	r1, [r4, #0]
 800afaa:	60b9      	str	r1, [r7, #8]
 800afac:	6861      	ldr	r1, [r4, #4]
 800afae:	60f9      	str	r1, [r7, #12]
 800afb0:	2a1b      	cmp	r2, #27
 800afb2:	d803      	bhi.n	800afbc <_realloc_r+0x118>
 800afb4:	f107 0210 	add.w	r2, r7, #16
 800afb8:	3408      	adds	r4, #8
 800afba:	e012      	b.n	800afe2 <_realloc_r+0x13e>
 800afbc:	68a1      	ldr	r1, [r4, #8]
 800afbe:	6139      	str	r1, [r7, #16]
 800afc0:	68e1      	ldr	r1, [r4, #12]
 800afc2:	6179      	str	r1, [r7, #20]
 800afc4:	2a24      	cmp	r2, #36	; 0x24
 800afc6:	bf01      	itttt	eq
 800afc8:	6922      	ldreq	r2, [r4, #16]
 800afca:	61ba      	streq	r2, [r7, #24]
 800afcc:	6961      	ldreq	r1, [r4, #20]
 800afce:	61f9      	streq	r1, [r7, #28]
 800afd0:	bf19      	ittee	ne
 800afd2:	f107 0218 	addne.w	r2, r7, #24
 800afd6:	3410      	addne	r4, #16
 800afd8:	f107 0220 	addeq.w	r2, r7, #32
 800afdc:	3418      	addeq	r4, #24
 800afde:	e000      	b.n	800afe2 <_realloc_r+0x13e>
 800afe0:	4632      	mov	r2, r6
 800afe2:	6821      	ldr	r1, [r4, #0]
 800afe4:	6011      	str	r1, [r2, #0]
 800afe6:	6861      	ldr	r1, [r4, #4]
 800afe8:	6051      	str	r1, [r2, #4]
 800afea:	68a1      	ldr	r1, [r4, #8]
 800afec:	6091      	str	r1, [r2, #8]
 800afee:	e005      	b.n	800affc <_realloc_r+0x158>
 800aff0:	4621      	mov	r1, r4
 800aff2:	4630      	mov	r0, r6
 800aff4:	9301      	str	r3, [sp, #4]
 800aff6:	f7ff ff31 	bl	800ae5c <memmove>
 800affa:	9b01      	ldr	r3, [sp, #4]
 800affc:	eb07 0208 	add.w	r2, r7, r8
 800b000:	ebc8 0a0a 	rsb	sl, r8, sl
 800b004:	609a      	str	r2, [r3, #8]
 800b006:	f04a 0301 	orr.w	r3, sl, #1
 800b00a:	6053      	str	r3, [r2, #4]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	ea43 0308 	orr.w	r3, r3, r8
 800b016:	607b      	str	r3, [r7, #4]
 800b018:	e0b6      	b.n	800b188 <_realloc_r+0x2e4>
 800b01a:	45d0      	cmp	r8, sl
 800b01c:	dc35      	bgt.n	800b08a <_realloc_r+0x1e6>
 800b01e:	68cb      	ldr	r3, [r1, #12]
 800b020:	688a      	ldr	r2, [r1, #8]
 800b022:	4638      	mov	r0, r7
 800b024:	60d3      	str	r3, [r2, #12]
 800b026:	609a      	str	r2, [r3, #8]
 800b028:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	60d3      	str	r3, [r2, #12]
 800b030:	609a      	str	r2, [r3, #8]
 800b032:	1f2a      	subs	r2, r5, #4
 800b034:	2a24      	cmp	r2, #36	; 0x24
 800b036:	d823      	bhi.n	800b080 <_realloc_r+0x1dc>
 800b038:	2a13      	cmp	r2, #19
 800b03a:	d91a      	bls.n	800b072 <_realloc_r+0x1ce>
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	60bb      	str	r3, [r7, #8]
 800b040:	6863      	ldr	r3, [r4, #4]
 800b042:	60fb      	str	r3, [r7, #12]
 800b044:	2a1b      	cmp	r2, #27
 800b046:	d803      	bhi.n	800b050 <_realloc_r+0x1ac>
 800b048:	f107 0010 	add.w	r0, r7, #16
 800b04c:	3408      	adds	r4, #8
 800b04e:	e010      	b.n	800b072 <_realloc_r+0x1ce>
 800b050:	68a3      	ldr	r3, [r4, #8]
 800b052:	613b      	str	r3, [r7, #16]
 800b054:	68e3      	ldr	r3, [r4, #12]
 800b056:	617b      	str	r3, [r7, #20]
 800b058:	2a24      	cmp	r2, #36	; 0x24
 800b05a:	bf01      	itttt	eq
 800b05c:	6923      	ldreq	r3, [r4, #16]
 800b05e:	61bb      	streq	r3, [r7, #24]
 800b060:	6963      	ldreq	r3, [r4, #20]
 800b062:	61fb      	streq	r3, [r7, #28]
 800b064:	bf19      	ittee	ne
 800b066:	f107 0018 	addne.w	r0, r7, #24
 800b06a:	3410      	addne	r4, #16
 800b06c:	f107 0020 	addeq.w	r0, r7, #32
 800b070:	3418      	addeq	r4, #24
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	6003      	str	r3, [r0, #0]
 800b076:	6863      	ldr	r3, [r4, #4]
 800b078:	6043      	str	r3, [r0, #4]
 800b07a:	68a3      	ldr	r3, [r4, #8]
 800b07c:	6083      	str	r3, [r0, #8]
 800b07e:	e002      	b.n	800b086 <_realloc_r+0x1e2>
 800b080:	4621      	mov	r1, r4
 800b082:	f7ff feeb 	bl	800ae5c <memmove>
 800b086:	4655      	mov	r5, sl
 800b088:	e02e      	b.n	800b0e8 <_realloc_r+0x244>
 800b08a:	45b0      	cmp	r8, r6
 800b08c:	dc32      	bgt.n	800b0f4 <_realloc_r+0x250>
 800b08e:	4638      	mov	r0, r7
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b096:	60d3      	str	r3, [r2, #12]
 800b098:	609a      	str	r2, [r3, #8]
 800b09a:	1f2a      	subs	r2, r5, #4
 800b09c:	2a24      	cmp	r2, #36	; 0x24
 800b09e:	d825      	bhi.n	800b0ec <_realloc_r+0x248>
 800b0a0:	2a13      	cmp	r2, #19
 800b0a2:	d91a      	bls.n	800b0da <_realloc_r+0x236>
 800b0a4:	6823      	ldr	r3, [r4, #0]
 800b0a6:	60bb      	str	r3, [r7, #8]
 800b0a8:	6863      	ldr	r3, [r4, #4]
 800b0aa:	60fb      	str	r3, [r7, #12]
 800b0ac:	2a1b      	cmp	r2, #27
 800b0ae:	d803      	bhi.n	800b0b8 <_realloc_r+0x214>
 800b0b0:	f107 0010 	add.w	r0, r7, #16
 800b0b4:	3408      	adds	r4, #8
 800b0b6:	e010      	b.n	800b0da <_realloc_r+0x236>
 800b0b8:	68a3      	ldr	r3, [r4, #8]
 800b0ba:	613b      	str	r3, [r7, #16]
 800b0bc:	68e3      	ldr	r3, [r4, #12]
 800b0be:	617b      	str	r3, [r7, #20]
 800b0c0:	2a24      	cmp	r2, #36	; 0x24
 800b0c2:	bf01      	itttt	eq
 800b0c4:	6923      	ldreq	r3, [r4, #16]
 800b0c6:	61bb      	streq	r3, [r7, #24]
 800b0c8:	6963      	ldreq	r3, [r4, #20]
 800b0ca:	61fb      	streq	r3, [r7, #28]
 800b0cc:	bf19      	ittee	ne
 800b0ce:	f107 0018 	addne.w	r0, r7, #24
 800b0d2:	3410      	addne	r4, #16
 800b0d4:	f107 0020 	addeq.w	r0, r7, #32
 800b0d8:	3418      	addeq	r4, #24
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	6003      	str	r3, [r0, #0]
 800b0de:	6863      	ldr	r3, [r4, #4]
 800b0e0:	6043      	str	r3, [r0, #4]
 800b0e2:	68a3      	ldr	r3, [r4, #8]
 800b0e4:	6083      	str	r3, [r0, #8]
 800b0e6:	4635      	mov	r5, r6
 800b0e8:	46bb      	mov	fp, r7
 800b0ea:	e055      	b.n	800b198 <_realloc_r+0x2f4>
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	f7ff feb5 	bl	800ae5c <memmove>
 800b0f2:	e7f8      	b.n	800b0e6 <_realloc_r+0x242>
 800b0f4:	4611      	mov	r1, r2
 800b0f6:	4648      	mov	r0, r9
 800b0f8:	f7fd f9be 	bl	8008478 <_malloc_r>
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	2800      	cmp	r0, #0
 800b100:	d042      	beq.n	800b188 <_realloc_r+0x2e4>
 800b102:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b106:	f023 0301 	bic.w	r3, r3, #1
 800b10a:	f1a0 0208 	sub.w	r2, r0, #8
 800b10e:	445b      	add	r3, fp
 800b110:	429a      	cmp	r2, r3
 800b112:	d105      	bne.n	800b120 <_realloc_r+0x27c>
 800b114:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b118:	f023 0303 	bic.w	r3, r3, #3
 800b11c:	441d      	add	r5, r3
 800b11e:	e03b      	b.n	800b198 <_realloc_r+0x2f4>
 800b120:	1f2a      	subs	r2, r5, #4
 800b122:	2a24      	cmp	r2, #36	; 0x24
 800b124:	d829      	bhi.n	800b17a <_realloc_r+0x2d6>
 800b126:	2a13      	cmp	r2, #19
 800b128:	d91e      	bls.n	800b168 <_realloc_r+0x2c4>
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	6003      	str	r3, [r0, #0]
 800b12e:	6863      	ldr	r3, [r4, #4]
 800b130:	6043      	str	r3, [r0, #4]
 800b132:	2a1b      	cmp	r2, #27
 800b134:	d804      	bhi.n	800b140 <_realloc_r+0x29c>
 800b136:	f100 0308 	add.w	r3, r0, #8
 800b13a:	f104 0208 	add.w	r2, r4, #8
 800b13e:	e015      	b.n	800b16c <_realloc_r+0x2c8>
 800b140:	68a3      	ldr	r3, [r4, #8]
 800b142:	6083      	str	r3, [r0, #8]
 800b144:	68e3      	ldr	r3, [r4, #12]
 800b146:	60c3      	str	r3, [r0, #12]
 800b148:	2a24      	cmp	r2, #36	; 0x24
 800b14a:	bf01      	itttt	eq
 800b14c:	6923      	ldreq	r3, [r4, #16]
 800b14e:	6103      	streq	r3, [r0, #16]
 800b150:	6961      	ldreq	r1, [r4, #20]
 800b152:	6141      	streq	r1, [r0, #20]
 800b154:	bf19      	ittee	ne
 800b156:	f100 0310 	addne.w	r3, r0, #16
 800b15a:	f104 0210 	addne.w	r2, r4, #16
 800b15e:	f100 0318 	addeq.w	r3, r0, #24
 800b162:	f104 0218 	addeq.w	r2, r4, #24
 800b166:	e001      	b.n	800b16c <_realloc_r+0x2c8>
 800b168:	4603      	mov	r3, r0
 800b16a:	4622      	mov	r2, r4
 800b16c:	6811      	ldr	r1, [r2, #0]
 800b16e:	6019      	str	r1, [r3, #0]
 800b170:	6851      	ldr	r1, [r2, #4]
 800b172:	6059      	str	r1, [r3, #4]
 800b174:	6892      	ldr	r2, [r2, #8]
 800b176:	609a      	str	r2, [r3, #8]
 800b178:	e002      	b.n	800b180 <_realloc_r+0x2dc>
 800b17a:	4621      	mov	r1, r4
 800b17c:	f7ff fe6e 	bl	800ae5c <memmove>
 800b180:	4621      	mov	r1, r4
 800b182:	4648      	mov	r0, r9
 800b184:	f7ff fa26 	bl	800a5d4 <_free_r>
 800b188:	4648      	mov	r0, r9
 800b18a:	f7fd fba1 	bl	80088d0 <__malloc_unlock>
 800b18e:	4630      	mov	r0, r6
 800b190:	e02d      	b.n	800b1ee <_realloc_r+0x34a>
 800b192:	bf00      	nop
 800b194:	20000158 	.word	0x20000158
 800b198:	ebc8 0205 	rsb	r2, r8, r5
 800b19c:	2a0f      	cmp	r2, #15
 800b19e:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b1a2:	d914      	bls.n	800b1ce <_realloc_r+0x32a>
 800b1a4:	f003 0301 	and.w	r3, r3, #1
 800b1a8:	eb0b 0108 	add.w	r1, fp, r8
 800b1ac:	ea43 0308 	orr.w	r3, r3, r8
 800b1b0:	f8cb 3004 	str.w	r3, [fp, #4]
 800b1b4:	f042 0301 	orr.w	r3, r2, #1
 800b1b8:	440a      	add	r2, r1
 800b1ba:	604b      	str	r3, [r1, #4]
 800b1bc:	6853      	ldr	r3, [r2, #4]
 800b1be:	f043 0301 	orr.w	r3, r3, #1
 800b1c2:	6053      	str	r3, [r2, #4]
 800b1c4:	3108      	adds	r1, #8
 800b1c6:	4648      	mov	r0, r9
 800b1c8:	f7ff fa04 	bl	800a5d4 <_free_r>
 800b1cc:	e00a      	b.n	800b1e4 <_realloc_r+0x340>
 800b1ce:	f003 0301 	and.w	r3, r3, #1
 800b1d2:	432b      	orrs	r3, r5
 800b1d4:	eb0b 0205 	add.w	r2, fp, r5
 800b1d8:	f8cb 3004 	str.w	r3, [fp, #4]
 800b1dc:	6853      	ldr	r3, [r2, #4]
 800b1de:	f043 0301 	orr.w	r3, r3, #1
 800b1e2:	6053      	str	r3, [r2, #4]
 800b1e4:	4648      	mov	r0, r9
 800b1e6:	f7fd fb73 	bl	80088d0 <__malloc_unlock>
 800b1ea:	f10b 0008 	add.w	r0, fp, #8
 800b1ee:	b003      	add	sp, #12
 800b1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1f4 <_sbrk>:
 800b1f4:	4b04      	ldr	r3, [pc, #16]	; (800b208 <_sbrk+0x14>)
 800b1f6:	6819      	ldr	r1, [r3, #0]
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	b909      	cbnz	r1, 800b200 <_sbrk+0xc>
 800b1fc:	4903      	ldr	r1, [pc, #12]	; (800b20c <_sbrk+0x18>)
 800b1fe:	6019      	str	r1, [r3, #0]
 800b200:	6818      	ldr	r0, [r3, #0]
 800b202:	4402      	add	r2, r0
 800b204:	601a      	str	r2, [r3, #0]
 800b206:	4770      	bx	lr
 800b208:	2000090c 	.word	0x2000090c
 800b20c:	200011bc 	.word	0x200011bc

0800b210 <_init>:
 800b210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b212:	bf00      	nop
 800b214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b216:	bc08      	pop	{r3}
 800b218:	469e      	mov	lr, r3
 800b21a:	4770      	bx	lr

0800b21c <_fini>:
 800b21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21e:	bf00      	nop
 800b220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b222:	bc08      	pop	{r3}
 800b224:	469e      	mov	lr, r3
 800b226:	4770      	bx	lr
