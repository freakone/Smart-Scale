
Smart-ScaleF303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  0800b110  0800b110  0001b110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b32c  0800b32c  0001b32c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b334  0800b334  0001b334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b338  0800b338  0001b338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000694  20000000  0800b33c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020694  2**0
                  CONTENTS
  8 .bss          00000ae8  20000694  20000694  00020694  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000117c  2000117c  00020694  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020694  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000faf2  00000000  00000000  000206c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002ab2  00000000  00000000  000301b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f20  00000000  00000000  00032c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d88  00000000  00000000  00033b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000732c  00000000  00000000  00034910  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000042bc  00000000  00000000  0003bc3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0003fef8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000043d4  00000000  00000000  0003ff78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000694 	.word	0x20000694
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0f8 	.word	0x0800b0f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000698 	.word	0x20000698
 80001cc:	0800b0f8 	.word	0x0800b0f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97e 	b.w	8000eb4 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460e      	mov	r6, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9d08      	ldr	r5, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d150      	bne.n	8000c82 <__udivmoddi4+0xb2>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96c      	bls.n	8000cc0 <__udivmoddi4+0xf0>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0420 	rsb	r4, lr, #32
 8000bf4:	fa20 f404 	lsr.w	r4, r0, r4
 8000bf8:	fa01 f60e 	lsl.w	r6, r1, lr
 8000bfc:	ea44 0c06 	orr.w	ip, r4, r6
 8000c00:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c0c:	0c22      	lsrs	r2, r4, #16
 8000c0e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c12:	fa1f f887 	uxth.w	r8, r7
 8000c16:	fb09 c610 	mls	r6, r9, r0, ip
 8000c1a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c1e:	fb00 f308 	mul.w	r3, r0, r8
 8000c22:	42b3      	cmp	r3, r6
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x6a>
 8000c26:	19f6      	adds	r6, r6, r7
 8000c28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2c:	f080 8122 	bcs.w	8000e74 <__udivmoddi4+0x2a4>
 8000c30:	42b3      	cmp	r3, r6
 8000c32:	f240 811f 	bls.w	8000e74 <__udivmoddi4+0x2a4>
 8000c36:	3802      	subs	r0, #2
 8000c38:	443e      	add	r6, r7
 8000c3a:	1af6      	subs	r6, r6, r3
 8000c3c:	b2a2      	uxth	r2, r4
 8000c3e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c42:	fb09 6613 	mls	r6, r9, r3, r6
 8000c46:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c4a:	fb03 f808 	mul.w	r8, r3, r8
 8000c4e:	45a0      	cmp	r8, r4
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x96>
 8000c52:	19e4      	adds	r4, r4, r7
 8000c54:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c58:	f080 810a 	bcs.w	8000e70 <__udivmoddi4+0x2a0>
 8000c5c:	45a0      	cmp	r8, r4
 8000c5e:	f240 8107 	bls.w	8000e70 <__udivmoddi4+0x2a0>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	443c      	add	r4, r7
 8000c66:	ebc8 0404 	rsb	r4, r8, r4
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d062      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c74:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c78:	2300      	movs	r3, #0
 8000c7a:	602c      	str	r4, [r5, #0]
 8000c7c:	606b      	str	r3, [r5, #4]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0xc6>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d055      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000c90:	4608      	mov	r0, r1
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	f040 8090 	bne.w	8000dc0 <__udivmoddi4+0x1f0>
 8000ca0:	42b3      	cmp	r3, r6
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xda>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb66 0603 	sbc.w	r6, r6, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	46b4      	mov	ip, r6
 8000cb4:	2d00      	cmp	r5, #0
 8000cb6:	d040      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cb8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc0:	b912      	cbnz	r2, 8000cc8 <__udivmoddi4+0xf8>
 8000cc2:	2701      	movs	r7, #1
 8000cc4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cc8:	fab7 fe87 	clz	lr, r7
 8000ccc:	f1be 0f00 	cmp.w	lr, #0
 8000cd0:	d135      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd2:	1bf3      	subs	r3, r6, r7
 8000cd4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb08 3610 	mls	r6, r8, r0, r3
 8000ce8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000cec:	fb0c f300 	mul.w	r3, ip, r0
 8000cf0:	42b3      	cmp	r3, r6
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19f6      	adds	r6, r6, r7
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42b3      	cmp	r3, r6
 8000cfe:	f200 80ce 	bhi.w	8000e9e <__udivmoddi4+0x2ce>
 8000d02:	4610      	mov	r0, r2
 8000d04:	1af6      	subs	r6, r6, r3
 8000d06:	b2a2      	uxth	r2, r4
 8000d08:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d0c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d10:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d14:	fb0c fc03 	mul.w	ip, ip, r3
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b5 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	ebcc 0404 	rsb	r4, ip, r4
 8000d30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d34:	e79c      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000d36:	4629      	mov	r1, r5
 8000d38:	4628      	mov	r0, r5
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0120 	rsb	r1, lr, #32
 8000d42:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d4e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d52:	40ce      	lsrs	r6, r1
 8000d54:	ea49 0903 	orr.w	r9, r9, r3
 8000d58:	fbb6 faf8 	udiv	sl, r6, r8
 8000d5c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000d60:	fb08 661a 	mls	r6, r8, sl, r6
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000d6c:	fb0a f20c 	mul.w	r2, sl, ip
 8000d70:	429a      	cmp	r2, r3
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1be>
 8000d78:	19db      	adds	r3, r3, r7
 8000d7a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000d7e:	f080 8087 	bcs.w	8000e90 <__udivmoddi4+0x2c0>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f240 8084 	bls.w	8000e90 <__udivmoddi4+0x2c0>
 8000d88:	f1aa 0a02 	sub.w	sl, sl, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	1a9b      	subs	r3, r3, r2
 8000d90:	fa1f f989 	uxth.w	r9, r9
 8000d94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d98:	fb08 3311 	mls	r3, r8, r1, r3
 8000d9c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000da0:	fb01 f60c 	mul.w	r6, r1, ip
 8000da4:	429e      	cmp	r6, r3
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0x1e8>
 8000da8:	19db      	adds	r3, r3, r7
 8000daa:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dae:	d26b      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000db0:	429e      	cmp	r6, r3
 8000db2:	d969      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000db4:	3902      	subs	r1, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dbe:	e78e      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dc0:	f1c1 0e20 	rsb	lr, r1, #32
 8000dc4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	4323      	orrs	r3, r4
 8000dcc:	fa20 f70e 	lsr.w	r7, r0, lr
 8000dd0:	fa06 f401 	lsl.w	r4, r6, r1
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000ddc:	433c      	orrs	r4, r7
 8000dde:	fbb6 f9fc 	udiv	r9, r6, ip
 8000de2:	0c27      	lsrs	r7, r4, #16
 8000de4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000de8:	fa1f f883 	uxth.w	r8, r3
 8000dec:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000df0:	fb09 f708 	mul.w	r7, r9, r8
 8000df4:	42b7      	cmp	r7, r6
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x242>
 8000e00:	18f6      	adds	r6, r6, r3
 8000e02:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e06:	d241      	bcs.n	8000e8c <__udivmoddi4+0x2bc>
 8000e08:	42b7      	cmp	r7, r6
 8000e0a:	d93f      	bls.n	8000e8c <__udivmoddi4+0x2bc>
 8000e0c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e10:	441e      	add	r6, r3
 8000e12:	1bf6      	subs	r6, r6, r7
 8000e14:	b2a0      	uxth	r0, r4
 8000e16:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e1a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e1e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e22:	fb04 f808 	mul.w	r8, r4, r8
 8000e26:	45b8      	cmp	r8, r7
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x26a>
 8000e2a:	18ff      	adds	r7, r7, r3
 8000e2c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e30:	d228      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d926      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000e36:	3c02      	subs	r4, #2
 8000e38:	441f      	add	r7, r3
 8000e3a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e3e:	ebc8 0707 	rsb	r7, r8, r7
 8000e42:	fba0 8902 	umull	r8, r9, r0, r2
 8000e46:	454f      	cmp	r7, r9
 8000e48:	4644      	mov	r4, r8
 8000e4a:	464e      	mov	r6, r9
 8000e4c:	d314      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000e4e:	d029      	beq.n	8000ea4 <__udivmoddi4+0x2d4>
 8000e50:	b365      	cbz	r5, 8000eac <__udivmoddi4+0x2dc>
 8000e52:	ebba 0304 	subs.w	r3, sl, r4
 8000e56:	eb67 0706 	sbc.w	r7, r7, r6
 8000e5a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	40cf      	lsrs	r7, r1
 8000e62:	ea4e 0303 	orr.w	r3, lr, r3
 8000e66:	e885 0088 	stmia.w	r5, {r3, r7}
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e70:	4613      	mov	r3, r2
 8000e72:	e6f8      	b.n	8000c66 <__udivmoddi4+0x96>
 8000e74:	4610      	mov	r0, r2
 8000e76:	e6e0      	b.n	8000c3a <__udivmoddi4+0x6a>
 8000e78:	ebb8 0402 	subs.w	r4, r8, r2
 8000e7c:	eb69 0603 	sbc.w	r6, r9, r3
 8000e80:	3801      	subs	r0, #1
 8000e82:	e7e5      	b.n	8000e50 <__udivmoddi4+0x280>
 8000e84:	4604      	mov	r4, r0
 8000e86:	e7d8      	b.n	8000e3a <__udivmoddi4+0x26a>
 8000e88:	4611      	mov	r1, r2
 8000e8a:	e795      	b.n	8000db8 <__udivmoddi4+0x1e8>
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	e7c0      	b.n	8000e12 <__udivmoddi4+0x242>
 8000e90:	468a      	mov	sl, r1
 8000e92:	e77c      	b.n	8000d8e <__udivmoddi4+0x1be>
 8000e94:	3b02      	subs	r3, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e748      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xe4>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	443e      	add	r6, r7
 8000ea2:	e72f      	b.n	8000d04 <__udivmoddi4+0x134>
 8000ea4:	45c2      	cmp	sl, r8
 8000ea6:	d3e7      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000ea8:	463e      	mov	r6, r7
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x280>
 8000eac:	4629      	mov	r1, r5
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HX711_Init>:
#include "hx711.h"

void HX711_Init(HX711 data)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b08b      	sub	sp, #44	; 0x2c
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = data.pinSck;
 8000ec4:	88bb      	ldrh	r3, [r7, #4]
 8000ec6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(data.GPIO, &GPIO_InitStruct);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	f107 0214 	add.w	r2, r7, #20
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f006 fbdf 	bl	80076a0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = data.pinData;
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(data.GPIO, &GPIO_InitStruct);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	f107 0214 	add.w	r2, r7, #20
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f006 fbd0 	bl	80076a0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(data.GPIO, data.pinSck, GPIO_PIN_SET);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	88b9      	ldrh	r1, [r7, #4]
 8000f04:	2201      	movs	r2, #1
 8000f06:	4618      	mov	r0, r3
 8000f08:	f006 fd60 	bl	80079cc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000f0c:	2032      	movs	r0, #50	; 0x32
 8000f0e:	f007 f907 	bl	8008120 <HAL_Delay>
	HAL_GPIO_WritePin(data.GPIO, data.pinSck, GPIO_PIN_RESET);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	88b9      	ldrh	r1, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f006 fd57 	bl	80079cc <HAL_GPIO_WritePin>

}
 8000f1e:	bf00      	nop
 8000f20:	372c      	adds	r7, #44	; 0x2c
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd90      	pop	{r4, r7, pc}
 8000f26:	bf00      	nop

08000f28 <HX711_Value>:

    return sum / times;
}

int HX711_Value(HX711 data)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	463c      	mov	r4, r7
 8000f30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int buffer;
    buffer = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]

    while (HAL_GPIO_ReadPin(data.GPIO, data.pinData)==1)
 8000f38:	bf00      	nop
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	88fa      	ldrh	r2, [r7, #6]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f006 fd2b 	bl	800799c <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d0f6      	beq.n	8000f3a <HX711_Value+0x12>
    ;

    for (uint8_t i = 0; i < 24; i++)
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	76fb      	strb	r3, [r7, #27]
 8000f50:	e01d      	b.n	8000f8e <HX711_Value+0x66>
    {
    	HAL_GPIO_WritePin(data.GPIO, data.pinSck, GPIO_PIN_SET);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	88b9      	ldrh	r1, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f006 fd37 	bl	80079cc <HAL_GPIO_WritePin>

        buffer = buffer << 1 ;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]

        if (HAL_GPIO_ReadPin(data.GPIO, data.pinData))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	88fa      	ldrh	r2, [r7, #6]
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f006 fd16 	bl	800799c <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <HX711_Value+0x54>
        {
            buffer ++;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
        }

        HAL_GPIO_WritePin(data.GPIO, data.pinSck, GPIO_PIN_RESET);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	88b9      	ldrh	r1, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f006 fd22 	bl	80079cc <HAL_GPIO_WritePin>
    buffer = 0;

    while (HAL_GPIO_ReadPin(data.GPIO, data.pinData)==1)
    ;

    for (uint8_t i = 0; i < 24; i++)
 8000f88:	7efb      	ldrb	r3, [r7, #27]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	76fb      	strb	r3, [r7, #27]
 8000f8e:	7efb      	ldrb	r3, [r7, #27]
 8000f90:	2b17      	cmp	r3, #23
 8000f92:	d9de      	bls.n	8000f52 <HX711_Value+0x2a>
        }

        HAL_GPIO_WritePin(data.GPIO, data.pinSck, GPIO_PIN_RESET);
    }

    for (int i = 0; i < data.gain; i++)
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	e00e      	b.n	8000fb8 <HX711_Value+0x90>
    {
    	HAL_GPIO_WritePin(data.GPIO, data.pinSck, GPIO_PIN_SET);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	88b9      	ldrh	r1, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f006 fd13 	bl	80079cc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(data.GPIO, data.pinSck, GPIO_PIN_RESET);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	88b9      	ldrh	r1, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f006 fd0d 	bl	80079cc <HAL_GPIO_WritePin>
        }

        HAL_GPIO_WritePin(data.GPIO, data.pinSck, GPIO_PIN_RESET);
    }

    for (int i = 0; i < data.gain; i++)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	dcec      	bgt.n	8000f9a <HX711_Value+0x72>
    {
    	HAL_GPIO_WritePin(data.GPIO, data.pinSck, GPIO_PIN_SET);
    	HAL_GPIO_WritePin(data.GPIO, data.pinSck, GPIO_PIN_RESET);
    }

    buffer = buffer ^ 0x800000;
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8000fc6:	61fb      	str	r3, [r7, #28]

    return buffer;
 8000fc8:	69fb      	ldr	r3, [r7, #28]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	; 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd90      	pop	{r4, r7, pc}
 8000fd2:	bf00      	nop

08000fd4 <USBD_FS_DeviceDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2212      	movs	r2, #18
 8000fe4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8000fe6:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	2000001c 	.word	0x2000001c

08000ff8 <USBD_FS_LangIDStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  *length =  sizeof(USBD_LangIDDesc);  
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2204      	movs	r2, #4
 8001008:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800100a:	4b03      	ldr	r3, [pc, #12]	; (8001018 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	20000030 	.word	0x20000030

0800101c <USBD_FS_ProductStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ProductStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d105      	bne.n	800103a <USBD_FS_ProductStrDescriptor+0x1e>
  {   
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <USBD_FS_ProductStrDescriptor+0x34>)
 8001032:	4808      	ldr	r0, [pc, #32]	; (8001054 <USBD_FS_ProductStrDescriptor+0x38>)
 8001034:	f001 fbe0 	bl	80027f8 <USBD_GetString>
 8001038:	e004      	b.n	8001044 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);    
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	4904      	ldr	r1, [pc, #16]	; (8001050 <USBD_FS_ProductStrDescriptor+0x34>)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <USBD_FS_ProductStrDescriptor+0x38>)
 8001040:	f001 fbda 	bl	80027f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001044:	4b02      	ldr	r3, [pc, #8]	; (8001050 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000910 	.word	0x20000910
 8001054:	0800b110 	.word	0x0800b110

08001058 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	4904      	ldr	r1, [pc, #16]	; (8001078 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800106a:	f001 fbc5 	bl	80027f8 <USBD_GetString>
  return USBD_StrDesc;
 800106e:	4b02      	ldr	r3, [pc, #8]	; (8001078 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000910 	.word	0x20000910
 800107c:	0800b128 	.word	0x0800b128

08001080 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d105      	bne.n	800109e <USBD_FS_SerialStrDescriptor+0x1e>
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	4907      	ldr	r1, [pc, #28]	; (80010b4 <USBD_FS_SerialStrDescriptor+0x34>)
 8001096:	4808      	ldr	r0, [pc, #32]	; (80010b8 <USBD_FS_SerialStrDescriptor+0x38>)
 8001098:	f001 fbae 	bl	80027f8 <USBD_GetString>
 800109c:	e004      	b.n	80010a8 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	4904      	ldr	r1, [pc, #16]	; (80010b4 <USBD_FS_SerialStrDescriptor+0x34>)
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <USBD_FS_SerialStrDescriptor+0x38>)
 80010a4:	f001 fba8 	bl	80027f8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80010a8:	4b02      	ldr	r3, [pc, #8]	; (80010b4 <USBD_FS_SerialStrDescriptor+0x34>)
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000910 	.word	0x20000910
 80010b8:	0800b13c 	.word	0x0800b13c

080010bc <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if(speed  == USBD_SPEED_HIGH)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d105      	bne.n	80010da <USBD_FS_ConfigStrDescriptor+0x1e>
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	4907      	ldr	r1, [pc, #28]	; (80010f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80010d4:	f001 fb90 	bl	80027f8 <USBD_GetString>
 80010d8:	e004      	b.n	80010e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	4904      	ldr	r1, [pc, #16]	; (80010f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80010e0:	f001 fb8a 	bl	80027f8 <USBD_GetString>
  }
  return USBD_StrDesc;  
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000910 	.word	0x20000910
 80010f4:	0800b14c 	.word	0x0800b14c

080010f8 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d105      	bne.n	8001116 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	4907      	ldr	r1, [pc, #28]	; (800112c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800110e:	4808      	ldr	r0, [pc, #32]	; (8001130 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8001110:	f001 fb72 	bl	80027f8 <USBD_GetString>
 8001114:	e004      	b.n	8001120 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	4904      	ldr	r1, [pc, #16]	; (800112c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800111c:	f001 fb6c 	bl	80027f8 <USBD_GetString>
  }
  return USBD_StrDesc;  
 8001120:	4b02      	ldr	r3, [pc, #8]	; (800112c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000910 	.word	0x20000910
 8001130:	0800b158 	.word	0x0800b158

08001134 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a16      	ldr	r2, [pc, #88]	; (800119c <HAL_PCD_MspInit+0x68>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d125      	bne.n	8001192 <HAL_PCD_MspInit+0x5e>
  
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001146:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800114a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001158:	230e      	movs	r3, #14
 800115a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f006 fa9b 	bl	80076a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800116a:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <HAL_PCD_MspInit+0x6c>)
 800116c:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_PCD_MspInit+0x6c>)
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001174:	61d3      	str	r3, [r2, #28]
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_PCD_MspInit+0x6c>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2014      	movs	r0, #20
 8001188:	f006 ff1e 	bl	8007fc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800118c:	2014      	movs	r0, #20
 800118e:	f006 ff37 	bl	8008000 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001192:	bf00      	nop
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40005c00 	.word	0x40005c00
 80011a0:	40021000 	.word	0x40021000

080011a4 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup Stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f8d3 23a4 	ldr.w	r2, [r3, #932]	; 0x3a4
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f503 735d 	add.w	r3, r3, #884	; 0x374
 80011b8:	4619      	mov	r1, r3
 80011ba:	4610      	mov	r0, r2
 80011bc:	f001 fc0a 	bl	80029d4 <USBD_LL_SetupStage>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f8d3 03a4 	ldr.w	r0, [r3, #932]	; 0x3a4
 80011da:	78fa      	ldrb	r2, [r7, #3]
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	4613      	mov	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	1a9b      	subs	r3, r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	440b      	add	r3, r1
 80011e8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f001 fc39 	bl	8002a68 <USBD_LL_DataOutStage>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop

08001200 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f8d3 03a4 	ldr.w	r0, [r3, #932]	; 0x3a4
 8001212:	78fa      	ldrb	r2, [r7, #3]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	1a9b      	subs	r3, r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	3338      	adds	r3, #56	; 0x38
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	4619      	mov	r1, r3
 8001228:	f001 fc7a 	bl	8002b20 <USBD_LL_DataInStage>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8001242:	4618      	mov	r0, r3
 8001244:	f001 fd64 	bl	8002d10 <USBD_LL_SOF>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8001258:	2301      	movs	r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d102      	bne.n	800126a <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;    
 8001264:	2301      	movs	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
    break;
 8001268:	e002      	b.n	8001270 <HAL_PCD_ResetCallback+0x20>
	
  default:
    speed = USBD_SPEED_FULL;    
 800126a:	2301      	movs	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]
    break;    
 800126e:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f001 fd10 	bl	8002ca0 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8001286:	4618      	mov	r0, r3
 8001288:	f001 fcda 	bl	8002c40 <USBD_LL_Reset>
}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fd0c 	bl	8002cc0 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_PCD_SuspendCallback+0x30>)
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <HAL_PCD_SuspendCallback+0x30>)
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	f043 0306 	orr.w	r3, r3, #6
 80012ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fd08 	bl	8002cec <USBD_LL_Resume>
  
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
 80012ec:	4a29      	ldr	r2, [pc, #164]	; (8001394 <USBD_LL_Init+0xb0>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f8c2 33a4 	str.w	r3, [r2, #932]	; 0x3a4
  pdev->pData = &hpcd_USB_FS;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a27      	ldr	r2, [pc, #156]	; (8001394 <USBD_LL_Init+0xb0>)
 80012f8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 80012fc:	4b25      	ldr	r3, [pc, #148]	; (8001394 <USBD_LL_Init+0xb0>)
 80012fe:	4a26      	ldr	r2, [pc, #152]	; (8001398 <USBD_LL_Init+0xb4>)
 8001300:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <USBD_LL_Init+0xb0>)
 8001304:	2208      	movs	r2, #8
 8001306:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <USBD_LL_Init+0xb0>)
 800130a:	2202      	movs	r2, #2
 800130c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <USBD_LL_Init+0xb0>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <USBD_LL_Init+0xb0>)
 8001316:	2202      	movs	r2, #2
 8001318:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800131a:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <USBD_LL_Init+0xb0>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <USBD_LL_Init+0xb0>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001326:	481b      	ldr	r0, [pc, #108]	; (8001394 <USBD_LL_Init+0xb0>)
 8001328:	f004 fb28 	bl	800597c <HAL_PCD_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <USBD_LL_Init+0x52>
  {
    Error_Handler();
 8001332:	f000 fc91 	bl	8001c58 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800133c:	2318      	movs	r3, #24
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	f004 fa65 	bl	8005810 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800134c:	2358      	movs	r3, #88	; 0x58
 800134e:	2200      	movs	r2, #0
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	f004 fa5d 	bl	8005810 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);  
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800135c:	23c0      	movs	r3, #192	; 0xc0
 800135e:	2200      	movs	r2, #0
 8001360:	2181      	movs	r1, #129	; 0x81
 8001362:	f004 fa55 	bl	8005810 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800136c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001370:	2200      	movs	r2, #0
 8001372:	2101      	movs	r1, #1
 8001374:	f004 fa4c 	bl	8005810 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);  
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 800137e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001382:	2200      	movs	r2, #0
 8001384:	2182      	movs	r1, #130	; 0x82
 8001386:	f004 fa43 	bl	8005810 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000b10 	.word	0x20000b10
 8001398:	40005c00 	.word	0x40005c00

0800139c <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_PCD_Start((PCD_HandleTypeDef*)pdev->pData);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80013aa:	4618      	mov	r0, r3
 80013ac:	f004 fbc6 	bl	8005b3c <HAL_PCD_Start>
  return USBD_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop

080013bc <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4603      	mov	r3, r0
 80013cc:	70fb      	strb	r3, [r7, #3]
 80013ce:	460b      	mov	r3, r1
 80013d0:	70bb      	strb	r3, [r7, #2]
 80013d2:	4613      	mov	r3, r2
 80013d4:	803b      	strh	r3, [r7, #0]
  HAL_PCD_EP_Open((PCD_HandleTypeDef*) pdev->pData,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80013dc:	78bb      	ldrb	r3, [r7, #2]
 80013de:	883a      	ldrh	r2, [r7, #0]
 80013e0:	78f9      	ldrb	r1, [r7, #3]
 80013e2:	f005 f805 	bl	80063f0 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK; 
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_Close((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8001402:	78fa      	ldrb	r2, [r7, #3]
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f005 fb8a 	bl	8006b20 <HAL_PCD_EP_Close>
  return USBD_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop

08001418 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_SetStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800142a:	78fa      	ldrb	r2, [r7, #3]
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f005 ffb0 	bl	8007394 <HAL_PCD_EP_SetStall>
  return USBD_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop

08001440 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_EP_ClrStall((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8001452:	78fa      	ldrb	r2, [r7, #3]
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f006 f844 	bl	80074e4 <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop

08001468 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800147a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800147c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001480:	2b00      	cmp	r3, #0
 8001482:	da0b      	bge.n	800149c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800148a:	68f9      	ldr	r1, [r7, #12]
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	332a      	adds	r3, #42	; 0x2a
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	e00b      	b.n	80014b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80014a2:	68f9      	ldr	r1, [r7, #12]
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 80014b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	70fb      	strb	r3, [r7, #3]
  HAL_PCD_SetAddress((PCD_HandleTypeDef*) pdev->pData, dev_addr);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80014d2:	78fa      	ldrb	r2, [r7, #3]
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f004 ff60 	bl	800639c <HAL_PCD_SetAddress>
  return USBD_OK; 
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop

080014e8 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	461a      	mov	r2, r3
 80014f4:	460b      	mov	r3, r1
 80014f6:	72fb      	strb	r3, [r7, #11]
 80014f8:	4613      	mov	r3, r2
 80014fa:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Transmit((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8001502:	893b      	ldrh	r3, [r7, #8]
 8001504:	7af9      	ldrb	r1, [r7, #11]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	f005 fe50 	bl	80071ac <HAL_PCD_EP_Transmit>
  return USBD_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop

08001518 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	461a      	mov	r2, r3
 8001524:	460b      	mov	r3, r1
 8001526:	72fb      	strb	r3, [r7, #11]
 8001528:	4613      	mov	r3, r2
 800152a:	813b      	strh	r3, [r7, #8]
  HAL_PCD_EP_Receive((PCD_HandleTypeDef*) pdev->pData, ep_addr, pbuf, size);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8001532:	893b      	ldrh	r3, [r7, #8]
 8001534:	7af9      	ldrb	r1, [r7, #11]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	f005 fd0a 	bl	8006f50 <HAL_PCD_EP_Receive>
  return USBD_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop

08001548 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800155a:	78fa      	ldrb	r2, [r7, #3]
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f005 fe0a 	bl	8007178 <HAL_PCD_EP_GetRxCount>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop

08001570 <USBD_static_malloc>:
  * @brief  static single allocation.
  * @param  size: size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];//On 32-bit boundary
  return mem;
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <USBD_static_malloc+0x18>)
}
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	200006b0 	.word	0x200006b0

0800158c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  free(p);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f006 fe79 	bl	800828c <free>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop

080015a4 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High Connection State */
   
  } 
/* USER CODE END 4 */
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <CDC_Init_FS>:
  *         Initializes the CDC media low layer over the FS USB IP
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{ 
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */ 
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	4905      	ldr	r1, [pc, #20]	; (80015d8 <CDC_Init_FS+0x1c>)
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <CDC_Init_FS+0x20>)
 80015c6:	f001 fd7b 	bl	80030c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80015ca:	4905      	ldr	r1, [pc, #20]	; (80015e0 <CDC_Init_FS+0x24>)
 80015cc:	4803      	ldr	r0, [pc, #12]	; (80015dc <CDC_Init_FS+0x20>)
 80015ce:	f001 fd91 	bl	80030f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80015d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */ 
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000ec4 	.word	0x20000ec4
 80015dc:	20000ed0 	.word	0x20000ed0
 80015e0:	20000eb8 	.word	0x20000eb8

080015e4 <CDC_DeInit_FS>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */ 
  return (USBD_OK);
 80015e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */ 
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS  (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
 8001600:	4613      	mov	r3, r2
 8001602:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	2b23      	cmp	r3, #35	; 0x23
 8001608:	d84a      	bhi.n	80016a0 <CDC_Control_FS+0xac>
 800160a:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <CDC_Control_FS+0x1c>)
 800160c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001610:	080016a1 	.word	0x080016a1
 8001614:	080016a1 	.word	0x080016a1
 8001618:	080016a1 	.word	0x080016a1
 800161c:	080016a1 	.word	0x080016a1
 8001620:	080016a1 	.word	0x080016a1
 8001624:	080016a1 	.word	0x080016a1
 8001628:	080016a1 	.word	0x080016a1
 800162c:	080016a1 	.word	0x080016a1
 8001630:	080016a1 	.word	0x080016a1
 8001634:	080016a1 	.word	0x080016a1
 8001638:	080016a1 	.word	0x080016a1
 800163c:	080016a1 	.word	0x080016a1
 8001640:	080016a1 	.word	0x080016a1
 8001644:	080016a1 	.word	0x080016a1
 8001648:	080016a1 	.word	0x080016a1
 800164c:	080016a1 	.word	0x080016a1
 8001650:	080016a1 	.word	0x080016a1
 8001654:	080016a1 	.word	0x080016a1
 8001658:	080016a1 	.word	0x080016a1
 800165c:	080016a1 	.word	0x080016a1
 8001660:	080016a1 	.word	0x080016a1
 8001664:	080016a1 	.word	0x080016a1
 8001668:	080016a1 	.word	0x080016a1
 800166c:	080016a1 	.word	0x080016a1
 8001670:	080016a1 	.word	0x080016a1
 8001674:	080016a1 	.word	0x080016a1
 8001678:	080016a1 	.word	0x080016a1
 800167c:	080016a1 	.word	0x080016a1
 8001680:	080016a1 	.word	0x080016a1
 8001684:	080016a1 	.word	0x080016a1
 8001688:	080016a1 	.word	0x080016a1
 800168c:	080016a1 	.word	0x080016a1
 8001690:	080016a1 	.word	0x080016a1
 8001694:	080016a1 	.word	0x080016a1
 8001698:	080016a1 	.word	0x080016a1
 800169c:	080016a1 	.word	0x080016a1
  case CDC_SEND_BREAK:
 
    break;    
    
  default:
    break;
 80016a0:	bf00      	nop
  }

  return (USBD_OK);
 80016a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4807      	ldr	r0, [pc, #28]	; (80016dc <CDC_Receive_FS+0x2c>)
 80016be:	f001 fd19 	bl	80030f4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80016c2:	4806      	ldr	r0, [pc, #24]	; (80016dc <CDC_Receive_FS+0x2c>)
 80016c4:	f001 fd54 	bl	8003170 <USBD_CDC_ReceivePacket>
	Commands_BufferHandle(Buf, Len);
 80016c8:	6839      	ldr	r1, [r7, #0]
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fac8 	bl	8001c60 <Commands_BufferHandle>
	return (USBD_OK);
 80016d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */ 
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000ed0 	.word	0x20000ed0

080016e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be send
  * @param  Len: Number of data to be send (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <CDC_Transmit_FS+0x48>)
 80016f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80016f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8001702:	2301      	movs	r3, #1
 8001704:	e00b      	b.n	800171e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	461a      	mov	r2, r3
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	4806      	ldr	r0, [pc, #24]	; (8001728 <CDC_Transmit_FS+0x48>)
 800170e:	f001 fcd7 	bl	80030c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <CDC_Transmit_FS+0x48>)
 8001714:	f001 fd02 	bl	800311c <USBD_CDC_TransmitPacket>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */ 
  return result;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000ed0 	.word	0x20000ed0

0800172c <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8001730:	2200      	movs	r2, #0
 8001732:	4908      	ldr	r1, [pc, #32]	; (8001754 <MX_USB_DEVICE_Init+0x28>)
 8001734:	4808      	ldr	r0, [pc, #32]	; (8001758 <MX_USB_DEVICE_Init+0x2c>)
 8001736:	f001 f8bb 	bl	80028b0 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 800173a:	4908      	ldr	r1, [pc, #32]	; (800175c <MX_USB_DEVICE_Init+0x30>)
 800173c:	4806      	ldr	r0, [pc, #24]	; (8001758 <MX_USB_DEVICE_Init+0x2c>)
 800173e:	f001 f8e3 	bl	8002908 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8001742:	4907      	ldr	r1, [pc, #28]	; (8001760 <MX_USB_DEVICE_Init+0x34>)
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <MX_USB_DEVICE_Init+0x2c>)
 8001746:	f001 fca3 	bl	8003090 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 800174a:	4803      	ldr	r0, [pc, #12]	; (8001758 <MX_USB_DEVICE_Init+0x2c>)
 800174c:	f001 f8f6 	bl	800293c <USBD_Start>

}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000000 	.word	0x20000000
 8001758:	20000ed0 	.word	0x20000ed0
 800175c:	20000050 	.word	0x20000050
 8001760:	20000034 	.word	0x20000034

08001764 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop

08001774 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 8001778:	e7fe      	b.n	8001778 <HardFault_Handler+0x4>
 800177a:	bf00      	nop

0800177c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
  }
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>
 8001782:	bf00      	nop

08001784 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
  }
 8001788:	e7fe      	b.n	8001788 <BusFault_Handler+0x4>
 800178a:	bf00      	nop

0800178c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
  }
 8001790:	e7fe      	b.n	8001790 <UsageFault_Handler+0x4>
 8001792:	bf00      	nop

08001794 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop

080017a4 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop

080017b4 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop

080017c4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c8:	f006 fc90 	bl	80080ec <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80017cc:	f006 fc4e 	bl	800806c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <USB_LP_CAN_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN_RX0 interrupts.
*/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 80017da:	f004 fcf1 	bl	80061c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000b10 	.word	0x20000b10

080017e8 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ee:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <HAL_MspInit+0x80>)
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <HAL_MspInit+0x80>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6193      	str	r3, [r2, #24]
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <HAL_MspInit+0x80>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001806:	2003      	movs	r0, #3
 8001808:	f006 fbd2 	bl	8007fb0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	f06f 000b 	mvn.w	r0, #11
 8001814:	f006 fbd8 	bl	8007fc8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2100      	movs	r1, #0
 800181c:	f06f 000a 	mvn.w	r0, #10
 8001820:	f006 fbd2 	bl	8007fc8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	f06f 0009 	mvn.w	r0, #9
 800182c:	f006 fbcc 	bl	8007fc8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2100      	movs	r1, #0
 8001834:	f06f 0004 	mvn.w	r0, #4
 8001838:	f006 fbc6 	bl	8007fc8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	f06f 0003 	mvn.w	r0, #3
 8001844:	f006 fbc0 	bl	8007fc8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	f06f 0001 	mvn.w	r0, #1
 8001850:	f006 fbba 	bl	8007fc8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f006 fbb4 	bl	8007fc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021000 	.word	0x40021000

0800186c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_CRC_MspInit+0x38>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10b      	bne.n	8001896 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_CRC_MspInit+0x3c>)
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_CRC_MspInit+0x3c>)
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001888:	6153      	str	r3, [r2, #20]
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_CRC_MspInit+0x3c>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023000 	.word	0x40023000
 80018a8:	40021000 	.word	0x40021000

080018ac <HAL_TIM_PWM_MspInit>:
  /* USER CODE END CRC_MspDeInit 1 */

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM15)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_TIM_PWM_MspInit+0x38>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d10b      	bne.n	80018d6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6193      	str	r3, [r2, #24]
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40014000 	.word	0x40014000
 80018e8:	40021000 	.word	0x40021000

080018ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM15)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <HAL_TIM_MspPostInit+0x3c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d110      	bne.n	8001920 <HAL_TIM_MspPostInit+0x34>
  /* USER CODE END TIM15_MspPostInit 0 */
  
    /**TIM15 GPIO Configuration    
    PB15     ------> TIM15_CH2 
    */
    GPIO_InitStruct.Pin = DO_LED_2_Pin;
 80018fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001902:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001910:	2301      	movs	r3, #1
 8001912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DO_LED_2_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	4619      	mov	r1, r3
 800191a:	4804      	ldr	r0, [pc, #16]	; (800192c <HAL_TIM_MspPostInit+0x40>)
 800191c:	f005 fec0 	bl	80076a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001920:	bf00      	nop
 8001922:	3720      	adds	r7, #32
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40014000 	.word	0x40014000
 800192c:	48000400 	.word	0x48000400

08001930 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001936:	f006 fba7 	bl	8008088 <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 800193a:	f000 f83b 	bl	80019b4 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800193e:	f000 f921 	bl	8001b84 <MX_GPIO_Init>
	MX_CRC_Init();
 8001942:	f000 f891 	bl	8001a68 <MX_CRC_Init>
	MX_USB_DEVICE_Init();
 8001946:	f7ff fef1 	bl	800172c <MX_USB_DEVICE_Init>
	MX_TIM15_Init();
 800194a:	f000 f8af 	bl	8001aac <MX_TIM15_Init>

	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 800194e:	2104      	movs	r1, #4
 8001950:	4814      	ldr	r0, [pc, #80]	; (80019a4 <main+0x74>)
 8001952:	f001 ff3f 	bl	80037d4 <HAL_TIM_PWM_Start>

	HX711 hx1;
	hx1.GPIO = DO_SCK_1_GPIO_Port;
 8001956:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800195a:	603b      	str	r3, [r7, #0]
	hx1.pinSck = DO_SCK_1_Pin;
 800195c:	2302      	movs	r3, #2
 800195e:	80bb      	strh	r3, [r7, #4]
	hx1.pinData = DI_DATA_1_Pin;
 8001960:	2304      	movs	r3, #4
 8001962:	80fb      	strh	r3, [r7, #6]
	hx1.gain = 3;
 8001964:	2303      	movs	r3, #3
 8001966:	60fb      	str	r3, [r7, #12]
	hx1.offset = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]

	HX711_Init(hx1);
 800196c:	463b      	mov	r3, r7
 800196e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001970:	f7ff faa2 	bl	8000eb8 <HX711_Init>

   int a = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
   uint8_t crc = HAL_CRC_Calculate(&hcrc, "asdfg", 5);
 8001978:	2205      	movs	r2, #5
 800197a:	490b      	ldr	r1, [pc, #44]	; (80019a8 <main+0x78>)
 800197c:	480b      	ldr	r0, [pc, #44]	; (80019ac <main+0x7c>)
 800197e:	f006 f92d 	bl	8007bdc <HAL_CRC_Calculate>
 8001982:	4603      	mov	r3, r0
 8001984:	74fb      	strb	r3, [r7, #19]
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
//	  HAL_GPIO_TogglePin(DO_USBPWREN_GPIO_Port, DO_USBPWREN_Pin);
	  HAL_GPIO_TogglePin(DO_LED_1_GPIO_Port, DO_LED_1_Pin);
 8001986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198a:	4809      	ldr	r0, [pc, #36]	; (80019b0 <main+0x80>)
 800198c:	f006 f836 	bl	80079fc <HAL_GPIO_TogglePin>
	  a = HX711_Value(hx1);
 8001990:	463b      	mov	r3, r7
 8001992:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001994:	f7ff fac8 	bl	8000f28 <HX711_Value>
 8001998:	6178      	str	r0, [r7, #20]
	  HAL_Delay(1000);
 800199a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800199e:	f006 fbbf 	bl	8008120 <HAL_Delay>
  }
 80019a2:	e7f0      	b.n	8001986 <main+0x56>
 80019a4:	200010f4 	.word	0x200010f4
 80019a8:	0800b168 	.word	0x0800b168
 80019ac:	20001130 	.word	0x20001130
 80019b0:	48000400 	.word	0x48000400

080019b4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b09e      	sub	sp, #120	; 0x78
 80019b8:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ba:	2301      	movs	r3, #1
 80019bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c8:	2302      	movs	r3, #2
 80019ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80019d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019d6:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019dc:	4618      	mov	r0, r3
 80019de:	f002 fbe3 	bl	80041a8 <HAL_RCC_OscConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <SystemClock_Config+0x38>
  {
    Error_Handler();
 80019e8:	f000 f936 	bl	8001c58 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ec:	230f      	movs	r3, #15
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f0:	2302      	movs	r3, #2
 80019f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019fe:	2300      	movs	r3, #0
 8001a00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a06:	2101      	movs	r1, #1
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f003 fc8f 	bl	800532c <HAL_RCC_ClockConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001a14:	f000 f920 	bl	8001c58 <Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a1c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001a1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a22:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a24:	463b      	mov	r3, r7
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 f9f0 	bl	8003e0c <HAL_RCCEx_PeriphCLKConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a32:	f000 f911 	bl	8001c58 <Error_Handler>
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001a36:	f003 fedf 	bl	80057f8 <HAL_RCC_GetHCLKFreq>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <SystemClock_Config+0xb0>)
 8001a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8001a42:	099b      	lsrs	r3, r3, #6
 8001a44:	4618      	mov	r0, r3
 8001a46:	f006 fae9 	bl	800801c <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001a4a:	2004      	movs	r0, #4
 8001a4c:	f006 faf2 	bl	8008034 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f006 fab6 	bl	8007fc8 <HAL_NVIC_SetPriority>
}
 8001a5c:	bf00      	nop
 8001a5e:	3778      	adds	r7, #120	; 0x78
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	10624dd3 	.word	0x10624dd3

08001a68 <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <MX_CRC_Init+0x3c>)
 8001a6e:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <MX_CRC_Init+0x40>)
 8001a70:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_CRC_Init+0x3c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <MX_CRC_Init+0x3c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_CRC_Init+0x3c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <MX_CRC_Init+0x3c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_CRC_Init+0x3c>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <MX_CRC_Init+0x3c>)
 8001a92:	f006 f83f 	bl	8007b14 <HAL_CRC_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001a9c:	f000 f8dc 	bl	8001c58 <Error_Handler>
  }

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20001130 	.word	0x20001130
 8001aa8:	40023000 	.word	0x40023000

08001aac <MX_TIM15_Init>:

/* TIM15 init function */
static void MX_TIM15_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b096      	sub	sp, #88	; 0x58
 8001ab0:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim15.Instance = TIM15;
 8001ab2:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <MX_TIM15_Init+0xd0>)
 8001ab4:	4a32      	ldr	r2, [pc, #200]	; (8001b80 <MX_TIM15_Init+0xd4>)
 8001ab6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 30000;
 8001ab8:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <MX_TIM15_Init+0xd0>)
 8001aba:	f247 5230 	movw	r2, #30000	; 0x7530
 8001abe:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <MX_TIM15_Init+0xd0>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 255;
 8001ac6:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <MX_TIM15_Init+0xd0>)
 8001ac8:	22ff      	movs	r2, #255	; 0xff
 8001aca:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001acc:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <MX_TIM15_Init+0xd0>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <MX_TIM15_Init+0xd0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001ad8:	4828      	ldr	r0, [pc, #160]	; (8001b7c <MX_TIM15_Init+0xd0>)
 8001ada:	f001 fe4f 	bl	800377c <HAL_TIM_PWM_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM15_Init+0x3c>
  {
    Error_Handler();
 8001ae4:	f000 f8b8 	bl	8001c58 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001af0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001af4:	4619      	mov	r1, r3
 8001af6:	4821      	ldr	r0, [pc, #132]	; (8001b7c <MX_TIM15_Init+0xd0>)
 8001af8:	f001 fc7c 	bl	80033f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001b02:	f000 f8a9 	bl	8001c58 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001b24:	f107 0320 	add.w	r3, r7, #32
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4814      	ldr	r0, [pc, #80]	; (8001b7c <MX_TIM15_Init+0xd0>)
 8001b2c:	f001 fcb6 	bl	800349c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8001b36:	f000 f88f 	bl	8001c58 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b3a:	2360      	movs	r3, #96	; 0x60
 8001b3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001b3e:	2364      	movs	r3, #100	; 0x64
 8001b40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2204      	movs	r2, #4
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4807      	ldr	r0, [pc, #28]	; (8001b7c <MX_TIM15_Init+0xd0>)
 8001b5e:	f001 fb31 	bl	80031c4 <HAL_TIM_PWM_ConfigChannel>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001b68:	f000 f876 	bl	8001c58 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim15);
 8001b6c:	4803      	ldr	r0, [pc, #12]	; (8001b7c <MX_TIM15_Init+0xd0>)
 8001b6e:	f7ff febd 	bl	80018ec <HAL_TIM_MspPostInit>

}
 8001b72:	bf00      	nop
 8001b74:	3758      	adds	r7, #88	; 0x58
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200010f4 	.word	0x200010f4
 8001b80:	40014000 	.word	0x40014000

08001b84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b8a:	4a31      	ldr	r2, [pc, #196]	; (8001c50 <MX_GPIO_Init+0xcc>)
 8001b8c:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <MX_GPIO_Init+0xcc>)
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b94:	6153      	str	r3, [r2, #20]
 8001b96:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <MX_GPIO_Init+0xcc>)
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <MX_GPIO_Init+0xcc>)
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <MX_GPIO_Init+0xcc>)
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	6153      	str	r3, [r2, #20]
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <MX_GPIO_Init+0xcc>)
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bba:	4a25      	ldr	r2, [pc, #148]	; (8001c50 <MX_GPIO_Init+0xcc>)
 8001bbc:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <MX_GPIO_Init+0xcc>)
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc4:	6153      	str	r3, [r2, #20]
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <MX_GPIO_Init+0xcc>)
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DO_SCK_1_Pin|DO_USBPWREN_Pin, GPIO_PIN_RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f248 0102 	movw	r1, #32770	; 0x8002
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bdc:	f005 fef6 	bl	80079cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_CS_Pin|DO_LED_1_Pin|DO_SCK_2_Pin|DO_BOOT_SET_Pin, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001be6:	481b      	ldr	r0, [pc, #108]	; (8001c54 <MX_GPIO_Init+0xd0>)
 8001be8:	f005 fef0 	bl	80079cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DO_SCK_1_Pin DO_USBPWREN_Pin */
  GPIO_InitStruct.Pin = DO_SCK_1_Pin|DO_USBPWREN_Pin;
 8001bec:	f248 0302 	movw	r3, #32770	; 0x8002
 8001bf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4619      	mov	r1, r3
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c08:	f005 fd4a 	bl	80076a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI_DATA_1_Pin DI_DATA_2_Pin */
  GPIO_InitStruct.Pin = DI_DATA_1_Pin|DI_DATA_2_Pin;
 8001c0c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001c10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c24:	f005 fd3c 	bl	80076a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin DO_LED_1_Pin DO_SCK_2_Pin DO_BOOT_SET_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|DO_LED_1_Pin|DO_SCK_2_Pin|DO_BOOT_SET_Pin;
 8001c28:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001c2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f107 030c 	add.w	r3, r7, #12
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_GPIO_Init+0xd0>)
 8001c42:	f005 fd2d 	bl	80076a0 <HAL_GPIO_Init>

}
 8001c46:	bf00      	nop
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	48000400 	.word	0x48000400

08001c58 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
  {
  }
 8001c5c:	e7fe      	b.n	8001c5c <Error_Handler+0x4>
 8001c5e:	bf00      	nop

08001c60 <Commands_BufferHandle>:
#include "commands.h"

void Commands_BufferHandle(uint8_t* Buf, uint32_t *Len)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
	if (status == 0 && Buf[0] == '|')
 8001c6a:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <Commands_BufferHandle+0x98>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d109      	bne.n	8001c86 <Commands_BufferHandle+0x26>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b7c      	cmp	r3, #124	; 0x7c
 8001c78:	d105      	bne.n	8001c86 <Commands_BufferHandle+0x26>
	{
	  status = 1;
 8001c7a:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <Commands_BufferHandle+0x98>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
	  length = 0;
 8001c80:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <Commands_BufferHandle+0x9c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	801a      	strh	r2, [r3, #0]
	}

	if (status == 1)
 8001c86:	4b1c      	ldr	r3, [pc, #112]	; (8001cf8 <Commands_BufferHandle+0x98>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d119      	bne.n	8001cc2 <Commands_BufferHandle+0x62>
	{
	  for (int i = 0; i < *Len; i++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	e011      	b.n	8001cb8 <Commands_BufferHandle+0x58>
	  {
		  command[length] = Buf[i];
 8001c94:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <Commands_BufferHandle+0x9c>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	781a      	ldrb	r2, [r3, #0]
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <Commands_BufferHandle+0xa0>)
 8001ca4:	545a      	strb	r2, [r3, r1]
		  length++;
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <Commands_BufferHandle+0x9c>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	3301      	adds	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <Commands_BufferHandle+0x9c>)
 8001cb0:	801a      	strh	r2, [r3, #0]
	  length = 0;
	}

	if (status == 1)
	{
	  for (int i = 0; i < *Len; i++)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d8e8      	bhi.n	8001c94 <Commands_BufferHandle+0x34>
		  command[length] = Buf[i];
		  length++;
	  }
	}

	if (status == 1 && Buf[*Len-1] == '\n')
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <Commands_BufferHandle+0x98>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d111      	bne.n	8001cee <Commands_BufferHandle+0x8e>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b0a      	cmp	r3, #10
 8001cd8:	d109      	bne.n	8001cee <Commands_BufferHandle+0x8e>
	{
		status = 0;
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <Commands_BufferHandle+0x98>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
		Commands_Parse(command, length);
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <Commands_BufferHandle+0x9c>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	; (8001d00 <Commands_BufferHandle+0xa0>)
 8001cea:	f000 f839 	bl	8001d60 <Commands_Parse>
	}

}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200008d2 	.word	0x200008d2
 8001cfc:	200008d0 	.word	0x200008d0
 8001d00:	20001154 	.word	0x20001154

08001d04 <_cmd_check>:

uint8_t _cmd_check(uint8_t* buf, uint8_t bufsize, uint8_t* cmd, uint8_t cmdsize)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	460b      	mov	r3, r1
 8001d12:	72fb      	strb	r3, [r7, #11]
 8001d14:	4613      	mov	r3, r2
 8001d16:	72bb      	strb	r3, [r7, #10]
	if(cmdsize >= bufsize)
 8001d18:	7aba      	ldrb	r2, [r7, #10]
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d301      	bcc.n	8001d24 <_cmd_check+0x20>
	{
		return 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	e017      	b.n	8001d54 <_cmd_check+0x50>
	}

	for(int i = 1; i <= cmdsize; i++)
 8001d24:	2301      	movs	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	e00f      	b.n	8001d4a <_cmd_check+0x46>
	{
		if(buf[i] != cmd[i-1])
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	781a      	ldrb	r2, [r3, #0]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	440b      	add	r3, r1
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <_cmd_check+0x40>
		{
			return 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	e007      	b.n	8001d54 <_cmd_check+0x50>
	if(cmdsize >= bufsize)
	{
		return 0;
	}

	for(int i = 1; i <= cmdsize; i++)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	7aba      	ldrb	r2, [r7, #10]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	daeb      	bge.n	8001d2a <_cmd_check+0x26>
		{
			return 0;
		}
	}

	return 1;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	371c      	adds	r7, #28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <Commands_Parse>:

void Commands_Parse(uint8_t* buf, uint8_t len)
{
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b08f      	sub	sp, #60	; 0x3c
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	70fb      	strb	r3, [r7, #3]
	uint8_t msg[30];
	msg[0] = '|';
 8001d6c:	237c      	movs	r3, #124	; 0x7c
 8001d6e:	723b      	strb	r3, [r7, #8]
	uint16_t offset = 1;
 8001d70:	2301      	movs	r3, #1
 8001d72:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(_cmd_check(buf, len, "id", 2))
 8001d74:	78f9      	ldrb	r1, [r7, #3]
 8001d76:	2302      	movs	r3, #2
 8001d78:	4a51      	ldr	r2, [pc, #324]	; (8001ec0 <Commands_Parse+0x160>)
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ffc2 	bl	8001d04 <_cmd_check>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d02d      	beq.n	8001de2 <Commands_Parse+0x82>
	{
	  unsigned long *id = (unsigned long *)0x1FFFF7AC;
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <Commands_Parse+0x164>)
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
	  for( int i = 0; i < 3; i++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d8e:	e014      	b.n	8001dba <Commands_Parse+0x5a>
	  {
		  offset += sprintf(&msg[offset], "%08X", id[i]);
 8001d90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d92:	f107 0208 	add.w	r2, r7, #8
 8001d96:	18d0      	adds	r0, r2, r3
 8001d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d9e:	4413      	add	r3, r2
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	4948      	ldr	r1, [pc, #288]	; (8001ec8 <Commands_Parse+0x168>)
 8001da6:	f006 fd19 	bl	80087dc <sprintf>
 8001daa:	4603      	mov	r3, r0
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001db0:	4413      	add	r3, r2
 8001db2:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t offset = 1;

	if(_cmd_check(buf, len, "id", 2))
	{
	  unsigned long *id = (unsigned long *)0x1FFFF7AC;
	  for( int i = 0; i < 3; i++)
 8001db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db6:	3301      	adds	r3, #1
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
 8001dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	dde7      	ble.n	8001d90 <Commands_Parse+0x30>
	  {
		  offset += sprintf(&msg[offset], "%08X", id[i]);
	  }
	  msg[offset++] = '\n';
 8001dc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	86fa      	strh	r2, [r7, #54]	; 0x36
 8001dc6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dca:	4413      	add	r3, r2
 8001dcc:	220a      	movs	r2, #10
 8001dce:	f803 2c30 	strb.w	r2, [r3, #-48]
	  CDC_Transmit_FS(msg, offset);
 8001dd2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001dd4:	f107 0308 	add.w	r3, r7, #8
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fc80 	bl	80016e0 <CDC_Transmit_FS>
	  msg[offset++] = '\n';

	  CDC_Transmit_FS(msg, offset);
	}

}
 8001de0:	e069      	b.n	8001eb6 <Commands_Parse+0x156>
		  offset += sprintf(&msg[offset], "%08X", id[i]);
	  }
	  msg[offset++] = '\n';
	  CDC_Transmit_FS(msg, offset);
	}
	else if(_cmd_check(buf, len, "val", 3))
 8001de2:	78f9      	ldrb	r1, [r7, #3]
 8001de4:	2303      	movs	r3, #3
 8001de6:	4a39      	ldr	r2, [pc, #228]	; (8001ecc <Commands_Parse+0x16c>)
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff8b 	bl	8001d04 <_cmd_check>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d03b      	beq.n	8001e6c <Commands_Parse+0x10c>
	{
	  srand(HAL_GetTick());
 8001df4:	f006 f988 	bl	8008108 <HAL_GetTick>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f006 fc7c 	bl	80086f8 <srand>
	  for( int i = 0; i < 4; i++)
 8001e00:	2300      	movs	r3, #0
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e04:	e01e      	b.n	8001e44 <Commands_Parse+0xe4>
	  {
		  offset += sprintf(&msg[offset], ":%03X", rand() % 1500);
 8001e06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e08:	f107 0208 	add.w	r2, r7, #8
 8001e0c:	18d4      	adds	r4, r2, r3
 8001e0e:	f006 fc9b 	bl	8008748 <rand>
 8001e12:	4602      	mov	r2, r0
 8001e14:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <Commands_Parse+0x170>)
 8001e16:	fb83 1302 	smull	r1, r3, r3, r2
 8001e1a:	1159      	asrs	r1, r3, #5
 8001e1c:	17d3      	asrs	r3, r2, #31
 8001e1e:	1acb      	subs	r3, r1, r3
 8001e20:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4929      	ldr	r1, [pc, #164]	; (8001ed4 <Commands_Parse+0x174>)
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f006 fcd4 	bl	80087dc <sprintf>
 8001e34:	4603      	mov	r3, r0
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e3a:	4413      	add	r3, r2
 8001e3c:	86fb      	strh	r3, [r7, #54]	; 0x36
	  CDC_Transmit_FS(msg, offset);
	}
	else if(_cmd_check(buf, len, "val", 3))
	{
	  srand(HAL_GetTick());
	  for( int i = 0; i < 4; i++)
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	3301      	adds	r3, #1
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	dddd      	ble.n	8001e06 <Commands_Parse+0xa6>
	  {
		  offset += sprintf(&msg[offset], ":%03X", rand() % 1500);
	  }
	  msg[offset++] = '\n';
 8001e4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	86fa      	strh	r2, [r7, #54]	; 0x36
 8001e50:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e54:	4413      	add	r3, r2
 8001e56:	220a      	movs	r2, #10
 8001e58:	f803 2c30 	strb.w	r2, [r3, #-48]
	  CDC_Transmit_FS(msg, offset);
 8001e5c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e5e:	f107 0308 	add.w	r3, r7, #8
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fc3b 	bl	80016e0 <CDC_Transmit_FS>
	  msg[offset++] = '\n';

	  CDC_Transmit_FS(msg, offset);
	}

}
 8001e6a:	e024      	b.n	8001eb6 <Commands_Parse+0x156>
	  {
		  offset += sprintf(&msg[offset], ":%03X", rand() % 1500);
	  }
	  msg[offset++] = '\n';
	  CDC_Transmit_FS(msg, offset);
	} else if(_cmd_check(buf, len, "cal", 3))
 8001e6c:	78f9      	ldrb	r1, [r7, #3]
 8001e6e:	2303      	movs	r3, #3
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <Commands_Parse+0x178>)
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ff46 	bl	8001d04 <_cmd_check>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d01b      	beq.n	8001eb6 <Commands_Parse+0x156>
	{
	  memcpy(&msg[offset], "OK", 2);
 8001e7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e80:	f107 0208 	add.w	r2, r7, #8
 8001e84:	4413      	add	r3, r2
 8001e86:	2202      	movs	r2, #2
 8001e88:	4914      	ldr	r1, [pc, #80]	; (8001edc <Commands_Parse+0x17c>)
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f006 fc26 	bl	80086dc <memcpy>
	  offset += 2;
 8001e90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e92:	3302      	adds	r3, #2
 8001e94:	86fb      	strh	r3, [r7, #54]	; 0x36
	  msg[offset++] = '\n';
 8001e96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	86fa      	strh	r2, [r7, #54]	; 0x36
 8001e9c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ea0:	4413      	add	r3, r2
 8001ea2:	220a      	movs	r2, #10
 8001ea4:	f803 2c30 	strb.w	r2, [r3, #-48]

	  CDC_Transmit_FS(msg, offset);
 8001ea8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fc15 	bl	80016e0 <CDC_Transmit_FS>
	}

}
 8001eb6:	bf00      	nop
 8001eb8:	373c      	adds	r7, #60	; 0x3c
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd90      	pop	{r4, r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	0800b170 	.word	0x0800b170
 8001ec4:	1ffff7ac 	.word	0x1ffff7ac
 8001ec8:	0800b174 	.word	0x0800b174
 8001ecc:	0800b17c 	.word	0x0800b17c
 8001ed0:	057619f1 	.word	0x057619f1
 8001ed4:	0800b180 	.word	0x0800b180
 8001ed8:	0800b188 	.word	0x0800b188
 8001edc:	0800b18c 	.word	0x0800b18c

08001ee0 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	4613      	mov	r3, r2
 8001eec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8001ef6:	88fa      	ldrh	r2, [r7, #6]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8001efc:	88fa      	ldrh	r2, [r7, #6]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	2100      	movs	r1, #0
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f7ff faed 	bl	80014e8 <USBD_LL_Transmit>
  
  return USBD_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f7ff fadb 	bl	80014e8 <USBD_LL_Transmit>
  
  return USBD_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8001f52:	88fa      	ldrh	r2, [r7, #6]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8001f5a:	88fa      	ldrh	r2, [r7, #6]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	2100      	movs	r1, #0
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f7ff fad5 	bl	8001518 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	4613      	mov	r3, r2
 8001f84:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f7ff fac3 	bl	8001518 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8001fac:	2300      	movs	r3, #0
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fa98 	bl	80014e8 <USBD_LL_Transmit>
  
  return USBD_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop

08001fc4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2205      	movs	r2, #5
 8001fd0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff fa9c 	bl	8001518 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop

08001fec <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	785b      	ldrb	r3, [r3, #1]
 8001ffe:	2b09      	cmp	r3, #9
 8002000:	d839      	bhi.n	8002076 <USBD_StdDevReq+0x8a>
 8002002:	a201      	add	r2, pc, #4	; (adr r2, 8002008 <USBD_StdDevReq+0x1c>)
 8002004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002008:	08002059 	.word	0x08002059
 800200c:	0800206d 	.word	0x0800206d
 8002010:	08002077 	.word	0x08002077
 8002014:	08002063 	.word	0x08002063
 8002018:	08002077 	.word	0x08002077
 800201c:	0800203b 	.word	0x0800203b
 8002020:	08002031 	.word	0x08002031
 8002024:	08002077 	.word	0x08002077
 8002028:	0800204f 	.word	0x0800204f
 800202c:	08002045 	.word	0x08002045
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8002030:	6839      	ldr	r1, [r7, #0]
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f936 	bl	80022a4 <USBD_GetDescriptor>
    break;
 8002038:	e022      	b.n	8002080 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800203a:	6839      	ldr	r1, [r7, #0]
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fa25 	bl	800248c <USBD_SetAddress>
    break;
 8002042:	e01d      	b.n	8002080 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8002044:	6839      	ldr	r1, [r7, #0]
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 fa5e 	bl	8002508 <USBD_SetConfig>
    break;
 800204c:	e018      	b.n	8002080 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 800204e:	6839      	ldr	r1, [r7, #0]
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fae1 	bl	8002618 <USBD_GetConfig>
    break;
 8002056:	e013      	b.n	8002080 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8002058:	6839      	ldr	r1, [r7, #0]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fb0e 	bl	800267c <USBD_GetStatus>
    break;
 8002060:	e00e      	b.n	8002080 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8002062:	6839      	ldr	r1, [r7, #0]
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fb33 	bl	80026d0 <USBD_SetFeature>
    break;
 800206a:	e009      	b.n	8002080 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 800206c:	6839      	ldr	r1, [r7, #0]
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 fb4a 	bl	8002708 <USBD_ClrFeature>
    break;
 8002074:	e004      	b.n	8002080 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8002076:	6839      	ldr	r1, [r7, #0]
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fbab 	bl	80027d4 <USBD_CtlError>
    break;
 800207e:	bf00      	nop
  }
  
  return ret;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop

0800208c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d11b      	bne.n	80020dc <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	889b      	ldrh	r3, [r3, #4]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d811      	bhi.n	80020d2 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	6839      	ldr	r1, [r7, #0]
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	88db      	ldrh	r3, [r3, #6]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d110      	bne.n	80020e6 <USBD_StdItfReq+0x5a>
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10d      	bne.n	80020e6 <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ff66 	bl	8001f9c <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80020d0:	e009      	b.n	80020e6 <USBD_StdItfReq+0x5a>
         USBD_CtlSendStatus(pdev);
      }
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
 80020d2:	6839      	ldr	r1, [r7, #0]
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fb7d 	bl	80027d4 <USBD_CtlError>
    }
    break;
 80020da:	e004      	b.n	80020e6 <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 80020dc:	6839      	ldr	r1, [r7, #0]
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 fb78 	bl	80027d4 <USBD_CtlError>
    break;
 80020e4:	e000      	b.n	80020e8 <USBD_StdItfReq+0x5c>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80020e6:	bf00      	nop
    
  default:
     USBD_CtlError(pdev , req);
    break;
  }
  return USBD_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop

080020f4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	889b      	ldrh	r3, [r3, #4]
 8002106:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002110:	2b20      	cmp	r3, #32
 8002112:	d108      	bne.n	8002126 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	6839      	ldr	r1, [r7, #0]
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	4798      	blx	r3
    
    return USBD_OK;
 8002122:	2300      	movs	r3, #0
 8002124:	e0ba      	b.n	800229c <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	785b      	ldrb	r3, [r3, #1]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d039      	beq.n	80021a2 <USBD_StdEPReq+0xae>
 800212e:	2b03      	cmp	r3, #3
 8002130:	d002      	beq.n	8002138 <USBD_StdEPReq+0x44>
 8002132:	2b00      	cmp	r3, #0
 8002134:	d06b      	beq.n	800220e <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8002136:	e0b0      	b.n	800229a <USBD_StdEPReq+0x1a6>
  switch (req->bRequest) 
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800213e:	2b02      	cmp	r3, #2
 8002140:	d002      	beq.n	8002148 <USBD_StdEPReq+0x54>
 8002142:	2b03      	cmp	r3, #3
 8002144:	d00c      	beq.n	8002160 <USBD_StdEPReq+0x6c>
 8002146:	e025      	b.n	8002194 <USBD_StdEPReq+0xa0>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002148:	7bbb      	ldrb	r3, [r7, #14]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d027      	beq.n	800219e <USBD_StdEPReq+0xaa>
 800214e:	7bbb      	ldrb	r3, [r7, #14]
 8002150:	2b80      	cmp	r3, #128	; 0x80
 8002152:	d024      	beq.n	800219e <USBD_StdEPReq+0xaa>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8002154:	7bbb      	ldrb	r3, [r7, #14]
 8002156:	4619      	mov	r1, r3
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff f95d 	bl	8001418 <USBD_LL_StallEP>
      }
      break;	
 800215e:	e01e      	b.n	800219e <USBD_StdEPReq+0xaa>
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	885b      	ldrh	r3, [r3, #2]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10a      	bne.n	800217e <USBD_StdEPReq+0x8a>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8002168:	7bbb      	ldrb	r3, [r7, #14]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <USBD_StdEPReq+0x8a>
 800216e:	7bbb      	ldrb	r3, [r7, #14]
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d004      	beq.n	800217e <USBD_StdEPReq+0x8a>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 8002174:	7bbb      	ldrb	r3, [r7, #14]
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff f94d 	bl	8001418 <USBD_LL_StallEP>
          
        }
      }
      pdev->pClass->Setup (pdev, req);   
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	6839      	ldr	r1, [r7, #0]
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff05 	bl	8001f9c <USBD_CtlSendStatus>
      
      break;
 8002192:	e005      	b.n	80021a0 <USBD_StdEPReq+0xac>
      
    default:                         
      USBD_CtlError(pdev , req);
 8002194:	6839      	ldr	r1, [r7, #0]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fb1c 	bl	80027d4 <USBD_CtlError>
      break;    
 800219c:	e000      	b.n	80021a0 <USBD_StdEPReq+0xac>
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
 800219e:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;    
    }
    break;
 80021a0:	e07b      	b.n	800229a <USBD_StdEPReq+0x1a6>
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d002      	beq.n	80021b2 <USBD_StdEPReq+0xbe>
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d00c      	beq.n	80021ca <USBD_StdEPReq+0xd6>
 80021b0:	e024      	b.n	80021fc <USBD_StdEPReq+0x108>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80021b2:	7bbb      	ldrb	r3, [r7, #14]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d026      	beq.n	8002206 <USBD_StdEPReq+0x112>
 80021b8:	7bbb      	ldrb	r3, [r7, #14]
 80021ba:	2b80      	cmp	r3, #128	; 0x80
 80021bc:	d023      	beq.n	8002206 <USBD_StdEPReq+0x112>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 80021be:	7bbb      	ldrb	r3, [r7, #14]
 80021c0:	4619      	mov	r1, r3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff f928 	bl	8001418 <USBD_LL_StallEP>
      }
      break;	
 80021c8:	e01d      	b.n	8002206 <USBD_StdEPReq+0x112>
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	885b      	ldrh	r3, [r3, #2]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d11b      	bne.n	800220a <USBD_StdEPReq+0x116>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 80021d2:	7bbb      	ldrb	r3, [r7, #14]
 80021d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00b      	beq.n	80021f4 <USBD_StdEPReq+0x100>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80021dc:	7bbb      	ldrb	r3, [r7, #14]
 80021de:	4619      	mov	r1, r3
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff f92d 	bl	8001440 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	6839      	ldr	r1, [r7, #0]
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff fed1 	bl	8001f9c <USBD_CtlSendStatus>
      }
      break;
 80021fa:	e006      	b.n	800220a <USBD_StdEPReq+0x116>
      
    default:                         
      USBD_CtlError(pdev , req);
 80021fc:	6839      	ldr	r1, [r7, #0]
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fae8 	bl	80027d4 <USBD_CtlError>
      break;    
 8002204:	e002      	b.n	800220c <USBD_StdEPReq+0x118>
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
      {
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
 8002206:	bf00      	nop
 8002208:	e047      	b.n	800229a <USBD_StdEPReq+0x1a6>
          USBD_LL_ClearStallEP(pdev , ep_addr);
          pdev->pClass->Setup (pdev, req);
        }
        USBD_CtlSendStatus(pdev);
      }
      break;
 800220a:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;    
    }
    break;
 800220c:	e045      	b.n	800229a <USBD_StdEPReq+0x1a6>
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8002214:	2b02      	cmp	r3, #2
 8002216:	d002      	beq.n	800221e <USBD_StdEPReq+0x12a>
 8002218:	2b03      	cmp	r3, #3
 800221a:	d00b      	beq.n	8002234 <USBD_StdEPReq+0x140>
 800221c:	e036      	b.n	800228c <USBD_StdEPReq+0x198>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 800221e:	7bbb      	ldrb	r3, [r7, #14]
 8002220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002224:	2b00      	cmp	r3, #0
 8002226:	d036      	beq.n	8002296 <USBD_StdEPReq+0x1a2>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8002228:	7bbb      	ldrb	r3, [r7, #14]
 800222a:	4619      	mov	r1, r3
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff f8f3 	bl	8001418 <USBD_LL_StallEP>
      }
      break;	
 8002232:	e030      	b.n	8002296 <USBD_StdEPReq+0x1a2>
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002234:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002238:	2b00      	cmp	r3, #0
 800223a:	da08      	bge.n	800224e <USBD_StdEPReq+0x15a>
 800223c:	7bbb      	ldrb	r3, [r7, #14]
 800223e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002242:	3301      	adds	r3, #1
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	3304      	adds	r3, #4
 800224c:	e007      	b.n	800225e <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 800224e:	7bbb      	ldrb	r3, [r7, #14]
 8002250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002254:	3310      	adds	r3, #16
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	3304      	adds	r3, #4
 800225e:	60bb      	str	r3, [r7, #8]
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002260:	7bbb      	ldrb	r3, [r7, #14]
 8002262:	4619      	mov	r1, r3
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff f8ff 	bl	8001468 <USBD_LL_IsStallEP>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <USBD_StdEPReq+0x184>
      {
        pep->status = 0x0001;     
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	e002      	b.n	800227e <USBD_StdEPReq+0x18a>
      }
      else
      {
        pep->status = 0x0000;  
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
      }
      
      USBD_CtlSendData (pdev,
                        (uint8_t *)&pep->status,
 800227e:	68bb      	ldr	r3, [r7, #8]
      else
      {
        pep->status = 0x0000;  
      }
      
      USBD_CtlSendData (pdev,
 8002280:	2202      	movs	r2, #2
 8002282:	4619      	mov	r1, r3
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff fe2b 	bl	8001ee0 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 800228a:	e005      	b.n	8002298 <USBD_StdEPReq+0x1a4>
      
    default:                         
      USBD_CtlError(pdev , req);
 800228c:	6839      	ldr	r1, [r7, #0]
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 faa0 	bl	80027d4 <USBD_CtlError>
      break;
 8002294:	e000      	b.n	8002298 <USBD_StdEPReq+0x1a4>
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
      {
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
 8002296:	bf00      	nop
      
    default:                         
      USBD_CtlError(pdev , req);
      break;
    }
    break;
 8002298:	bf00      	nop
    
  default:
    break;
  }
  return ret;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	885b      	ldrh	r3, [r3, #2]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	2b06      	cmp	r3, #6
 80022ba:	f200 80c9 	bhi.w	8002450 <USBD_GetDescriptor+0x1ac>
 80022be:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <USBD_GetDescriptor+0x20>)
 80022c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c4:	080022e1 	.word	0x080022e1
 80022c8:	080022f9 	.word	0x080022f9
 80022cc:	08002339 	.word	0x08002339
 80022d0:	08002451 	.word	0x08002451
 80022d4:	08002451 	.word	0x08002451
 80022d8:	080023fd 	.word	0x080023fd
 80022dc:	08002423 	.word	0x08002423
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	7c12      	ldrb	r2, [r2, #16]
 80022ec:	f107 010a 	add.w	r1, r7, #10
 80022f0:	4610      	mov	r0, r2
 80022f2:	4798      	blx	r3
 80022f4:	60f8      	str	r0, [r7, #12]
    break;
 80022f6:	e0b0      	b.n	800245a <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7c1b      	ldrb	r3, [r3, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10d      	bne.n	800231c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	f107 020a 	add.w	r2, r7, #10
 800230c:	4610      	mov	r0, r2
 800230e:	4798      	blx	r3
 8002310:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3301      	adds	r3, #1
 8002316:	2202      	movs	r2, #2
 8002318:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800231a:	e09e      	b.n	800245a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	f107 020a 	add.w	r2, r7, #10
 8002328:	4610      	mov	r0, r2
 800232a:	4798      	blx	r3
 800232c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3301      	adds	r3, #1
 8002332:	2202      	movs	r2, #2
 8002334:	701a      	strb	r2, [r3, #0]
    }
    break;
 8002336:	e090      	b.n	800245a <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	885b      	ldrh	r3, [r3, #2]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b05      	cmp	r3, #5
 8002340:	d856      	bhi.n	80023f0 <USBD_GetDescriptor+0x14c>
 8002342:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <USBD_GetDescriptor+0xa4>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	08002361 	.word	0x08002361
 800234c:	08002379 	.word	0x08002379
 8002350:	08002391 	.word	0x08002391
 8002354:	080023a9 	.word	0x080023a9
 8002358:	080023c1 	.word	0x080023c1
 800235c:	080023d9 	.word	0x080023d9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	7c12      	ldrb	r2, [r2, #16]
 800236c:	f107 010a 	add.w	r1, r7, #10
 8002370:	4610      	mov	r0, r2
 8002372:	4798      	blx	r3
 8002374:	60f8      	str	r0, [r7, #12]
      break;
 8002376:	e040      	b.n	80023fa <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	7c12      	ldrb	r2, [r2, #16]
 8002384:	f107 010a 	add.w	r1, r7, #10
 8002388:	4610      	mov	r0, r2
 800238a:	4798      	blx	r3
 800238c:	60f8      	str	r0, [r7, #12]
      break;
 800238e:	e034      	b.n	80023fa <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	7c12      	ldrb	r2, [r2, #16]
 800239c:	f107 010a 	add.w	r1, r7, #10
 80023a0:	4610      	mov	r0, r2
 80023a2:	4798      	blx	r3
 80023a4:	60f8      	str	r0, [r7, #12]
      break;
 80023a6:	e028      	b.n	80023fa <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	7c12      	ldrb	r2, [r2, #16]
 80023b4:	f107 010a 	add.w	r1, r7, #10
 80023b8:	4610      	mov	r0, r2
 80023ba:	4798      	blx	r3
 80023bc:	60f8      	str	r0, [r7, #12]
      break;
 80023be:	e01c      	b.n	80023fa <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	7c12      	ldrb	r2, [r2, #16]
 80023cc:	f107 010a 	add.w	r1, r7, #10
 80023d0:	4610      	mov	r0, r2
 80023d2:	4798      	blx	r3
 80023d4:	60f8      	str	r0, [r7, #12]
      break;
 80023d6:	e010      	b.n	80023fa <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	7c12      	ldrb	r2, [r2, #16]
 80023e4:	f107 010a 	add.w	r1, r7, #10
 80023e8:	4610      	mov	r0, r2
 80023ea:	4798      	blx	r3
 80023ec:	60f8      	str	r0, [r7, #12]
      break;
 80023ee:	e004      	b.n	80023fa <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 80023f0:	6839      	ldr	r1, [r7, #0]
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f9ee 	bl	80027d4 <USBD_CtlError>
      return;
 80023f8:	e044      	b.n	8002484 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 80023fa:	e02e      	b.n	800245a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7c1b      	ldrb	r3, [r3, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800240a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240c:	f107 020a 	add.w	r2, r7, #10
 8002410:	4610      	mov	r0, r2
 8002412:	4798      	blx	r3
 8002414:	60f8      	str	r0, [r7, #12]
      break;
 8002416:	e020      	b.n	800245a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8002418:	6839      	ldr	r1, [r7, #0]
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f9da 	bl	80027d4 <USBD_CtlError>
      return;
 8002420:	e030      	b.n	8002484 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	7c1b      	ldrb	r3, [r3, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10d      	bne.n	8002446 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f107 020a 	add.w	r2, r7, #10
 8002436:	4610      	mov	r0, r2
 8002438:	4798      	blx	r3
 800243a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3301      	adds	r3, #1
 8002440:	2207      	movs	r2, #7
 8002442:	701a      	strb	r2, [r3, #0]
      break; 
 8002444:	e009      	b.n	800245a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8002446:	6839      	ldr	r1, [r7, #0]
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f9c3 	bl	80027d4 <USBD_CtlError>
      return;
 800244e:	e019      	b.n	8002484 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 8002450:	6839      	ldr	r1, [r7, #0]
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f9be 	bl	80027d4 <USBD_CtlError>
    return;
 8002458:	e014      	b.n	8002484 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 800245a:	897b      	ldrh	r3, [r7, #10]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d011      	beq.n	8002484 <USBD_GetDescriptor+0x1e0>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	88db      	ldrh	r3, [r3, #6]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00d      	beq.n	8002484 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	88da      	ldrh	r2, [r3, #6]
 800246c:	897b      	ldrh	r3, [r7, #10]
 800246e:	4293      	cmp	r3, r2
 8002470:	bf28      	it	cs
 8002472:	4613      	movcs	r3, r2
 8002474:	b29b      	uxth	r3, r3
 8002476:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 8002478:	897b      	ldrh	r3, [r7, #10]
 800247a:	461a      	mov	r2, r3
 800247c:	68f9      	ldr	r1, [r7, #12]
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff fd2e 	bl	8001ee0 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop

0800248c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	889b      	ldrh	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d12c      	bne.n	80024f8 <USBD_SetAddress+0x6c>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	88db      	ldrh	r3, [r3, #6]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d128      	bne.n	80024f8 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	885b      	ldrh	r3, [r3, #2]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024b0:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d104      	bne.n	80024c6 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80024bc:	6839      	ldr	r1, [r7, #0]
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f988 	bl	80027d4 <USBD_CtlError>
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80024c4:	e01c      	b.n	8002500 <USBD_SetAddress+0x74>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7bfa      	ldrb	r2, [r7, #15]
 80024ca:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	4619      	mov	r1, r3
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7fe fff4 	bl	80014c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff fd5f 	bl	8001f9c <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80024ec:	e008      	b.n	8002500 <USBD_SetAddress+0x74>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80024f6:	e003      	b.n	8002500 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 80024f8:	6839      	ldr	r1, [r7, #0]
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f96a 	bl	80027d4 <USBD_CtlError>
  } 
}
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	885b      	ldrh	r3, [r3, #2]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	4b3e      	ldr	r3, [pc, #248]	; (8002614 <USBD_SetConfig+0x10c>)
 800251a:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800251c:	4b3d      	ldr	r3, [pc, #244]	; (8002614 <USBD_SetConfig+0x10c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d904      	bls.n	800252e <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8002524:	6839      	ldr	r1, [r7, #0]
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f954 	bl	80027d4 <USBD_CtlError>
 800252c:	e06f      	b.n	800260e <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8002534:	2b02      	cmp	r3, #2
 8002536:	d002      	beq.n	800253e <USBD_SetConfig+0x36>
 8002538:	2b03      	cmp	r3, #3
 800253a:	d023      	beq.n	8002584 <USBD_SetConfig+0x7c>
 800253c:	e062      	b.n	8002604 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800253e:	4b35      	ldr	r3, [pc, #212]	; (8002614 <USBD_SetConfig+0x10c>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01a      	beq.n	800257c <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8002546:	4b33      	ldr	r3, [pc, #204]	; (8002614 <USBD_SetConfig+0x10c>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2203      	movs	r2, #3
 8002554:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8002558:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <USBD_SetConfig+0x10c>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	4619      	mov	r1, r3
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fa04 	bl	800296c <USBD_SetClassConfig>
 8002564:	4603      	mov	r3, r0
 8002566:	2b02      	cmp	r3, #2
 8002568:	d104      	bne.n	8002574 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800256a:	6839      	ldr	r1, [r7, #0]
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f931 	bl	80027d4 <USBD_CtlError>
          return;
 8002572:	e04c      	b.n	800260e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff fd11 	bl	8001f9c <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 800257a:	e048      	b.n	800260e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff fd0d 	bl	8001f9c <USBD_CtlSendStatus>
      }
      break;
 8002582:	e044      	b.n	800260e <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8002584:	4b23      	ldr	r3, [pc, #140]	; (8002614 <USBD_SetConfig+0x10c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d112      	bne.n	80025b2 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8002594:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <USBD_SetConfig+0x10c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800259e:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <USBD_SetConfig+0x10c>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	4619      	mov	r1, r3
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 fa01 	bl	80029ac <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff fcf6 	bl	8001f9c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80025b0:	e02d      	b.n	800260e <USBD_SetConfig+0x106>
        pdev->dev_config = cfgidx;          
        USBD_ClrClassConfig(pdev , cfgidx);
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <USBD_SetConfig+0x10c>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d01d      	beq.n	80025fc <USBD_SetConfig+0xf4>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	4619      	mov	r1, r3
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f9ef 	bl	80029ac <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <USBD_SetConfig+0x10c>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <USBD_SetConfig+0x10c>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	4619      	mov	r1, r3
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f9c4 	bl	800296c <USBD_SetClassConfig>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d104      	bne.n	80025f4 <USBD_SetConfig+0xec>
        {
          USBD_CtlError(pdev , req);  
 80025ea:	6839      	ldr	r1, [r7, #0]
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 f8f1 	bl	80027d4 <USBD_CtlError>
          return;
 80025f2:	e00c      	b.n	800260e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff fcd1 	bl	8001f9c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80025fa:	e008      	b.n	800260e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
      }
      else
      {
        USBD_CtlSendStatus(pdev);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff fccd 	bl	8001f9c <USBD_CtlSendStatus>
      }
      break;
 8002602:	e004      	b.n	800260e <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8002604:	6839      	ldr	r1, [r7, #0]
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f8e4 	bl	80027d4 <USBD_CtlError>
      break;
 800260c:	bf00      	nop
    }
  }
}
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200008d3 	.word	0x200008d3

08002618 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	88db      	ldrh	r3, [r3, #6]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d004      	beq.n	8002634 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 800262a:	6839      	ldr	r1, [r7, #0]
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f8d1 	bl	80027d4 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8002632:	e01f      	b.n	8002674 <USBD_GetConfig+0x5c>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800263a:	2b02      	cmp	r3, #2
 800263c:	d002      	beq.n	8002644 <USBD_GetConfig+0x2c>
 800263e:	2b03      	cmp	r3, #3
 8002640:	d00b      	beq.n	800265a <USBD_GetConfig+0x42>
 8002642:	e012      	b.n	800266a <USBD_GetConfig+0x52>
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&pdev->dev_default_config,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3308      	adds	r3, #8
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
      USBD_CtlSendData (pdev, 
 800264e:	2201      	movs	r2, #1
 8002650:	4619      	mov	r1, r3
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fc44 	bl	8001ee0 <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_default_config,
                        1);
      break;
 8002658:	e00c      	b.n	8002674 <USBD_GetConfig+0x5c>
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
                        (uint8_t *)&pdev->dev_config,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3304      	adds	r3, #4
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 800265e:	2201      	movs	r2, #1
 8002660:	4619      	mov	r1, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fc3c 	bl	8001ee0 <USBD_CtlSendData>
                        (uint8_t *)&pdev->dev_config,
                        1);
      break;
 8002668:	e004      	b.n	8002674 <USBD_GetConfig+0x5c>
      
    default:
       USBD_CtlError(pdev , req);
 800266a:	6839      	ldr	r1, [r7, #0]
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f8b1 	bl	80027d4 <USBD_CtlError>
      break;
 8002672:	bf00      	nop
    }
  }
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800268c:	3b02      	subs	r3, #2
 800268e:	2b01      	cmp	r3, #1
 8002690:	d815      	bhi.n	80026be <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f043 0202 	orr.w	r2, r3, #2
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	330c      	adds	r3, #12
    if (pdev->dev_remote_wakeup) 
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
    }
    
    USBD_CtlSendData (pdev, 
 80026b2:	2202      	movs	r2, #2
 80026b4:	4619      	mov	r1, r3
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff fc12 	bl	8001ee0 <USBD_CtlSendData>
                      (uint8_t *)& pdev->dev_config_status,
                      2);
    break;
 80026bc:	e004      	b.n	80026c8 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 80026be:	6839      	ldr	r1, [r7, #0]
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f887 	bl	80027d4 <USBD_CtlError>
    break;
 80026c6:	bf00      	nop
  }
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	885b      	ldrh	r3, [r3, #2]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d10d      	bne.n	80026fe <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	6839      	ldr	r1, [r7, #0]
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff fc4f 	bl	8001f9c <USBD_CtlSendStatus>
  }

}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop

08002708 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8002718:	3b02      	subs	r3, #2
 800271a:	2b01      	cmp	r3, #1
 800271c:	d812      	bhi.n	8002744 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	885b      	ldrh	r3, [r3, #2]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d113      	bne.n	800274e <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	6839      	ldr	r1, [r7, #0]
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff fc2d 	bl	8001f9c <USBD_CtlSendStatus>
    }
    break;
 8002742:	e004      	b.n	800274e <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8002744:	6839      	ldr	r1, [r7, #0]
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f844 	bl	80027d4 <USBD_CtlError>
    break;
 800274c:	e000      	b.n	8002750 <USBD_ClrFeature+0x48>
    {
      pdev->dev_remote_wakeup = 0; 
      pdev->pClass->Setup (pdev, req);   
      USBD_CtlSendStatus(pdev);
    }
    break;
 800274e:	bf00      	nop
    
  default :
     USBD_CtlError(pdev , req);
    break;
  }
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	785a      	ldrb	r2, [r3, #1]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	3302      	adds	r3, #2
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	b29a      	uxth	r2, r3
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	3303      	adds	r3, #3
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	b29b      	uxth	r3, r3
 8002786:	4413      	add	r3, r2
 8002788:	b29a      	uxth	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	3304      	adds	r3, #4
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b29a      	uxth	r2, r3
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	3305      	adds	r3, #5
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	3306      	adds	r3, #6
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	3307      	adds	r3, #7
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	b29b      	uxth	r3, r3
 80027be:	4413      	add	r3, r2
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	80da      	strh	r2, [r3, #6]

}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop

080027d4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7fe fe19 	bl	8001418 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80027e6:	2100      	movs	r1, #0
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7fe fe15 	bl	8001418 <USBD_LL_StallEP>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop

080027f8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d033      	beq.n	8002876 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f836 	bl	8002880 <USBD_GetLen>
 8002814:	4603      	mov	r3, r0
 8002816:	3301      	adds	r3, #1
 8002818:	b29b      	uxth	r3, r3
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 8002822:	7dfb      	ldrb	r3, [r7, #23]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	75fa      	strb	r2, [r7, #23]
 8002828:	461a      	mov	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4413      	add	r3, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	8812      	ldrh	r2, [r2, #0]
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	75fa      	strb	r2, [r7, #23]
 800283c:	461a      	mov	r2, r3
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	4413      	add	r3, r2
 8002842:	2203      	movs	r2, #3
 8002844:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 8002846:	e012      	b.n	800286e <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 8002848:	7dfb      	ldrb	r3, [r7, #23]
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	75fa      	strb	r2, [r7, #23]
 800284e:	461a      	mov	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	441a      	add	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1c59      	adds	r1, r3, #1
 8002858:	60f9      	str	r1, [r7, #12]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 800285e:	7dfb      	ldrb	r3, [r7, #23]
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	75fa      	strb	r2, [r7, #23]
 8002864:	461a      	mov	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4413      	add	r3, r2
 800286a:	2200      	movs	r2, #0
 800286c:	701a      	strb	r2, [r3, #0]
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
    unicode[idx++] = *len;
    unicode[idx++] =  USB_DESC_TYPE_STRING;
    
    while (*desc != '\0') 
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1e8      	bne.n	8002848 <USBD_GetString+0x50>
    {
      unicode[idx++] = *desc++;
      unicode[idx++] =  0x00;
    }
  } 
}
 8002876:	bf00      	nop
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop

08002880 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 800288c:	e005      	b.n	800289a <USBD_GetLen+0x1a>
    {
        len++;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	3301      	adds	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
        buf++;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3301      	adds	r3, #1
 8002898:	607b      	str	r3, [r7, #4]
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f5      	bne.n	800288e <USBD_GetLen+0xe>
    {
        len++;
        buf++;
    }

    return len;
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	4613      	mov	r3, r2
 80028bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 80028c4:	2302      	movs	r3, #2
 80028c6:	e01a      	b.n	80028fe <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	79fa      	ldrb	r2, [r7, #7]
 80028f4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f7fe fcf4 	bl	80012e4 <USBD_LL_Init>
  
  return USBD_OK; 
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop

08002908 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d006      	beq.n	800292a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]
 8002928:	e001      	b.n	800292e <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800292a:	2302      	movs	r3, #2
 800292c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7fe fd29 	bl	800139c <USBD_LL_Start>
  
  return USBD_OK;  
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop

0800296c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002978:	2302      	movs	r3, #2
 800297a:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00c      	beq.n	80029a0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	4611      	mov	r1, r2
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop

080029ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	4611      	mov	r1, r2
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	4798      	blx	r3
  return USBD_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop

080029d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029e4:	6839      	ldr	r1, [r7, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff feb6 	bl	8002758 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80029fa:	461a      	mov	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8002a08:	f003 031f 	and.w	r3, r3, #31
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d00b      	beq.n	8002a28 <USBD_LL_SetupStage+0x54>
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d011      	beq.n	8002a38 <USBD_LL_SetupStage+0x64>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d117      	bne.n	8002a48 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a1e:	4619      	mov	r1, r3
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff fae3 	bl	8001fec <USBD_StdDevReq>
    break;
 8002a26:	e01a      	b.n	8002a5e <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fb2b 	bl	800208c <USBD_StdItfReq>
    break;
 8002a36:	e012      	b.n	8002a5e <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff fb57 	bl	80020f4 <USBD_StdEPReq>
    break;
 8002a46:	e00a      	b.n	8002a5e <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8002a4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	4619      	mov	r1, r3
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe fcde 	bl	8001418 <USBD_LL_StallEP>
    break;
 8002a5c:	bf00      	nop
  }  
  return USBD_OK;  
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	460b      	mov	r3, r1
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002a76:	7afb      	ldrb	r3, [r7, #11]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d138      	bne.n	8002aee <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002a82:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d142      	bne.n	8002b14 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d914      	bls.n	8002ac4 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	1ad2      	subs	r2, r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	bf28      	it	cs
 8002ab4:	4613      	movcs	r3, r2
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
       
        USBD_CtlContinueRx (pdev, 
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f7ff fa5b 	bl	8001f78 <USBD_CtlContinueRx>
 8002ac2:	e027      	b.n	8002b14 <USBD_LL_DataOutStage+0xac>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d105      	bne.n	8002ae6 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f7ff fa58 	bl	8001f9c <USBD_CtlSendStatus>
 8002aec:	e012      	b.n	8002b14 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00c      	beq.n	8002b14 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        }
        USBD_CtlSendStatus(pdev);
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d107      	bne.n	8002b14 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	7afa      	ldrb	r2, [r7, #11]
 8002b0e:	4611      	mov	r1, r2
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	4798      	blx	r3
  }  
  return USBD_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop

08002b20 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002b2e:	7afb      	ldrb	r3, [r7, #11]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d16c      	bne.n	8002c0e <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3314      	adds	r3, #20
 8002b38:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d157      	bne.n	8002bf4 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d915      	bls.n	8002b7c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	1ad2      	subs	r2, r2, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	689b      	ldr	r3, [r3, #8]
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
        
        USBD_CtlContinueSendData (pdev, 
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff f9d5 	bl	8001f18 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2200      	movs	r2, #0
 8002b72:	2100      	movs	r1, #0
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7fe fccf 	bl	8001518 <USBD_LL_PrepareReceive>
 8002b7a:	e03b      	b.n	8002bf4 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	68d2      	ldr	r2, [r2, #12]
 8002b84:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b88:	fb02 f201 	mul.w	r2, r2, r1
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d11c      	bne.n	8002bcc <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	68db      	ldr	r3, [r3, #12]
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d316      	bcc.n	8002bcc <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
             (pep->total_length < pdev->ep0_data_len ))
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
           (pep->total_length >= pep->maxpacket) &&
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d20f      	bcs.n	8002bcc <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002bac:	2200      	movs	r2, #0
 8002bae:	2100      	movs	r1, #0
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f7ff f9b1 	bl	8001f18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f7fe fca7 	bl	8001518 <USBD_LL_PrepareReceive>
 8002bca:	e013      	b.n	8002bf4 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d105      	bne.n	8002bee <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f7ff f9e8 	bl	8001fc4 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d11a      	bne.n	8002c34 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f7ff fea8 	bl	8002954 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8002c0c:	e012      	b.n	8002c34 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00c      	beq.n	8002c34 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d107      	bne.n	8002c34 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	7afa      	ldrb	r2, [r7, #11]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	4798      	blx	r3
  }  
  return USBD_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop

08002c40 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002c48:	2340      	movs	r3, #64	; 0x40
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fe fbb4 	bl	80013bc <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2240      	movs	r2, #64	; 0x40
 8002c58:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002c5c:	2340      	movs	r3, #64	; 0x40
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe fbaa 	bl	80013bc <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2240      	movs	r2, #64	; 0x40
 8002c6c:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d009      	beq.n	8002c94 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6852      	ldr	r2, [r2, #4]
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	4611      	mov	r1, r2
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	4798      	blx	r3
 
  
  return USBD_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop

08002ca0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop

08002cec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop

08002d10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d10b      	bne.n	8002d3a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7c1b      	ldrb	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10e      	bne.n	8002d7a <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8002d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d60:	2202      	movs	r2, #2
 8002d62:	2181      	movs	r1, #129	; 0x81
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7fe fb29 	bl	80013bc <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8002d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d6e:	2202      	movs	r2, #2
 8002d70:	2101      	movs	r1, #1
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe fb22 	bl	80013bc <USBD_LL_OpenEP>
 8002d78:	e00b      	b.n	8002d92 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8002d7a:	2340      	movs	r3, #64	; 0x40
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	2181      	movs	r1, #129	; 0x81
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7fe fb1b 	bl	80013bc <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8002d86:	2340      	movs	r3, #64	; 0x40
 8002d88:	2202      	movs	r2, #2
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7fe fb15 	bl	80013bc <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8002d92:	2308      	movs	r3, #8
 8002d94:	2203      	movs	r2, #3
 8002d96:	2182      	movs	r1, #130	; 0x82
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7fe fb0f 	bl	80013bc <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8002d9e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8002da2:	f7fe fbe5 	bl	8001570 <USBD_static_malloc>
 8002da6:	4602      	mov	r2, r0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <USBD_CDC_Init+0x7a>
  {
    ret = 1; 
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	e026      	b.n	8002e0c <USBD_CDC_Init+0xc8>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002dc4:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	7c1b      	ldrb	r3, [r3, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d109      	bne.n	8002dfc <USBD_CDC_Init+0xb8>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df2:	2101      	movs	r1, #1
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7fe fb8f 	bl	8001518 <USBD_LL_PrepareReceive>
 8002dfa:	e007      	b.n	8002e0c <USBD_CDC_Init+0xc8>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e02:	2340      	movs	r3, #64	; 0x40
 8002e04:	2101      	movs	r1, #1
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fe fb86 	bl	8001518 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop

08002e18 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8002e28:	2181      	movs	r1, #129	; 0x81
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fe fae0 	bl	80013f0 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 8002e30:	2101      	movs	r1, #1
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fe fadc 	bl	80013f0 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8002e38:	2182      	movs	r1, #130	; 0x82
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe fad8 	bl	80013f0 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00e      	beq.n	8002e68 <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fb96 	bl	800158c <USBD_static_free>
    pdev->pClassData = NULL;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop

08002e74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002e84:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d03a      	beq.n	8002f08 <USBD_CDC_Setup+0x94>
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d000      	beq.n	8002e98 <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8002e96:	e043      	b.n	8002f20 <USBD_CDC_Setup+0xac>
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	88db      	ldrh	r3, [r3, #6]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d029      	beq.n	8002ef4 <USBD_CDC_Setup+0x80>
    {
      if (req->bmRequest & 0x80)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	b25b      	sxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	da11      	bge.n	8002ece <USBD_CDC_Setup+0x5a>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8002eb6:	68f9      	ldr	r1, [r7, #12]
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
    {
      if (req->bmRequest & 0x80)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	88d2      	ldrh	r2, [r2, #6]
 8002ebc:	4798      	blx	r3
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
                            (uint8_t *)hcdc->data,
 8002ebe:	68f9      	ldr	r1, [r7, #12]
      if (req->bmRequest & 0x80)
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	88db      	ldrh	r3, [r3, #6]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff f80a 	bl	8001ee0 <USBD_CtlSendData>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 8002ecc:	e029      	b.n	8002f22 <USBD_CDC_Setup+0xae>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	785a      	ldrb	r2, [r3, #1]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	88db      	ldrh	r3, [r3, #6]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
                           (uint8_t *)hcdc->data,
 8002ee4:	68f9      	ldr	r1, [r7, #12]
      else
      {
        hcdc->CmdOpCode = req->bRequest;
        hcdc->CmdLength = req->wLength;
        
        USBD_CtlPrepareRx (pdev, 
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	88db      	ldrh	r3, [r3, #6]
 8002eea:	461a      	mov	r2, r3
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff f825 	bl	8001f3c <USBD_CtlPrepareRx>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 8002ef2:	e016      	b.n	8002f22 <USBD_CDC_Setup+0xae>
      }
      
    }
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	7850      	ldrb	r0, [r2, #1]
 8002f00:	2200      	movs	r2, #0
 8002f02:	6839      	ldr	r1, [r7, #0]
 8002f04:	4798      	blx	r3
                                                        (uint8_t*)req,
                                                        0);
    }
    break;
 8002f06:	e00c      	b.n	8002f22 <USBD_CDC_Setup+0xae>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	785b      	ldrb	r3, [r3, #1]
 8002f0c:	2b0a      	cmp	r3, #10
 8002f0e:	d001      	beq.n	8002f14 <USBD_CDC_Setup+0xa0>
 8002f10:	2b0b      	cmp	r3, #11
                        &ifalt,
                        1);
      break;
      
    case USB_REQ_SET_INTERFACE :
      break;
 8002f12:	e005      	b.n	8002f20 <USBD_CDC_Setup+0xac>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
    {      
    case USB_REQ_GET_INTERFACE :
      USBD_CtlSendData (pdev,
 8002f14:	2201      	movs	r2, #1
 8002f16:	4905      	ldr	r1, [pc, #20]	; (8002f2c <USBD_CDC_Setup+0xb8>)
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7fe ffe1 	bl	8001ee0 <USBD_CtlSendData>
                        &ifalt,
                        1);
      break;
 8002f1e:	bf00      	nop
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 8002f20:	bf00      	nop
  }
  return USBD_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	200008d4 	.word	0x200008d4

08002f30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002f42:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e000      	b.n	8002f5c <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 8002f5a:	2302      	movs	r3, #2
  }
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002f7a:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7fe fae1 	bl	8001548 <USBD_LL_GetRxDataSize>
 8002f86:	4602      	mov	r2, r0
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8002fac:	4611      	mov	r1, r2
 8002fae:	4798      	blx	r3

    return USBD_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	e000      	b.n	8002fb6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8002fb4:	2302      	movs	r3, #2
  }
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop

08002fc0 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002fce:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d015      	beq.n	8003006 <USBD_CDC_EP0_RxReady+0x46>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8002fe0:	2bff      	cmp	r3, #255	; 0xff
 8002fe2:	d010      	beq.n	8003006 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8002ff2:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8002ffa:	b292      	uxth	r2, r2
 8002ffc:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	22ff      	movs	r2, #255	; 0xff
 8003002:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2243      	movs	r2, #67	; 0x43
 800301c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800301e:	4b03      	ldr	r3, [pc, #12]	; (800302c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	200000cc 	.word	0x200000cc

08003030 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2243      	movs	r2, #67	; 0x43
 800303c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800303e:	4b03      	ldr	r3, [pc, #12]	; (800304c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	20000088 	.word	0x20000088

08003050 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2243      	movs	r2, #67	; 0x43
 800305c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800305e:	4b03      	ldr	r3, [pc, #12]	; (800306c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	20000110 	.word	0x20000110

08003070 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	220a      	movs	r2, #10
 800307c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800307e:	4b03      	ldr	r3, [pc, #12]	; (800308c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	20000044 	.word	0x20000044

08003090 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800309a:	2302      	movs	r3, #2
 800309c:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop

080030c0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	4613      	mov	r3, r2
 80030cc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80030d4:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003104:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800312a:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003132:	2b00      	cmp	r3, #0
 8003134:	d017      	beq.n	8003166 <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800313c:	2b00      	cmp	r3, #0
 800313e:	d110      	bne.n	8003162 <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8003154:	b29b      	uxth	r3, r3
 8003156:	2181      	movs	r1, #129	; 0x81
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7fe f9c5 	bl	80014e8 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e002      	b.n	8003168 <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 8003166:	2302      	movs	r3, #2
  }
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800317e:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8003186:	2b00      	cmp	r3, #0
 8003188:	d017      	beq.n	80031ba <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	7c1b      	ldrb	r3, [r3, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800319c:	2101      	movs	r1, #1
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fe f9ba 	bl	8001518 <USBD_LL_PrepareReceive>
 80031a4:	e007      	b.n	80031b6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031ac:	2340      	movs	r3, #64	; 0x40
 80031ae:	2101      	movs	r1, #1
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fe f9b1 	bl	8001518 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e000      	b.n	80031bc <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80031ba:	2302      	movs	r3, #2
  }
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031da:	2302      	movs	r3, #2
 80031dc:	e105      	b.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x226>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2202      	movs	r2, #2
 80031ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b14      	cmp	r3, #20
 80031f2:	f200 80f0 	bhi.w	80033d6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80031f6:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80031f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fc:	08003251 	.word	0x08003251
 8003200:	080033d7 	.word	0x080033d7
 8003204:	080033d7 	.word	0x080033d7
 8003208:	080033d7 	.word	0x080033d7
 800320c:	08003291 	.word	0x08003291
 8003210:	080033d7 	.word	0x080033d7
 8003214:	080033d7 	.word	0x080033d7
 8003218:	080033d7 	.word	0x080033d7
 800321c:	080032d3 	.word	0x080032d3
 8003220:	080033d7 	.word	0x080033d7
 8003224:	080033d7 	.word	0x080033d7
 8003228:	080033d7 	.word	0x080033d7
 800322c:	08003313 	.word	0x08003313
 8003230:	080033d7 	.word	0x080033d7
 8003234:	080033d7 	.word	0x080033d7
 8003238:	080033d7 	.word	0x080033d7
 800323c:	08003355 	.word	0x08003355
 8003240:	080033d7 	.word	0x080033d7
 8003244:	080033d7 	.word	0x080033d7
 8003248:	080033d7 	.word	0x080033d7
 800324c:	08003395 	.word	0x08003395
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fb90 	bl	800397c <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	6992      	ldr	r2, [r2, #24]
 8003266:	f042 0208 	orr.w	r2, r2, #8
 800326a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	6992      	ldr	r2, [r2, #24]
 8003276:	f022 0204 	bic.w	r2, r2, #4
 800327a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	6991      	ldr	r1, [r2, #24]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	6912      	ldr	r2, [r2, #16]
 800328a:	430a      	orrs	r2, r1
 800328c:	619a      	str	r2, [r3, #24]
    }
    break;
 800328e:	e0a3      	b.n	80033d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fc06 	bl	8003aa8 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	6992      	ldr	r2, [r2, #24]
 80032a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032aa:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	6992      	ldr	r2, [r2, #24]
 80032b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	6991      	ldr	r1, [r2, #24]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	6912      	ldr	r2, [r2, #16]
 80032ca:	0212      	lsls	r2, r2, #8
 80032cc:	430a      	orrs	r2, r1
 80032ce:	619a      	str	r2, [r3, #24]
    }
    break;
 80032d0:	e082      	b.n	80033d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fc75 	bl	8003bc8 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	69d2      	ldr	r2, [r2, #28]
 80032e8:	f042 0208 	orr.w	r2, r2, #8
 80032ec:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	69d2      	ldr	r2, [r2, #28]
 80032f8:	f022 0204 	bic.w	r2, r2, #4
 80032fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	69d1      	ldr	r1, [r2, #28]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	6912      	ldr	r2, [r2, #16]
 800330c:	430a      	orrs	r2, r1
 800330e:	61da      	str	r2, [r3, #28]
    }
    break;
 8003310:	e062      	b.n	80033d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fce3 	bl	8003ce4 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	69d2      	ldr	r2, [r2, #28]
 8003328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800332c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	69d2      	ldr	r2, [r2, #28]
 8003338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	69d1      	ldr	r1, [r2, #28]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	6912      	ldr	r2, [r2, #16]
 800334c:	0212      	lsls	r2, r2, #8
 800334e:	430a      	orrs	r2, r1
 8003350:	61da      	str	r2, [r3, #28]
    }
    break;
 8003352:	e041      	b.n	80033d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f938 	bl	80035d0 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800336a:	f042 0208 	orr.w	r2, r2, #8
 800336e:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800337a:	f022 0204 	bic.w	r2, r2, #4
 800337e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	6912      	ldr	r2, [r2, #16]
 800338e:	430a      	orrs	r2, r1
 8003390:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8003392:	e021      	b.n	80033d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	4618      	mov	r0, r3
 800339c:	f000 f982 	bl	80036a4 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80033aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80033ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	6912      	ldr	r2, [r2, #16]
 80033ce:	0212      	lsls	r2, r2, #8
 80033d0:	430a      	orrs	r2, r1
 80033d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 80033d4:	e000      	b.n	80033d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 80033d6:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop

080033f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003408:	2302      	movs	r3, #2
 800340a:	e03d      	b.n	8003488 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1a      	ldr	r2, [pc, #104]	; (8003494 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d004      	beq.n	8003438 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a19      	ldr	r2, [pc, #100]	; (8003498 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d108      	bne.n	800344a <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800343e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003450:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003462:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	4313      	orrs	r3, r2
 800346c:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
} 
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40013400 	.word	0x40013400

0800349c <HAL_TIMEx_ConfigBreakDeadTime>:
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e081      	b.n	80035bc <HAL_TIMEx_ConfigBreakDeadTime+0x120>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a40      	ldr	r2, [pc, #256]	; (80035c8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_TIMEx_ConfigBreakDeadTime+0x38>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a3f      	ldr	r2, [pc, #252]	; (80035cc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d13d      	bne.n	8003550 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Clear the BDTR bits */
    tmpbdtr &= ~(TIM_BDTR_DTG | TIM_BDTR_LOCK |  TIM_BDTR_OSSI | 
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 437c 	and.w	r3, r3, #4227858432	; 0xfc000000
 80034da:	60fb      	str	r3, [r7, #12]
                 TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
                 TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF |
                 TIM_BDTR_BK2F | TIM_BDTR_BK2E | TIM_BDTR_BK2P);

    /* Set the BDTR bits */
    tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4313      	orrs	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	051b      	lsls	r3, r3, #20
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->Break2State;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->Break2Polarity;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	e02c      	b.n	80035aa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
  }
  else
  {
    /* Clear the BDTR bits */
    tmpbdtr &= ~(TIM_BDTR_DTG | TIM_BDTR_LOCK |  TIM_BDTR_OSSI | 
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	0d1b      	lsrs	r3, r3, #20
 8003554:	051b      	lsls	r3, r3, #20
 8003556:	60fb      	str	r3, [r7, #12]
                 TIM_BDTR_OSSR | TIM_BDTR_BKE | TIM_BDTR_BKP | 
                 TIM_BDTR_AOE | TIM_BDTR_MOE | TIM_BDTR_BKF);
    
    /* Set the BDTR bits */
    tmpbdtr |= sBreakDeadTimeConfig->DeadTime;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->LockLevel;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateIDLEMode;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->OffStateRunMode;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakState;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->BreakPolarity;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= sBreakDeadTimeConfig->AutomaticOutput;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
    tmpbdtr |= (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	041b      	lsls	r3, r3, #16
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40012c00 	.word	0x40012c00
 80035cc:	40013400 	.word	0x40013400

080035d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360e:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003620:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	041b      	lsls	r3, r3, #16
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a17      	ldr	r2, [pc, #92]	; (8003690 <TIM_OC5_SetConfig+0xc0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00f      	beq.n	8003656 <TIM_OC5_SetConfig+0x86>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a16      	ldr	r2, [pc, #88]	; (8003694 <TIM_OC5_SetConfig+0xc4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00b      	beq.n	8003656 <TIM_OC5_SetConfig+0x86>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a15      	ldr	r2, [pc, #84]	; (8003698 <TIM_OC5_SetConfig+0xc8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d007      	beq.n	8003656 <TIM_OC5_SetConfig+0x86>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a14      	ldr	r2, [pc, #80]	; (800369c <TIM_OC5_SetConfig+0xcc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d003      	beq.n	8003656 <TIM_OC5_SetConfig+0x86>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <TIM_OC5_SetConfig+0xd0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d109      	bne.n	800366a <TIM_OC5_SetConfig+0x9a>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	621a      	str	r2, [r3, #32]
}
 8003684:	bf00      	nop
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40013400 	.word	0x40013400
 8003698:	40014000 	.word	0x40014000
 800369c:	40014400 	.word	0x40014400
 80036a0:	40014800 	.word	0x40014800

080036a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e2:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036f6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	051b      	lsls	r3, r3, #20
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4313      	orrs	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a18      	ldr	r2, [pc, #96]	; (8003768 <TIM_OC6_SetConfig+0xc4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00f      	beq.n	800372c <TIM_OC6_SetConfig+0x88>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a17      	ldr	r2, [pc, #92]	; (800376c <TIM_OC6_SetConfig+0xc8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00b      	beq.n	800372c <TIM_OC6_SetConfig+0x88>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a16      	ldr	r2, [pc, #88]	; (8003770 <TIM_OC6_SetConfig+0xcc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d007      	beq.n	800372c <TIM_OC6_SetConfig+0x88>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a15      	ldr	r2, [pc, #84]	; (8003774 <TIM_OC6_SetConfig+0xd0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_OC6_SetConfig+0x88>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a14      	ldr	r2, [pc, #80]	; (8003778 <TIM_OC6_SetConfig+0xd4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d109      	bne.n	8003740 <TIM_OC6_SetConfig+0x9c>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003732:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	029b      	lsls	r3, r3, #10
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	621a      	str	r2, [r3, #32]
} 
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40013400 	.word	0x40013400
 8003770:	40014000 	.word	0x40014000
 8003774:	40014400 	.word	0x40014400
 8003778:	40014800 	.word	0x40014800

0800377c <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e01d      	b.n	80037ca <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fe f882 	bl	80018ac <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f000 f854 	bl	8003868 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop

080037d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2201      	movs	r2, #1
 80037e4:	6839      	ldr	r1, [r7, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 faec 	bl	8003dc4 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a18      	ldr	r2, [pc, #96]	; (8003854 <HAL_TIM_PWM_Start+0x80>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_TIM_PWM_Start+0x4a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a17      	ldr	r2, [pc, #92]	; (8003858 <HAL_TIM_PWM_Start+0x84>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00e      	beq.n	800381e <HAL_TIM_PWM_Start+0x4a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a15      	ldr	r2, [pc, #84]	; (800385c <HAL_TIM_PWM_Start+0x88>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d009      	beq.n	800381e <HAL_TIM_PWM_Start+0x4a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a14      	ldr	r2, [pc, #80]	; (8003860 <HAL_TIM_PWM_Start+0x8c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_TIM_PWM_Start+0x4a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a12      	ldr	r2, [pc, #72]	; (8003864 <HAL_TIM_PWM_Start+0x90>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_TIM_PWM_Start+0x4e>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <HAL_TIM_PWM_Start+0x50>
 8003822:	2300      	movs	r3, #0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003836:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	6812      	ldr	r2, [r2, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
} 
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40012c00 	.word	0x40012c00
 8003858:	40013400 	.word	0x40013400
 800385c:	40014000 	.word	0x40014000
 8003860:	40014400 	.word	0x40014400
 8003864:	40014800 	.word	0x40014800

08003868 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM periheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a38      	ldr	r2, [pc, #224]	; (8003960 <TIM_Base_SetConfig+0xf8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00f      	beq.n	80038a4 <TIM_Base_SetConfig+0x3c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388a:	d00b      	beq.n	80038a4 <TIM_Base_SetConfig+0x3c>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a35      	ldr	r2, [pc, #212]	; (8003964 <TIM_Base_SetConfig+0xfc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d007      	beq.n	80038a4 <TIM_Base_SetConfig+0x3c>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a34      	ldr	r2, [pc, #208]	; (8003968 <TIM_Base_SetConfig+0x100>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <TIM_Base_SetConfig+0x3c>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a33      	ldr	r2, [pc, #204]	; (800396c <TIM_Base_SetConfig+0x104>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d108      	bne.n	80038b6 <TIM_Base_SetConfig+0x4e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a29      	ldr	r2, [pc, #164]	; (8003960 <TIM_Base_SetConfig+0xf8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01b      	beq.n	80038f6 <TIM_Base_SetConfig+0x8e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c4:	d017      	beq.n	80038f6 <TIM_Base_SetConfig+0x8e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a26      	ldr	r2, [pc, #152]	; (8003964 <TIM_Base_SetConfig+0xfc>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <TIM_Base_SetConfig+0x8e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a25      	ldr	r2, [pc, #148]	; (8003968 <TIM_Base_SetConfig+0x100>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00f      	beq.n	80038f6 <TIM_Base_SetConfig+0x8e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a24      	ldr	r2, [pc, #144]	; (800396c <TIM_Base_SetConfig+0x104>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <TIM_Base_SetConfig+0x8e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a23      	ldr	r2, [pc, #140]	; (8003970 <TIM_Base_SetConfig+0x108>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <TIM_Base_SetConfig+0x8e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a22      	ldr	r2, [pc, #136]	; (8003974 <TIM_Base_SetConfig+0x10c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0x8e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a21      	ldr	r2, [pc, #132]	; (8003978 <TIM_Base_SetConfig+0x110>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <TIM_Base_SetConfig+0xa0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a0f      	ldr	r2, [pc, #60]	; (8003960 <TIM_Base_SetConfig+0xf8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00f      	beq.n	8003946 <TIM_Base_SetConfig+0xde>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a10      	ldr	r2, [pc, #64]	; (800396c <TIM_Base_SetConfig+0x104>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00b      	beq.n	8003946 <TIM_Base_SetConfig+0xde>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a0f      	ldr	r2, [pc, #60]	; (8003970 <TIM_Base_SetConfig+0x108>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d007      	beq.n	8003946 <TIM_Base_SetConfig+0xde>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a0e      	ldr	r2, [pc, #56]	; (8003974 <TIM_Base_SetConfig+0x10c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d003      	beq.n	8003946 <TIM_Base_SetConfig+0xde>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a0d      	ldr	r2, [pc, #52]	; (8003978 <TIM_Base_SetConfig+0x110>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d103      	bne.n	800394e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	615a      	str	r2, [r3, #20]
}
 8003954:	bf00      	nop
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40012c00 	.word	0x40012c00
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800
 800396c:	40013400 	.word	0x40013400
 8003970:	40014000 	.word	0x40014000
 8003974:	40014400 	.word	0x40014400
 8003978:	40014800 	.word	0x40014800

0800397c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f023 0201 	bic.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0303 	bic.w	r3, r3, #3
 80039c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f023 0302 	bic.w	r3, r3, #2
 80039d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a2c      	ldr	r2, [pc, #176]	; (8003a94 <TIM_OC1_SetConfig+0x118>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00f      	beq.n	8003a08 <TIM_OC1_SetConfig+0x8c>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a2b      	ldr	r2, [pc, #172]	; (8003a98 <TIM_OC1_SetConfig+0x11c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00b      	beq.n	8003a08 <TIM_OC1_SetConfig+0x8c>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a2a      	ldr	r2, [pc, #168]	; (8003a9c <TIM_OC1_SetConfig+0x120>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d007      	beq.n	8003a08 <TIM_OC1_SetConfig+0x8c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a29      	ldr	r2, [pc, #164]	; (8003aa0 <TIM_OC1_SetConfig+0x124>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d003      	beq.n	8003a08 <TIM_OC1_SetConfig+0x8c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a28      	ldr	r2, [pc, #160]	; (8003aa4 <TIM_OC1_SetConfig+0x128>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10c      	bne.n	8003a22 <TIM_OC1_SetConfig+0xa6>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f023 0308 	bic.w	r3, r3, #8
 8003a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f023 0304 	bic.w	r3, r3, #4
 8003a20:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <TIM_OC1_SetConfig+0x118>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00f      	beq.n	8003a4a <TIM_OC1_SetConfig+0xce>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a1a      	ldr	r2, [pc, #104]	; (8003a98 <TIM_OC1_SetConfig+0x11c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00b      	beq.n	8003a4a <TIM_OC1_SetConfig+0xce>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a19      	ldr	r2, [pc, #100]	; (8003a9c <TIM_OC1_SetConfig+0x120>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d007      	beq.n	8003a4a <TIM_OC1_SetConfig+0xce>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <TIM_OC1_SetConfig+0x124>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d003      	beq.n	8003a4a <TIM_OC1_SetConfig+0xce>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <TIM_OC1_SetConfig+0x128>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d111      	bne.n	8003a6e <TIM_OC1_SetConfig+0xf2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	621a      	str	r2, [r3, #32]
} 
 8003a88:	bf00      	nop
 8003a8a:	371c      	adds	r7, #28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40013400 	.word	0x40013400
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	40014400 	.word	0x40014400
 8003aa4:	40014800 	.word	0x40014800

08003aa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f023 0210 	bic.w	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aee:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f023 0320 	bic.w	r3, r3, #32
 8003b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a28      	ldr	r2, [pc, #160]	; (8003bb4 <TIM_OC2_SetConfig+0x10c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_OC2_SetConfig+0x78>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <TIM_OC2_SetConfig+0x110>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10d      	bne.n	8003b3c <TIM_OC2_SetConfig+0x94>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b3a:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a1d      	ldr	r2, [pc, #116]	; (8003bb4 <TIM_OC2_SetConfig+0x10c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00f      	beq.n	8003b64 <TIM_OC2_SetConfig+0xbc>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a1c      	ldr	r2, [pc, #112]	; (8003bb8 <TIM_OC2_SetConfig+0x110>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00b      	beq.n	8003b64 <TIM_OC2_SetConfig+0xbc>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <TIM_OC2_SetConfig+0x114>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d007      	beq.n	8003b64 <TIM_OC2_SetConfig+0xbc>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a1a      	ldr	r2, [pc, #104]	; (8003bc0 <TIM_OC2_SetConfig+0x118>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <TIM_OC2_SetConfig+0xbc>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a19      	ldr	r2, [pc, #100]	; (8003bc4 <TIM_OC2_SetConfig+0x11c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d113      	bne.n	8003b8c <TIM_OC2_SetConfig+0xe4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	621a      	str	r2, [r3, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40013400 	.word	0x40013400
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40014400 	.word	0x40014400
 8003bc4:	40014800 	.word	0x40014800

08003bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0; 
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0303 	bic.w	r3, r3, #3
 8003c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a27      	ldr	r2, [pc, #156]	; (8003cd0 <TIM_OC3_SetConfig+0x108>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d003      	beq.n	8003c3e <TIM_OC3_SetConfig+0x76>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <TIM_OC3_SetConfig+0x10c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d10d      	bne.n	8003c5a <TIM_OC3_SetConfig+0x92>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c58:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <TIM_OC3_SetConfig+0x108>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00f      	beq.n	8003c82 <TIM_OC3_SetConfig+0xba>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <TIM_OC3_SetConfig+0x10c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00b      	beq.n	8003c82 <TIM_OC3_SetConfig+0xba>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a1a      	ldr	r2, [pc, #104]	; (8003cd8 <TIM_OC3_SetConfig+0x110>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d007      	beq.n	8003c82 <TIM_OC3_SetConfig+0xba>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <TIM_OC3_SetConfig+0x114>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d003      	beq.n	8003c82 <TIM_OC3_SetConfig+0xba>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a18      	ldr	r2, [pc, #96]	; (8003ce0 <TIM_OC3_SetConfig+0x118>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d113      	bne.n	8003caa <TIM_OC3_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	621a      	str	r2, [r3, #32]
}
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	40012c00 	.word	0x40012c00
 8003cd4:	40013400 	.word	0x40013400
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40014400 	.word	0x40014400
 8003ce0:	40014800 	.word	0x40014800

08003ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d22:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2a:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d3e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	031b      	lsls	r3, r3, #12
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a18      	ldr	r2, [pc, #96]	; (8003db0 <TIM_OC4_SetConfig+0xcc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00f      	beq.n	8003d74 <TIM_OC4_SetConfig+0x90>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <TIM_OC4_SetConfig+0xd0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00b      	beq.n	8003d74 <TIM_OC4_SetConfig+0x90>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a16      	ldr	r2, [pc, #88]	; (8003db8 <TIM_OC4_SetConfig+0xd4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d007      	beq.n	8003d74 <TIM_OC4_SetConfig+0x90>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a15      	ldr	r2, [pc, #84]	; (8003dbc <TIM_OC4_SetConfig+0xd8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <TIM_OC4_SetConfig+0x90>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <TIM_OC4_SetConfig+0xdc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d109      	bne.n	8003d88 <TIM_OC4_SetConfig+0xa4>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	019b      	lsls	r3, r3, #6
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	621a      	str	r2, [r3, #32]
}
 8003da2:	bf00      	nop
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40013400 	.word	0x40013400
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800

08003dc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a1a      	ldr	r2, [r3, #32]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	401a      	ands	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a1a      	ldr	r2, [r3, #32]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	fa01 f303 	lsl.w	r3, r1, r3
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	621a      	str	r2, [r3, #32]
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop

08003e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b092      	sub	sp, #72	; 0x48
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80f5 	beq.w	8004014 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e30:	4b60      	ldr	r3, [pc, #384]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10e      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3c:	4a5d      	ldr	r2, [pc, #372]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003e3e:	4b5d      	ldr	r3, [pc, #372]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e46:	61d3      	str	r3, [r2, #28]
 8003e48:	4b5a      	ldr	r3, [pc, #360]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e54:	2301      	movs	r3, #1
 8003e56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5a:	4b57      	ldr	r3, [pc, #348]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d118      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e66:	4a54      	ldr	r2, [pc, #336]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e68:	4b53      	ldr	r3, [pc, #332]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e72:	f004 f949 	bl	8008108 <HAL_GetTick>
 8003e76:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e78:	e008      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7a:	f004 f945 	bl	8008108 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b64      	cmp	r3, #100	; 0x64
 8003e86:	d901      	bls.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e187      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x390>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	4b4a      	ldr	r3, [pc, #296]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e98:	4b46      	ldr	r3, [pc, #280]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80a2 	beq.w	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	f000 809a 	beq.w	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eba:	4b3e      	ldr	r3, [pc, #248]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ec8:	637b      	str	r3, [r7, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	fa93 f3a3 	rbit	r3, r3
 8003ed0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003ed2:	69fb      	ldr	r3, [r7, #28]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ed4:	fab3 f383 	clz	r3, r3
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b37      	ldr	r3, [pc, #220]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ede:	4413      	add	r3, r2
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	fa93 f3a3 	rbit	r3, r3
 8003ef2:	623b      	str	r3, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ef6:	fab3 f383 	clz	r3, r3
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	461a      	mov	r2, r3
 8003efe:	4b2f      	ldr	r3, [pc, #188]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003f00:	4413      	add	r3, r2
 8003f02:	461a      	mov	r2, r3
 8003f04:	2300      	movs	r3, #0
 8003f06:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f08:	4a2a      	ldr	r2, [pc, #168]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f0c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d06a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f004 f8f6 	bl	8008108 <HAL_GetTick>
 8003f1c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1e:	e00a      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f20:	f004 f8f2 	bl	8008108 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e132      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x390>
 8003f36:	2302      	movs	r3, #2
 8003f38:	63bb      	str	r3, [r7, #56]	; 0x38
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	fa93 f3a3 	rbit	r3, r3
 8003f40:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003f42:	69bb      	ldr	r3, [r7, #24]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f44:	fab3 f383 	clz	r3, r3
 8003f48:	b25b      	sxtb	r3, r3
 8003f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f4e:	b25b      	sxtb	r3, r3
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d102      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f5a:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	e031      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f60:	2302      	movs	r3, #2
 8003f62:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	fa93 f3a3 	rbit	r3, r3
 8003f6a:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	fab3 f383 	clz	r3, r3
 8003f72:	b25b      	sxtb	r3, r3
 8003f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f78:	b25b      	sxtb	r3, r3
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d102      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	e01c      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	fab3 f383 	clz	r3, r3
 8003f9c:	b25b      	sxtb	r3, r3
 8003f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fa2:	b25b      	sxtb	r3, r3
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	095b      	lsrs	r3, r3, #5
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d108      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003fae:	4b01      	ldr	r3, [pc, #4]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	e007      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40007000 	.word	0x40007000
 8003fbc:	42420400 	.word	0x42420400
 8003fc0:	4b78      	ldr	r3, [pc, #480]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	62ba      	str	r2, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fca:	fa92 f2a2 	rbit	r2, r2
 8003fce:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	fab2 f282 	clz	r2, r2
 8003fd6:	b252      	sxtb	r2, r2
 8003fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fdc:	b252      	sxtb	r2, r2
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	f002 021f 	and.w	r2, r2, #31
 8003fe4:	40d3      	lsrs	r3, r2
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d098      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x114>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003fee:	496d      	ldr	r1, [pc, #436]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8003ff0:	4b6c      	ldr	r3, [pc, #432]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004000:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004004:	2b01      	cmp	r3, #1
 8004006:	d105      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x208>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004008:	4a66      	ldr	r2, [pc, #408]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800400a:	4b66      	ldr	r3, [pc, #408]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004012:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004020:	4960      	ldr	r1, [pc, #384]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004022:	4b60      	ldr	r3, [pc, #384]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f023 0203 	bic.w	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	4313      	orrs	r3, r2
 8004030:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800403e:	4959      	ldr	r1, [pc, #356]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004040:	4b58      	ldr	r3, [pc, #352]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800405c:	4951      	ldr	r1, [pc, #324]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800405e:	4b51      	ldr	r3, [pc, #324]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d008      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800407a:	494a      	ldr	r1, [pc, #296]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800407c:	4b49      	ldr	r3, [pc, #292]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	f023 0210 	bic.w	r2, r3, #16
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	4313      	orrs	r3, r2
 800408a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004098:	4942      	ldr	r1, [pc, #264]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800409a:	4b42      	ldr	r3, [pc, #264]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	4313      	orrs	r3, r2
 80040a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d008      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040b6:	493b      	ldr	r1, [pc, #236]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80040b8:	4b3a      	ldr	r3, [pc, #232]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	f023 0220 	bic.w	r2, r3, #32
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040d4:	4933      	ldr	r1, [pc, #204]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80040d6:	4b33      	ldr	r3, [pc, #204]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040f2:	492c      	ldr	r1, [pc, #176]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80040f4:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004110:	4924      	ldr	r1, [pc, #144]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004112:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	4313      	orrs	r3, r2
 8004120:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800412e:	491d      	ldr	r1, [pc, #116]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004130:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	4313      	orrs	r3, r2
 800413e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800414c:	4915      	ldr	r1, [pc, #84]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800414e:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	4313      	orrs	r3, r2
 800415c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800416a:	490e      	ldr	r1, [pc, #56]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800416c:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	4313      	orrs	r3, r2
 800417a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004188:	4906      	ldr	r1, [pc, #24]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800418a:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	4313      	orrs	r3, r2
 8004198:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3748      	adds	r7, #72	; 0x48
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40021000 	.word	0x40021000

080041a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a8:	b590      	push	{r4, r7, lr}
 80041aa:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	1d3b      	adds	r3, r7, #4
 80041b2:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 81e8 	beq.w	800459a <HAL_RCC_OscConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80041ca:	4bb8      	ldr	r3, [pc, #736]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f003 030c 	and.w	r3, r3, #12
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d00c      	beq.n	80041f0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041d6:	4bb5      	ldr	r3, [pc, #724]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	2b08      	cmp	r3, #8
 80041e0:	f040 8082 	bne.w	80042e8 <HAL_RCC_OscConfig+0x140>
 80041e4:	4bb1      	ldr	r3, [pc, #708]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d07b      	beq.n	80042e8 <HAL_RCC_OscConfig+0x140>
 80041f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041fc:	fa93 f2a3 	rbit	r2, r3
 8004200:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004204:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004206:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800420a:	681b      	ldr	r3, [r3, #0]
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800420c:	fab3 f383 	clz	r3, r3
 8004210:	b25b      	sxtb	r3, r3
 8004212:	f043 0320 	orr.w	r3, r3, #32
 8004216:	b25b      	sxtb	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	d102      	bne.n	8004228 <HAL_RCC_OscConfig+0x80>
 8004222:	4ba2      	ldr	r3, [pc, #648]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	e039      	b.n	800429c <HAL_RCC_OscConfig+0xf4>
 8004228:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800422c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004230:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004234:	fa93 f2a3 	rbit	r2, r3
 8004238:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800423c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800423e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	fab3 f383 	clz	r3, r3
 8004248:	b25b      	sxtb	r3, r3
 800424a:	f043 0320 	orr.w	r3, r3, #32
 800424e:	b25b      	sxtb	r3, r3
 8004250:	b2db      	uxtb	r3, r3
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d102      	bne.n	8004260 <HAL_RCC_OscConfig+0xb8>
 800425a:	4b94      	ldr	r3, [pc, #592]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	e01d      	b.n	800429c <HAL_RCC_OscConfig+0xf4>
 8004260:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004264:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800426c:	fa93 f2a3 	rbit	r2, r3
 8004270:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004274:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004276:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b25b      	sxtb	r3, r3
 8004282:	f043 0320 	orr.w	r3, r3, #32
 8004286:	b25b      	sxtb	r3, r3
 8004288:	b2db      	uxtb	r3, r3
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b04      	cmp	r3, #4
 8004290:	d102      	bne.n	8004298 <HAL_RCC_OscConfig+0xf0>
 8004292:	4b86      	ldr	r3, [pc, #536]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	e001      	b.n	800429c <HAL_RCC_OscConfig+0xf4>
 8004298:	4b84      	ldr	r3, [pc, #528]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042a0:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80042a8:	fa92 f1a2 	rbit	r1, r2
 80042ac:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80042b0:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80042b2:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	fab2 f282 	clz	r2, r2
 80042bc:	b252      	sxtb	r2, r2
 80042be:	f042 0220 	orr.w	r2, r2, #32
 80042c2:	b252      	sxtb	r2, r2
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	f002 021f 	and.w	r2, r2, #31
 80042ca:	40d3      	lsrs	r3, r2
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 8161 	beq.w	8004598 <HAL_RCC_OscConfig+0x3f0>
 80042d6:	1d3b      	adds	r3, r7, #4
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f040 815b 	bne.w	8004598 <HAL_RCC_OscConfig+0x3f0>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f001 b81a 	b.w	800531c <HAL_RCC_OscConfig+0x1174>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e8:	1d3b      	adds	r3, r7, #4
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f2:	d106      	bne.n	8004302 <HAL_RCC_OscConfig+0x15a>
 80042f4:	4a6d      	ldr	r2, [pc, #436]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 80042f6:	4b6d      	ldr	r3, [pc, #436]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	e030      	b.n	8004364 <HAL_RCC_OscConfig+0x1bc>
 8004302:	1d3b      	adds	r3, r7, #4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10c      	bne.n	8004326 <HAL_RCC_OscConfig+0x17e>
 800430c:	4a67      	ldr	r2, [pc, #412]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 800430e:	4b67      	ldr	r3, [pc, #412]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	4a64      	ldr	r2, [pc, #400]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 800431a:	4b64      	ldr	r3, [pc, #400]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	e01e      	b.n	8004364 <HAL_RCC_OscConfig+0x1bc>
 8004326:	1d3b      	adds	r3, r7, #4
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004330:	d10c      	bne.n	800434c <HAL_RCC_OscConfig+0x1a4>
 8004332:	4a5e      	ldr	r2, [pc, #376]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 8004334:	4b5d      	ldr	r3, [pc, #372]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	4a5b      	ldr	r2, [pc, #364]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 8004340:	4b5a      	ldr	r3, [pc, #360]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e00b      	b.n	8004364 <HAL_RCC_OscConfig+0x1bc>
 800434c:	4a57      	ldr	r2, [pc, #348]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 800434e:	4b57      	ldr	r3, [pc, #348]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4a54      	ldr	r2, [pc, #336]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 800435a:	4b54      	ldr	r3, [pc, #336]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004362:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004364:	4951      	ldr	r1, [pc, #324]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 8004366:	4b51      	ldr	r3, [pc, #324]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	f023 020f 	bic.w	r2, r3, #15
 800436e:	1d3b      	adds	r3, r7, #4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4313      	orrs	r3, r2
 8004376:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004378:	1d3b      	adds	r3, r7, #4
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8083 	beq.w	800448a <HAL_RCC_OscConfig+0x2e2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f003 fec0 	bl	8008108 <HAL_GetTick>
 8004388:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438c:	e00a      	b.n	80043a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800438e:	f003 febb 	bl	8008108 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	; 0x64
 800439c:	d902      	bls.n	80043a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	f000 bfbc 	b.w	800531c <HAL_RCC_OscConfig+0x1174>
 80043a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80043b0:	fa93 f2a3 	rbit	r2, r3
 80043b4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80043b8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80043ba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80043be:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c0:	fab3 f383 	clz	r3, r3
 80043c4:	b25b      	sxtb	r3, r3
 80043c6:	f043 0320 	orr.w	r3, r3, #32
 80043ca:	b25b      	sxtb	r3, r3
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	095b      	lsrs	r3, r3, #5
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d102      	bne.n	80043dc <HAL_RCC_OscConfig+0x234>
 80043d6:	4b35      	ldr	r3, [pc, #212]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	e039      	b.n	8004450 <HAL_RCC_OscConfig+0x2a8>
 80043dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043e0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80043e8:	fa93 f2a3 	rbit	r2, r3
 80043ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80043f0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80043f2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	fab3 f383 	clz	r3, r3
 80043fc:	b25b      	sxtb	r3, r3
 80043fe:	f043 0320 	orr.w	r3, r3, #32
 8004402:	b25b      	sxtb	r3, r3
 8004404:	b2db      	uxtb	r3, r3
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d102      	bne.n	8004414 <HAL_RCC_OscConfig+0x26c>
 800440e:	4b27      	ldr	r3, [pc, #156]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	e01d      	b.n	8004450 <HAL_RCC_OscConfig+0x2a8>
 8004414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004418:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004420:	fa93 f2a3 	rbit	r2, r3
 8004424:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004428:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800442a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	fab3 f383 	clz	r3, r3
 8004434:	b25b      	sxtb	r3, r3
 8004436:	f043 0320 	orr.w	r3, r3, #32
 800443a:	b25b      	sxtb	r3, r3
 800443c:	b2db      	uxtb	r3, r3
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b04      	cmp	r3, #4
 8004444:	d102      	bne.n	800444c <HAL_RCC_OscConfig+0x2a4>
 8004446:	4b19      	ldr	r3, [pc, #100]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	e001      	b.n	8004450 <HAL_RCC_OscConfig+0x2a8>
 800444c:	4b17      	ldr	r3, [pc, #92]	; (80044ac <HAL_RCC_OscConfig+0x304>)
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004454:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 800445c:	fa92 f1a2 	rbit	r1, r2
 8004460:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8004464:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004466:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	fab2 f282 	clz	r2, r2
 8004470:	b252      	sxtb	r2, r2
 8004472:	f042 0220 	orr.w	r2, r2, #32
 8004476:	b252      	sxtb	r2, r2
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	f002 021f 	and.w	r2, r2, #31
 800447e:	40d3      	lsrs	r3, r2
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d082      	beq.n	800438e <HAL_RCC_OscConfig+0x1e6>
 8004488:	e087      	b.n	800459a <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448a:	f003 fe3d 	bl	8008108 <HAL_GetTick>
 800448e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004492:	e00d      	b.n	80044b0 <HAL_RCC_OscConfig+0x308>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004494:	f003 fe38 	bl	8008108 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b64      	cmp	r3, #100	; 0x64
 80044a2:	d905      	bls.n	80044b0 <HAL_RCC_OscConfig+0x308>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	f000 bf39 	b.w	800531c <HAL_RCC_OscConfig+0x1174>
 80044aa:	bf00      	nop
 80044ac:	40021000 	.word	0x40021000
 80044b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044b4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80044bc:	fa93 f2a3 	rbit	r2, r3
 80044c0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80044c4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80044c6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80044ca:	681b      	ldr	r3, [r3, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044cc:	fab3 f383 	clz	r3, r3
 80044d0:	b25b      	sxtb	r3, r3
 80044d2:	f043 0320 	orr.w	r3, r3, #32
 80044d6:	b25b      	sxtb	r3, r3
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d102      	bne.n	80044e8 <HAL_RCC_OscConfig+0x340>
 80044e2:	4bb6      	ldr	r3, [pc, #728]	; (80047bc <HAL_RCC_OscConfig+0x614>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	e039      	b.n	800455c <HAL_RCC_OscConfig+0x3b4>
 80044e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044ec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80044f4:	fa93 f2a3 	rbit	r2, r3
 80044f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80044fc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80044fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	fab3 f383 	clz	r3, r3
 8004508:	b25b      	sxtb	r3, r3
 800450a:	f043 0320 	orr.w	r3, r3, #32
 800450e:	b25b      	sxtb	r3, r3
 8004510:	b2db      	uxtb	r3, r3
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d102      	bne.n	8004520 <HAL_RCC_OscConfig+0x378>
 800451a:	4ba8      	ldr	r3, [pc, #672]	; (80047bc <HAL_RCC_OscConfig+0x614>)
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	e01d      	b.n	800455c <HAL_RCC_OscConfig+0x3b4>
 8004520:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004524:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004528:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800452c:	fa93 f2a3 	rbit	r2, r3
 8004530:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004534:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004536:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	fab3 f383 	clz	r3, r3
 8004540:	b25b      	sxtb	r3, r3
 8004542:	f043 0320 	orr.w	r3, r3, #32
 8004546:	b25b      	sxtb	r3, r3
 8004548:	b2db      	uxtb	r3, r3
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b04      	cmp	r3, #4
 8004550:	d102      	bne.n	8004558 <HAL_RCC_OscConfig+0x3b0>
 8004552:	4b9a      	ldr	r3, [pc, #616]	; (80047bc <HAL_RCC_OscConfig+0x614>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	e001      	b.n	800455c <HAL_RCC_OscConfig+0x3b4>
 8004558:	4b98      	ldr	r3, [pc, #608]	; (80047bc <HAL_RCC_OscConfig+0x614>)
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004560:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004564:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004568:	fa92 f1a2 	rbit	r1, r2
 800456c:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8004570:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004572:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	fab2 f282 	clz	r2, r2
 800457c:	b252      	sxtb	r2, r2
 800457e:	f042 0220 	orr.w	r2, r2, #32
 8004582:	b252      	sxtb	r2, r2
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	f002 021f 	and.w	r2, r2, #31
 800458a:	40d3      	lsrs	r3, r2
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	f47f af7f 	bne.w	8004494 <HAL_RCC_OscConfig+0x2ec>
 8004596:	e000      	b.n	800459a <HAL_RCC_OscConfig+0x3f2>
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459a:	1d3b      	adds	r3, r7, #4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 81f4 	beq.w	8004992 <HAL_RCC_OscConfig+0x7ea>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80045aa:	4b84      	ldr	r3, [pc, #528]	; (80047bc <HAL_RCC_OscConfig+0x614>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00d      	beq.n	80045d2 <HAL_RCC_OscConfig+0x42a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80045b6:	4b81      	ldr	r3, [pc, #516]	; (80047bc <HAL_RCC_OscConfig+0x614>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b08      	cmp	r3, #8
 80045c0:	f040 8099 	bne.w	80046f6 <HAL_RCC_OscConfig+0x54e>
 80045c4:	4b7d      	ldr	r3, [pc, #500]	; (80047bc <HAL_RCC_OscConfig+0x614>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f040 8092 	bne.w	80046f6 <HAL_RCC_OscConfig+0x54e>
 80045d2:	2302      	movs	r3, #2
 80045d4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80045dc:	fa93 f2a3 	rbit	r2, r3
 80045e0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80045e4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80045e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80045ea:	681b      	ldr	r3, [r3, #0]
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ec:	fab3 f383 	clz	r3, r3
 80045f0:	b25b      	sxtb	r3, r3
 80045f2:	f043 0320 	orr.w	r3, r3, #32
 80045f6:	b25b      	sxtb	r3, r3
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d102      	bne.n	8004608 <HAL_RCC_OscConfig+0x460>
 8004602:	4b6e      	ldr	r3, [pc, #440]	; (80047bc <HAL_RCC_OscConfig+0x614>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	e037      	b.n	8004678 <HAL_RCC_OscConfig+0x4d0>
 8004608:	2302      	movs	r3, #2
 800460a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8004612:	fa93 f2a3 	rbit	r2, r3
 8004616:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800461a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800461c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	fab3 f383 	clz	r3, r3
 8004626:	b25b      	sxtb	r3, r3
 8004628:	f043 0320 	orr.w	r3, r3, #32
 800462c:	b25b      	sxtb	r3, r3
 800462e:	b2db      	uxtb	r3, r3
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d102      	bne.n	800463e <HAL_RCC_OscConfig+0x496>
 8004638:	4b60      	ldr	r3, [pc, #384]	; (80047bc <HAL_RCC_OscConfig+0x614>)
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	e01c      	b.n	8004678 <HAL_RCC_OscConfig+0x4d0>
 800463e:	2302      	movs	r3, #2
 8004640:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004644:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004648:	fa93 f2a3 	rbit	r2, r3
 800464c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004650:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004652:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	fab3 f383 	clz	r3, r3
 800465c:	b25b      	sxtb	r3, r3
 800465e:	f043 0320 	orr.w	r3, r3, #32
 8004662:	b25b      	sxtb	r3, r3
 8004664:	b2db      	uxtb	r3, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b04      	cmp	r3, #4
 800466c:	d102      	bne.n	8004674 <HAL_RCC_OscConfig+0x4cc>
 800466e:	4b53      	ldr	r3, [pc, #332]	; (80047bc <HAL_RCC_OscConfig+0x614>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	e001      	b.n	8004678 <HAL_RCC_OscConfig+0x4d0>
 8004674:	4b51      	ldr	r3, [pc, #324]	; (80047bc <HAL_RCC_OscConfig+0x614>)
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	2202      	movs	r2, #2
 800467a:	f8c7 2190 	str.w	r2, [r7, #400]	; 0x190
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8004682:	fa92 f1a2 	rbit	r1, r2
 8004686:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800468a:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800468c:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	fab2 f282 	clz	r2, r2
 8004696:	b252      	sxtb	r2, r2
 8004698:	f042 0220 	orr.w	r2, r2, #32
 800469c:	b252      	sxtb	r2, r2
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	f002 021f 	and.w	r2, r2, #31
 80046a4:	40d3      	lsrs	r3, r2
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d007      	beq.n	80046be <HAL_RCC_OscConfig+0x516>
 80046ae:	1d3b      	adds	r3, r7, #4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d002      	beq.n	80046be <HAL_RCC_OscConfig+0x516>
      {
        return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	f000 be2f 	b.w	800531c <HAL_RCC_OscConfig+0x1174>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046be:	4c3f      	ldr	r4, [pc, #252]	; (80047bc <HAL_RCC_OscConfig+0x614>)
 80046c0:	4b3e      	ldr	r3, [pc, #248]	; (80047bc <HAL_RCC_OscConfig+0x614>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046c8:	1d3b      	adds	r3, r7, #4
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6959      	ldr	r1, [r3, #20]
 80046ce:	23f8      	movs	r3, #248	; 0xf8
 80046d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80046d8:	fa93 f0a3 	rbit	r0, r3
 80046dc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80046e0:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80046e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	fab3 f383 	clz	r3, r3
 80046ec:	fa01 f303 	lsl.w	r3, r1, r3
 80046f0:	4313      	orrs	r3, r2
 80046f2:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046f4:	e14d      	b.n	8004992 <HAL_RCC_OscConfig+0x7ea>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046f6:	1d3b      	adds	r3, r7, #4
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80b3 	beq.w	8004868 <HAL_RCC_OscConfig+0x6c0>
 8004702:	2301      	movs	r3, #1
 8004704:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004708:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800470c:	fa93 f2a3 	rbit	r2, r3
 8004710:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004714:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004716:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800471a:	681b      	ldr	r3, [r3, #0]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800471c:	fab3 f383 	clz	r3, r3
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004726:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800472a:	461a      	mov	r2, r3
 800472c:	2301      	movs	r3, #1
 800472e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f003 fcea 	bl	8008108 <HAL_GetTick>
 8004734:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x5a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800473a:	f003 fce5 	bl	8008108 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d902      	bls.n	8004750 <HAL_RCC_OscConfig+0x5a8>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	f000 bde6 	b.w	800531c <HAL_RCC_OscConfig+0x1174>
 8004750:	2302      	movs	r3, #2
 8004752:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800475a:	fa93 f2a3 	rbit	r2, r3
 800475e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004762:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004764:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004768:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476a:	fab3 f383 	clz	r3, r3
 800476e:	b25b      	sxtb	r3, r3
 8004770:	f043 0320 	orr.w	r3, r3, #32
 8004774:	b25b      	sxtb	r3, r3
 8004776:	b2db      	uxtb	r3, r3
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	d102      	bne.n	8004786 <HAL_RCC_OscConfig+0x5de>
 8004780:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <HAL_RCC_OscConfig+0x614>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	e039      	b.n	80047fa <HAL_RCC_OscConfig+0x652>
 8004786:	2302      	movs	r3, #2
 8004788:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004790:	fa93 f2a3 	rbit	r2, r3
 8004794:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004798:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800479a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	fab3 f383 	clz	r3, r3
 80047a4:	b25b      	sxtb	r3, r3
 80047a6:	f043 0320 	orr.w	r3, r3, #32
 80047aa:	b25b      	sxtb	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d104      	bne.n	80047c0 <HAL_RCC_OscConfig+0x618>
 80047b6:	4b01      	ldr	r3, [pc, #4]	; (80047bc <HAL_RCC_OscConfig+0x614>)
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	e01e      	b.n	80047fa <HAL_RCC_OscConfig+0x652>
 80047bc:	40021000 	.word	0x40021000
 80047c0:	2302      	movs	r3, #2
 80047c2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80047ca:	fa93 f2a3 	rbit	r2, r3
 80047ce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80047d2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80047d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	fab3 f383 	clz	r3, r3
 80047de:	b25b      	sxtb	r3, r3
 80047e0:	f043 0320 	orr.w	r3, r3, #32
 80047e4:	b25b      	sxtb	r3, r3
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d102      	bne.n	80047f6 <HAL_RCC_OscConfig+0x64e>
 80047f0:	4bb9      	ldr	r3, [pc, #740]	; (8004ad8 <HAL_RCC_OscConfig+0x930>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	e001      	b.n	80047fa <HAL_RCC_OscConfig+0x652>
 80047f6:	4bb8      	ldr	r3, [pc, #736]	; (8004ad8 <HAL_RCC_OscConfig+0x930>)
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fa:	2202      	movs	r2, #2
 80047fc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004800:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004804:	fa92 f1a2 	rbit	r1, r2
 8004808:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800480c:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800480e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	fab2 f282 	clz	r2, r2
 8004818:	b252      	sxtb	r2, r2
 800481a:	f042 0220 	orr.w	r2, r2, #32
 800481e:	b252      	sxtb	r2, r2
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	f002 021f 	and.w	r2, r2, #31
 8004826:	40d3      	lsrs	r3, r2
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d084      	beq.n	800473a <HAL_RCC_OscConfig+0x592>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004830:	4ca9      	ldr	r4, [pc, #676]	; (8004ad8 <HAL_RCC_OscConfig+0x930>)
 8004832:	4ba9      	ldr	r3, [pc, #676]	; (8004ad8 <HAL_RCC_OscConfig+0x930>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800483a:	1d3b      	adds	r3, r7, #4
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6959      	ldr	r1, [r3, #20]
 8004840:	23f8      	movs	r3, #248	; 0xf8
 8004842:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004846:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800484a:	fa93 f0a3 	rbit	r0, r3
 800484e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004852:	6018      	str	r0, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004854:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	fab3 f383 	clz	r3, r3
 800485e:	fa01 f303 	lsl.w	r3, r1, r3
 8004862:	4313      	orrs	r3, r2
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	e094      	b.n	8004992 <HAL_RCC_OscConfig+0x7ea>
 8004868:	2301      	movs	r3, #1
 800486a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004872:	fa93 f2a3 	rbit	r2, r3
 8004876:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800487a:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800487c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004880:	681b      	ldr	r3, [r3, #0]
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004882:	fab3 f383 	clz	r3, r3
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800488c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004890:	461a      	mov	r2, r3
 8004892:	2300      	movs	r3, #0
 8004894:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004896:	f003 fc37 	bl	8008108 <HAL_GetTick>
 800489a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489e:	e00a      	b.n	80048b6 <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048a0:	f003 fc32 	bl	8008108 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d902      	bls.n	80048b6 <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	f000 bd33 	b.w	800531c <HAL_RCC_OscConfig+0x1174>
 80048b6:	2302      	movs	r3, #2
 80048b8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80048c0:	fa93 f2a3 	rbit	r2, r3
 80048c4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80048c8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80048ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80048ce:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d0:	fab3 f383 	clz	r3, r3
 80048d4:	b25b      	sxtb	r3, r3
 80048d6:	f043 0320 	orr.w	r3, r3, #32
 80048da:	b25b      	sxtb	r3, r3
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	095b      	lsrs	r3, r3, #5
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d102      	bne.n	80048ec <HAL_RCC_OscConfig+0x744>
 80048e6:	4b7c      	ldr	r3, [pc, #496]	; (8004ad8 <HAL_RCC_OscConfig+0x930>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	e037      	b.n	800495c <HAL_RCC_OscConfig+0x7b4>
 80048ec:	2302      	movs	r3, #2
 80048ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80048f6:	fa93 f2a3 	rbit	r2, r3
 80048fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80048fe:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004900:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	b25b      	sxtb	r3, r3
 800490c:	f043 0320 	orr.w	r3, r3, #32
 8004910:	b25b      	sxtb	r3, r3
 8004912:	b2db      	uxtb	r3, r3
 8004914:	095b      	lsrs	r3, r3, #5
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d102      	bne.n	8004922 <HAL_RCC_OscConfig+0x77a>
 800491c:	4b6e      	ldr	r3, [pc, #440]	; (8004ad8 <HAL_RCC_OscConfig+0x930>)
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	e01c      	b.n	800495c <HAL_RCC_OscConfig+0x7b4>
 8004922:	2302      	movs	r3, #2
 8004924:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004928:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800492c:	fa93 f2a3 	rbit	r2, r3
 8004930:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004934:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004936:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	fab3 f383 	clz	r3, r3
 8004940:	b25b      	sxtb	r3, r3
 8004942:	f043 0320 	orr.w	r3, r3, #32
 8004946:	b25b      	sxtb	r3, r3
 8004948:	b2db      	uxtb	r3, r3
 800494a:	095b      	lsrs	r3, r3, #5
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b04      	cmp	r3, #4
 8004950:	d102      	bne.n	8004958 <HAL_RCC_OscConfig+0x7b0>
 8004952:	4b61      	ldr	r3, [pc, #388]	; (8004ad8 <HAL_RCC_OscConfig+0x930>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	e001      	b.n	800495c <HAL_RCC_OscConfig+0x7b4>
 8004958:	4b5f      	ldr	r3, [pc, #380]	; (8004ad8 <HAL_RCC_OscConfig+0x930>)
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	2202      	movs	r2, #2
 800495e:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8004966:	fa92 f1a2 	rbit	r1, r2
 800496a:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800496e:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004970:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8004974:	6812      	ldr	r2, [r2, #0]
 8004976:	fab2 f282 	clz	r2, r2
 800497a:	b252      	sxtb	r2, r2
 800497c:	f042 0220 	orr.w	r2, r2, #32
 8004980:	b252      	sxtb	r2, r2
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	f002 021f 	and.w	r2, r2, #31
 8004988:	40d3      	lsrs	r3, r2
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d186      	bne.n	80048a0 <HAL_RCC_OscConfig+0x6f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004992:	1d3b      	adds	r3, r7, #4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8132 	beq.w	8004c06 <HAL_RCC_OscConfig+0xa5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049a2:	1d3b      	adds	r3, r7, #4
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8099 	beq.w	8004ae0 <HAL_RCC_OscConfig+0x938>
 80049ae:	2301      	movs	r3, #1
 80049b0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80049b8:	fa93 f2a3 	rbit	r2, r3
 80049bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80049c0:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80049c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80049c6:	681b      	ldr	r3, [r3, #0]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c8:	fab3 f383 	clz	r3, r3
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	461a      	mov	r2, r3
 80049d0:	4b42      	ldr	r3, [pc, #264]	; (8004adc <HAL_RCC_OscConfig+0x934>)
 80049d2:	4413      	add	r3, r2
 80049d4:	461a      	mov	r2, r3
 80049d6:	2301      	movs	r3, #1
 80049d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049da:	f003 fb95 	bl	8008108 <HAL_GetTick>
 80049de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e2:	e00a      	b.n	80049fa <HAL_RCC_OscConfig+0x852>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e4:	f003 fb90 	bl	8008108 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d902      	bls.n	80049fa <HAL_RCC_OscConfig+0x852>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	f000 bc91 	b.w	800531c <HAL_RCC_OscConfig+0x1174>
 80049fa:	2302      	movs	r3, #2
 80049fc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a00:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004a04:	fa93 f2a3 	rbit	r2, r3
 8004a08:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004a0c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004a0e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004a12:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a14:	fab3 f383 	clz	r3, r3
 8004a18:	b25b      	sxtb	r3, r3
 8004a1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a1e:	b25b      	sxtb	r3, r3
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d102      	bne.n	8004a30 <HAL_RCC_OscConfig+0x888>
 8004a2a:	4b2b      	ldr	r3, [pc, #172]	; (8004ad8 <HAL_RCC_OscConfig+0x930>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	e037      	b.n	8004aa0 <HAL_RCC_OscConfig+0x8f8>
 8004a30:	2302      	movs	r3, #2
 8004a32:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a36:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004a3a:	fa93 f2a3 	rbit	r2, r3
 8004a3e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004a42:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004a44:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	fab3 f383 	clz	r3, r3
 8004a4e:	b25b      	sxtb	r3, r3
 8004a50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a54:	b25b      	sxtb	r3, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d102      	bne.n	8004a66 <HAL_RCC_OscConfig+0x8be>
 8004a60:	4b1d      	ldr	r3, [pc, #116]	; (8004ad8 <HAL_RCC_OscConfig+0x930>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	e01c      	b.n	8004aa0 <HAL_RCC_OscConfig+0x8f8>
 8004a66:	2302      	movs	r3, #2
 8004a68:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004a70:	fa93 f2a3 	rbit	r2, r3
 8004a74:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004a78:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004a7a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	fab3 f383 	clz	r3, r3
 8004a84:	b25b      	sxtb	r3, r3
 8004a86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a8a:	b25b      	sxtb	r3, r3
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d102      	bne.n	8004a9c <HAL_RCC_OscConfig+0x8f4>
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <HAL_RCC_OscConfig+0x930>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	e001      	b.n	8004aa0 <HAL_RCC_OscConfig+0x8f8>
 8004a9c:	4b0e      	ldr	r3, [pc, #56]	; (8004ad8 <HAL_RCC_OscConfig+0x930>)
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004aaa:	fa92 f1a2 	rbit	r1, r2
 8004aae:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004ab2:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004ab4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	fab2 f282 	clz	r2, r2
 8004abe:	b252      	sxtb	r2, r2
 8004ac0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004ac4:	b252      	sxtb	r2, r2
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	f002 021f 	and.w	r2, r2, #31
 8004acc:	40d3      	lsrs	r3, r2
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d086      	beq.n	80049e4 <HAL_RCC_OscConfig+0x83c>
 8004ad6:	e096      	b.n	8004c06 <HAL_RCC_OscConfig+0xa5e>
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	42420480 	.word	0x42420480
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8004aea:	fa93 f2a3 	rbit	r2, r3
 8004aee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004af2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004af4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004af8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004afa:	fab3 f383 	clz	r3, r3
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	461a      	mov	r2, r3
 8004b02:	4bb5      	ldr	r3, [pc, #724]	; (8004dd8 <HAL_RCC_OscConfig+0xc30>)
 8004b04:	4413      	add	r3, r2
 8004b06:	461a      	mov	r2, r3
 8004b08:	2300      	movs	r3, #0
 8004b0a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0c:	f003 fafc 	bl	8008108 <HAL_GetTick>
 8004b10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b14:	e009      	b.n	8004b2a <HAL_RCC_OscConfig+0x982>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b16:	f003 faf7 	bl	8008108 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x982>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e3f8      	b.n	800531c <HAL_RCC_OscConfig+0x1174>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b30:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8004b34:	fa93 f2a3 	rbit	r2, r3
 8004b38:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004b3c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004b3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004b42:	681b      	ldr	r3, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b44:	fab3 f383 	clz	r3, r3
 8004b48:	b25b      	sxtb	r3, r3
 8004b4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b4e:	b25b      	sxtb	r3, r3
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d102      	bne.n	8004b60 <HAL_RCC_OscConfig+0x9b8>
 8004b5a:	4ba0      	ldr	r3, [pc, #640]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	e037      	b.n	8004bd0 <HAL_RCC_OscConfig+0xa28>
 8004b60:	2302      	movs	r3, #2
 8004b62:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b66:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004b6a:	fa93 f2a3 	rbit	r2, r3
 8004b6e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004b72:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004b74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	fab3 f383 	clz	r3, r3
 8004b7e:	b25b      	sxtb	r3, r3
 8004b80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b84:	b25b      	sxtb	r3, r3
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d102      	bne.n	8004b96 <HAL_RCC_OscConfig+0x9ee>
 8004b90:	4b92      	ldr	r3, [pc, #584]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	e01c      	b.n	8004bd0 <HAL_RCC_OscConfig+0xa28>
 8004b96:	2302      	movs	r3, #2
 8004b98:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004ba0:	fa93 f2a3 	rbit	r2, r3
 8004ba4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004ba8:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004baa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	fab3 f383 	clz	r3, r3
 8004bb4:	b25b      	sxtb	r3, r3
 8004bb6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004bba:	b25b      	sxtb	r3, r3
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d102      	bne.n	8004bcc <HAL_RCC_OscConfig+0xa24>
 8004bc6:	4b85      	ldr	r3, [pc, #532]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	e001      	b.n	8004bd0 <HAL_RCC_OscConfig+0xa28>
 8004bcc:	4b83      	ldr	r3, [pc, #524]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8004bda:	fa92 f1a2 	rbit	r1, r2
 8004bde:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004be2:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004be4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	fab2 f282 	clz	r2, r2
 8004bee:	b252      	sxtb	r2, r2
 8004bf0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004bf4:	b252      	sxtb	r2, r2
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	f002 021f 	and.w	r2, r2, #31
 8004bfc:	40d3      	lsrs	r3, r2
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d187      	bne.n	8004b16 <HAL_RCC_OscConfig+0x96e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c06:	1d3b      	adds	r3, r7, #4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 818f 	beq.w	8004f34 <HAL_RCC_OscConfig+0xd8c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c16:	2300      	movs	r3, #0
 8004c18:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c1c:	4b6f      	ldr	r3, [pc, #444]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d112      	bne.n	8004c4e <HAL_RCC_OscConfig+0xaa6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c28:	4a6c      	ldr	r2, [pc, #432]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004c2a:	4b6c      	ldr	r3, [pc, #432]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c32:	61d3      	str	r3, [r2, #28]
 8004c34:	4b69      	ldr	r3, [pc, #420]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004c3c:	f107 030c 	add.w	r3, r7, #12
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	f107 030c 	add.w	r3, r7, #12
 8004c46:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4e:	4b64      	ldr	r3, [pc, #400]	; (8004de0 <HAL_RCC_OscConfig+0xc38>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d11a      	bne.n	8004c90 <HAL_RCC_OscConfig+0xae8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c5a:	4a61      	ldr	r2, [pc, #388]	; (8004de0 <HAL_RCC_OscConfig+0xc38>)
 8004c5c:	4b60      	ldr	r3, [pc, #384]	; (8004de0 <HAL_RCC_OscConfig+0xc38>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c66:	f003 fa4f 	bl	8008108 <HAL_GetTick>
 8004c6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6e:	e009      	b.n	8004c84 <HAL_RCC_OscConfig+0xadc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c70:	f003 fa4a 	bl	8008108 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b64      	cmp	r3, #100	; 0x64
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0xadc>
        {
          return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e34b      	b.n	800531c <HAL_RCC_OscConfig+0x1174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c84:	4b56      	ldr	r3, [pc, #344]	; (8004de0 <HAL_RCC_OscConfig+0xc38>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ef      	beq.n	8004c70 <HAL_RCC_OscConfig+0xac8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c90:	1d3b      	adds	r3, r7, #4
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d106      	bne.n	8004ca8 <HAL_RCC_OscConfig+0xb00>
 8004c9a:	4a50      	ldr	r2, [pc, #320]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004c9c:	4b4f      	ldr	r3, [pc, #316]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	6213      	str	r3, [r2, #32]
 8004ca6:	e02f      	b.n	8004d08 <HAL_RCC_OscConfig+0xb60>
 8004ca8:	1d3b      	adds	r3, r7, #4
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10c      	bne.n	8004ccc <HAL_RCC_OscConfig+0xb24>
 8004cb2:	4a4a      	ldr	r2, [pc, #296]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004cb4:	4b49      	ldr	r3, [pc, #292]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	6213      	str	r3, [r2, #32]
 8004cbe:	4a47      	ldr	r2, [pc, #284]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004cc0:	4b46      	ldr	r3, [pc, #280]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f023 0304 	bic.w	r3, r3, #4
 8004cc8:	6213      	str	r3, [r2, #32]
 8004cca:	e01d      	b.n	8004d08 <HAL_RCC_OscConfig+0xb60>
 8004ccc:	1d3b      	adds	r3, r7, #4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b05      	cmp	r3, #5
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0xb48>
 8004cd6:	4a41      	ldr	r2, [pc, #260]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004cd8:	4b40      	ldr	r3, [pc, #256]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f043 0304 	orr.w	r3, r3, #4
 8004ce0:	6213      	str	r3, [r2, #32]
 8004ce2:	4a3e      	ldr	r2, [pc, #248]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004ce4:	4b3d      	ldr	r3, [pc, #244]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	6213      	str	r3, [r2, #32]
 8004cee:	e00b      	b.n	8004d08 <HAL_RCC_OscConfig+0xb60>
 8004cf0:	4a3a      	ldr	r2, [pc, #232]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004cf2:	4b3a      	ldr	r3, [pc, #232]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	6213      	str	r3, [r2, #32]
 8004cfc:	4a37      	ldr	r2, [pc, #220]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004cfe:	4b37      	ldr	r3, [pc, #220]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	f023 0304 	bic.w	r3, r3, #4
 8004d06:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d08:	1d3b      	adds	r3, r7, #4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 8087 	beq.w	8004e22 <HAL_RCC_OscConfig+0xc7a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d14:	f003 f9f8 	bl	8008108 <HAL_GetTick>
 8004d18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1c:	e00b      	b.n	8004d36 <HAL_RCC_OscConfig+0xb8e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d1e:	f003 f9f3 	bl	8008108 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0xb8e>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e2f2      	b.n	800531c <HAL_RCC_OscConfig+0x1174>
 8004d36:	2302      	movs	r3, #2
 8004d38:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004d40:	fa93 f2a3 	rbit	r2, r3
 8004d44:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004d48:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004d4a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004d4e:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d50:	fab3 f383 	clz	r3, r3
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d5a:	b25b      	sxtb	r3, r3
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	095b      	lsrs	r3, r3, #5
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d102      	bne.n	8004d6c <HAL_RCC_OscConfig+0xbc4>
 8004d66:	4b1d      	ldr	r3, [pc, #116]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	e03d      	b.n	8004de8 <HAL_RCC_OscConfig+0xc40>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004d76:	fa93 f2a3 	rbit	r2, r3
 8004d7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d7e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004d80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	fab3 f383 	clz	r3, r3
 8004d8a:	b25b      	sxtb	r3, r3
 8004d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d90:	b25b      	sxtb	r3, r3
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d102      	bne.n	8004da2 <HAL_RCC_OscConfig+0xbfa>
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	e022      	b.n	8004de8 <HAL_RCC_OscConfig+0xc40>
 8004da2:	2302      	movs	r3, #2
 8004da4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004dac:	fa93 f2a3 	rbit	r2, r3
 8004db0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004db4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004db6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	fab3 f383 	clz	r3, r3
 8004dc0:	b25b      	sxtb	r3, r3
 8004dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dc6:	b25b      	sxtb	r3, r3
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d108      	bne.n	8004de4 <HAL_RCC_OscConfig+0xc3c>
 8004dd2:	4b02      	ldr	r3, [pc, #8]	; (8004ddc <HAL_RCC_OscConfig+0xc34>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	e007      	b.n	8004de8 <HAL_RCC_OscConfig+0xc40>
 8004dd8:	42420480 	.word	0x42420480
 8004ddc:	40021000 	.word	0x40021000
 8004de0:	40007000 	.word	0x40007000
 8004de4:	4bbf      	ldr	r3, [pc, #764]	; (80050e4 <HAL_RCC_OscConfig+0xf3c>)
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	2202      	movs	r2, #2
 8004dea:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dee:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8004df2:	fa92 f1a2 	rbit	r1, r2
 8004df6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004dfa:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004dfc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	fab2 f282 	clz	r2, r2
 8004e06:	b252      	sxtb	r2, r2
 8004e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e0c:	b252      	sxtb	r2, r2
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	f002 021f 	and.w	r2, r2, #31
 8004e14:	40d3      	lsrs	r3, r2
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f43f af7f 	beq.w	8004d1e <HAL_RCC_OscConfig+0xb76>
 8004e20:	e07e      	b.n	8004f20 <HAL_RCC_OscConfig+0xd78>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e22:	f003 f971 	bl	8008108 <HAL_GetTick>
 8004e26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2a:	e00b      	b.n	8004e44 <HAL_RCC_OscConfig+0xc9c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2c:	f003 f96c 	bl	8008108 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0xc9c>
        {
          return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e26b      	b.n	800531c <HAL_RCC_OscConfig+0x1174>
 8004e44:	2302      	movs	r3, #2
 8004e46:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004e4e:	fa93 f2a3 	rbit	r2, r3
 8004e52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004e56:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004e58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004e5c:	681b      	ldr	r3, [r3, #0]
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e5e:	fab3 f383 	clz	r3, r3
 8004e62:	b25b      	sxtb	r3, r3
 8004e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e68:	b25b      	sxtb	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	095b      	lsrs	r3, r3, #5
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d102      	bne.n	8004e7a <HAL_RCC_OscConfig+0xcd2>
 8004e74:	4b9b      	ldr	r3, [pc, #620]	; (80050e4 <HAL_RCC_OscConfig+0xf3c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	e037      	b.n	8004eea <HAL_RCC_OscConfig+0xd42>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e84:	fa93 f2a3 	rbit	r2, r3
 8004e88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e8c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004e8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	fab3 f383 	clz	r3, r3
 8004e98:	b25b      	sxtb	r3, r3
 8004e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e9e:	b25b      	sxtb	r3, r3
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d102      	bne.n	8004eb0 <HAL_RCC_OscConfig+0xd08>
 8004eaa:	4b8e      	ldr	r3, [pc, #568]	; (80050e4 <HAL_RCC_OscConfig+0xf3c>)
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	e01c      	b.n	8004eea <HAL_RCC_OscConfig+0xd42>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004eba:	fa93 f2a3 	rbit	r2, r3
 8004ebe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004ec2:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004ec4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	fab3 f383 	clz	r3, r3
 8004ece:	b25b      	sxtb	r3, r3
 8004ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ed4:	b25b      	sxtb	r3, r3
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	095b      	lsrs	r3, r3, #5
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d102      	bne.n	8004ee6 <HAL_RCC_OscConfig+0xd3e>
 8004ee0:	4b80      	ldr	r3, [pc, #512]	; (80050e4 <HAL_RCC_OscConfig+0xf3c>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	e001      	b.n	8004eea <HAL_RCC_OscConfig+0xd42>
 8004ee6:	4b7f      	ldr	r3, [pc, #508]	; (80050e4 <HAL_RCC_OscConfig+0xf3c>)
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	2202      	movs	r2, #2
 8004eec:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004ef4:	fa92 f1a2 	rbit	r1, r2
 8004ef8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004efc:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004efe:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	fab2 f282 	clz	r2, r2
 8004f08:	b252      	sxtb	r2, r2
 8004f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f0e:	b252      	sxtb	r2, r2
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	f002 021f 	and.w	r2, r2, #31
 8004f16:	40d3      	lsrs	r3, r2
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d185      	bne.n	8004e2c <HAL_RCC_OscConfig+0xc84>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f20:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d105      	bne.n	8004f34 <HAL_RCC_OscConfig+0xd8c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f28:	4a6e      	ldr	r2, [pc, #440]	; (80050e4 <HAL_RCC_OscConfig+0xf3c>)
 8004f2a:	4b6e      	ldr	r3, [pc, #440]	; (80050e4 <HAL_RCC_OscConfig+0xf3c>)
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f32:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f34:	1d3b      	adds	r3, r7, #4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 81ed 	beq.w	800531a <HAL_RCC_OscConfig+0x1172>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f40:	4b68      	ldr	r3, [pc, #416]	; (80050e4 <HAL_RCC_OscConfig+0xf3c>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f003 030c 	and.w	r3, r3, #12
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	f000 81e4 	beq.w	8005316 <HAL_RCC_OscConfig+0x116e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f4e:	1d3b      	adds	r3, r7, #4
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	f040 8144 	bne.w	80051e2 <HAL_RCC_OscConfig+0x103a>
 8004f5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f5e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f62:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004f66:	fa93 f2a3 	rbit	r2, r3
 8004f6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f6e:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004f70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f74:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f76:	fab3 f383 	clz	r3, r3
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8004f80:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8004f84:	461a      	mov	r2, r3
 8004f86:	2300      	movs	r3, #0
 8004f88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8a:	f003 f8bd 	bl	8008108 <HAL_GetTick>
 8004f8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f92:	e009      	b.n	8004fa8 <HAL_RCC_OscConfig+0xe00>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f94:	f003 f8b8 	bl	8008108 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0xe00>
          {
            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e1b9      	b.n	800531c <HAL_RCC_OscConfig+0x1174>
 8004fa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fac:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004fb4:	fa93 f2a3 	rbit	r2, r3
 8004fb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004fbc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004fbe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004fc2:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fc4:	fab3 f383 	clz	r3, r3
 8004fc8:	b25b      	sxtb	r3, r3
 8004fca:	f043 0320 	orr.w	r3, r3, #32
 8004fce:	b25b      	sxtb	r3, r3
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d102      	bne.n	8004fe0 <HAL_RCC_OscConfig+0xe38>
 8004fda:	4b42      	ldr	r3, [pc, #264]	; (80050e4 <HAL_RCC_OscConfig+0xf3c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	e039      	b.n	8005054 <HAL_RCC_OscConfig+0xeac>
 8004fe0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fe4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004fec:	fa93 f2a3 	rbit	r2, r3
 8004ff0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ff4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004ff6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	fab3 f383 	clz	r3, r3
 8005000:	b25b      	sxtb	r3, r3
 8005002:	f043 0320 	orr.w	r3, r3, #32
 8005006:	b25b      	sxtb	r3, r3
 8005008:	b2db      	uxtb	r3, r3
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d102      	bne.n	8005018 <HAL_RCC_OscConfig+0xe70>
 8005012:	4b34      	ldr	r3, [pc, #208]	; (80050e4 <HAL_RCC_OscConfig+0xf3c>)
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	e01d      	b.n	8005054 <HAL_RCC_OscConfig+0xeac>
 8005018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800501c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005020:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005024:	fa93 f2a3 	rbit	r2, r3
 8005028:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800502c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800502e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	fab3 f383 	clz	r3, r3
 8005038:	b25b      	sxtb	r3, r3
 800503a:	f043 0320 	orr.w	r3, r3, #32
 800503e:	b25b      	sxtb	r3, r3
 8005040:	b2db      	uxtb	r3, r3
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b04      	cmp	r3, #4
 8005048:	d102      	bne.n	8005050 <HAL_RCC_OscConfig+0xea8>
 800504a:	4b26      	ldr	r3, [pc, #152]	; (80050e4 <HAL_RCC_OscConfig+0xf3c>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	e001      	b.n	8005054 <HAL_RCC_OscConfig+0xeac>
 8005050:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <HAL_RCC_OscConfig+0xf3c>)
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005058:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8005060:	fa92 f1a2 	rbit	r1, r2
 8005064:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005068:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800506a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	fab2 f282 	clz	r2, r2
 8005074:	b252      	sxtb	r2, r2
 8005076:	f042 0220 	orr.w	r2, r2, #32
 800507a:	b252      	sxtb	r2, r2
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	f002 021f 	and.w	r2, r2, #31
 8005082:	40d3      	lsrs	r3, r2
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d183      	bne.n	8004f94 <HAL_RCC_OscConfig+0xdec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800508c:	4815      	ldr	r0, [pc, #84]	; (80050e4 <HAL_RCC_OscConfig+0xf3c>)
 800508e:	4b15      	ldr	r3, [pc, #84]	; (80050e4 <HAL_RCC_OscConfig+0xf3c>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005096:	1d3b      	adds	r3, r7, #4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800509c:	1d3b      	adds	r3, r7, #4
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	430b      	orrs	r3, r1
 80050a4:	4313      	orrs	r3, r2
 80050a6:	6043      	str	r3, [r0, #4]
 80050a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b4:	fa93 f2a3 	rbit	r2, r3
 80050b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80050bc:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80050be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80050c2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c4:	fab3 f383 	clz	r3, r3
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80050ce:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80050d2:	461a      	mov	r2, r3
 80050d4:	2301      	movs	r3, #1
 80050d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d8:	f003 f816 	bl	8008108 <HAL_GetTick>
 80050dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050e0:	e00c      	b.n	80050fc <HAL_RCC_OscConfig+0xf54>
 80050e2:	bf00      	nop
 80050e4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050e8:	f003 f80e 	bl	8008108 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0xf54>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e10f      	b.n	800531c <HAL_RCC_OscConfig+0x1174>
 80050fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005100:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005104:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005108:	fa93 f2a3 	rbit	r2, r3
 800510c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005110:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005116:	681b      	ldr	r3, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005118:	fab3 f383 	clz	r3, r3
 800511c:	b25b      	sxtb	r3, r3
 800511e:	f043 0320 	orr.w	r3, r3, #32
 8005122:	b25b      	sxtb	r3, r3
 8005124:	b2db      	uxtb	r3, r3
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b01      	cmp	r3, #1
 800512c:	d102      	bne.n	8005134 <HAL_RCC_OscConfig+0xf8c>
 800512e:	4b7e      	ldr	r3, [pc, #504]	; (8005328 <HAL_RCC_OscConfig+0x1180>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	e039      	b.n	80051a8 <HAL_RCC_OscConfig+0x1000>
 8005134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005138:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005140:	fa93 f2a3 	rbit	r2, r3
 8005144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005148:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800514a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	fab3 f383 	clz	r3, r3
 8005154:	b25b      	sxtb	r3, r3
 8005156:	f043 0320 	orr.w	r3, r3, #32
 800515a:	b25b      	sxtb	r3, r3
 800515c:	b2db      	uxtb	r3, r3
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d102      	bne.n	800516c <HAL_RCC_OscConfig+0xfc4>
 8005166:	4b70      	ldr	r3, [pc, #448]	; (8005328 <HAL_RCC_OscConfig+0x1180>)
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	e01d      	b.n	80051a8 <HAL_RCC_OscConfig+0x1000>
 800516c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005170:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005174:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005178:	fa93 f2a3 	rbit	r2, r3
 800517c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005180:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	fab3 f383 	clz	r3, r3
 800518c:	b25b      	sxtb	r3, r3
 800518e:	f043 0320 	orr.w	r3, r3, #32
 8005192:	b25b      	sxtb	r3, r3
 8005194:	b2db      	uxtb	r3, r3
 8005196:	095b      	lsrs	r3, r3, #5
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b04      	cmp	r3, #4
 800519c:	d102      	bne.n	80051a4 <HAL_RCC_OscConfig+0xffc>
 800519e:	4b62      	ldr	r3, [pc, #392]	; (8005328 <HAL_RCC_OscConfig+0x1180>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	e001      	b.n	80051a8 <HAL_RCC_OscConfig+0x1000>
 80051a4:	4b60      	ldr	r3, [pc, #384]	; (8005328 <HAL_RCC_OscConfig+0x1180>)
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051ac:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80051b4:	fa92 f1a2 	rbit	r1, r2
 80051b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80051bc:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80051be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80051c2:	6812      	ldr	r2, [r2, #0]
 80051c4:	fab2 f282 	clz	r2, r2
 80051c8:	b252      	sxtb	r2, r2
 80051ca:	f042 0220 	orr.w	r2, r2, #32
 80051ce:	b252      	sxtb	r2, r2
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	f002 021f 	and.w	r2, r2, #31
 80051d6:	40d3      	lsrs	r3, r2
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d083      	beq.n	80050e8 <HAL_RCC_OscConfig+0xf40>
 80051e0:	e09b      	b.n	800531a <HAL_RCC_OscConfig+0x1172>
 80051e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80051ee:	fa93 f2a3 	rbit	r2, r3
 80051f2:	f107 0320 	add.w	r3, r7, #32
 80051f6:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80051f8:	f107 0320 	add.w	r3, r7, #32
 80051fc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fe:	fab3 f383 	clz	r3, r3
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8005208:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800520c:	461a      	mov	r2, r3
 800520e:	2300      	movs	r3, #0
 8005210:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005212:	f002 ff79 	bl	8008108 <HAL_GetTick>
 8005216:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800521a:	e009      	b.n	8005230 <HAL_RCC_OscConfig+0x1088>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521c:	f002 ff74 	bl	8008108 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x1088>
          {
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e075      	b.n	800531c <HAL_RCC_OscConfig+0x1174>
 8005230:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005234:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800523c:	fa93 f2a3 	rbit	r2, r3
 8005240:	f107 031c 	add.w	r3, r7, #28
 8005244:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005246:	f107 031c 	add.w	r3, r7, #28
 800524a:	681b      	ldr	r3, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800524c:	fab3 f383 	clz	r3, r3
 8005250:	b25b      	sxtb	r3, r3
 8005252:	f043 0320 	orr.w	r3, r3, #32
 8005256:	b25b      	sxtb	r3, r3
 8005258:	b2db      	uxtb	r3, r3
 800525a:	095b      	lsrs	r3, r3, #5
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b01      	cmp	r3, #1
 8005260:	d102      	bne.n	8005268 <HAL_RCC_OscConfig+0x10c0>
 8005262:	4b31      	ldr	r3, [pc, #196]	; (8005328 <HAL_RCC_OscConfig+0x1180>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	e039      	b.n	80052dc <HAL_RCC_OscConfig+0x1134>
 8005268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800526c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005270:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005274:	fa93 f2a3 	rbit	r2, r3
 8005278:	f107 0318 	add.w	r3, r7, #24
 800527c:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800527e:	f107 0318 	add.w	r3, r7, #24
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	fab3 f383 	clz	r3, r3
 8005288:	b25b      	sxtb	r3, r3
 800528a:	f043 0320 	orr.w	r3, r3, #32
 800528e:	b25b      	sxtb	r3, r3
 8005290:	b2db      	uxtb	r3, r3
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d102      	bne.n	80052a0 <HAL_RCC_OscConfig+0x10f8>
 800529a:	4b23      	ldr	r3, [pc, #140]	; (8005328 <HAL_RCC_OscConfig+0x1180>)
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	e01d      	b.n	80052dc <HAL_RCC_OscConfig+0x1134>
 80052a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ac:	fa93 f2a3 	rbit	r2, r3
 80052b0:	f107 0314 	add.w	r3, r7, #20
 80052b4:	601a      	str	r2, [r3, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80052b6:	f107 0314 	add.w	r3, r7, #20
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	fab3 f383 	clz	r3, r3
 80052c0:	b25b      	sxtb	r3, r3
 80052c2:	f043 0320 	orr.w	r3, r3, #32
 80052c6:	b25b      	sxtb	r3, r3
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d102      	bne.n	80052d8 <HAL_RCC_OscConfig+0x1130>
 80052d2:	4b15      	ldr	r3, [pc, #84]	; (8005328 <HAL_RCC_OscConfig+0x1180>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	e001      	b.n	80052dc <HAL_RCC_OscConfig+0x1134>
 80052d8:	4b13      	ldr	r3, [pc, #76]	; (8005328 <HAL_RCC_OscConfig+0x1180>)
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052e0:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80052e8:	fa92 f1a2 	rbit	r1, r2
 80052ec:	f107 0210 	add.w	r2, r7, #16
 80052f0:	6011      	str	r1, [r2, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80052f2:	f107 0210 	add.w	r2, r7, #16
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	fab2 f282 	clz	r2, r2
 80052fc:	b252      	sxtb	r2, r2
 80052fe:	f042 0220 	orr.w	r2, r2, #32
 8005302:	b252      	sxtb	r2, r2
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	f002 021f 	and.w	r2, r2, #31
 800530a:	40d3      	lsrs	r3, r2
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d183      	bne.n	800521c <HAL_RCC_OscConfig+0x1074>
 8005314:	e001      	b.n	800531a <HAL_RCC_OscConfig+0x1172>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <HAL_RCC_OscConfig+0x1174>
    }
  }
  
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	f507 7701 	add.w	r7, r7, #516	; 0x204
 8005322:	46bd      	mov	sp, r7
 8005324:	bd90      	pop	{r4, r7, pc}
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000

0800532c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b09e      	sub	sp, #120	; 0x78
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005336:	2300      	movs	r3, #0
 8005338:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800533a:	4ba3      	ldr	r3, [pc, #652]	; (80055c8 <HAL_RCC_ClockConfig+0x29c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0207 	and.w	r2, r3, #7
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d210      	bcs.n	800536a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005348:	499f      	ldr	r1, [pc, #636]	; (80055c8 <HAL_RCC_ClockConfig+0x29c>)
 800534a:	4b9f      	ldr	r3, [pc, #636]	; (80055c8 <HAL_RCC_ClockConfig+0x29c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 0207 	bic.w	r2, r3, #7
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	4313      	orrs	r3, r2
 8005356:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005358:	4b9b      	ldr	r3, [pc, #620]	; (80055c8 <HAL_RCC_ClockConfig+0x29c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0207 	and.w	r2, r3, #7
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d001      	beq.n	800536a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e1d0      	b.n	800570c <HAL_RCC_ClockConfig+0x3e0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d008      	beq.n	8005388 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005376:	4995      	ldr	r1, [pc, #596]	; (80055cc <HAL_RCC_ClockConfig+0x2a0>)
 8005378:	4b94      	ldr	r3, [pc, #592]	; (80055cc <HAL_RCC_ClockConfig+0x2a0>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	4313      	orrs	r3, r2
 8005386:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 8168 	beq.w	8005666 <HAL_RCC_ClockConfig+0x33a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d15c      	bne.n	8005458 <HAL_RCC_ClockConfig+0x12c>
 800539e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053a2:	643b      	str	r3, [r7, #64]	; 0x40
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a6:	fa93 f3a3 	rbit	r3, r3
 80053aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80053ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ae:	fab3 f383 	clz	r3, r3
 80053b2:	b25b      	sxtb	r3, r3
 80053b4:	f043 0320 	orr.w	r3, r3, #32
 80053b8:	b25b      	sxtb	r3, r3
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d102      	bne.n	80053ca <HAL_RCC_ClockConfig+0x9e>
 80053c4:	4b81      	ldr	r3, [pc, #516]	; (80055cc <HAL_RCC_ClockConfig+0x2a0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	e02d      	b.n	8005426 <HAL_RCC_ClockConfig+0xfa>
 80053ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053ce:	673b      	str	r3, [r7, #112]	; 0x70
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053d2:	fa93 f3a3 	rbit	r3, r3
 80053d6:	63bb      	str	r3, [r7, #56]	; 0x38
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80053d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053da:	fab3 f383 	clz	r3, r3
 80053de:	b25b      	sxtb	r3, r3
 80053e0:	f043 0320 	orr.w	r3, r3, #32
 80053e4:	b25b      	sxtb	r3, r3
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d102      	bne.n	80053f6 <HAL_RCC_ClockConfig+0xca>
 80053f0:	4b76      	ldr	r3, [pc, #472]	; (80055cc <HAL_RCC_ClockConfig+0x2a0>)
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	e017      	b.n	8005426 <HAL_RCC_ClockConfig+0xfa>
 80053f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053fa:	66fb      	str	r3, [r7, #108]	; 0x6c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053fe:	fa93 f3a3 	rbit	r3, r3
 8005402:	637b      	str	r3, [r7, #52]	; 0x34
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005406:	fab3 f383 	clz	r3, r3
 800540a:	b25b      	sxtb	r3, r3
 800540c:	f043 0320 	orr.w	r3, r3, #32
 8005410:	b25b      	sxtb	r3, r3
 8005412:	b2db      	uxtb	r3, r3
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b04      	cmp	r3, #4
 800541a:	d102      	bne.n	8005422 <HAL_RCC_ClockConfig+0xf6>
 800541c:	4b6b      	ldr	r3, [pc, #428]	; (80055cc <HAL_RCC_ClockConfig+0x2a0>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	e001      	b.n	8005426 <HAL_RCC_ClockConfig+0xfa>
 8005422:	4b6a      	ldr	r3, [pc, #424]	; (80055cc <HAL_RCC_ClockConfig+0x2a0>)
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800542a:	66ba      	str	r2, [r7, #104]	; 0x68
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800542e:	fa92 f2a2 	rbit	r2, r2
 8005432:	633a      	str	r2, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005436:	fab2 f282 	clz	r2, r2
 800543a:	b252      	sxtb	r2, r2
 800543c:	f042 0220 	orr.w	r2, r2, #32
 8005440:	b252      	sxtb	r2, r2
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	f002 021f 	and.w	r2, r2, #31
 8005448:	40d3      	lsrs	r3, r2
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	f040 80be 	bne.w	80055d0 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e159      	b.n	800570c <HAL_RCC_ClockConfig+0x3e0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d15b      	bne.n	8005518 <HAL_RCC_ClockConfig+0x1ec>
 8005460:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005464:	667b      	str	r3, [r7, #100]	; 0x64
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005466:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005468:	fa93 f3a3 	rbit	r3, r3
 800546c:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005470:	fab3 f383 	clz	r3, r3
 8005474:	b25b      	sxtb	r3, r3
 8005476:	f043 0320 	orr.w	r3, r3, #32
 800547a:	b25b      	sxtb	r3, r3
 800547c:	b2db      	uxtb	r3, r3
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b01      	cmp	r3, #1
 8005484:	d102      	bne.n	800548c <HAL_RCC_ClockConfig+0x160>
 8005486:	4b51      	ldr	r3, [pc, #324]	; (80055cc <HAL_RCC_ClockConfig+0x2a0>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	e02d      	b.n	80054e8 <HAL_RCC_ClockConfig+0x1bc>
 800548c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005490:	663b      	str	r3, [r7, #96]	; 0x60
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005494:	fa93 f3a3 	rbit	r3, r3
 8005498:	62bb      	str	r3, [r7, #40]	; 0x28
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	fab3 f383 	clz	r3, r3
 80054a0:	b25b      	sxtb	r3, r3
 80054a2:	f043 0320 	orr.w	r3, r3, #32
 80054a6:	b25b      	sxtb	r3, r3
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d102      	bne.n	80054b8 <HAL_RCC_ClockConfig+0x18c>
 80054b2:	4b46      	ldr	r3, [pc, #280]	; (80055cc <HAL_RCC_ClockConfig+0x2a0>)
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	e017      	b.n	80054e8 <HAL_RCC_ClockConfig+0x1bc>
 80054b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054bc:	65fb      	str	r3, [r7, #92]	; 0x5c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c0:	fa93 f3a3 	rbit	r3, r3
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	fab3 f383 	clz	r3, r3
 80054cc:	b25b      	sxtb	r3, r3
 80054ce:	f043 0320 	orr.w	r3, r3, #32
 80054d2:	b25b      	sxtb	r3, r3
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	095b      	lsrs	r3, r3, #5
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d102      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x1b8>
 80054de:	4b3b      	ldr	r3, [pc, #236]	; (80055cc <HAL_RCC_ClockConfig+0x2a0>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	e001      	b.n	80054e8 <HAL_RCC_ClockConfig+0x1bc>
 80054e4:	4b39      	ldr	r3, [pc, #228]	; (80055cc <HAL_RCC_ClockConfig+0x2a0>)
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054ec:	65ba      	str	r2, [r7, #88]	; 0x58
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054f0:	fa92 f2a2 	rbit	r2, r2
 80054f4:	623a      	str	r2, [r7, #32]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80054f6:	6a3a      	ldr	r2, [r7, #32]
 80054f8:	fab2 f282 	clz	r2, r2
 80054fc:	b252      	sxtb	r2, r2
 80054fe:	f042 0220 	orr.w	r2, r2, #32
 8005502:	b252      	sxtb	r2, r2
 8005504:	b2d2      	uxtb	r2, r2
 8005506:	f002 021f 	and.w	r2, r2, #31
 800550a:	40d3      	lsrs	r3, r2
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b00      	cmp	r3, #0
 8005512:	d15d      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e0f9      	b.n	800570c <HAL_RCC_ClockConfig+0x3e0>
 8005518:	2302      	movs	r3, #2
 800551a:	657b      	str	r3, [r7, #84]	; 0x54
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800551e:	fa93 f3a3 	rbit	r3, r3
 8005522:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005524:	69fb      	ldr	r3, [r7, #28]
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005526:	fab3 f383 	clz	r3, r3
 800552a:	b25b      	sxtb	r3, r3
 800552c:	f043 0320 	orr.w	r3, r3, #32
 8005530:	b25b      	sxtb	r3, r3
 8005532:	b2db      	uxtb	r3, r3
 8005534:	095b      	lsrs	r3, r3, #5
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b01      	cmp	r3, #1
 800553a:	d102      	bne.n	8005542 <HAL_RCC_ClockConfig+0x216>
 800553c:	4b23      	ldr	r3, [pc, #140]	; (80055cc <HAL_RCC_ClockConfig+0x2a0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	e02b      	b.n	800559a <HAL_RCC_ClockConfig+0x26e>
 8005542:	2302      	movs	r3, #2
 8005544:	653b      	str	r3, [r7, #80]	; 0x50
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005548:	fa93 f3a3 	rbit	r3, r3
 800554c:	61bb      	str	r3, [r7, #24]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	fab3 f383 	clz	r3, r3
 8005554:	b25b      	sxtb	r3, r3
 8005556:	f043 0320 	orr.w	r3, r3, #32
 800555a:	b25b      	sxtb	r3, r3
 800555c:	b2db      	uxtb	r3, r3
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d102      	bne.n	800556c <HAL_RCC_ClockConfig+0x240>
 8005566:	4b19      	ldr	r3, [pc, #100]	; (80055cc <HAL_RCC_ClockConfig+0x2a0>)
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	e016      	b.n	800559a <HAL_RCC_ClockConfig+0x26e>
 800556c:	2302      	movs	r3, #2
 800556e:	64fb      	str	r3, [r7, #76]	; 0x4c
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005572:	fa93 f3a3 	rbit	r3, r3
 8005576:	617b      	str	r3, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	fab3 f383 	clz	r3, r3
 800557e:	b25b      	sxtb	r3, r3
 8005580:	f043 0320 	orr.w	r3, r3, #32
 8005584:	b25b      	sxtb	r3, r3
 8005586:	b2db      	uxtb	r3, r3
 8005588:	095b      	lsrs	r3, r3, #5
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b04      	cmp	r3, #4
 800558e:	d102      	bne.n	8005596 <HAL_RCC_ClockConfig+0x26a>
 8005590:	4b0e      	ldr	r3, [pc, #56]	; (80055cc <HAL_RCC_ClockConfig+0x2a0>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	e001      	b.n	800559a <HAL_RCC_ClockConfig+0x26e>
 8005596:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <HAL_RCC_ClockConfig+0x2a0>)
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	2202      	movs	r2, #2
 800559c:	64ba      	str	r2, [r7, #72]	; 0x48
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055a0:	fa92 f2a2 	rbit	r2, r2
 80055a4:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	fab2 f282 	clz	r2, r2
 80055ac:	b252      	sxtb	r2, r2
 80055ae:	f042 0220 	orr.w	r2, r2, #32
 80055b2:	b252      	sxtb	r2, r2
 80055b4:	b2d2      	uxtb	r2, r2
 80055b6:	f002 021f 	and.w	r2, r2, #31
 80055ba:	40d3      	lsrs	r3, r2
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d105      	bne.n	80055d0 <HAL_RCC_ClockConfig+0x2a4>
      {
        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e0a1      	b.n	800570c <HAL_RCC_ClockConfig+0x3e0>
 80055c8:	40022000 	.word	0x40022000
 80055cc:	40021000 	.word	0x40021000
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055d0:	4950      	ldr	r1, [pc, #320]	; (8005714 <HAL_RCC_ClockConfig+0x3e8>)
 80055d2:	4b50      	ldr	r3, [pc, #320]	; (8005714 <HAL_RCC_ClockConfig+0x3e8>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f023 0203 	bic.w	r2, r3, #3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	4313      	orrs	r3, r2
 80055e0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055e2:	f002 fd91 	bl	8008108 <HAL_GetTick>
 80055e6:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d112      	bne.n	8005616 <HAL_RCC_ClockConfig+0x2ea>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80055f0:	e00a      	b.n	8005608 <HAL_RCC_ClockConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055f2:	f002 fd89 	bl	8008108 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005600:	4293      	cmp	r3, r2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_ClockConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e081      	b.n	800570c <HAL_RCC_ClockConfig+0x3e0>
    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005608:	4b42      	ldr	r3, [pc, #264]	; (8005714 <HAL_RCC_ClockConfig+0x3e8>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f003 030c 	and.w	r3, r3, #12
 8005610:	2b04      	cmp	r3, #4
 8005612:	d1ee      	bne.n	80055f2 <HAL_RCC_ClockConfig+0x2c6>
 8005614:	e027      	b.n	8005666 <HAL_RCC_ClockConfig+0x33a>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d11d      	bne.n	800565a <HAL_RCC_ClockConfig+0x32e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800561e:	e00a      	b.n	8005636 <HAL_RCC_ClockConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005620:	f002 fd72 	bl	8008108 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	f241 3288 	movw	r2, #5000	; 0x1388
 800562e:	4293      	cmp	r3, r2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_ClockConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e06a      	b.n	800570c <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005636:	4b37      	ldr	r3, [pc, #220]	; (8005714 <HAL_RCC_ClockConfig+0x3e8>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f003 030c 	and.w	r3, r3, #12
 800563e:	2b08      	cmp	r3, #8
 8005640:	d1ee      	bne.n	8005620 <HAL_RCC_ClockConfig+0x2f4>
 8005642:	e010      	b.n	8005666 <HAL_RCC_ClockConfig+0x33a>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005644:	f002 fd60 	bl	8008108 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005652:	4293      	cmp	r3, r2
 8005654:	d901      	bls.n	800565a <HAL_RCC_ClockConfig+0x32e>
        {
          return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e058      	b.n	800570c <HAL_RCC_ClockConfig+0x3e0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800565a:	4b2e      	ldr	r3, [pc, #184]	; (8005714 <HAL_RCC_ClockConfig+0x3e8>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 030c 	and.w	r3, r3, #12
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1ee      	bne.n	8005644 <HAL_RCC_ClockConfig+0x318>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8005666:	4b2c      	ldr	r3, [pc, #176]	; (8005718 <HAL_RCC_ClockConfig+0x3ec>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0207 	and.w	r2, r3, #7
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d910      	bls.n	8005696 <HAL_RCC_ClockConfig+0x36a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005674:	4928      	ldr	r1, [pc, #160]	; (8005718 <HAL_RCC_ClockConfig+0x3ec>)
 8005676:	4b28      	ldr	r3, [pc, #160]	; (8005718 <HAL_RCC_ClockConfig+0x3ec>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f023 0207 	bic.w	r2, r3, #7
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	4313      	orrs	r3, r2
 8005682:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005684:	4b24      	ldr	r3, [pc, #144]	; (8005718 <HAL_RCC_ClockConfig+0x3ec>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0207 	and.w	r2, r3, #7
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d001      	beq.n	8005696 <HAL_RCC_ClockConfig+0x36a>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e03a      	b.n	800570c <HAL_RCC_ClockConfig+0x3e0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <HAL_RCC_ClockConfig+0x388>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056a2:	491c      	ldr	r1, [pc, #112]	; (8005714 <HAL_RCC_ClockConfig+0x3e8>)
 80056a4:	4b1b      	ldr	r3, [pc, #108]	; (8005714 <HAL_RCC_ClockConfig+0x3e8>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x3a8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056c0:	4914      	ldr	r1, [pc, #80]	; (8005714 <HAL_RCC_ClockConfig+0x3e8>)
 80056c2:	4b14      	ldr	r3, [pc, #80]	; (8005714 <HAL_RCC_ClockConfig+0x3e8>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	4313      	orrs	r3, r2
 80056d2:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80056d4:	f000 f826 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 80056d8:	4601      	mov	r1, r0
 80056da:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <HAL_RCC_ClockConfig+0x3e8>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056e2:	23f0      	movs	r3, #240	; 0xf0
 80056e4:	647b      	str	r3, [r7, #68]	; 0x44
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e8:	fa93 f3a3 	rbit	r3, r3
 80056ec:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	fab3 f383 	clz	r3, r3
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
 80056f8:	4a08      	ldr	r2, [pc, #32]	; (800571c <HAL_RCC_ClockConfig+0x3f0>)
 80056fa:	5cd3      	ldrb	r3, [r2, r3]
 80056fc:	fa21 f303 	lsr.w	r3, r1, r3
 8005700:	4a07      	ldr	r2, [pc, #28]	; (8005720 <HAL_RCC_ClockConfig+0x3f4>)
 8005702:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005704:	2000      	movs	r0, #0
 8005706:	f002 fcd5 	bl	80080b4 <HAL_InitTick>
  
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3778      	adds	r7, #120	; 0x78
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40021000 	.word	0x40021000
 8005718:	40022000 	.word	0x40022000
 800571c:	0800b1b0 	.word	0x0800b1b0
 8005720:	20000154 	.word	0x20000154

08005724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005724:	b480      	push	{r7}
 8005726:	b08b      	sub	sp, #44	; 0x2c
 8005728:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
 800572e:	2300      	movs	r3, #0
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	2300      	movs	r3, #0
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800573e:	4b29      	ldr	r3, [pc, #164]	; (80057e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f003 030c 	and.w	r3, r3, #12
 800574a:	2b04      	cmp	r3, #4
 800574c:	d002      	beq.n	8005754 <HAL_RCC_GetSysClockFreq+0x30>
 800574e:	2b08      	cmp	r3, #8
 8005750:	d003      	beq.n	800575a <HAL_RCC_GetSysClockFreq+0x36>
 8005752:	e03c      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005754:	4b24      	ldr	r3, [pc, #144]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005756:	623b      	str	r3, [r7, #32]
      break;
 8005758:	e03c      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005760:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8005764:	613b      	str	r3, [r7, #16]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	fa93 f3a3 	rbit	r3, r3
 800576c:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	fab3 f383 	clz	r3, r3
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
 8005778:	4a1c      	ldr	r2, [pc, #112]	; (80057ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800577a:	5cd3      	ldrb	r3, [r2, r3]
 800577c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800577e:	4b19      	ldr	r3, [pc, #100]	; (80057e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	f003 020f 	and.w	r2, r3, #15
 8005786:	230f      	movs	r3, #15
 8005788:	60fb      	str	r3, [r7, #12]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	fa93 f3a3 	rbit	r3, r3
 8005790:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	fab3 f383 	clz	r3, r3
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
 800579c:	4a14      	ldr	r2, [pc, #80]	; (80057f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800579e:	5cd3      	ldrb	r3, [r2, r3]
 80057a0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80057ac:	4a0e      	ldr	r2, [pc, #56]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	fb02 f303 	mul.w	r3, r2, r3
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
 80057bc:	e004      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1) * pllmul;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	4a0c      	ldr	r2, [pc, #48]	; (80057f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80057c2:	fb02 f303 	mul.w	r3, r2, r3
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	623b      	str	r3, [r7, #32]
      break;
 80057cc:	e002      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057ce:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80057d0:	623b      	str	r3, [r7, #32]
      break;
 80057d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057d4:	6a3b      	ldr	r3, [r7, #32]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	372c      	adds	r7, #44	; 0x2c
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40021000 	.word	0x40021000
 80057e8:	007a1200 	.word	0x007a1200
 80057ec:	0800b190 	.word	0x0800b190
 80057f0:	0800b1a0 	.word	0x0800b1a0
 80057f4:	003d0900 	.word	0x003d0900

080057f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057fc:	4b03      	ldr	r3, [pc, #12]	; (800580c <HAL_RCC_GetHCLKFreq+0x14>)
 80057fe:	681b      	ldr	r3, [r3, #0]
}
 8005800:	4618      	mov	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	20000154 	.word	0x20000154

08005810 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	607b      	str	r3, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	817b      	strh	r3, [r7, #10]
 800581e:	4613      	mov	r3, r2
 8005820:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8005822:	897b      	ldrh	r3, [r7, #10]
 8005824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800582e:	897b      	ldrh	r3, [r7, #10]
 8005830:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005834:	4613      	mov	r3, r2
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	1a9b      	subs	r3, r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	3328      	adds	r3, #40	; 0x28
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e00a      	b.n	800585c <HAL_PCDEx_PMAConfig+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005846:	897a      	ldrh	r2, [r7, #10]
 8005848:	4613      	mov	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	3304      	adds	r3, #4
 800585a:	617b      	str	r3, [r7, #20]
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800585c:	893b      	ldrh	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d107      	bne.n	8005872 <HAL_PCDEx_PMAConfig+0x62>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2200      	movs	r2, #0
 8005866:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	b29a      	uxth	r2, r3
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	809a      	strh	r2, [r3, #4]
 8005870:	e00b      	b.n	800588a <HAL_PCDEx_PMAConfig+0x7a>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2201      	movs	r2, #1
 8005876:	729a      	strb	r2, [r3, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	b29a      	uxth	r2, r3
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	80da      	strh	r2, [r3, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	0c1b      	lsrs	r3, r3, #16
 8005884:	b29a      	uxth	r2, r3
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	811a      	strh	r2, [r3, #8]
  }
  
  return HAL_OK; 
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <PCD_WritePMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005898:	b480      	push	{r7}
 800589a:	b08b      	sub	sp, #44	; 0x2c
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	4611      	mov	r1, r2
 80058a4:	461a      	mov	r2, r3
 80058a6:	460b      	mov	r3, r1
 80058a8:	80fb      	strh	r3, [r7, #6]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80058ae:	88bb      	ldrh	r3, [r7, #4]
 80058b0:	3301      	adds	r3, #1
 80058b2:	105b      	asrs	r3, r3, #1
 80058b4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80058b6:	88fb      	ldrh	r3, [r7, #6]
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	461a      	mov	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0; i--)
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ca:	e01b      	b.n	8005904 <PCD_WritePMA+0x6c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	3301      	adds	r3, #1
 80058d6:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	461a      	mov	r2, r3
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	1c9a      	adds	r2, r3, #2
 80058ea:	623a      	str	r2, [r7, #32]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	b292      	uxth	r2, r2
 80058f0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	3302      	adds	r3, #2
 80058f6:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	3301      	adds	r3, #1
 80058fc:	60bb      	str	r3, [r7, #8]
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	3b01      	subs	r3, #1
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1e0      	bne.n	80058cc <PCD_WritePMA+0x34>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800590a:	bf00      	nop
 800590c:	372c      	adds	r7, #44	; 0x2c
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop

08005918 <PCD_ReadPMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005918:	b480      	push	{r7}
 800591a:	b089      	sub	sp, #36	; 0x24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	4611      	mov	r1, r2
 8005924:	461a      	mov	r2, r3
 8005926:	460b      	mov	r3, r1
 8005928:	80fb      	strh	r3, [r7, #6]
 800592a:	4613      	mov	r3, r2
 800592c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800592e:	88bb      	ldrh	r3, [r7, #4]
 8005930:	3301      	adds	r3, #1
 8005932:	105b      	asrs	r3, r3, #1
 8005934:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	461a      	mov	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005944:	61bb      	str	r3, [r7, #24]
  for (i = n; i != 0; i--)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	61fb      	str	r3, [r7, #28]
 800594a:	e00e      	b.n	800596a <PCD_ReadPMA+0x52>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	60ba      	str	r2, [r7, #8]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	1d11      	adds	r1, r2, #4
 8005956:	61b9      	str	r1, [r7, #24]
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	b292      	uxth	r2, r2
 800595c:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	3301      	adds	r3, #1
 8005962:	60bb      	str	r3, [r7, #8]
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	3b01      	subs	r3, #1
 8005968:	61fb      	str	r3, [r7, #28]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1ed      	bne.n	800594c <PCD_ReadPMA+0x34>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8005970:	bf00      	nop
 8005972:	3724      	adds	r7, #36	; 0x24
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint32_t i = 0;
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]

  uint32_t wInterrupt_Mask = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	60bb      	str	r3, [r7, #8]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_PCD_Init+0x1a>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e0ce      	b.n	8005b34 <HAL_PCD_Init+0x1b8>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3371 	ldrb.w	r3, [r3, #881]	; 0x371
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d106      	bne.n	80059b0 <HAL_PCD_Init+0x34>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fb fbc2 	bl	8001134 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2203      	movs	r2, #3
 80059b4:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371
 
 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80059b8:	2300      	movs	r3, #0
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	e040      	b.n	8005a40 <HAL_PCD_Init+0xc4>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4613      	mov	r3, r2
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	1a9b      	subs	r3, r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	440b      	add	r3, r1
 80059cc:	3329      	adds	r3, #41	; 0x29
 80059ce:	2201      	movs	r2, #1
 80059d0:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	b2d8      	uxtb	r0, r3
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4613      	mov	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	1a9b      	subs	r3, r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	440b      	add	r3, r1
 80059e4:	3328      	adds	r3, #40	; 0x28
 80059e6:	4602      	mov	r2, r0
 80059e8:	701a      	strb	r2, [r3, #0]
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4613      	mov	r3, r2
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	332b      	adds	r3, #43	; 0x2b
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4613      	mov	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3334      	adds	r3, #52	; 0x34
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0;
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	3338      	adds	r3, #56	; 0x38
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0;
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	333c      	adds	r3, #60	; 0x3c
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 
 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d8b9      	bhi.n	80059be <HAL_PCD_Init+0x42>
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e046      	b.n	8005ade <HAL_PCD_Init+0x162>
 {
   hpcd->OUT_ep[i].is_in = 0;
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4613      	mov	r3, r2
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	1a9b      	subs	r3, r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	440b      	add	r3, r1
 8005a5e:	f203 13cd 	addw	r3, r3, #461	; 0x1cd
 8005a62:	2200      	movs	r2, #0
 8005a64:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	b2d8      	uxtb	r0, r3
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	701a      	strb	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4613      	mov	r3, r2
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	1a9b      	subs	r3, r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 8005a92:	2200      	movs	r2, #0
 8005a94:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0;
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	1a9b      	subs	r3, r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	440b      	add	r3, r1
 8005aa4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0;
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	1a9b      	subs	r3, r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3301      	adds	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d8b3      	bhi.n	8005a50 <HAL_PCD_Init+0xd4>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8005b10:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8005b14:	60bb      	str	r3, [r7, #8]
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	b292      	uxth	r2, r2
 8005b1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  hpcd->USB_Address = 0;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State= HAL_PCD_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2371 	strb.w	r2, [r3, #881]	; 0x371

 return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_PCD_Start>:
  * @brief  Start the USB device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8005b44:	2101      	movs	r1, #1
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7fb fd2c 	bl	80015a4 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop

08005b58 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005b58:	b590      	push	{r4, r7, lr}
 8005b5a:	b089      	sub	sp, #36	; 0x24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count=0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	83fb      	strh	r3, [r7, #30]
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8005b68:	e318      	b.n	800619c <PCD_EP_ISR_Handler+0x644>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005b6a:	89fb      	ldrh	r3, [r7, #14]
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	76fb      	strb	r3, [r7, #27]
    
    if (EPindex == 0)
 8005b76:	7efb      	ldrb	r3, [r7, #27]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f040 812c 	bne.w	8005dd6 <PCD_EP_ISR_Handler+0x27e>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8005b7e:	89fb      	ldrh	r3, [r7, #14]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	f003 0310 	and.w	r3, r3, #16
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d14d      	bne.n	8005c26 <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3328      	adds	r3, #40	; 0x28
 8005ba6:	617b      	str	r3, [r7, #20]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4413      	add	r3, r2
 8005bbc:	3302      	adds	r3, #2
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	691a      	ldr	r2, [r3, #16]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	441a      	add	r2, r3
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8005be4:	2100      	movs	r1, #0
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fb fb0a 	bl	8001200 <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 82d1 	beq.w	800619c <PCD_EP_ISR_Handler+0x644>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f040 82cc 	bne.w	800619c <PCD_EP_ISR_Handler+0x644>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	b292      	uxth	r2, r2
 8005c18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c24:	e2ba      	b.n	800619c <PCD_EP_ISR_Handler+0x644>
      {
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 8005c2c:	617b      	str	r3, [r7, #20]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8005c38:	89bb      	ldrh	r3, [r7, #12]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d031      	beq.n	8005ca8 <PCD_EP_ISR_Handler+0x150>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	461a      	mov	r2, r3
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4413      	add	r3, r2
 8005c58:	3306      	adds	r3, #6
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	619a      	str	r2, [r3, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f503 715d 	add.w	r1, r3, #884	; 0x374
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	889a      	ldrh	r2, [r3, #4]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	f7ff fe47 	bl	8005918 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b299      	uxth	r1, r3
 8005c96:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005c9a:	400b      	ands	r3, r1
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fb fa7f 	bl	80011a4 <HAL_PCD_SetupStageCallback>
 8005ca6:	e279      	b.n	800619c <PCD_EP_ISR_Handler+0x644>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8005ca8:	89bb      	ldrh	r3, [r7, #12]
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	b21b      	sxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f280 8274 	bge.w	800619c <PCD_EP_ISR_Handler+0x644>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b299      	uxth	r1, r3
 8005cc0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005cc4:	400b      	ands	r3, r1
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	8013      	strh	r3, [r2, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	4413      	add	r3, r2
 8005cde:	3306      	adds	r3, #6
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0)
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d011      	beq.n	8005d24 <PCD_EP_ISR_Handler+0x1cc>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	6919      	ldr	r1, [r3, #16]
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	889a      	ldrh	r2, [r3, #4]
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f7ff fe01 	bl	8005918 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	441a      	add	r2, r3
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8005d24:	2100      	movs	r1, #0
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fb fa4e 	bl	80011c8 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	3306      	adds	r3, #6
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d46:	613b      	str	r3, [r7, #16]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d4e:	d919      	bls.n	8005d84 <PCD_EP_ISR_Handler+0x22c>
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	095b      	lsrs	r3, r3, #5
 8005d56:	83bb      	strh	r3, [r7, #28]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d102      	bne.n	8005d6a <PCD_EP_ISR_Handler+0x212>
 8005d64:	8bbb      	ldrh	r3, [r7, #28]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	83bb      	strh	r3, [r7, #28]
 8005d6a:	8bbb      	ldrh	r3, [r7, #28]
 8005d6c:	029b      	lsls	r3, r3, #10
 8005d6e:	b21b      	sxth	r3, r3
 8005d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d78:	b21b      	sxth	r3, r3
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	e012      	b.n	8005daa <PCD_EP_ISR_Handler+0x252>
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	83bb      	strh	r3, [r7, #28]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <PCD_EP_ISR_Handler+0x246>
 8005d98:	8bbb      	ldrh	r3, [r7, #28]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	83bb      	strh	r3, [r7, #28]
 8005d9e:	8bbb      	ldrh	r3, [r7, #28]
 8005da0:	029b      	lsls	r3, r3, #10
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	461a      	mov	r2, r3
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	601a      	str	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	b29c      	uxth	r4, r3
 8005dbc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005dc0:	b29c      	uxth	r4, r3
 8005dc2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005dc6:	b29c      	uxth	r4, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4b9e      	ldr	r3, [pc, #632]	; (8006048 <PCD_EP_ISR_Handler+0x4f0>)
 8005dce:	4323      	orrs	r3, r4
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	8013      	strh	r3, [r2, #0]
 8005dd4:	e1e2      	b.n	800619c <PCD_EP_ISR_Handler+0x644>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	7efb      	ldrb	r3, [r7, #27]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8005de8:	89bb      	ldrh	r3, [r7, #12]
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	b21b      	sxth	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f280 80d9 	bge.w	8005fa6 <PCD_EP_ISR_Handler+0x44e>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	7efb      	ldrb	r3, [r7, #27]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	441a      	add	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4619      	mov	r1, r3
 8005e06:	7efb      	ldrb	r3, [r7, #27]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	440b      	add	r3, r1
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b299      	uxth	r1, r3
 8005e10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005e14:	400b      	ands	r3, r1
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[EPindex];
 8005e1a:	7efa      	ldrb	r2, [r7, #27]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	1a9b      	subs	r3, r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	617b      	str	r3, [r7, #20]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	7a9b      	ldrb	r3, [r3, #10]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d123      	bne.n	8005e80 <PCD_EP_ISR_Handler+0x328>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	461a      	mov	r2, r3
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	00db      	lsls	r3, r3, #3
 8005e4a:	4413      	add	r3, r2
 8005e4c:	3306      	adds	r3, #6
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	461a      	mov	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e64:	83fb      	strh	r3, [r7, #30]
          if (count != 0)
 8005e66:	8bfb      	ldrh	r3, [r7, #30]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d077      	beq.n	8005f5c <PCD_EP_ISR_Handler+0x404>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	6919      	ldr	r1, [r3, #16]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	889a      	ldrh	r2, [r3, #4]
 8005e78:	8bfb      	ldrh	r3, [r7, #30]
 8005e7a:	f7ff fd4d 	bl	8005918 <PCD_ReadPMA>
 8005e7e:	e06d      	b.n	8005f5c <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d023      	beq.n	8005ee2 <PCD_EP_ISR_Handler+0x38a>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	4413      	add	r3, r2
 8005eae:	3302      	adds	r3, #2
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ec6:	83fb      	strh	r3, [r7, #30]
            if (count != 0)
 8005ec8:	8bfb      	ldrh	r3, [r7, #30]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d02c      	beq.n	8005f28 <PCD_EP_ISR_Handler+0x3d0>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	6919      	ldr	r1, [r3, #16]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	88da      	ldrh	r2, [r3, #6]
 8005eda:	8bfb      	ldrh	r3, [r7, #30]
 8005edc:	f7ff fd1c 	bl	8005918 <PCD_ReadPMA>
 8005ee0:	e022      	b.n	8005f28 <PCD_EP_ISR_Handler+0x3d0>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	3306      	adds	r3, #6
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	461a      	mov	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f0e:	83fb      	strh	r3, [r7, #30]
            if (count != 0)
 8005f10:	8bfb      	ldrh	r3, [r7, #30]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d008      	beq.n	8005f28 <PCD_EP_ISR_Handler+0x3d0>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6818      	ldr	r0, [r3, #0]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	6919      	ldr	r1, [r3, #16]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	891a      	ldrh	r2, [r3, #8]
 8005f22:	8bfb      	ldrh	r3, [r7, #30]
 8005f24:	f7ff fcf8 	bl	8005918 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	441a      	add	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	b219      	sxth	r1, r3
 8005f4a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8005f4e:	400b      	ands	r3, r1
 8005f50:	b219      	sxth	r1, r3
 8005f52:	4b3e      	ldr	r3, [pc, #248]	; (800604c <PCD_EP_ISR_Handler+0x4f4>)
 8005f54:	430b      	orrs	r3, r1
 8005f56:	b21b      	sxth	r3, r3
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	699a      	ldr	r2, [r3, #24]
 8005f60:	8bfb      	ldrh	r3, [r7, #30]
 8005f62:	441a      	add	r2, r3
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	8bfb      	ldrh	r3, [r7, #30]
 8005f6e:	441a      	add	r2, r3
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d004      	beq.n	8005f86 <PCD_EP_ISR_Handler+0x42e>
 8005f7c:	8bfa      	ldrh	r2, [r7, #30]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d206      	bcs.n	8005f94 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7fb f91b 	bl	80011c8 <HAL_PCD_DataOutStageCallback>
 8005f92:	e008      	b.n	8005fa6 <PCD_EP_ISR_Handler+0x44e>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	7819      	ldrb	r1, [r3, #0]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 ffd5 	bl	8006f50 <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8005fa6:	89bb      	ldrh	r3, [r7, #12]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 80f4 	beq.w	800619c <PCD_EP_ISR_Handler+0x644>
      {
        ep = &hpcd->IN_ep[EPindex];
 8005fb4:	7efa      	ldrb	r2, [r7, #27]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	3328      	adds	r3, #40	; 0x28
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	7efb      	ldrb	r3, [r7, #27]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	441a      	add	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	7efb      	ldrb	r3, [r7, #27]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	7a9b      	ldrb	r3, [r3, #10]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d12c      	bne.n	8006050 <PCD_EP_ISR_Handler+0x4f8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	4413      	add	r3, r2
 800600a:	3302      	adds	r3, #2
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	461a      	mov	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4413      	add	r3, r2
 8006016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0)
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8085 	beq.w	8006138 <PCD_EP_ISR_Handler+0x5e0>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6818      	ldr	r0, [r3, #0]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	6919      	ldr	r1, [r3, #16]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	889a      	ldrh	r2, [r3, #4]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f7ff fc2a 	bl	8005898 <PCD_WritePMA>
 8006044:	e078      	b.n	8006138 <PCD_EP_ISR_Handler+0x5e0>
 8006046:	bf00      	nop
 8006048:	ffff8080 	.word	0xffff8080
 800604c:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	461a      	mov	r2, r3
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29b      	uxth	r3, r3
 8006062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006066:	2b00      	cmp	r3, #0
 8006068:	d026      	beq.n	80060b8 <PCD_EP_ISR_Handler+0x560>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006072:	b29b      	uxth	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	4413      	add	r3, r2
 800607e:	3302      	adds	r3, #2
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	461a      	mov	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d031      	beq.n	8006104 <PCD_EP_ISR_Handler+0x5ac>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	6919      	ldr	r1, [r3, #16]
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	88da      	ldrh	r2, [r3, #6]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f7ff fbf1 	bl	8005898 <PCD_WritePMA>
 80060b6:	e025      	b.n	8006104 <PCD_EP_ISR_Handler+0x5ac>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	461a      	mov	r2, r3
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	4413      	add	r3, r2
 80060cc:	3306      	adds	r3, #6
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	461a      	mov	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <PCD_EP_ISR_Handler+0x5ac>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	6919      	ldr	r1, [r3, #16]
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	891a      	ldrh	r2, [r3, #8]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f7ff fbca 	bl	8005898 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	461a      	mov	r2, r3
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	441a      	add	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4619      	mov	r1, r3
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	b219      	sxth	r1, r3
 8006126:	f640 730f 	movw	r3, #3855	; 0xf0f
 800612a:	400b      	ands	r3, r1
 800612c:	b219      	sxth	r1, r3
 800612e:	4b23      	ldr	r3, [pc, #140]	; (80061bc <PCD_EP_ISR_Handler+0x664>)
 8006130:	430b      	orrs	r3, r1
 8006132:	b21b      	sxth	r3, r3
 8006134:	b29b      	uxth	r3, r3
 8006136:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006140:	b29b      	uxth	r3, r3
 8006142:	461a      	mov	r2, r3
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4413      	add	r3, r2
 800614c:	3302      	adds	r3, #2
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	461a      	mov	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	441a      	add	r2, r3
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d106      	bne.n	800618a <PCD_EP_ISR_Handler+0x632>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fb f83c 	bl	8001200 <HAL_PCD_DataInStageCallback>
 8006188:	e008      	b.n	800619c <PCD_EP_ISR_Handler+0x644>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	7819      	ldrb	r1, [r3, #0]
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	691a      	ldr	r2, [r3, #16]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f001 f808 	bl	80071ac <HAL_PCD_EP_Transmit>
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	81fa      	strh	r2, [r7, #14]
 80061aa:	b21b      	sxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f6ff acdc 	blt.w	8005b6a <PCD_EP_ISR_Handler+0x12>
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
      } 
    }
  }
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3724      	adds	r7, #36	; 0x24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd90      	pop	{r4, r7, pc}
 80061bc:	ffffc080 	.word	0xffffc080

080061c0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t wInterrupt_Mask = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	b21b      	sxth	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	da02      	bge.n	80061e2 <HAL_PCD_IRQHandler+0x22>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff fcbb 	bl	8005b58 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d012      	beq.n	800621a <HAL_PCD_IRQHandler+0x5a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	6812      	ldr	r2, [r2, #0]
 80061fc:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8006200:	b292      	uxth	r2, r2
 8006202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006206:	b292      	uxth	r2, r2
 8006208:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7fb f81f 	bl	8001250 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8006212:	2100      	movs	r1, #0
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f8c1 	bl	800639c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006222:	b29b      	uxth	r3, r3
 8006224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00b      	beq.n	8006244 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6812      	ldr	r2, [r2, #0]
 8006234:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8006238:	b292      	uxth	r2, r2
 800623a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800623e:	b292      	uxth	r2, r2
 8006240:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800624c:	b29b      	uxth	r3, r3
 800624e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00b      	beq.n	800626e <HAL_PCD_IRQHandler+0xae>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	6812      	ldr	r2, [r2, #0]
 800625e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8006262:	b292      	uxth	r2, r2
 8006264:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006268:	b292      	uxth	r2, r2
 800626a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006276:	b29b      	uxth	r3, r3
 8006278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d023      	beq.n	80062c8 <HAL_PCD_IRQHandler+0x108>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_LPMODE);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 800628c:	b292      	uxth	r2, r2
 800628e:	f022 0204 	bic.w	r2, r2, #4
 8006292:	b292      	uxth	r2, r2
 8006294:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8006298:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 800629c:	60fb      	str	r3, [r7, #12]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	b292      	uxth	r2, r2
 80062a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fb f80c 	bl	80012c8 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80062bc:	b292      	uxth	r2, r2
 80062be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062c2:	b292      	uxth	r2, r2
 80062c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d02f      	beq.n	800633a <HAL_PCD_IRQHandler+0x17a>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6812      	ldr	r2, [r2, #0]
 80062e2:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80062e6:	b292      	uxth	r2, r2
 80062e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062ec:	b292      	uxth	r2, r2
 80062ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 80062fe:	b292      	uxth	r2, r2
 8006300:	f042 0208 	orr.w	r2, r2, #8
 8006304:	b292      	uxth	r2, r2
 8006306:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8006316:	b292      	uxth	r2, r2
 8006318:	f042 0204 	orr.w	r2, r2, #4
 800631c:	b292      	uxth	r2, r2
 800631e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800632a:	b29b      	uxth	r3, r3
 800632c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <HAL_PCD_IRQHandler+0x17a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7fa ffad 	bl	8001294 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006342:	b29b      	uxth	r3, r3
 8006344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00e      	beq.n	800636a <HAL_PCD_IRQHandler+0x1aa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	6812      	ldr	r2, [r2, #0]
 8006354:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8006358:	b292      	uxth	r2, r2
 800635a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800635e:	b292      	uxth	r2, r2
 8006360:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7fa ff65 	bl	8001234 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006372:	b29b      	uxth	r3, r3
 8006374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00b      	beq.n	8006394 <HAL_PCD_IRQHandler+0x1d4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6812      	ldr	r2, [r2, #0]
 8006384:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8006388:	b292      	uxth	r2, r2
 800638a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800638e:	b292      	uxth	r2, r2
 8006390:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8006394:	bf00      	nop
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	70fb      	strb	r3, [r7, #3]
   __HAL_LOCK(hpcd); 
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d101      	bne.n	80063b6 <HAL_PCD_SetAddress+0x1a>
 80063b2:	2302      	movs	r3, #2
 80063b4:	e015      	b.n	80063e2 <HAL_PCD_SetAddress+0x46>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

   if(address == 0) 
 80063be:	78fb      	ldrb	r3, [r7, #3]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d105      	bne.n	80063d0 <HAL_PCD_SetAddress+0x34>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2280      	movs	r2, #128	; 0x80
 80063ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80063ce:	e003      	b.n	80063d8 <HAL_PCD_SetAddress+0x3c>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	78fa      	ldrb	r2, [r7, #3]
 80063d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop

080063f0 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80063f0:	b490      	push	{r4, r7}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	4608      	mov	r0, r1
 80063fa:	4611      	mov	r1, r2
 80063fc:	461a      	mov	r2, r3
 80063fe:	4603      	mov	r3, r0
 8006400:	70fb      	strb	r3, [r7, #3]
 8006402:	460b      	mov	r3, r1
 8006404:	803b      	strh	r3, [r7, #0]
 8006406:	4613      	mov	r3, r2
 8006408:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	747b      	strb	r3, [r7, #17]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 800640e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006412:	2b00      	cmp	r3, #0
 8006414:	da0b      	bge.n	800642e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800641c:	4613      	mov	r3, r2
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	1a9b      	subs	r3, r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	3328      	adds	r3, #40	; 0x28
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	4413      	add	r3, r2
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	e00c      	b.n	8006448 <HAL_PCD_EP_Open+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006434:	4613      	mov	r3, r2
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	1a9b      	subs	r3, r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	4413      	add	r3, r2
 8006444:	3304      	adds	r3, #4
 8006446:	617b      	str	r3, [r7, #20]
  }
  ep->num   = ep_addr & 0x7F;
 8006448:	78fb      	ldrb	r3, [r7, #3]
 800644a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800644e:	b2da      	uxtb	r2, r3
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8006454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	09db      	lsrs	r3, r3, #7
 800645c:	b2db      	uxtb	r3, r3
 800645e:	461a      	mov	r2, r3
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 8006464:	883a      	ldrh	r2, [r7, #0]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	78ba      	ldrb	r2, [r7, #2]
 800646e:	70da      	strb	r2, [r3, #3]
  
  __HAL_LOCK(hpcd); 
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_PCD_EP_Open+0x8e>
 800647a:	2302      	movs	r3, #2
 800647c:	e345      	b.n	8006b0a <HAL_PCD_EP_Open+0x71a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

  /* initialize Endpoint */
  switch (ep->type)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	78db      	ldrb	r3, [r3, #3]
 800648a:	2b03      	cmp	r3, #3
 800648c:	d875      	bhi.n	800657a <HAL_PCD_EP_Open+0x18a>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <HAL_PCD_EP_Open+0xa4>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064a5 	.word	0x080064a5
 8006498:	08006543 	.word	0x08006543
 800649c:	080064dd 	.word	0x080064dd
 80064a0:	0800650b 	.word	0x0800650b
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	441a      	add	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4619      	mov	r1, r3
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	440b      	add	r3, r1
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	b21b      	sxth	r3, r3
 80064c6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80064ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ce:	b21b      	sxth	r3, r3
 80064d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064d4:	b21b      	sxth	r3, r3
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	8013      	strh	r3, [r2, #0]
    break;
 80064da:	e04e      	b.n	800657a <HAL_PCD_EP_Open+0x18a>
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	441a      	add	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4619      	mov	r1, r3
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	440b      	add	r3, r1
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006504:	b29b      	uxth	r3, r3
 8006506:	8013      	strh	r3, [r2, #0]
    break;
 8006508:	e037      	b.n	800657a <HAL_PCD_EP_Open+0x18a>
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	441a      	add	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4619      	mov	r1, r3
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	440b      	add	r3, r1
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	b29b      	uxth	r3, r3
 800652a:	b21b      	sxth	r3, r3
 800652c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006534:	b21b      	sxth	r3, r3
 8006536:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800653a:	b21b      	sxth	r3, r3
 800653c:	b29b      	uxth	r3, r3
 800653e:	8013      	strh	r3, [r2, #0]
    break;
 8006540:	e01b      	b.n	800657a <HAL_PCD_EP_Open+0x18a>
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	441a      	add	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4619      	mov	r1, r3
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	440b      	add	r3, r1
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	b21b      	sxth	r3, r3
 8006564:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656c:	b21b      	sxth	r3, r3
 800656e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006572:	b21b      	sxth	r3, r3
 8006574:	b29b      	uxth	r3, r3
 8006576:	8013      	strh	r3, [r2, #0]
    break;
 8006578:	bf00      	nop
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	441a      	add	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4619      	mov	r1, r3
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	440b      	add	r3, r1
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	b29b      	uxth	r3, r3
 800659a:	b219      	sxth	r1, r3
 800659c:	f640 730f 	movw	r3, #3855	; 0xf0f
 80065a0:	400b      	ands	r3, r1
 80065a2:	b219      	sxth	r1, r3
 80065a4:	4b89      	ldr	r3, [pc, #548]	; (80067cc <HAL_PCD_EP_Open+0x3dc>)
 80065a6:	430b      	orrs	r3, r1
 80065a8:	b219      	sxth	r1, r3
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	b21b      	sxth	r3, r3
 80065b0:	430b      	orrs	r3, r1
 80065b2:	b21b      	sxth	r3, r3
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	8013      	strh	r3, [r2, #0]
  
  if (ep->doublebuffer == 0) 
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	7a9b      	ldrb	r3, [r3, #10]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f040 810b 	bne.w	80067d8 <HAL_PCD_EP_Open+0x3e8>
  {
    if (ep->is_in)
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	785b      	ldrb	r3, [r3, #1]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d05b      	beq.n	8006682 <HAL_PCD_EP_Open+0x292>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	4413      	add	r3, r2
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	461a      	mov	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ec:	461a      	mov	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	889b      	ldrh	r3, [r3, #4]
 80065f2:	085b      	lsrs	r3, r3, #1
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	d019      	beq.n	8006648 <HAL_PCD_EP_Open+0x258>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	461a      	mov	r2, r3
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	441a      	add	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4619      	mov	r1, r3
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	b219      	sxth	r1, r3
 8006636:	f640 730f 	movw	r3, #3855	; 0xf0f
 800663a:	400b      	ands	r3, r1
 800663c:	b219      	sxth	r1, r3
 800663e:	4b64      	ldr	r3, [pc, #400]	; (80067d0 <HAL_PCD_EP_Open+0x3e0>)
 8006640:	430b      	orrs	r3, r1
 8006642:	b21b      	sxth	r3, r3
 8006644:	b29b      	uxth	r3, r3
 8006646:	8013      	strh	r3, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006662:	b29c      	uxth	r4, r3
 8006664:	f084 0320 	eor.w	r3, r4, #32
 8006668:	b29c      	uxth	r4, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	441a      	add	r2, r3
 8006678:	4b54      	ldr	r3, [pc, #336]	; (80067cc <HAL_PCD_EP_Open+0x3dc>)
 800667a:	4323      	orrs	r3, r4
 800667c:	b29b      	uxth	r3, r3
 800667e:	8013      	strh	r3, [r2, #0]
 8006680:	e23e      	b.n	8006b00 <HAL_PCD_EP_Open+0x710>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800668a:	b29b      	uxth	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	4413      	add	r3, r2
 8006696:	3304      	adds	r3, #4
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	461a      	mov	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066a6:	461a      	mov	r2, r3
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	889b      	ldrh	r3, [r3, #4]
 80066ac:	085b      	lsrs	r3, r3, #1
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	6013      	str	r3, [r2, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066bc:	b29b      	uxth	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	4413      	add	r3, r2
 80066c8:	3306      	adds	r3, #6
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	461a      	mov	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	2b3e      	cmp	r3, #62	; 0x3e
 80066e0:	d919      	bls.n	8006716 <HAL_PCD_EP_Open+0x326>
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	827b      	strh	r3, [r7, #18]
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f003 031f 	and.w	r3, r3, #31
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d102      	bne.n	80066fc <HAL_PCD_EP_Open+0x30c>
 80066f6:	8a7b      	ldrh	r3, [r7, #18]
 80066f8:	3b01      	subs	r3, #1
 80066fa:	827b      	strh	r3, [r7, #18]
 80066fc:	8a7b      	ldrh	r3, [r7, #18]
 80066fe:	029b      	lsls	r3, r3, #10
 8006700:	b21b      	sxth	r3, r3
 8006702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670a:	b21b      	sxth	r3, r3
 800670c:	b29b      	uxth	r3, r3
 800670e:	461a      	mov	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	e012      	b.n	800673c <HAL_PCD_EP_Open+0x34c>
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	085b      	lsrs	r3, r3, #1
 800671c:	827b      	strh	r3, [r7, #18]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_PCD_EP_Open+0x340>
 800672a:	8a7b      	ldrh	r3, [r7, #18]
 800672c:	3301      	adds	r3, #1
 800672e:	827b      	strh	r3, [r7, #18]
 8006730:	8a7b      	ldrh	r3, [r7, #18]
 8006732:	029b      	lsls	r3, r3, #10
 8006734:	b29b      	uxth	r3, r3
 8006736:	461a      	mov	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	461a      	mov	r2, r3
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d019      	beq.n	800678a <HAL_PCD_EP_Open+0x39a>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	441a      	add	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4619      	mov	r1, r3
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	440b      	add	r3, r1
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29b      	uxth	r3, r3
 8006776:	b219      	sxth	r1, r3
 8006778:	f640 730f 	movw	r3, #3855	; 0xf0f
 800677c:	400b      	ands	r3, r1
 800677e:	b219      	sxth	r1, r3
 8006780:	4b14      	ldr	r3, [pc, #80]	; (80067d4 <HAL_PCD_EP_Open+0x3e4>)
 8006782:	430b      	orrs	r3, r1
 8006784:	b21b      	sxth	r3, r3
 8006786:	b29b      	uxth	r3, r3
 8006788:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29b      	uxth	r3, r3
 800679c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a4:	b29c      	uxth	r4, r3
 80067a6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80067aa:	b29c      	uxth	r4, r3
 80067ac:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80067b0:	b29c      	uxth	r4, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	441a      	add	r2, r3
 80067c0:	4b02      	ldr	r3, [pc, #8]	; (80067cc <HAL_PCD_EP_Open+0x3dc>)
 80067c2:	4323      	orrs	r3, r4
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	8013      	strh	r3, [r2, #0]
 80067c8:	e19a      	b.n	8006b00 <HAL_PCD_EP_Open+0x710>
 80067ca:	bf00      	nop
 80067cc:	ffff8080 	.word	0xffff8080
 80067d0:	ffff80c0 	.word	0xffff80c0
 80067d4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	441a      	add	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4619      	mov	r1, r3
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	440b      	add	r3, r1
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	b219      	sxth	r1, r3
 8006800:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006804:	400b      	ands	r3, r1
 8006806:	b219      	sxth	r1, r3
 8006808:	4b6d      	ldr	r3, [pc, #436]	; (80069c0 <HAL_PCD_EP_Open+0x5d0>)
 800680a:	430b      	orrs	r3, r1
 800680c:	b21b      	sxth	r3, r3
 800680e:	b29b      	uxth	r3, r3
 8006810:	8013      	strh	r3, [r2, #0]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800681a:	b29b      	uxth	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	4413      	add	r3, r2
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	461a      	mov	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4413      	add	r3, r2
 8006830:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006834:	461a      	mov	r2, r3
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	88db      	ldrh	r3, [r3, #6]
 800683a:	085b      	lsrs	r3, r3, #1
 800683c:	b29b      	uxth	r3, r3
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684a:	b29b      	uxth	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	4413      	add	r3, r2
 8006856:	3304      	adds	r3, #4
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	461a      	mov	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006866:	461a      	mov	r2, r3
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	891b      	ldrh	r3, [r3, #8]
 800686c:	085b      	lsrs	r3, r3, #1
 800686e:	b29b      	uxth	r3, r3
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	6013      	str	r3, [r2, #0]
    
    if (ep->is_in==0)
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	785b      	ldrb	r3, [r3, #1]
 8006878:	2b00      	cmp	r3, #0
 800687a:	f040 80a7 	bne.w	80069cc <HAL_PCD_EP_Open+0x5dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	881b      	ldrh	r3, [r3, #0]
 800688e:	b29b      	uxth	r3, r3
 8006890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d019      	beq.n	80068cc <HAL_PCD_EP_Open+0x4dc>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	441a      	add	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4619      	mov	r1, r3
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	b219      	sxth	r1, r3
 80068ba:	f640 730f 	movw	r3, #3855	; 0xf0f
 80068be:	400b      	ands	r3, r1
 80068c0:	b219      	sxth	r1, r3
 80068c2:	4b40      	ldr	r3, [pc, #256]	; (80069c4 <HAL_PCD_EP_Open+0x5d4>)
 80068c4:	430b      	orrs	r3, r1
 80068c6:	b21b      	sxth	r3, r3
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4413      	add	r3, r2
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b29b      	uxth	r3, r3
 80068de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d019      	beq.n	800691a <HAL_PCD_EP_Open+0x52a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	441a      	add	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4619      	mov	r1, r3
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	440b      	add	r3, r1
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	b29b      	uxth	r3, r3
 8006906:	b219      	sxth	r1, r3
 8006908:	f640 730f 	movw	r3, #3855	; 0xf0f
 800690c:	400b      	ands	r3, r1
 800690e:	b219      	sxth	r1, r3
 8006910:	4b2d      	ldr	r3, [pc, #180]	; (80069c8 <HAL_PCD_EP_Open+0x5d8>)
 8006912:	430b      	orrs	r3, r1
 8006914:	b21b      	sxth	r3, r3
 8006916:	b29b      	uxth	r3, r3
 8006918:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	441a      	add	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4619      	mov	r1, r3
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	b219      	sxth	r1, r3
 800693c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006940:	400b      	ands	r3, r1
 8006942:	b219      	sxth	r1, r3
 8006944:	4b20      	ldr	r3, [pc, #128]	; (80069c8 <HAL_PCD_EP_Open+0x5d8>)
 8006946:	430b      	orrs	r3, r1
 8006948:	b21b      	sxth	r3, r3
 800694a:	b29b      	uxth	r3, r3
 800694c:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	881b      	ldrh	r3, [r3, #0]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006968:	b29c      	uxth	r4, r3
 800696a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800696e:	b29c      	uxth	r4, r3
 8006970:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006974:	b29c      	uxth	r4, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	441a      	add	r2, r3
 8006984:	4b0e      	ldr	r3, [pc, #56]	; (80069c0 <HAL_PCD_EP_Open+0x5d0>)
 8006986:	4323      	orrs	r3, r4
 8006988:	b29b      	uxth	r3, r3
 800698a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	881b      	ldrh	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a6:	b29c      	uxth	r4, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	441a      	add	r2, r3
 80069b6:	4b02      	ldr	r3, [pc, #8]	; (80069c0 <HAL_PCD_EP_Open+0x5d0>)
 80069b8:	4323      	orrs	r3, r4
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	8013      	strh	r3, [r2, #0]
 80069be:	e09f      	b.n	8006b00 <HAL_PCD_EP_Open+0x710>
 80069c0:	ffff8080 	.word	0xffff8080
 80069c4:	ffffc080 	.word	0xffffc080
 80069c8:	ffff80c0 	.word	0xffff80c0
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d019      	beq.n	8006a1a <HAL_PCD_EP_Open+0x62a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	441a      	add	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4619      	mov	r1, r3
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	440b      	add	r3, r1
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	b219      	sxth	r1, r3
 8006a08:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006a0c:	400b      	ands	r3, r1
 8006a0e:	b219      	sxth	r1, r3
 8006a10:	4b40      	ldr	r3, [pc, #256]	; (8006b14 <HAL_PCD_EP_Open+0x724>)
 8006a12:	430b      	orrs	r3, r1
 8006a14:	b21b      	sxth	r3, r3
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d019      	beq.n	8006a68 <HAL_PCD_EP_Open+0x678>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	441a      	add	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4619      	mov	r1, r3
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	440b      	add	r3, r1
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	b219      	sxth	r1, r3
 8006a56:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006a5a:	400b      	ands	r3, r1
 8006a5c:	b219      	sxth	r1, r3
 8006a5e:	4b2e      	ldr	r3, [pc, #184]	; (8006b18 <HAL_PCD_EP_Open+0x728>)
 8006a60:	430b      	orrs	r3, r1
 8006a62:	b21b      	sxth	r3, r3
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	441a      	add	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	440b      	add	r3, r1
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	b219      	sxth	r1, r3
 8006a8a:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006a8e:	400b      	ands	r3, r1
 8006a90:	b219      	sxth	r1, r3
 8006a92:	4b20      	ldr	r3, [pc, #128]	; (8006b14 <HAL_PCD_EP_Open+0x724>)
 8006a94:	430b      	orrs	r3, r1
 8006a96:	b21b      	sxth	r3, r3
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab6:	b29c      	uxth	r4, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	441a      	add	r2, r3
 8006ac6:	4b15      	ldr	r3, [pc, #84]	; (8006b1c <HAL_PCD_EP_Open+0x72c>)
 8006ac8:	4323      	orrs	r3, r4
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae8:	b29c      	uxth	r4, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	441a      	add	r2, r3
 8006af8:	4b08      	ldr	r3, [pc, #32]	; (8006b1c <HAL_PCD_EP_Open+0x72c>)
 8006afa:	4323      	orrs	r3, r4
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	8013      	strh	r3, [r2, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return ret;
 8006b08:	7c7b      	ldrb	r3, [r7, #17]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bc90      	pop	{r4, r7}
 8006b12:	4770      	bx	lr
 8006b14:	ffffc080 	.word	0xffffc080
 8006b18:	ffff80c0 	.word	0xffff80c0
 8006b1c:	ffff8080 	.word	0xffff8080

08006b20 <HAL_PCD_EP_Close>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 8006b20:	b490      	push	{r4, r7}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8006b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	da0b      	bge.n	8006b4c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	1a9b      	subs	r3, r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	3328      	adds	r3, #40	; 0x28
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	4413      	add	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
 8006b4a:	e00c      	b.n	8006b66 <HAL_PCD_EP_Close+0x46>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b52:	4613      	mov	r3, r2
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	1a9b      	subs	r3, r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	4413      	add	r3, r2
 8006b62:	3304      	adds	r3, #4
 8006b64:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8006b66:	78fb      	ldrb	r3, [r7, #3]
 8006b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b6c:	b2da      	uxtb	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8006b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	09db      	lsrs	r3, r3, #7
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <HAL_PCD_EP_Close+0x70>
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	e1d4      	b.n	8006f3a <HAL_PCD_EP_Close+0x41a>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

  if (ep->doublebuffer == 0) 
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	7a9b      	ldrb	r3, [r3, #10]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f040 8086 	bne.w	8006cae <HAL_PCD_EP_Close+0x18e>
  {
    if (ep->is_in)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	785b      	ldrb	r3, [r3, #1]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d040      	beq.n	8006c2c <HAL_PCD_EP_Close+0x10c>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d019      	beq.n	8006bf8 <HAL_PCD_EP_Close+0xd8>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	441a      	add	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	b219      	sxth	r1, r3
 8006be6:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006bea:	400b      	ands	r3, r1
 8006bec:	b219      	sxth	r1, r3
 8006bee:	4b80      	ldr	r3, [pc, #512]	; (8006df0 <HAL_PCD_EP_Close+0x2d0>)
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	b21b      	sxth	r3, r3
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c12:	b29c      	uxth	r4, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	441a      	add	r2, r3
 8006c22:	4b74      	ldr	r3, [pc, #464]	; (8006df4 <HAL_PCD_EP_Close+0x2d4>)
 8006c24:	4323      	orrs	r3, r4
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	8013      	strh	r3, [r2, #0]
 8006c2a:	e181      	b.n	8006f30 <HAL_PCD_EP_Close+0x410>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	461a      	mov	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d019      	beq.n	8006c7a <HAL_PCD_EP_Close+0x15a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	441a      	add	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	b219      	sxth	r1, r3
 8006c68:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006c6c:	400b      	ands	r3, r1
 8006c6e:	b219      	sxth	r1, r3
 8006c70:	4b61      	ldr	r3, [pc, #388]	; (8006df8 <HAL_PCD_EP_Close+0x2d8>)
 8006c72:	430b      	orrs	r3, r1
 8006c74:	b21b      	sxth	r3, r3
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c94:	b29c      	uxth	r4, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	441a      	add	r2, r3
 8006ca4:	4b53      	ldr	r3, [pc, #332]	; (8006df4 <HAL_PCD_EP_Close+0x2d4>)
 8006ca6:	4323      	orrs	r3, r4
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	8013      	strh	r3, [r2, #0]
 8006cac:	e140      	b.n	8006f30 <HAL_PCD_EP_Close+0x410>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	785b      	ldrb	r3, [r3, #1]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	f040 80a2 	bne.w	8006dfc <HAL_PCD_EP_Close+0x2dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d019      	beq.n	8006d06 <HAL_PCD_EP_Close+0x1e6>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	441a      	add	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	b219      	sxth	r1, r3
 8006cf4:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006cf8:	400b      	ands	r3, r1
 8006cfa:	b219      	sxth	r1, r3
 8006cfc:	4b3e      	ldr	r3, [pc, #248]	; (8006df8 <HAL_PCD_EP_Close+0x2d8>)
 8006cfe:	430b      	orrs	r3, r1
 8006d00:	b21b      	sxth	r3, r3
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d019      	beq.n	8006d54 <HAL_PCD_EP_Close+0x234>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	461a      	mov	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	441a      	add	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4619      	mov	r1, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	440b      	add	r3, r1
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	b219      	sxth	r1, r3
 8006d42:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006d46:	400b      	ands	r3, r1
 8006d48:	b219      	sxth	r1, r3
 8006d4a:	4b29      	ldr	r3, [pc, #164]	; (8006df0 <HAL_PCD_EP_Close+0x2d0>)
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	b21b      	sxth	r3, r3
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	8013      	strh	r3, [r2, #0]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	441a      	add	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4619      	mov	r1, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	b219      	sxth	r1, r3
 8006d76:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006d7a:	400b      	ands	r3, r1
 8006d7c:	b219      	sxth	r1, r3
 8006d7e:	4b1c      	ldr	r3, [pc, #112]	; (8006df0 <HAL_PCD_EP_Close+0x2d0>)
 8006d80:	430b      	orrs	r3, r1
 8006d82:	b21b      	sxth	r3, r3
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	8013      	strh	r3, [r2, #0]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	881b      	ldrh	r3, [r3, #0]
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da2:	b29c      	uxth	r4, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	461a      	mov	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	441a      	add	r2, r3
 8006db2:	4b10      	ldr	r3, [pc, #64]	; (8006df4 <HAL_PCD_EP_Close+0x2d4>)
 8006db4:	4323      	orrs	r3, r4
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd4:	b29c      	uxth	r4, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	441a      	add	r2, r3
 8006de4:	4b03      	ldr	r3, [pc, #12]	; (8006df4 <HAL_PCD_EP_Close+0x2d4>)
 8006de6:	4323      	orrs	r3, r4
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	8013      	strh	r3, [r2, #0]
 8006dec:	e0a0      	b.n	8006f30 <HAL_PCD_EP_Close+0x410>
 8006dee:	bf00      	nop
 8006df0:	ffff80c0 	.word	0xffff80c0
 8006df4:	ffff8080 	.word	0xffff8080
 8006df8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	461a      	mov	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d019      	beq.n	8006e4a <HAL_PCD_EP_Close+0x32a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	441a      	add	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	440b      	add	r3, r1
 8006e32:	881b      	ldrh	r3, [r3, #0]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	b219      	sxth	r1, r3
 8006e38:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006e3c:	400b      	ands	r3, r1
 8006e3e:	b219      	sxth	r1, r3
 8006e40:	4b40      	ldr	r3, [pc, #256]	; (8006f44 <HAL_PCD_EP_Close+0x424>)
 8006e42:	430b      	orrs	r3, r1
 8006e44:	b21b      	sxth	r3, r3
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	4413      	add	r3, r2
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d019      	beq.n	8006e98 <HAL_PCD_EP_Close+0x378>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	441a      	add	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4619      	mov	r1, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	b219      	sxth	r1, r3
 8006e86:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006e8a:	400b      	ands	r3, r1
 8006e8c:	b219      	sxth	r1, r3
 8006e8e:	4b2e      	ldr	r3, [pc, #184]	; (8006f48 <HAL_PCD_EP_Close+0x428>)
 8006e90:	430b      	orrs	r3, r1
 8006e92:	b21b      	sxth	r3, r3
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	441a      	add	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	440b      	add	r3, r1
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	b219      	sxth	r1, r3
 8006eba:	f640 730f 	movw	r3, #3855	; 0xf0f
 8006ebe:	400b      	ands	r3, r1
 8006ec0:	b219      	sxth	r1, r3
 8006ec2:	4b20      	ldr	r3, [pc, #128]	; (8006f44 <HAL_PCD_EP_Close+0x424>)
 8006ec4:	430b      	orrs	r3, r1
 8006ec6:	b21b      	sxth	r3, r3
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee6:	b29c      	uxth	r4, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	461a      	mov	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	441a      	add	r2, r3
 8006ef6:	4b15      	ldr	r3, [pc, #84]	; (8006f4c <HAL_PCD_EP_Close+0x42c>)
 8006ef8:	4323      	orrs	r3, r4
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	461a      	mov	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f18:	b29c      	uxth	r4, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	441a      	add	r2, r3
 8006f28:	4b08      	ldr	r3, [pc, #32]	; (8006f4c <HAL_PCD_EP_Close+0x42c>)
 8006f2a:	4323      	orrs	r3, r4
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	8013      	strh	r3, [r2, #0]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bc90      	pop	{r4, r7}
 8006f42:	4770      	bx	lr
 8006f44:	ffffc080 	.word	0xffffc080
 8006f48:	ffff80c0 	.word	0xffff80c0
 8006f4c:	ffff8080 	.word	0xffff8080

08006f50 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f50:	b490      	push	{r4, r7}
 8006f52:	b088      	sub	sp, #32
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	607a      	str	r2, [r7, #4]
 8006f5a:	603b      	str	r3, [r7, #0]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	72fb      	strb	r3, [r7, #11]
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8006f60:	7afb      	ldrb	r3, [r7, #11]
 8006f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f66:	4613      	mov	r3, r2
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	1a9b      	subs	r3, r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	4413      	add	r3, r2
 8006f76:	3304      	adds	r3, #4
 8006f78:	61bb      	str	r3, [r7, #24]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0;
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8006f92:	7afb      	ldrb	r3, [r7, #11]
 8006f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	701a      	strb	r2, [r3, #0]
   
  __HAL_LOCK(hpcd); 
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d101      	bne.n	8006fac <HAL_PCD_EP_Receive+0x5c>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e0de      	b.n	800716a <HAL_PCD_EP_Receive+0x21a>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	695a      	ldr	r2, [r3, #20]
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d909      	bls.n	8006fd4 <HAL_PCD_EP_Receive+0x84>
  {
    len=ep->maxpacket;
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	695a      	ldr	r2, [r3, #20]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	1ad2      	subs	r2, r2, r3
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	615a      	str	r2, [r3, #20]
 8006fd2:	e005      	b.n	8006fe0 <HAL_PCD_EP_Receive+0x90>
  }
  else
  {
    len=ep->xfer_len;
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0;
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	7a9b      	ldrb	r3, [r3, #10]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d13f      	bne.n	8007068 <HAL_PCD_EP_Receive+0x118>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	00db      	lsls	r3, r3, #3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	3306      	adds	r3, #6
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	461a      	mov	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b3e      	cmp	r3, #62	; 0x3e
 8007012:	d917      	bls.n	8007044 <HAL_PCD_EP_Receive+0xf4>
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	095b      	lsrs	r3, r3, #5
 8007018:	83fb      	strh	r3, [r7, #30]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	f003 031f 	and.w	r3, r3, #31
 8007020:	2b00      	cmp	r3, #0
 8007022:	d102      	bne.n	800702a <HAL_PCD_EP_Receive+0xda>
 8007024:	8bfb      	ldrh	r3, [r7, #30]
 8007026:	3b01      	subs	r3, #1
 8007028:	83fb      	strh	r3, [r7, #30]
 800702a:	8bfb      	ldrh	r3, [r7, #30]
 800702c:	029b      	lsls	r3, r3, #10
 800702e:	b21b      	sxth	r3, r3
 8007030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007038:	b21b      	sxth	r3, r3
 800703a:	b29b      	uxth	r3, r3
 800703c:	461a      	mov	r2, r3
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	e06e      	b.n	8007122 <HAL_PCD_EP_Receive+0x1d2>
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	085b      	lsrs	r3, r3, #1
 8007048:	83fb      	strh	r3, [r7, #30]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <HAL_PCD_EP_Receive+0x10a>
 8007054:	8bfb      	ldrh	r3, [r7, #30]
 8007056:	3301      	adds	r3, #1
 8007058:	83fb      	strh	r3, [r7, #30]
 800705a:	8bfb      	ldrh	r3, [r7, #30]
 800705c:	029b      	lsls	r3, r3, #10
 800705e:	b29b      	uxth	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	e05c      	b.n	8007122 <HAL_PCD_EP_Receive+0x1d2>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	785b      	ldrb	r3, [r3, #1]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d13f      	bne.n	80070f0 <HAL_PCD_EP_Receive+0x1a0>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007078:	b29b      	uxth	r3, r3
 800707a:	461a      	mov	r2, r3
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	00db      	lsls	r3, r3, #3
 8007082:	4413      	add	r3, r2
 8007084:	3306      	adds	r3, #6
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	461a      	mov	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007094:	613b      	str	r3, [r7, #16]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b3e      	cmp	r3, #62	; 0x3e
 800709a:	d917      	bls.n	80070cc <HAL_PCD_EP_Receive+0x17c>
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	83bb      	strh	r3, [r7, #28]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	f003 031f 	and.w	r3, r3, #31
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d102      	bne.n	80070b2 <HAL_PCD_EP_Receive+0x162>
 80070ac:	8bbb      	ldrh	r3, [r7, #28]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	83bb      	strh	r3, [r7, #28]
 80070b2:	8bbb      	ldrh	r3, [r7, #28]
 80070b4:	029b      	lsls	r3, r3, #10
 80070b6:	b21b      	sxth	r3, r3
 80070b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c0:	b21b      	sxth	r3, r3
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	461a      	mov	r2, r3
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	e02a      	b.n	8007122 <HAL_PCD_EP_Receive+0x1d2>
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	085b      	lsrs	r3, r3, #1
 80070d0:	83bb      	strh	r3, [r7, #28]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d002      	beq.n	80070e2 <HAL_PCD_EP_Receive+0x192>
 80070dc:	8bbb      	ldrh	r3, [r7, #28]
 80070de:	3301      	adds	r3, #1
 80070e0:	83bb      	strh	r3, [r7, #28]
 80070e2:	8bbb      	ldrh	r3, [r7, #28]
 80070e4:	029b      	lsls	r3, r3, #10
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	e018      	b.n	8007122 <HAL_PCD_EP_Receive+0x1d2>
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	785b      	ldrb	r3, [r3, #1]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d114      	bne.n	8007122 <HAL_PCD_EP_Receive+0x1d2>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007100:	b29b      	uxth	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	00db      	lsls	r3, r3, #3
 800710a:	4413      	add	r3, r2
 800710c:	3306      	adds	r3, #6
 800710e:	005b      	lsls	r3, r3, #1
 8007110:	461a      	mov	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800711c:	461a      	mov	r2, r3
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	6013      	str	r3, [r2, #0]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	b29b      	uxth	r3, r3
 8007134:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713c:	b29c      	uxth	r4, r3
 800713e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007142:	b29c      	uxth	r4, r3
 8007144:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007148:	b29c      	uxth	r4, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	441a      	add	r2, r3
 8007158:	4b06      	ldr	r3, [pc, #24]	; (8007174 <HAL_PCD_EP_Receive+0x224>)
 800715a:	4323      	orrs	r3, r4
 800715c:	b29b      	uxth	r3, r3
 800715e:	8013      	strh	r3, [r2, #0]
  
  __HAL_UNLOCK(hpcd); 
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3720      	adds	r7, #32
 800716e:	46bd      	mov	sp, r7
 8007170:	bc90      	pop	{r4, r7}
 8007172:	4770      	bx	lr
 8007174:	ffff8080 	.word	0xffff8080

08007178 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800718a:	6879      	ldr	r1, [r7, #4]
 800718c:	4613      	mov	r3, r2
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	1a9b      	subs	r3, r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	440b      	add	r3, r1
 8007196:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	b29b      	uxth	r3, r3
}
 800719e:	4618      	mov	r0, r3
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop

080071ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80071ac:	b590      	push	{r4, r7, lr}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	607a      	str	r2, [r7, #4]
 80071b6:	603b      	str	r3, [r7, #0]
 80071b8:	460b      	mov	r3, r1
 80071ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	82fb      	strh	r3, [r7, #22]
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80071c0:	7afb      	ldrb	r3, [r7, #11]
 80071c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071c6:	4613      	mov	r3, r2
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	1a9b      	subs	r3, r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	3328      	adds	r3, #40	; 0x28
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2200      	movs	r2, #0
 80071e6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1;
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	2201      	movs	r2, #1
 80071ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 80071ee:	7afb      	ldrb	r3, [r7, #11]
 80071f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	701a      	strb	r2, [r3, #0]
  
  __HAL_LOCK(hpcd); 
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8007200:	2b01      	cmp	r3, #1
 8007202:	d101      	bne.n	8007208 <HAL_PCD_EP_Transmit+0x5c>
 8007204:	2302      	movs	r3, #2
 8007206:	e0bb      	b.n	8007380 <HAL_PCD_EP_Transmit+0x1d4>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	695a      	ldr	r2, [r3, #20]
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	429a      	cmp	r2, r3
 800721a:	d909      	bls.n	8007230 <HAL_PCD_EP_Transmit+0x84>
  {
    len=ep->maxpacket;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	695a      	ldr	r2, [r3, #20]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	1ad2      	subs	r2, r2, r3
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	615a      	str	r2, [r3, #20]
 800722e:	e005      	b.n	800723c <HAL_PCD_EP_Transmit+0x90>
  }
  else
  {  
    len=ep->xfer_len;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	2200      	movs	r2, #0
 800723a:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	7a9b      	ldrb	r3, [r3, #10]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d11f      	bne.n	8007284 <HAL_PCD_EP_Transmit+0xd8>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6818      	ldr	r0, [r3, #0]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	6919      	ldr	r1, [r3, #16]
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	889a      	ldrh	r2, [r3, #4]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	b29b      	uxth	r3, r3
 8007254:	f7fe fb20 	bl	8005898 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007260:	b29b      	uxth	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	4413      	add	r3, r2
 800726c:	3302      	adds	r3, #2
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	461a      	mov	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800727c:	461a      	mov	r2, r3
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	6013      	str	r3, [r2, #0]
 8007282:	e059      	b.n	8007338 <HAL_PCD_EP_Transmit+0x18c>
  }
  else
  {
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	461a      	mov	r2, r3
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	b29b      	uxth	r3, r3
 8007296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_PCD_EP_Transmit+0xfa>
    {
      pmabuffer = ep->pmaaddr1;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	891b      	ldrh	r3, [r3, #8]
 80072a2:	82fb      	strh	r3, [r7, #22]
 80072a4:	e002      	b.n	80072ac <HAL_PCD_EP_Transmit+0x100>
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	88db      	ldrh	r3, [r3, #6]
 80072aa:	82fb      	strh	r3, [r7, #22]
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6818      	ldr	r0, [r3, #0]
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	6919      	ldr	r1, [r3, #16]
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	8afa      	ldrh	r2, [r7, #22]
 80072ba:	f7fe faed 	bl	8005898 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	785b      	ldrb	r3, [r3, #1]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d11a      	bne.n	80072fc <HAL_PCD_EP_Transmit+0x150>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	441a      	add	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4619      	mov	r1, r3
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	440b      	add	r3, r1
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	b219      	sxth	r1, r3
 80072e8:	f640 730f 	movw	r3, #3855	; 0xf0f
 80072ec:	400b      	ands	r3, r1
 80072ee:	b219      	sxth	r1, r3
 80072f0:	4b25      	ldr	r3, [pc, #148]	; (8007388 <HAL_PCD_EP_Transmit+0x1dc>)
 80072f2:	430b      	orrs	r3, r1
 80072f4:	b21b      	sxth	r3, r3
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	8013      	strh	r3, [r2, #0]
 80072fa:	e01d      	b.n	8007338 <HAL_PCD_EP_Transmit+0x18c>
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d119      	bne.n	8007338 <HAL_PCD_EP_Transmit+0x18c>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	461a      	mov	r2, r3
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	441a      	add	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4619      	mov	r1, r3
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	440b      	add	r3, r1
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	b29b      	uxth	r3, r3
 8007324:	b219      	sxth	r1, r3
 8007326:	f640 730f 	movw	r3, #3855	; 0xf0f
 800732a:	400b      	ands	r3, r1
 800732c:	b219      	sxth	r1, r3
 800732e:	4b17      	ldr	r3, [pc, #92]	; (800738c <HAL_PCD_EP_Transmit+0x1e0>)
 8007330:	430b      	orrs	r3, r1
 8007332:	b21b      	sxth	r3, r3
 8007334:	b29b      	uxth	r3, r3
 8007336:	8013      	strh	r3, [r2, #0]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800734e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007352:	b29c      	uxth	r4, r3
 8007354:	f084 0310 	eor.w	r3, r4, #16
 8007358:	b29c      	uxth	r4, r3
 800735a:	f084 0320 	eor.w	r3, r4, #32
 800735e:	b29c      	uxth	r4, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	461a      	mov	r2, r3
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	441a      	add	r2, r3
 800736e:	4b08      	ldr	r3, [pc, #32]	; (8007390 <HAL_PCD_EP_Transmit+0x1e4>)
 8007370:	4323      	orrs	r3, r4
 8007372:	b29b      	uxth	r3, r3
 8007374:	8013      	strh	r3, [r2, #0]
  
  __HAL_UNLOCK(hpcd);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
     
  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	371c      	adds	r7, #28
 8007384:	46bd      	mov	sp, r7
 8007386:	bd90      	pop	{r4, r7, pc}
 8007388:	ffff80c0 	.word	0xffff80c0
 800738c:	ffffc080 	.word	0xffffc080
 8007390:	ffff8080 	.word	0xffff8080

08007394 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007394:	b490      	push	{r4, r7}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d101      	bne.n	80073ae <HAL_PCD_EP_SetStall+0x1a>
 80073aa:	2302      	movs	r3, #2
 80073ac:	e092      	b.n	80074d4 <HAL_PCD_EP_SetStall+0x140>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
   
  if ((0x80 & ep_addr) == 0x80)
 80073b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	da0b      	bge.n	80073d6 <HAL_PCD_EP_SetStall+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073c4:	4613      	mov	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	3328      	adds	r3, #40	; 0x28
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	4413      	add	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	e00a      	b.n	80073ec <HAL_PCD_EP_SetStall+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80073d6:	78fa      	ldrb	r2, [r7, #3]
 80073d8:	4613      	mov	r3, r2
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	1a9b      	subs	r3, r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	4413      	add	r3, r2
 80073e8:	3304      	adds	r3, #4
 80073ea:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2201      	movs	r2, #1
 80073f0:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 80073f2:	78fb      	ldrb	r3, [r7, #3]
 80073f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80073fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	09db      	lsrs	r3, r3, #7
 8007406:	b2db      	uxtb	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	705a      	strb	r2, [r3, #1]
  
  if (ep->num == 0)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d11c      	bne.n	8007450 <HAL_PCD_EP_SetStall+0xbc>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	461a      	mov	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	b29b      	uxth	r3, r3
 8007428:	f64b 74bf 	movw	r4, #49087	; 0xbfbf
 800742c:	401c      	ands	r4, r3
 800742e:	f484 5480 	eor.w	r4, r4, #4096	; 0x1000
 8007432:	f084 0410 	eor.w	r4, r4, #16
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	441a      	add	r2, r3
 8007444:	b2a1      	uxth	r1, r4
 8007446:	4b26      	ldr	r3, [pc, #152]	; (80074e0 <HAL_PCD_EP_SetStall+0x14c>)
 8007448:	430b      	orrs	r3, r1
 800744a:	b29b      	uxth	r3, r3
 800744c:	8013      	strh	r3, [r2, #0]
 800744e:	e03c      	b.n	80074ca <HAL_PCD_EP_SetStall+0x136>
  }
  else
  {
    if (ep->is_in)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d01c      	beq.n	8007492 <HAL_PCD_EP_SetStall+0xfe>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	b29b      	uxth	r3, r3
 800746a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800746e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007472:	b29c      	uxth	r4, r3
 8007474:	f084 0310 	eor.w	r3, r4, #16
 8007478:	b29c      	uxth	r4, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	441a      	add	r2, r3
 8007488:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <HAL_PCD_EP_SetStall+0x14c>)
 800748a:	4323      	orrs	r3, r4
 800748c:	b29b      	uxth	r3, r3
 800748e:	8013      	strh	r3, [r2, #0]
 8007490:	e01b      	b.n	80074ca <HAL_PCD_EP_SetStall+0x136>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ac:	b29c      	uxth	r4, r3
 80074ae:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80074b2:	b29c      	uxth	r4, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	441a      	add	r2, r3
 80074c2:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <HAL_PCD_EP_SetStall+0x14c>)
 80074c4:	4323      	orrs	r3, r4
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	8013      	strh	r3, [r2, #0]
    }
  }
  __HAL_UNLOCK(hpcd); 
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bc90      	pop	{r4, r7}
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	ffff8080 	.word	0xffff8080

080074e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074e4:	b490      	push	{r4, r7}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 80074f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	da0b      	bge.n	8007510 <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80074f8:	78fb      	ldrb	r3, [r7, #3]
 80074fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074fe:	4613      	mov	r3, r2
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	1a9b      	subs	r3, r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	3328      	adds	r3, #40	; 0x28
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	4413      	add	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	e00a      	b.n	8007526 <HAL_PCD_EP_ClrStall+0x42>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007510:	78fa      	ldrb	r2, [r7, #3]
 8007512:	4613      	mov	r3, r2
 8007514:	00db      	lsls	r3, r3, #3
 8007516:	1a9b      	subs	r3, r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	4413      	add	r3, r2
 8007522:	3304      	adds	r3, #4
 8007524:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 800752c:	78fb      	ldrb	r3, [r7, #3]
 800752e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007532:	b2da      	uxtb	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8007538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	09db      	lsrs	r3, r3, #7
 8007540:	b2db      	uxtb	r3, r3
 8007542:	461a      	mov	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 800754e:	2b01      	cmp	r3, #1
 8007550:	d101      	bne.n	8007556 <HAL_PCD_EP_ClrStall+0x72>
 8007552:	2302      	movs	r3, #2
 8007554:	e099      	b.n	800768a <HAL_PCD_EP_ClrStall+0x1a6>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  if (ep->is_in)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	785b      	ldrb	r3, [r3, #1]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d046      	beq.n	80075f4 <HAL_PCD_EP_ClrStall+0x110>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	461a      	mov	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d019      	beq.n	80075b4 <HAL_PCD_EP_ClrStall+0xd0>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	461a      	mov	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	441a      	add	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4619      	mov	r1, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	b219      	sxth	r1, r3
 80075a2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80075a6:	400b      	ands	r3, r1
 80075a8:	b219      	sxth	r1, r3
 80075aa:	4b3a      	ldr	r3, [pc, #232]	; (8007694 <HAL_PCD_EP_ClrStall+0x1b0>)
 80075ac:	430b      	orrs	r3, r1
 80075ae:	b21b      	sxth	r3, r3
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	881b      	ldrh	r3, [r3, #0]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ce:	b29c      	uxth	r4, r3
 80075d0:	f084 0310 	eor.w	r3, r4, #16
 80075d4:	b29c      	uxth	r4, r3
 80075d6:	f084 0320 	eor.w	r3, r4, #32
 80075da:	b29c      	uxth	r4, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	461a      	mov	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	441a      	add	r2, r3
 80075ea:	4b2b      	ldr	r3, [pc, #172]	; (8007698 <HAL_PCD_EP_ClrStall+0x1b4>)
 80075ec:	4323      	orrs	r3, r4
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	8013      	strh	r3, [r2, #0]
 80075f2:	e045      	b.n	8007680 <HAL_PCD_EP_ClrStall+0x19c>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	881b      	ldrh	r3, [r3, #0]
 8007604:	b29b      	uxth	r3, r3
 8007606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d019      	beq.n	8007642 <HAL_PCD_EP_ClrStall+0x15e>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	441a      	add	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4619      	mov	r1, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	b29b      	uxth	r3, r3
 800762e:	b219      	sxth	r1, r3
 8007630:	f640 730f 	movw	r3, #3855	; 0xf0f
 8007634:	400b      	ands	r3, r1
 8007636:	b219      	sxth	r1, r3
 8007638:	4b18      	ldr	r3, [pc, #96]	; (800769c <HAL_PCD_EP_ClrStall+0x1b8>)
 800763a:	430b      	orrs	r3, r1
 800763c:	b21b      	sxth	r3, r3
 800763e:	b29b      	uxth	r3, r3
 8007640:	8013      	strh	r3, [r2, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	881b      	ldrh	r3, [r3, #0]
 8007652:	b29b      	uxth	r3, r3
 8007654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765c:	b29c      	uxth	r4, r3
 800765e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8007662:	b29c      	uxth	r4, r3
 8007664:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8007668:	b29c      	uxth	r4, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	441a      	add	r2, r3
 8007678:	4b07      	ldr	r3, [pc, #28]	; (8007698 <HAL_PCD_EP_ClrStall+0x1b4>)
 800767a:	4323      	orrs	r3, r4
 800767c:	b29b      	uxth	r3, r3
 800767e:	8013      	strh	r3, [r2, #0]
  }
  __HAL_UNLOCK(hpcd); 
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
    
  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bc90      	pop	{r4, r7}
 8007692:	4770      	bx	lr
 8007694:	ffff80c0 	.word	0xffff80c0
 8007698:	ffff8080 	.word	0xffff8080
 800769c:	ffffc080 	.word	0xffffc080

080076a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80076b2:	2300      	movs	r3, #0
 80076b4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80076b6:	e154      	b.n	8007962 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	2101      	movs	r1, #1
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	fa01 f303 	lsl.w	r3, r1, r3
 80076c4:	4013      	ands	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 8146 	beq.w	800795c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d003      	beq.n	80076e0 <HAL_GPIO_Init+0x40>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	2b12      	cmp	r3, #18
 80076de:	d123      	bne.n	8007728 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	08da      	lsrs	r2, r3, #3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3208      	adds	r2, #8
 80076e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	f003 0307 	and.w	r3, r3, #7
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	220f      	movs	r2, #15
 80076f8:	fa02 f303 	lsl.w	r3, r2, r3
 80076fc:	43db      	mvns	r3, r3
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4013      	ands	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	691a      	ldr	r2, [r3, #16]
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	fa02 f303 	lsl.w	r3, r2, r3
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	4313      	orrs	r3, r2
 8007718:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	08da      	lsrs	r2, r3, #3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3208      	adds	r2, #8
 8007722:	6939      	ldr	r1, [r7, #16]
 8007724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	2203      	movs	r2, #3
 8007734:	fa02 f303 	lsl.w	r3, r2, r3
 8007738:	43db      	mvns	r3, r3
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	4013      	ands	r3, r2
 800773e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	f003 0203 	and.w	r2, r3, #3
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	fa02 f303 	lsl.w	r3, r2, r3
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	4313      	orrs	r3, r2
 8007754:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d00b      	beq.n	800777c <HAL_GPIO_Init+0xdc>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	2b02      	cmp	r3, #2
 800776a:	d007      	beq.n	800777c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007770:	2b11      	cmp	r3, #17
 8007772:	d003      	beq.n	800777c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	2b12      	cmp	r3, #18
 800777a:	d130      	bne.n	80077de <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	005b      	lsls	r3, r3, #1
 8007786:	2203      	movs	r2, #3
 8007788:	fa02 f303 	lsl.w	r3, r2, r3
 800778c:	43db      	mvns	r3, r3
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4013      	ands	r3, r2
 8007792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80077b2:	2201      	movs	r2, #1
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ba:	43db      	mvns	r3, r3
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	4013      	ands	r3, r2
 80077c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	091b      	lsrs	r3, r3, #4
 80077c8:	f003 0201 	and.w	r2, r3, #1
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	2203      	movs	r2, #3
 80077ea:	fa02 f303 	lsl.w	r3, r2, r3
 80077ee:	43db      	mvns	r3, r3
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	4013      	ands	r3, r2
 80077f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	689a      	ldr	r2, [r3, #8]
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	4313      	orrs	r3, r2
 8007806:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 80a0 	beq.w	800795c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800781c:	4a58      	ldr	r2, [pc, #352]	; (8007980 <HAL_GPIO_Init+0x2e0>)
 800781e:	4b58      	ldr	r3, [pc, #352]	; (8007980 <HAL_GPIO_Init+0x2e0>)
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	f043 0301 	orr.w	r3, r3, #1
 8007826:	6193      	str	r3, [r2, #24]
 8007828:	4b55      	ldr	r3, [pc, #340]	; (8007980 <HAL_GPIO_Init+0x2e0>)
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	60bb      	str	r3, [r7, #8]
 8007832:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8007834:	4a53      	ldr	r2, [pc, #332]	; (8007984 <HAL_GPIO_Init+0x2e4>)
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	089b      	lsrs	r3, r3, #2
 800783a:	3302      	adds	r3, #2
 800783c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007840:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f003 0303 	and.w	r3, r3, #3
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	220f      	movs	r2, #15
 800784c:	fa02 f303 	lsl.w	r3, r2, r3
 8007850:	43db      	mvns	r3, r3
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	4013      	ands	r3, r2
 8007856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800785e:	d019      	beq.n	8007894 <HAL_GPIO_Init+0x1f4>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a49      	ldr	r2, [pc, #292]	; (8007988 <HAL_GPIO_Init+0x2e8>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d013      	beq.n	8007890 <HAL_GPIO_Init+0x1f0>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a48      	ldr	r2, [pc, #288]	; (800798c <HAL_GPIO_Init+0x2ec>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d00d      	beq.n	800788c <HAL_GPIO_Init+0x1ec>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a47      	ldr	r2, [pc, #284]	; (8007990 <HAL_GPIO_Init+0x2f0>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d007      	beq.n	8007888 <HAL_GPIO_Init+0x1e8>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a46      	ldr	r2, [pc, #280]	; (8007994 <HAL_GPIO_Init+0x2f4>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d101      	bne.n	8007884 <HAL_GPIO_Init+0x1e4>
 8007880:	2304      	movs	r3, #4
 8007882:	e008      	b.n	8007896 <HAL_GPIO_Init+0x1f6>
 8007884:	2305      	movs	r3, #5
 8007886:	e006      	b.n	8007896 <HAL_GPIO_Init+0x1f6>
 8007888:	2303      	movs	r3, #3
 800788a:	e004      	b.n	8007896 <HAL_GPIO_Init+0x1f6>
 800788c:	2302      	movs	r3, #2
 800788e:	e002      	b.n	8007896 <HAL_GPIO_Init+0x1f6>
 8007890:	2301      	movs	r3, #1
 8007892:	e000      	b.n	8007896 <HAL_GPIO_Init+0x1f6>
 8007894:	2300      	movs	r3, #0
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	f002 0203 	and.w	r2, r2, #3
 800789c:	0092      	lsls	r2, r2, #2
 800789e:	4093      	lsls	r3, r2
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80078a6:	4937      	ldr	r1, [pc, #220]	; (8007984 <HAL_GPIO_Init+0x2e4>)
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	089b      	lsrs	r3, r3, #2
 80078ac:	3302      	adds	r3, #2
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80078b4:	4b38      	ldr	r3, [pc, #224]	; (8007998 <HAL_GPIO_Init+0x2f8>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	43db      	mvns	r3, r3
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	4013      	ands	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80078d8:	4a2f      	ldr	r2, [pc, #188]	; (8007998 <HAL_GPIO_Init+0x2f8>)
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80078de:	4b2e      	ldr	r3, [pc, #184]	; (8007998 <HAL_GPIO_Init+0x2f8>)
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	43db      	mvns	r3, r3
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	4013      	ands	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007902:	4a25      	ldr	r2, [pc, #148]	; (8007998 <HAL_GPIO_Init+0x2f8>)
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007908:	4b23      	ldr	r3, [pc, #140]	; (8007998 <HAL_GPIO_Init+0x2f8>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	43db      	mvns	r3, r3
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	4013      	ands	r3, r2
 8007916:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4313      	orrs	r3, r2
 800792a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800792c:	4a1a      	ldr	r2, [pc, #104]	; (8007998 <HAL_GPIO_Init+0x2f8>)
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007932:	4b19      	ldr	r3, [pc, #100]	; (8007998 <HAL_GPIO_Init+0x2f8>)
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	43db      	mvns	r3, r3
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	4013      	ands	r3, r2
 8007940:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007956:	4a10      	ldr	r2, [pc, #64]	; (8007998 <HAL_GPIO_Init+0x2f8>)
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	3301      	adds	r3, #1
 8007960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	fa22 f303 	lsr.w	r3, r2, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	f47f aea3 	bne.w	80076b8 <HAL_GPIO_Init+0x18>
      }
    }
    
    position++;
  }
}
 8007972:	bf00      	nop
 8007974:	371c      	adds	r7, #28
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	40021000 	.word	0x40021000
 8007984:	40010000 	.word	0x40010000
 8007988:	48000400 	.word	0x48000400
 800798c:	48000800 	.word	0x48000800
 8007990:	48000c00 	.word	0x48000c00
 8007994:	48001000 	.word	0x48001000
 8007998:	40010400 	.word	0x40010400

0800799c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	691a      	ldr	r2, [r3, #16]
 80079ac:	887b      	ldrh	r3, [r7, #2]
 80079ae:	4013      	ands	r3, r2
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80079b4:	2301      	movs	r3, #1
 80079b6:	73fb      	strb	r3, [r7, #15]
 80079b8:	e001      	b.n	80079be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80079be:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	807b      	strh	r3, [r7, #2]
 80079d8:	4613      	mov	r3, r2
 80079da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80079dc:	787b      	ldrb	r3, [r7, #1]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80079e2:	887a      	ldrh	r2, [r7, #2]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80079e8:	e002      	b.n	80079f0 <HAL_GPIO_WritePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80079ea:	887a      	ldrh	r2, [r7, #2]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	460b      	mov	r3, r1
 8007a06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	695a      	ldr	r2, [r3, #20]
 8007a0c:	887b      	ldrh	r3, [r7, #2]
 8007a0e:	405a      	eors	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	615a      	str	r2, [r3, #20]
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007a2c:	231f      	movs	r3, #31
 8007a2e:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0)){}
 8007a30:	bf00      	nop
 8007a32:	2201      	movs	r2, #1
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	409a      	lsls	r2, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d104      	bne.n	8007a4a <HAL_CRCEx_Polynomial_Set+0x2a>
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	1e5a      	subs	r2, r3, #1
 8007a44:	617a      	str	r2, [r7, #20]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1f3      	bne.n	8007a32 <HAL_CRCEx_Polynomial_Set+0x12>

  switch (PolyLength)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b18      	cmp	r3, #24
 8007a4e:	d844      	bhi.n	8007ada <HAL_CRCEx_Polynomial_Set+0xba>
 8007a50:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <HAL_CRCEx_Polynomial_Set+0x38>)
 8007a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a56:	bf00      	nop
 8007a58:	08007adb 	.word	0x08007adb
 8007a5c:	08007adb 	.word	0x08007adb
 8007a60:	08007adb 	.word	0x08007adb
 8007a64:	08007adb 	.word	0x08007adb
 8007a68:	08007adb 	.word	0x08007adb
 8007a6c:	08007adb 	.word	0x08007adb
 8007a70:	08007adb 	.word	0x08007adb
 8007a74:	08007adb 	.word	0x08007adb
 8007a78:	08007ad1 	.word	0x08007ad1
 8007a7c:	08007adb 	.word	0x08007adb
 8007a80:	08007adb 	.word	0x08007adb
 8007a84:	08007adb 	.word	0x08007adb
 8007a88:	08007adb 	.word	0x08007adb
 8007a8c:	08007adb 	.word	0x08007adb
 8007a90:	08007adb 	.word	0x08007adb
 8007a94:	08007adb 	.word	0x08007adb
 8007a98:	08007ac7 	.word	0x08007ac7
 8007a9c:	08007adb 	.word	0x08007adb
 8007aa0:	08007adb 	.word	0x08007adb
 8007aa4:	08007adb 	.word	0x08007adb
 8007aa8:	08007adb 	.word	0x08007adb
 8007aac:	08007adb 	.word	0x08007adb
 8007ab0:	08007adb 	.word	0x08007adb
 8007ab4:	08007adb 	.word	0x08007adb
 8007ab8:	08007abd 	.word	0x08007abd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B) 
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2b06      	cmp	r3, #6
 8007ac0:	d90d      	bls.n	8007ade <HAL_CRCEx_Polynomial_Set+0xbe>
      {
        return  HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e01f      	b.n	8007b06 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b07      	cmp	r3, #7
 8007aca:	d90a      	bls.n	8007ae2 <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e01a      	b.n	8007b06 <HAL_CRCEx_Polynomial_Set+0xe6>
      }      
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2b0f      	cmp	r3, #15
 8007ad4:	d907      	bls.n	8007ae6 <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e015      	b.n	8007b06 <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break; 
    default:
      break;                  
 8007ada:	bf00      	nop
 8007adc:	e004      	b.n	8007ae8 <HAL_CRCEx_Polynomial_Set+0xc8>
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B) 
      {
        return  HAL_ERROR;
      }
      break;
 8007ade:	bf00      	nop
 8007ae0:	e002      	b.n	8007ae8 <HAL_CRCEx_Polynomial_Set+0xc8>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        return  HAL_ERROR;
      }      
      break;
 8007ae2:	bf00      	nop
 8007ae4:	e000      	b.n	8007ae8 <HAL_CRCEx_Polynomial_Set+0xc8>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
      }      
      break;
 8007ae6:	bf00      	nop
    default:
      break;                  
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	6812      	ldr	r2, [r2, #0]
 8007af8:	6892      	ldr	r2, [r2, #8]
 8007afa:	f022 0118 	bic.w	r1, r2, #24
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	430a      	orrs	r2, r1
 8007b02:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop

08007b14 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc: CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e054      	b.n	8007bd0 <HAL_CRC_Init+0xbc>
  }
  
  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	7f5b      	ldrb	r3, [r3, #29]
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d105      	bne.n	8007b3c <HAL_CRC_Init+0x28>
  {   
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7f9 fe98 	bl	800186c <HAL_CRC_MspInit>
  }
  
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	791b      	ldrb	r3, [r3, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10c      	bne.n	8007b64 <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a22      	ldr	r2, [pc, #136]	; (8007bd8 <HAL_CRC_Init+0xc4>)
 8007b50:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6812      	ldr	r2, [r2, #0]
 8007b5a:	6892      	ldr	r2, [r2, #8]
 8007b5c:	f022 0218 	bic.w	r2, r2, #24
 8007b60:	609a      	str	r2, [r3, #8]
 8007b62:	e00c      	b.n	8007b7e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6899      	ldr	r1, [r3, #8]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7ff ff56 	bl	8007a20 <HAL_CRCEx_Polynomial_Set>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e028      	b.n	8007bd0 <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	795b      	ldrb	r3, [r3, #5]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d105      	bne.n	8007b92 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8e:	611a      	str	r2, [r3, #16]
 8007b90:	e004      	b.n	8007b9c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	6912      	ldr	r2, [r2, #16]
 8007b9a:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6812      	ldr	r2, [r2, #0]
 8007ba4:	6892      	ldr	r2, [r2, #8]
 8007ba6:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6952      	ldr	r2, [r2, #20]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6812      	ldr	r2, [r2, #0]
 8007bba:	6892      	ldr	r2, [r2, #8]
 8007bbc:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	6992      	ldr	r2, [r2, #24]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	04c11db7 	.word	0x04c11db7

08007bdc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat. 
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  uint32_t index = 0; /* CRC input data buffer index */
 8007be8:	2300      	movs	r3, #0
 8007bea:	617b      	str	r3, [r7, #20]
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8007bec:	2300      	movs	r3, #0
 8007bee:	613b      	str	r3, [r7, #16]
    
  /* Process locked */
  __HAL_LOCK(hcrc); 
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	7f1b      	ldrb	r3, [r3, #28]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d101      	bne.n	8007bfc <HAL_CRC_Calculate+0x20>
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	e042      	b.n	8007c82 <HAL_CRC_Calculate+0xa6>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	771a      	strb	r2, [r3, #28]
  
  /* Change CRC peripheral state */  
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2202      	movs	r2, #2
 8007c06:	775a      	strb	r2, [r3, #29]
  
  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is 
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	6812      	ldr	r2, [r2, #0]
 8007c10:	6892      	ldr	r2, [r2, #8]
 8007c12:	f042 0201 	orr.w	r2, r2, #1
 8007c16:	609a      	str	r2, [r3, #8]
  
  switch (hcrc->InputDataFormat)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d022      	beq.n	8007c66 <HAL_CRC_Calculate+0x8a>
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d002      	beq.n	8007c2a <HAL_CRC_Calculate+0x4e>
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d017      	beq.n	8007c58 <HAL_CRC_Calculate+0x7c>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
      break;
      
    default:
      break;         
 8007c28:	e024      	b.n	8007c74 <HAL_CRC_Calculate+0x98>
  
  switch (hcrc->InputDataFormat)
  {
    case CRC_INPUTDATA_FORMAT_WORDS:  
      /* Enter 32-bit input data to the CRC calculator */
      for(index = 0; index < BufferLength; index++)
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	e00a      	b.n	8007c46 <HAL_CRC_Calculate+0x6a>
      {
        hcrc->Instance->DR = pBuffer[index];
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	0092      	lsls	r2, r2, #2
 8007c38:	68b9      	ldr	r1, [r7, #8]
 8007c3a:	440a      	add	r2, r1
 8007c3c:	6812      	ldr	r2, [r2, #0]
 8007c3e:	601a      	str	r2, [r3, #0]
  
  switch (hcrc->InputDataFormat)
  {
    case CRC_INPUTDATA_FORMAT_WORDS:  
      /* Enter 32-bit input data to the CRC calculator */
      for(index = 0; index < BufferLength; index++)
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	3301      	adds	r3, #1
 8007c44:	617b      	str	r3, [r7, #20]
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d3f0      	bcc.n	8007c30 <HAL_CRC_Calculate+0x54>
      {
        hcrc->Instance->DR = pBuffer[index];
      }
      temp = hcrc->Instance->DR;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	613b      	str	r3, [r7, #16]
      break;
 8007c56:	e00d      	b.n	8007c74 <HAL_CRC_Calculate+0x98>
      
    case CRC_INPUTDATA_FORMAT_BYTES: 
      /* Specific 8-bit input data handling  */
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	68b9      	ldr	r1, [r7, #8]
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 f815 	bl	8007c8c <CRC_Handle_8>
 8007c62:	6138      	str	r0, [r7, #16]
      break;
 8007c64:	e006      	b.n	8007c74 <HAL_CRC_Calculate+0x98>
      
    case CRC_INPUTDATA_FORMAT_HALFWORDS: 
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	68b9      	ldr	r1, [r7, #8]
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f000 f89c 	bl	8007da8 <CRC_Handle_16>
 8007c70:	6138      	str	r0, [r7, #16]
      break;
 8007c72:	bf00      	nop
    default:
      break;         
  }

  /* Change CRC peripheral state */    
  hcrc->State = HAL_CRC_STATE_READY; 
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2201      	movs	r2, #1
 8007c78:	775a      	strb	r2, [r3, #29]
  
  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	771a      	strb	r2, [r3, #28]
  
  /* Return the CRC computed value */ 
  return temp;
 8007c80:	693b      	ldr	r3, [r7, #16]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop

08007c8c <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
  uint32_t i = 0; /* input data buffer index */
 8007c98:	2300      	movs	r3, #0
 8007c9a:	617b      	str	r3, [r7, #20]
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	e022      	b.n	8007ce8 <CRC_Handle_8+0x5c>
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	0092      	lsls	r2, r2, #2
 8007caa:	68b9      	ldr	r1, [r7, #8]
 8007cac:	440a      	add	r2, r1
 8007cae:	7812      	ldrb	r2, [r2, #0]
 8007cb0:	0611      	lsls	r1, r2, #24
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	0092      	lsls	r2, r2, #2
 8007cb6:	3201      	adds	r2, #1
 8007cb8:	68b8      	ldr	r0, [r7, #8]
 8007cba:	4402      	add	r2, r0
 8007cbc:	7812      	ldrb	r2, [r2, #0]
 8007cbe:	0412      	lsls	r2, r2, #16
 8007cc0:	4311      	orrs	r1, r2
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	0092      	lsls	r2, r2, #2
 8007cc6:	3202      	adds	r2, #2
 8007cc8:	68b8      	ldr	r0, [r7, #8]
 8007cca:	4402      	add	r2, r0
 8007ccc:	7812      	ldrb	r2, [r2, #0]
 8007cce:	0212      	lsls	r2, r2, #8
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	6979      	ldr	r1, [r7, #20]
 8007cd4:	0089      	lsls	r1, r1, #2
 8007cd6:	3103      	adds	r1, #3
 8007cd8:	68b8      	ldr	r0, [r7, #8]
 8007cda:	4401      	add	r1, r0
 8007cdc:	7809      	ldrb	r1, [r1, #0]
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	601a      	str	r2, [r3, #0]
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	617b      	str	r3, [r7, #20]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	089a      	lsrs	r2, r3, #2
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d8d7      	bhi.n	8007ca2 <CRC_Handle_8+0x16>
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f003 0303 	and.w	r3, r3, #3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d04b      	beq.n	8007d94 <CRC_Handle_8+0x108>
   {
     if  (BufferLength%4 == 1)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d108      	bne.n	8007d18 <CRC_Handle_8+0x8c>
     {
       *(uint8_t volatile*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	4413      	add	r3, r2
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	700b      	strb	r3, [r1, #0]
     }
     if  (BufferLength%4 == 2)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f003 0303 	and.w	r3, r3, #3
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d114      	bne.n	8007d4c <CRC_Handle_8+0xc0>
     {
       *(uint16_t volatile*) (&hcrc->Instance->DR) = ((uint32_t)pBuffer[4*i]<<8) | (uint32_t)pBuffer[4*i+1];
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4618      	mov	r0, r3
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	4413      	add	r3, r2
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	021b      	lsls	r3, r3, #8
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	68b9      	ldr	r1, [r7, #8]
 8007d40:	440b      	add	r3, r1
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	4313      	orrs	r3, r2
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	8003      	strh	r3, [r0, #0]
     }
     if  (BufferLength%4 == 3)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f003 0303 	and.w	r3, r3, #3
 8007d52:	2b03      	cmp	r3, #3
 8007d54:	d11e      	bne.n	8007d94 <CRC_Handle_8+0x108>
     {
       *(uint16_t volatile*) (&hcrc->Instance->DR) = ((uint32_t)pBuffer[4*i]<<8) | (uint32_t)pBuffer[4*i+1];
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	4413      	add	r3, r2
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	021b      	lsls	r3, r3, #8
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	3301      	adds	r3, #1
 8007d72:	68b9      	ldr	r1, [r7, #8]
 8007d74:	440b      	add	r3, r1
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	8003      	strh	r3, [r0, #0]
       *(uint8_t volatile*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4619      	mov	r1, r3
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	3302      	adds	r3, #2
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	4413      	add	r3, r2
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	700b      	strb	r3, [r1, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop

08007da8 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;  /* input data buffer index */
 8007db4:	2300      	movs	r3, #0
 8007db6:	617b      	str	r3, [r7, #20]
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8007db8:	2300      	movs	r3, #0
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	e012      	b.n	8007de4 <CRC_Handle_16+0x3c>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2*i]<<16) | (uint32_t)pBuffer[2*i+1];     
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	0092      	lsls	r2, r2, #2
 8007dc6:	68b9      	ldr	r1, [r7, #8]
 8007dc8:	440a      	add	r2, r1
 8007dca:	8812      	ldrh	r2, [r2, #0]
 8007dcc:	0412      	lsls	r2, r2, #16
 8007dce:	6979      	ldr	r1, [r7, #20]
 8007dd0:	0089      	lsls	r1, r1, #2
 8007dd2:	3102      	adds	r1, #2
 8007dd4:	68b8      	ldr	r0, [r7, #8]
 8007dd6:	4401      	add	r1, r0
 8007dd8:	8809      	ldrh	r1, [r1, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	601a      	str	r2, [r3, #0]
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	3301      	adds	r3, #1
 8007de2:	617b      	str	r3, [r7, #20]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	085a      	lsrs	r2, r3, #1
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d8e7      	bhi.n	8007dbe <CRC_Handle_16+0x16>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2*i]<<16) | (uint32_t)pBuffer[2*i+1];     
  }
  if ((BufferLength%2) != 0)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d008      	beq.n	8007e0a <CRC_Handle_16+0x62>
  {
       *(uint16_t volatile*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	4413      	add	r3, r2
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	800b      	strh	r3, [r1, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	371c      	adds	r7, #28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f003 0307 	and.w	r3, r3, #7
 8007e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e2c:	4b0c      	ldr	r3, [pc, #48]	; (8007e60 <NVIC_SetPriorityGrouping+0x44>)
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e38:	4013      	ands	r3, r2
 8007e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8007e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e4c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8007e4e:	4a04      	ldr	r2, [pc, #16]	; (8007e60 <NVIC_SetPriorityGrouping+0x44>)
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	60d3      	str	r3, [r2, #12]
}
 8007e54:	bf00      	nop
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	e000ed00 	.word	0xe000ed00

08007e64 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e68:	4b04      	ldr	r3, [pc, #16]	; (8007e7c <NVIC_GetPriorityGrouping+0x18>)
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e70:	0a1b      	lsrs	r3, r3, #8
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	e000ed00 	.word	0xe000ed00

08007e80 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4603      	mov	r3, r0
 8007e88:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007e8a:	4909      	ldr	r1, [pc, #36]	; (8007eb0 <NVIC_EnableIRQ+0x30>)
 8007e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e90:	095b      	lsrs	r3, r3, #5
 8007e92:	79fa      	ldrb	r2, [r7, #7]
 8007e94:	f002 021f 	and.w	r2, r2, #31
 8007e98:	2001      	movs	r0, #1
 8007e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8007e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	e000e100 	.word	0xe000e100

08007eb4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	4603      	mov	r3, r0
 8007ebc:	6039      	str	r1, [r7, #0]
 8007ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8007ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	da0b      	bge.n	8007ee0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ec8:	490d      	ldr	r1, [pc, #52]	; (8007f00 <NVIC_SetPriority+0x4c>)
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	f003 030f 	and.w	r3, r3, #15
 8007ed0:	3b04      	subs	r3, #4
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	b2d2      	uxtb	r2, r2
 8007ed6:	0112      	lsls	r2, r2, #4
 8007ed8:	b2d2      	uxtb	r2, r2
 8007eda:	440b      	add	r3, r1
 8007edc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ede:	e009      	b.n	8007ef4 <NVIC_SetPriority+0x40>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ee0:	4908      	ldr	r1, [pc, #32]	; (8007f04 <NVIC_SetPriority+0x50>)
 8007ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	b2d2      	uxtb	r2, r2
 8007eea:	0112      	lsls	r2, r2, #4
 8007eec:	b2d2      	uxtb	r2, r2
 8007eee:	440b      	add	r3, r1
 8007ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	e000ed00 	.word	0xe000ed00
 8007f04:	e000e100 	.word	0xe000e100

08007f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b089      	sub	sp, #36	; 0x24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	f1c3 0307 	rsb	r3, r3, #7
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	bf28      	it	cs
 8007f26:	2304      	movcs	r3, #4
 8007f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	2b06      	cmp	r3, #6
 8007f30:	d902      	bls.n	8007f38 <NVIC_EncodePriority+0x30>
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	3b03      	subs	r3, #3
 8007f36:	e000      	b.n	8007f3a <NVIC_EncodePriority+0x32>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	fa02 f303 	lsl.w	r3, r2, r3
 8007f44:	1e5a      	subs	r2, r3, #1
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	401a      	ands	r2, r3
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f4e:	2101      	movs	r1, #1
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	fa01 f303 	lsl.w	r3, r1, r3
 8007f56:	1e59      	subs	r1, r3, #1
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8007f5c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3724      	adds	r7, #36	; 0x24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop

08007f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f7c:	d301      	bcc.n	8007f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e00f      	b.n	8007fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f82:	4a0a      	ldr	r2, [pc, #40]	; (8007fac <SysTick_Config+0x40>)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f8a:	210f      	movs	r1, #15
 8007f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f90:	f7ff ff90 	bl	8007eb4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f94:	4b05      	ldr	r3, [pc, #20]	; (8007fac <SysTick_Config+0x40>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f9a:	4b04      	ldr	r3, [pc, #16]	; (8007fac <SysTick_Config+0x40>)
 8007f9c:	2207      	movs	r2, #7
 8007f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	e000e010 	.word	0xe000e010

08007fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7ff ff2f 	bl	8007e1c <NVIC_SetPriorityGrouping>
}
 8007fbe:	bf00      	nop
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop

08007fc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
 8007fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007fda:	f7ff ff43 	bl	8007e64 <NVIC_GetPriorityGrouping>
 8007fde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	68b9      	ldr	r1, [r7, #8]
 8007fe4:	6978      	ldr	r0, [r7, #20]
 8007fe6:	f7ff ff8f 	bl	8007f08 <NVIC_EncodePriority>
 8007fea:	4602      	mov	r2, r0
 8007fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff ff5e 	bl	8007eb4 <NVIC_SetPriority>
}
 8007ff8:	bf00      	nop
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800800a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800800e:	4618      	mov	r0, r3
 8008010:	f7ff ff36 	bl	8007e80 <NVIC_EnableIRQ>
}
 8008014:	bf00      	nop
 8008016:	3708      	adds	r7, #8
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7ff ffa1 	bl	8007f6c <SysTick_Config>
 800802a:	4603      	mov	r3, r0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b04      	cmp	r3, #4
 8008040:	d106      	bne.n	8008050 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8008042:	4a09      	ldr	r2, [pc, #36]	; (8008068 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008044:	4b08      	ldr	r3, [pc, #32]	; (8008068 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f043 0304 	orr.w	r3, r3, #4
 800804c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800804e:	e005      	b.n	800805c <HAL_SYSTICK_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8008050:	4a05      	ldr	r2, [pc, #20]	; (8008068 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008052:	4b05      	ldr	r3, [pc, #20]	; (8008068 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f023 0304 	bic.w	r3, r3, #4
 800805a:	6013      	str	r3, [r2, #0]
  }
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	e000e010 	.word	0xe000e010

0800806c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8008070:	f000 f802 	bl	8008078 <HAL_SYSTICK_Callback>
}
 8008074:	bf00      	nop
 8008076:	bd80      	pop	{r7, pc}

08008078 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8008078:	b480      	push	{r7}
 800807a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800807c:	bf00      	nop
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop

08008088 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800808c:	4a08      	ldr	r2, [pc, #32]	; (80080b0 <HAL_Init+0x28>)
 800808e:	4b08      	ldr	r3, [pc, #32]	; (80080b0 <HAL_Init+0x28>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f043 0310 	orr.w	r3, r3, #16
 8008096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008098:	2003      	movs	r0, #3
 800809a:	f7ff ff89 	bl	8007fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800809e:	2000      	movs	r0, #0
 80080a0:	f000 f808 	bl	80080b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80080a4:	f7f9 fba0 	bl	80017e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	40022000 	.word	0x40022000

080080b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000);
 80080bc:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <HAL_InitTick+0x30>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a09      	ldr	r2, [pc, #36]	; (80080e8 <HAL_InitTick+0x34>)
 80080c2:	fba2 2303 	umull	r2, r3, r2, r3
 80080c6:	099b      	lsrs	r3, r3, #6
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7ff ffa7 	bl	800801c <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80080ce:	2200      	movs	r2, #0
 80080d0:	6879      	ldr	r1, [r7, #4]
 80080d2:	f04f 30ff 	mov.w	r0, #4294967295
 80080d6:	f7ff ff77 	bl	8007fc8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	20000154 	.word	0x20000154
 80080e8:	10624dd3 	.word	0x10624dd3

080080ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80080ec:	b480      	push	{r7}
 80080ee:	af00      	add	r7, sp, #0
  uwTick++;
 80080f0:	4b04      	ldr	r3, [pc, #16]	; (8008104 <HAL_IncTick+0x18>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3301      	adds	r3, #1
 80080f6:	4a03      	ldr	r2, [pc, #12]	; (8008104 <HAL_IncTick+0x18>)
 80080f8:	6013      	str	r3, [r2, #0]
}
 80080fa:	bf00      	nop
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	20001174 	.word	0x20001174

08008108 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008108:	b480      	push	{r7}
 800810a:	af00      	add	r7, sp, #0
  return uwTick;  
 800810c:	4b03      	ldr	r3, [pc, #12]	; (800811c <HAL_GetTick+0x14>)
 800810e:	681b      	ldr	r3, [r3, #0]
}
 8008110:	4618      	mov	r0, r3
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
 800811a:	bf00      	nop
 800811c:	20001174 	.word	0x20001174

08008120 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008128:	f7ff ffee 	bl	8008108 <HAL_GetTick>
 800812c:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800812e:	bf00      	nop
 8008130:	f7ff ffea 	bl	8008108 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	1ad2      	subs	r2, r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	429a      	cmp	r2, r3
 800813e:	d3f7      	bcc.n	8008130 <HAL_Delay+0x10>
  {
  }
}
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008148:	b480      	push	{r7}
 800814a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800814c:	4a1f      	ldr	r2, [pc, #124]	; (80081cc <SystemInit+0x84>)
 800814e:	4b1f      	ldr	r3, [pc, #124]	; (80081cc <SystemInit+0x84>)
 8008150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800815c:	4a1c      	ldr	r2, [pc, #112]	; (80081d0 <SystemInit+0x88>)
 800815e:	4b1c      	ldr	r3, [pc, #112]	; (80081d0 <SystemInit+0x88>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f043 0301 	orr.w	r3, r3, #1
 8008166:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8008168:	4919      	ldr	r1, [pc, #100]	; (80081d0 <SystemInit+0x88>)
 800816a:	4b19      	ldr	r3, [pc, #100]	; (80081d0 <SystemInit+0x88>)
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	4b19      	ldr	r3, [pc, #100]	; (80081d4 <SystemInit+0x8c>)
 8008170:	4013      	ands	r3, r2
 8008172:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8008174:	4a16      	ldr	r2, [pc, #88]	; (80081d0 <SystemInit+0x88>)
 8008176:	4b16      	ldr	r3, [pc, #88]	; (80081d0 <SystemInit+0x88>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800817e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008182:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008184:	4a12      	ldr	r2, [pc, #72]	; (80081d0 <SystemInit+0x88>)
 8008186:	4b12      	ldr	r3, [pc, #72]	; (80081d0 <SystemInit+0x88>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800818e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8008190:	4a0f      	ldr	r2, [pc, #60]	; (80081d0 <SystemInit+0x88>)
 8008192:	4b0f      	ldr	r3, [pc, #60]	; (80081d0 <SystemInit+0x88>)
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800819a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800819c:	4a0c      	ldr	r2, [pc, #48]	; (80081d0 <SystemInit+0x88>)
 800819e:	4b0c      	ldr	r3, [pc, #48]	; (80081d0 <SystemInit+0x88>)
 80081a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a2:	f023 030f 	bic.w	r3, r3, #15
 80081a6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80081a8:	4909      	ldr	r1, [pc, #36]	; (80081d0 <SystemInit+0x88>)
 80081aa:	4b09      	ldr	r3, [pc, #36]	; (80081d0 <SystemInit+0x88>)
 80081ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081ae:	4b0a      	ldr	r3, [pc, #40]	; (80081d8 <SystemInit+0x90>)
 80081b0:	4013      	ands	r3, r2
 80081b2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80081b4:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <SystemInit+0x88>)
 80081b6:	2200      	movs	r2, #0
 80081b8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80081ba:	4b04      	ldr	r3, [pc, #16]	; (80081cc <SystemInit+0x84>)
 80081bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80081c0:	609a      	str	r2, [r3, #8]
#endif
}
 80081c2:	bf00      	nop
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	e000ed00 	.word	0xe000ed00
 80081d0:	40021000 	.word	0x40021000
 80081d4:	f87fc00c 	.word	0xf87fc00c
 80081d8:	ff00fccc 	.word	0xff00fccc

080081dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80081dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008214 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80081e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80081e2:	e003      	b.n	80081ec <LoopCopyDataInit>

080081e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80081e4:	4b0c      	ldr	r3, [pc, #48]	; (8008218 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80081e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80081e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80081ea:	3104      	adds	r1, #4

080081ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80081ec:	480b      	ldr	r0, [pc, #44]	; (800821c <LoopForever+0xa>)
	ldr	r3, =_edata
 80081ee:	4b0c      	ldr	r3, [pc, #48]	; (8008220 <LoopForever+0xe>)
	adds	r2, r0, r1
 80081f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80081f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80081f4:	d3f6      	bcc.n	80081e4 <CopyDataInit>
	ldr	r2, =_sbss
 80081f6:	4a0b      	ldr	r2, [pc, #44]	; (8008224 <LoopForever+0x12>)
	b	LoopFillZerobss
 80081f8:	e002      	b.n	8008200 <LoopFillZerobss>

080081fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80081fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80081fc:	f842 3b04 	str.w	r3, [r2], #4

08008200 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008200:	4b09      	ldr	r3, [pc, #36]	; (8008228 <LoopForever+0x16>)
	cmp	r2, r3
 8008202:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008204:	d3f9      	bcc.n	80081fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008206:	f7ff ff9f 	bl	8008148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800820a:	f000 f811 	bl	8008230 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800820e:	f7f9 fb8f 	bl	8001930 <main>

08008212 <LoopForever>:

LoopForever:
    b LoopForever
 8008212:	e7fe      	b.n	8008212 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008214:	20008000 	.word	0x20008000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8008218:	0800b33c 	.word	0x0800b33c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 800821c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008220:	20000694 	.word	0x20000694
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8008224:	20000694 	.word	0x20000694
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8008228:	2000117c 	.word	0x2000117c

0800822c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800822c:	e7fe      	b.n	800822c <ADC1_2_IRQHandler>
	...

08008230 <__libc_init_array>:
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	4b0e      	ldr	r3, [pc, #56]	; (800826c <__libc_init_array+0x3c>)
 8008234:	4c0e      	ldr	r4, [pc, #56]	; (8008270 <__libc_init_array+0x40>)
 8008236:	1ae4      	subs	r4, r4, r3
 8008238:	10a4      	asrs	r4, r4, #2
 800823a:	2500      	movs	r5, #0
 800823c:	461e      	mov	r6, r3
 800823e:	42a5      	cmp	r5, r4
 8008240:	d004      	beq.n	800824c <__libc_init_array+0x1c>
 8008242:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008246:	4798      	blx	r3
 8008248:	3501      	adds	r5, #1
 800824a:	e7f8      	b.n	800823e <__libc_init_array+0xe>
 800824c:	f002 ff54 	bl	800b0f8 <_init>
 8008250:	4c08      	ldr	r4, [pc, #32]	; (8008274 <__libc_init_array+0x44>)
 8008252:	4b09      	ldr	r3, [pc, #36]	; (8008278 <__libc_init_array+0x48>)
 8008254:	1ae4      	subs	r4, r4, r3
 8008256:	10a4      	asrs	r4, r4, #2
 8008258:	2500      	movs	r5, #0
 800825a:	461e      	mov	r6, r3
 800825c:	42a5      	cmp	r5, r4
 800825e:	d004      	beq.n	800826a <__libc_init_array+0x3a>
 8008260:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008264:	4798      	blx	r3
 8008266:	3501      	adds	r5, #1
 8008268:	e7f8      	b.n	800825c <__libc_init_array+0x2c>
 800826a:	bd70      	pop	{r4, r5, r6, pc}
 800826c:	0800b334 	.word	0x0800b334
 8008270:	0800b334 	.word	0x0800b334
 8008274:	0800b338 	.word	0x0800b338
 8008278:	0800b334 	.word	0x0800b334

0800827c <malloc>:
 800827c:	4b02      	ldr	r3, [pc, #8]	; (8008288 <malloc+0xc>)
 800827e:	4601      	mov	r1, r0
 8008280:	6818      	ldr	r0, [r3, #0]
 8008282:	f000 b80b 	b.w	800829c <_malloc_r>
 8008286:	bf00      	nop
 8008288:	20000658 	.word	0x20000658

0800828c <free>:
 800828c:	4b02      	ldr	r3, [pc, #8]	; (8008298 <free+0xc>)
 800828e:	4601      	mov	r1, r0
 8008290:	6818      	ldr	r0, [r3, #0]
 8008292:	f002 b913 	b.w	800a4bc <_free_r>
 8008296:	bf00      	nop
 8008298:	20000658 	.word	0x20000658

0800829c <_malloc_r>:
 800829c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a0:	f101 040b 	add.w	r4, r1, #11
 80082a4:	2c16      	cmp	r4, #22
 80082a6:	b085      	sub	sp, #20
 80082a8:	4681      	mov	r9, r0
 80082aa:	d903      	bls.n	80082b4 <_malloc_r+0x18>
 80082ac:	f034 0407 	bics.w	r4, r4, #7
 80082b0:	d501      	bpl.n	80082b6 <_malloc_r+0x1a>
 80082b2:	e002      	b.n	80082ba <_malloc_r+0x1e>
 80082b4:	2410      	movs	r4, #16
 80082b6:	428c      	cmp	r4, r1
 80082b8:	d203      	bcs.n	80082c2 <_malloc_r+0x26>
 80082ba:	230c      	movs	r3, #12
 80082bc:	f8c9 3000 	str.w	r3, [r9]
 80082c0:	e1ea      	b.n	8008698 <_malloc_r+0x3fc>
 80082c2:	4648      	mov	r0, r9
 80082c4:	f000 fa15 	bl	80086f2 <__malloc_lock>
 80082c8:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80082cc:	4d9e      	ldr	r5, [pc, #632]	; (8008548 <_malloc_r+0x2ac>)
 80082ce:	d217      	bcs.n	8008300 <_malloc_r+0x64>
 80082d0:	f104 0208 	add.w	r2, r4, #8
 80082d4:	442a      	add	r2, r5
 80082d6:	f1a2 0108 	sub.w	r1, r2, #8
 80082da:	6856      	ldr	r6, [r2, #4]
 80082dc:	428e      	cmp	r6, r1
 80082de:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80082e2:	d102      	bne.n	80082ea <_malloc_r+0x4e>
 80082e4:	68d6      	ldr	r6, [r2, #12]
 80082e6:	42b2      	cmp	r2, r6
 80082e8:	d008      	beq.n	80082fc <_malloc_r+0x60>
 80082ea:	6873      	ldr	r3, [r6, #4]
 80082ec:	68f2      	ldr	r2, [r6, #12]
 80082ee:	68b1      	ldr	r1, [r6, #8]
 80082f0:	f023 0303 	bic.w	r3, r3, #3
 80082f4:	60ca      	str	r2, [r1, #12]
 80082f6:	4433      	add	r3, r6
 80082f8:	6091      	str	r1, [r2, #8]
 80082fa:	e02f      	b.n	800835c <_malloc_r+0xc0>
 80082fc:	3302      	adds	r3, #2
 80082fe:	e03d      	b.n	800837c <_malloc_r+0xe0>
 8008300:	0a63      	lsrs	r3, r4, #9
 8008302:	d01a      	beq.n	800833a <_malloc_r+0x9e>
 8008304:	2b04      	cmp	r3, #4
 8008306:	d802      	bhi.n	800830e <_malloc_r+0x72>
 8008308:	09a3      	lsrs	r3, r4, #6
 800830a:	3338      	adds	r3, #56	; 0x38
 800830c:	e018      	b.n	8008340 <_malloc_r+0xa4>
 800830e:	2b14      	cmp	r3, #20
 8008310:	d801      	bhi.n	8008316 <_malloc_r+0x7a>
 8008312:	335b      	adds	r3, #91	; 0x5b
 8008314:	e014      	b.n	8008340 <_malloc_r+0xa4>
 8008316:	2b54      	cmp	r3, #84	; 0x54
 8008318:	d802      	bhi.n	8008320 <_malloc_r+0x84>
 800831a:	0b23      	lsrs	r3, r4, #12
 800831c:	336e      	adds	r3, #110	; 0x6e
 800831e:	e00f      	b.n	8008340 <_malloc_r+0xa4>
 8008320:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008324:	d802      	bhi.n	800832c <_malloc_r+0x90>
 8008326:	0be3      	lsrs	r3, r4, #15
 8008328:	3377      	adds	r3, #119	; 0x77
 800832a:	e009      	b.n	8008340 <_malloc_r+0xa4>
 800832c:	f240 5254 	movw	r2, #1364	; 0x554
 8008330:	4293      	cmp	r3, r2
 8008332:	d804      	bhi.n	800833e <_malloc_r+0xa2>
 8008334:	0ca3      	lsrs	r3, r4, #18
 8008336:	337c      	adds	r3, #124	; 0x7c
 8008338:	e002      	b.n	8008340 <_malloc_r+0xa4>
 800833a:	233f      	movs	r3, #63	; 0x3f
 800833c:	e000      	b.n	8008340 <_malloc_r+0xa4>
 800833e:	237e      	movs	r3, #126	; 0x7e
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8008346:	f1a2 0008 	sub.w	r0, r2, #8
 800834a:	6856      	ldr	r6, [r2, #4]
 800834c:	e00c      	b.n	8008368 <_malloc_r+0xcc>
 800834e:	2900      	cmp	r1, #0
 8008350:	68f1      	ldr	r1, [r6, #12]
 8008352:	db08      	blt.n	8008366 <_malloc_r+0xca>
 8008354:	68b3      	ldr	r3, [r6, #8]
 8008356:	60d9      	str	r1, [r3, #12]
 8008358:	608b      	str	r3, [r1, #8]
 800835a:	18b3      	adds	r3, r6, r2
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	f042 0201 	orr.w	r2, r2, #1
 8008362:	605a      	str	r2, [r3, #4]
 8008364:	e1a3      	b.n	80086ae <_malloc_r+0x412>
 8008366:	460e      	mov	r6, r1
 8008368:	4286      	cmp	r6, r0
 800836a:	d006      	beq.n	800837a <_malloc_r+0xde>
 800836c:	6872      	ldr	r2, [r6, #4]
 800836e:	f022 0203 	bic.w	r2, r2, #3
 8008372:	1b11      	subs	r1, r2, r4
 8008374:	290f      	cmp	r1, #15
 8008376:	ddea      	ble.n	800834e <_malloc_r+0xb2>
 8008378:	3b01      	subs	r3, #1
 800837a:	3301      	adds	r3, #1
 800837c:	4a72      	ldr	r2, [pc, #456]	; (8008548 <_malloc_r+0x2ac>)
 800837e:	692e      	ldr	r6, [r5, #16]
 8008380:	f102 0708 	add.w	r7, r2, #8
 8008384:	42be      	cmp	r6, r7
 8008386:	4639      	mov	r1, r7
 8008388:	d079      	beq.n	800847e <_malloc_r+0x1e2>
 800838a:	6870      	ldr	r0, [r6, #4]
 800838c:	f020 0003 	bic.w	r0, r0, #3
 8008390:	ebc4 0e00 	rsb	lr, r4, r0
 8008394:	f1be 0f0f 	cmp.w	lr, #15
 8008398:	dd0d      	ble.n	80083b6 <_malloc_r+0x11a>
 800839a:	1933      	adds	r3, r6, r4
 800839c:	f044 0401 	orr.w	r4, r4, #1
 80083a0:	6074      	str	r4, [r6, #4]
 80083a2:	6153      	str	r3, [r2, #20]
 80083a4:	6113      	str	r3, [r2, #16]
 80083a6:	f04e 0201 	orr.w	r2, lr, #1
 80083aa:	60df      	str	r7, [r3, #12]
 80083ac:	609f      	str	r7, [r3, #8]
 80083ae:	605a      	str	r2, [r3, #4]
 80083b0:	f843 e00e 	str.w	lr, [r3, lr]
 80083b4:	e17b      	b.n	80086ae <_malloc_r+0x412>
 80083b6:	f1be 0f00 	cmp.w	lr, #0
 80083ba:	6157      	str	r7, [r2, #20]
 80083bc:	6117      	str	r7, [r2, #16]
 80083be:	db05      	blt.n	80083cc <_malloc_r+0x130>
 80083c0:	4430      	add	r0, r6
 80083c2:	6843      	ldr	r3, [r0, #4]
 80083c4:	f043 0301 	orr.w	r3, r3, #1
 80083c8:	6043      	str	r3, [r0, #4]
 80083ca:	e170      	b.n	80086ae <_malloc_r+0x412>
 80083cc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80083d0:	d215      	bcs.n	80083fe <_malloc_r+0x162>
 80083d2:	08c0      	lsrs	r0, r0, #3
 80083d4:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 80083d8:	2701      	movs	r7, #1
 80083da:	fa07 fe0e 	lsl.w	lr, r7, lr
 80083de:	6857      	ldr	r7, [r2, #4]
 80083e0:	3001      	adds	r0, #1
 80083e2:	ea4e 0707 	orr.w	r7, lr, r7
 80083e6:	6057      	str	r7, [r2, #4]
 80083e8:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 80083ec:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 80083f0:	f8c6 e008 	str.w	lr, [r6, #8]
 80083f4:	3f08      	subs	r7, #8
 80083f6:	60f7      	str	r7, [r6, #12]
 80083f8:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 80083fc:	e03d      	b.n	800847a <_malloc_r+0x1de>
 80083fe:	0a42      	lsrs	r2, r0, #9
 8008400:	2a04      	cmp	r2, #4
 8008402:	d802      	bhi.n	800840a <_malloc_r+0x16e>
 8008404:	0982      	lsrs	r2, r0, #6
 8008406:	3238      	adds	r2, #56	; 0x38
 8008408:	e015      	b.n	8008436 <_malloc_r+0x19a>
 800840a:	2a14      	cmp	r2, #20
 800840c:	d801      	bhi.n	8008412 <_malloc_r+0x176>
 800840e:	325b      	adds	r2, #91	; 0x5b
 8008410:	e011      	b.n	8008436 <_malloc_r+0x19a>
 8008412:	2a54      	cmp	r2, #84	; 0x54
 8008414:	d802      	bhi.n	800841c <_malloc_r+0x180>
 8008416:	0b02      	lsrs	r2, r0, #12
 8008418:	326e      	adds	r2, #110	; 0x6e
 800841a:	e00c      	b.n	8008436 <_malloc_r+0x19a>
 800841c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008420:	d802      	bhi.n	8008428 <_malloc_r+0x18c>
 8008422:	0bc2      	lsrs	r2, r0, #15
 8008424:	3277      	adds	r2, #119	; 0x77
 8008426:	e006      	b.n	8008436 <_malloc_r+0x19a>
 8008428:	f240 5754 	movw	r7, #1364	; 0x554
 800842c:	42ba      	cmp	r2, r7
 800842e:	bf9a      	itte	ls
 8008430:	0c82      	lsrls	r2, r0, #18
 8008432:	327c      	addls	r2, #124	; 0x7c
 8008434:	227e      	movhi	r2, #126	; 0x7e
 8008436:	1c57      	adds	r7, r2, #1
 8008438:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800843c:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8008440:	f8df c104 	ldr.w	ip, [pc, #260]	; 8008548 <_malloc_r+0x2ac>
 8008444:	45be      	cmp	lr, r7
 8008446:	d10d      	bne.n	8008464 <_malloc_r+0x1c8>
 8008448:	2001      	movs	r0, #1
 800844a:	1092      	asrs	r2, r2, #2
 800844c:	fa00 f202 	lsl.w	r2, r0, r2
 8008450:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8008454:	4310      	orrs	r0, r2
 8008456:	f8cc 0004 	str.w	r0, [ip, #4]
 800845a:	4672      	mov	r2, lr
 800845c:	e009      	b.n	8008472 <_malloc_r+0x1d6>
 800845e:	68bf      	ldr	r7, [r7, #8]
 8008460:	45be      	cmp	lr, r7
 8008462:	d004      	beq.n	800846e <_malloc_r+0x1d2>
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	f022 0203 	bic.w	r2, r2, #3
 800846a:	4290      	cmp	r0, r2
 800846c:	d3f7      	bcc.n	800845e <_malloc_r+0x1c2>
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	46be      	mov	lr, r7
 8008472:	60f2      	str	r2, [r6, #12]
 8008474:	f8c6 e008 	str.w	lr, [r6, #8]
 8008478:	6096      	str	r6, [r2, #8]
 800847a:	f8ce 600c 	str.w	r6, [lr, #12]
 800847e:	2001      	movs	r0, #1
 8008480:	109a      	asrs	r2, r3, #2
 8008482:	fa00 f202 	lsl.w	r2, r0, r2
 8008486:	6868      	ldr	r0, [r5, #4]
 8008488:	4282      	cmp	r2, r0
 800848a:	d85f      	bhi.n	800854c <_malloc_r+0x2b0>
 800848c:	4202      	tst	r2, r0
 800848e:	d106      	bne.n	800849e <_malloc_r+0x202>
 8008490:	f023 0303 	bic.w	r3, r3, #3
 8008494:	0052      	lsls	r2, r2, #1
 8008496:	4202      	tst	r2, r0
 8008498:	f103 0304 	add.w	r3, r3, #4
 800849c:	d0fa      	beq.n	8008494 <_malloc_r+0x1f8>
 800849e:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 80084a2:	46c2      	mov	sl, r8
 80084a4:	469c      	mov	ip, r3
 80084a6:	f8da 600c 	ldr.w	r6, [sl, #12]
 80084aa:	4556      	cmp	r6, sl
 80084ac:	d02c      	beq.n	8008508 <_malloc_r+0x26c>
 80084ae:	6870      	ldr	r0, [r6, #4]
 80084b0:	68f7      	ldr	r7, [r6, #12]
 80084b2:	f020 0003 	bic.w	r0, r0, #3
 80084b6:	ebc4 0e00 	rsb	lr, r4, r0
 80084ba:	f1be 0f0f 	cmp.w	lr, #15
 80084be:	dd11      	ble.n	80084e4 <_malloc_r+0x248>
 80084c0:	1933      	adds	r3, r6, r4
 80084c2:	f044 0401 	orr.w	r4, r4, #1
 80084c6:	6074      	str	r4, [r6, #4]
 80084c8:	f856 2f08 	ldr.w	r2, [r6, #8]!
 80084cc:	60d7      	str	r7, [r2, #12]
 80084ce:	60ba      	str	r2, [r7, #8]
 80084d0:	f04e 0201 	orr.w	r2, lr, #1
 80084d4:	616b      	str	r3, [r5, #20]
 80084d6:	612b      	str	r3, [r5, #16]
 80084d8:	60d9      	str	r1, [r3, #12]
 80084da:	6099      	str	r1, [r3, #8]
 80084dc:	605a      	str	r2, [r3, #4]
 80084de:	f843 e00e 	str.w	lr, [r3, lr]
 80084e2:	e00b      	b.n	80084fc <_malloc_r+0x260>
 80084e4:	f1be 0f00 	cmp.w	lr, #0
 80084e8:	db0c      	blt.n	8008504 <_malloc_r+0x268>
 80084ea:	1833      	adds	r3, r6, r0
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	f042 0201 	orr.w	r2, r2, #1
 80084f2:	605a      	str	r2, [r3, #4]
 80084f4:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80084f8:	60df      	str	r7, [r3, #12]
 80084fa:	60bb      	str	r3, [r7, #8]
 80084fc:	4648      	mov	r0, r9
 80084fe:	f000 f8f9 	bl	80086f4 <__malloc_unlock>
 8008502:	e0d8      	b.n	80086b6 <_malloc_r+0x41a>
 8008504:	463e      	mov	r6, r7
 8008506:	e7d0      	b.n	80084aa <_malloc_r+0x20e>
 8008508:	f10c 0c01 	add.w	ip, ip, #1
 800850c:	f01c 0f03 	tst.w	ip, #3
 8008510:	f10a 0a08 	add.w	sl, sl, #8
 8008514:	d1c7      	bne.n	80084a6 <_malloc_r+0x20a>
 8008516:	0798      	lsls	r0, r3, #30
 8008518:	d104      	bne.n	8008524 <_malloc_r+0x288>
 800851a:	686b      	ldr	r3, [r5, #4]
 800851c:	ea23 0302 	bic.w	r3, r3, r2
 8008520:	606b      	str	r3, [r5, #4]
 8008522:	e005      	b.n	8008530 <_malloc_r+0x294>
 8008524:	f858 0908 	ldr.w	r0, [r8], #-8
 8008528:	4580      	cmp	r8, r0
 800852a:	f103 33ff 	add.w	r3, r3, #4294967295
 800852e:	d0f2      	beq.n	8008516 <_malloc_r+0x27a>
 8008530:	6868      	ldr	r0, [r5, #4]
 8008532:	0052      	lsls	r2, r2, #1
 8008534:	4282      	cmp	r2, r0
 8008536:	d809      	bhi.n	800854c <_malloc_r+0x2b0>
 8008538:	b142      	cbz	r2, 800854c <_malloc_r+0x2b0>
 800853a:	4663      	mov	r3, ip
 800853c:	4202      	tst	r2, r0
 800853e:	d1ae      	bne.n	800849e <_malloc_r+0x202>
 8008540:	3304      	adds	r3, #4
 8008542:	0052      	lsls	r2, r2, #1
 8008544:	e7fa      	b.n	800853c <_malloc_r+0x2a0>
 8008546:	bf00      	nop
 8008548:	20000158 	.word	0x20000158
 800854c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8008550:	f8db 6004 	ldr.w	r6, [fp, #4]
 8008554:	f026 0603 	bic.w	r6, r6, #3
 8008558:	42b4      	cmp	r4, r6
 800855a:	d803      	bhi.n	8008564 <_malloc_r+0x2c8>
 800855c:	1b33      	subs	r3, r6, r4
 800855e:	2b0f      	cmp	r3, #15
 8008560:	f300 809c 	bgt.w	800869c <_malloc_r+0x400>
 8008564:	4a56      	ldr	r2, [pc, #344]	; (80086c0 <_malloc_r+0x424>)
 8008566:	4957      	ldr	r1, [pc, #348]	; (80086c4 <_malloc_r+0x428>)
 8008568:	6812      	ldr	r2, [r2, #0]
 800856a:	6808      	ldr	r0, [r1, #0]
 800856c:	9101      	str	r1, [sp, #4]
 800856e:	f102 0810 	add.w	r8, r2, #16
 8008572:	4a55      	ldr	r2, [pc, #340]	; (80086c8 <_malloc_r+0x42c>)
 8008574:	9203      	str	r2, [sp, #12]
 8008576:	3001      	adds	r0, #1
 8008578:	bf18      	it	ne
 800857a:	f102 31ff 	addne.w	r1, r2, #4294967295
 800857e:	44a0      	add	r8, r4
 8008580:	bf1e      	ittt	ne
 8008582:	4488      	addne	r8, r1
 8008584:	4251      	negne	r1, r2
 8008586:	ea01 0808 	andne.w	r8, r1, r8
 800858a:	eb0b 0306 	add.w	r3, fp, r6
 800858e:	4641      	mov	r1, r8
 8008590:	4648      	mov	r0, r9
 8008592:	9302      	str	r3, [sp, #8]
 8008594:	f000 f912 	bl	80087bc <_sbrk_r>
 8008598:	1c42      	adds	r2, r0, #1
 800859a:	4607      	mov	r7, r0
 800859c:	d06f      	beq.n	800867e <_malloc_r+0x3e2>
 800859e:	9b02      	ldr	r3, [sp, #8]
 80085a0:	9a03      	ldr	r2, [sp, #12]
 80085a2:	4283      	cmp	r3, r0
 80085a4:	d901      	bls.n	80085aa <_malloc_r+0x30e>
 80085a6:	45ab      	cmp	fp, r5
 80085a8:	d169      	bne.n	800867e <_malloc_r+0x3e2>
 80085aa:	f8df a128 	ldr.w	sl, [pc, #296]	; 80086d4 <_malloc_r+0x438>
 80085ae:	f8df c128 	ldr.w	ip, [pc, #296]	; 80086d8 <_malloc_r+0x43c>
 80085b2:	f8da 0000 	ldr.w	r0, [sl]
 80085b6:	42bb      	cmp	r3, r7
 80085b8:	4440      	add	r0, r8
 80085ba:	f8ca 0000 	str.w	r0, [sl]
 80085be:	d108      	bne.n	80085d2 <_malloc_r+0x336>
 80085c0:	ea13 0f0c 	tst.w	r3, ip
 80085c4:	d105      	bne.n	80085d2 <_malloc_r+0x336>
 80085c6:	68ab      	ldr	r3, [r5, #8]
 80085c8:	4446      	add	r6, r8
 80085ca:	f046 0601 	orr.w	r6, r6, #1
 80085ce:	605e      	str	r6, [r3, #4]
 80085d0:	e049      	b.n	8008666 <_malloc_r+0x3ca>
 80085d2:	9901      	ldr	r1, [sp, #4]
 80085d4:	f8d1 e000 	ldr.w	lr, [r1]
 80085d8:	f1be 3fff 	cmp.w	lr, #4294967295
 80085dc:	bf15      	itete	ne
 80085de:	1afb      	subne	r3, r7, r3
 80085e0:	4b38      	ldreq	r3, [pc, #224]	; (80086c4 <_malloc_r+0x428>)
 80085e2:	181b      	addne	r3, r3, r0
 80085e4:	601f      	streq	r7, [r3, #0]
 80085e6:	bf18      	it	ne
 80085e8:	f8ca 3000 	strne.w	r3, [sl]
 80085ec:	f017 0307 	ands.w	r3, r7, #7
 80085f0:	bf1c      	itt	ne
 80085f2:	f1c3 0308 	rsbne	r3, r3, #8
 80085f6:	18ff      	addne	r7, r7, r3
 80085f8:	44b8      	add	r8, r7
 80085fa:	441a      	add	r2, r3
 80085fc:	ea08 080c 	and.w	r8, r8, ip
 8008600:	ebc8 0802 	rsb	r8, r8, r2
 8008604:	4641      	mov	r1, r8
 8008606:	4648      	mov	r0, r9
 8008608:	f000 f8d8 	bl	80087bc <_sbrk_r>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	bf04      	itt	eq
 8008610:	4638      	moveq	r0, r7
 8008612:	f04f 0800 	moveq.w	r8, #0
 8008616:	f8da 3000 	ldr.w	r3, [sl]
 800861a:	60af      	str	r7, [r5, #8]
 800861c:	1bc2      	subs	r2, r0, r7
 800861e:	4442      	add	r2, r8
 8008620:	4443      	add	r3, r8
 8008622:	f042 0201 	orr.w	r2, r2, #1
 8008626:	45ab      	cmp	fp, r5
 8008628:	f8ca 3000 	str.w	r3, [sl]
 800862c:	607a      	str	r2, [r7, #4]
 800862e:	d01a      	beq.n	8008666 <_malloc_r+0x3ca>
 8008630:	2e0f      	cmp	r6, #15
 8008632:	d802      	bhi.n	800863a <_malloc_r+0x39e>
 8008634:	2301      	movs	r3, #1
 8008636:	607b      	str	r3, [r7, #4]
 8008638:	e021      	b.n	800867e <_malloc_r+0x3e2>
 800863a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800863e:	3e0c      	subs	r6, #12
 8008640:	f026 0607 	bic.w	r6, r6, #7
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	4333      	orrs	r3, r6
 800864a:	f8cb 3004 	str.w	r3, [fp, #4]
 800864e:	eb0b 0306 	add.w	r3, fp, r6
 8008652:	2205      	movs	r2, #5
 8008654:	2e0f      	cmp	r6, #15
 8008656:	605a      	str	r2, [r3, #4]
 8008658:	609a      	str	r2, [r3, #8]
 800865a:	d904      	bls.n	8008666 <_malloc_r+0x3ca>
 800865c:	f10b 0108 	add.w	r1, fp, #8
 8008660:	4648      	mov	r0, r9
 8008662:	f001 ff2b 	bl	800a4bc <_free_r>
 8008666:	4a19      	ldr	r2, [pc, #100]	; (80086cc <_malloc_r+0x430>)
 8008668:	f8da 3000 	ldr.w	r3, [sl]
 800866c:	6811      	ldr	r1, [r2, #0]
 800866e:	428b      	cmp	r3, r1
 8008670:	bf88      	it	hi
 8008672:	6013      	strhi	r3, [r2, #0]
 8008674:	4a16      	ldr	r2, [pc, #88]	; (80086d0 <_malloc_r+0x434>)
 8008676:	6811      	ldr	r1, [r2, #0]
 8008678:	428b      	cmp	r3, r1
 800867a:	bf88      	it	hi
 800867c:	6013      	strhi	r3, [r2, #0]
 800867e:	68ab      	ldr	r3, [r5, #8]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	f022 0203 	bic.w	r2, r2, #3
 8008686:	4294      	cmp	r4, r2
 8008688:	eba2 0304 	sub.w	r3, r2, r4
 800868c:	d801      	bhi.n	8008692 <_malloc_r+0x3f6>
 800868e:	2b0f      	cmp	r3, #15
 8008690:	dc04      	bgt.n	800869c <_malloc_r+0x400>
 8008692:	4648      	mov	r0, r9
 8008694:	f000 f82e 	bl	80086f4 <__malloc_unlock>
 8008698:	2600      	movs	r6, #0
 800869a:	e00c      	b.n	80086b6 <_malloc_r+0x41a>
 800869c:	68ae      	ldr	r6, [r5, #8]
 800869e:	f044 0201 	orr.w	r2, r4, #1
 80086a2:	4434      	add	r4, r6
 80086a4:	f043 0301 	orr.w	r3, r3, #1
 80086a8:	6072      	str	r2, [r6, #4]
 80086aa:	60ac      	str	r4, [r5, #8]
 80086ac:	6063      	str	r3, [r4, #4]
 80086ae:	4648      	mov	r0, r9
 80086b0:	f000 f820 	bl	80086f4 <__malloc_unlock>
 80086b4:	3608      	adds	r6, #8
 80086b6:	4630      	mov	r0, r6
 80086b8:	b005      	add	sp, #20
 80086ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086be:	bf00      	nop
 80086c0:	200008e0 	.word	0x200008e0
 80086c4:	20000564 	.word	0x20000564
 80086c8:	00000080 	.word	0x00000080
 80086cc:	200008dc 	.word	0x200008dc
 80086d0:	200008d8 	.word	0x200008d8
 80086d4:	200008e4 	.word	0x200008e4
 80086d8:	0000007f 	.word	0x0000007f

080086dc <memcpy>:
 80086dc:	b510      	push	{r4, lr}
 80086de:	1e43      	subs	r3, r0, #1
 80086e0:	440a      	add	r2, r1
 80086e2:	4291      	cmp	r1, r2
 80086e4:	d004      	beq.n	80086f0 <memcpy+0x14>
 80086e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086ee:	e7f8      	b.n	80086e2 <memcpy+0x6>
 80086f0:	bd10      	pop	{r4, pc}

080086f2 <__malloc_lock>:
 80086f2:	4770      	bx	lr

080086f4 <__malloc_unlock>:
 80086f4:	4770      	bx	lr
	...

080086f8 <srand>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <srand+0x4c>)
 80086fc:	681c      	ldr	r4, [r3, #0]
 80086fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008700:	4605      	mov	r5, r0
 8008702:	b9d3      	cbnz	r3, 800873a <srand+0x42>
 8008704:	2018      	movs	r0, #24
 8008706:	f7ff fdb9 	bl	800827c <malloc>
 800870a:	f243 330e 	movw	r3, #13070	; 0x330e
 800870e:	63a0      	str	r0, [r4, #56]	; 0x38
 8008710:	8003      	strh	r3, [r0, #0]
 8008712:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8008716:	8043      	strh	r3, [r0, #2]
 8008718:	f241 2334 	movw	r3, #4660	; 0x1234
 800871c:	8083      	strh	r3, [r0, #4]
 800871e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8008722:	80c3      	strh	r3, [r0, #6]
 8008724:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8008728:	8103      	strh	r3, [r0, #8]
 800872a:	2305      	movs	r3, #5
 800872c:	8143      	strh	r3, [r0, #10]
 800872e:	230b      	movs	r3, #11
 8008730:	8183      	strh	r3, [r0, #12]
 8008732:	2201      	movs	r2, #1
 8008734:	2300      	movs	r3, #0
 8008736:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800873a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800873c:	2200      	movs	r2, #0
 800873e:	611d      	str	r5, [r3, #16]
 8008740:	615a      	str	r2, [r3, #20]
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	20000658 	.word	0x20000658

08008748 <rand>:
 8008748:	4b19      	ldr	r3, [pc, #100]	; (80087b0 <rand+0x68>)
 800874a:	b510      	push	{r4, lr}
 800874c:	681c      	ldr	r4, [r3, #0]
 800874e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008750:	b9d3      	cbnz	r3, 8008788 <rand+0x40>
 8008752:	2018      	movs	r0, #24
 8008754:	f7ff fd92 	bl	800827c <malloc>
 8008758:	f243 330e 	movw	r3, #13070	; 0x330e
 800875c:	63a0      	str	r0, [r4, #56]	; 0x38
 800875e:	8003      	strh	r3, [r0, #0]
 8008760:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8008764:	8043      	strh	r3, [r0, #2]
 8008766:	f241 2334 	movw	r3, #4660	; 0x1234
 800876a:	8083      	strh	r3, [r0, #4]
 800876c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8008770:	80c3      	strh	r3, [r0, #6]
 8008772:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8008776:	8103      	strh	r3, [r0, #8]
 8008778:	2305      	movs	r3, #5
 800877a:	8143      	strh	r3, [r0, #10]
 800877c:	230b      	movs	r3, #11
 800877e:	8183      	strh	r3, [r0, #12]
 8008780:	2201      	movs	r2, #1
 8008782:	2300      	movs	r3, #0
 8008784:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008788:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800878a:	4c0a      	ldr	r4, [pc, #40]	; (80087b4 <rand+0x6c>)
 800878c:	690b      	ldr	r3, [r1, #16]
 800878e:	6948      	ldr	r0, [r1, #20]
 8008790:	4a09      	ldr	r2, [pc, #36]	; (80087b8 <rand+0x70>)
 8008792:	435c      	muls	r4, r3
 8008794:	fb02 4000 	mla	r0, r2, r0, r4
 8008798:	fba3 2302 	umull	r2, r3, r3, r2
 800879c:	3201      	adds	r2, #1
 800879e:	4403      	add	r3, r0
 80087a0:	f143 0300 	adc.w	r3, r3, #0
 80087a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80087a8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	bf00      	nop
 80087b0:	20000658 	.word	0x20000658
 80087b4:	5851f42d 	.word	0x5851f42d
 80087b8:	4c957f2d 	.word	0x4c957f2d

080087bc <_sbrk_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4c06      	ldr	r4, [pc, #24]	; (80087d8 <_sbrk_r+0x1c>)
 80087c0:	2300      	movs	r3, #0
 80087c2:	4605      	mov	r5, r0
 80087c4:	4608      	mov	r0, r1
 80087c6:	6023      	str	r3, [r4, #0]
 80087c8:	f002 fc88 	bl	800b0dc <_sbrk>
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	d102      	bne.n	80087d6 <_sbrk_r+0x1a>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	b103      	cbz	r3, 80087d6 <_sbrk_r+0x1a>
 80087d4:	602b      	str	r3, [r5, #0]
 80087d6:	bd38      	pop	{r3, r4, r5, pc}
 80087d8:	20001178 	.word	0x20001178

080087dc <sprintf>:
 80087dc:	b40e      	push	{r1, r2, r3}
 80087de:	b500      	push	{lr}
 80087e0:	b09c      	sub	sp, #112	; 0x70
 80087e2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80087e6:	ab1d      	add	r3, sp, #116	; 0x74
 80087e8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80087ec:	9002      	str	r0, [sp, #8]
 80087ee:	9006      	str	r0, [sp, #24]
 80087f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087f4:	480a      	ldr	r0, [pc, #40]	; (8008820 <sprintf+0x44>)
 80087f6:	9104      	str	r1, [sp, #16]
 80087f8:	9107      	str	r1, [sp, #28]
 80087fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80087fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008802:	f8ad 1016 	strh.w	r1, [sp, #22]
 8008806:	6800      	ldr	r0, [r0, #0]
 8008808:	9301      	str	r3, [sp, #4]
 800880a:	a902      	add	r1, sp, #8
 800880c:	f000 f80c 	bl	8008828 <_svfprintf_r>
 8008810:	9b02      	ldr	r3, [sp, #8]
 8008812:	2200      	movs	r2, #0
 8008814:	701a      	strb	r2, [r3, #0]
 8008816:	b01c      	add	sp, #112	; 0x70
 8008818:	f85d eb04 	ldr.w	lr, [sp], #4
 800881c:	b003      	add	sp, #12
 800881e:	4770      	bx	lr
 8008820:	20000658 	.word	0x20000658
 8008824:	00000000 	.word	0x00000000

08008828 <_svfprintf_r>:
 8008828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882c:	b0bd      	sub	sp, #244	; 0xf4
 800882e:	468b      	mov	fp, r1
 8008830:	9205      	str	r2, [sp, #20]
 8008832:	461f      	mov	r7, r3
 8008834:	4682      	mov	sl, r0
 8008836:	f001 feff 	bl	800a638 <_localeconv_r>
 800883a:	6803      	ldr	r3, [r0, #0]
 800883c:	930d      	str	r3, [sp, #52]	; 0x34
 800883e:	4618      	mov	r0, r3
 8008840:	f7f7 fd16 	bl	8000270 <strlen>
 8008844:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8008848:	9008      	str	r0, [sp, #32]
 800884a:	0619      	lsls	r1, r3, #24
 800884c:	d515      	bpl.n	800887a <_svfprintf_r+0x52>
 800884e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008852:	b993      	cbnz	r3, 800887a <_svfprintf_r+0x52>
 8008854:	2140      	movs	r1, #64	; 0x40
 8008856:	4650      	mov	r0, sl
 8008858:	f7ff fd20 	bl	800829c <_malloc_r>
 800885c:	f8cb 0000 	str.w	r0, [fp]
 8008860:	f8cb 0010 	str.w	r0, [fp, #16]
 8008864:	b930      	cbnz	r0, 8008874 <_svfprintf_r+0x4c>
 8008866:	230c      	movs	r3, #12
 8008868:	f8ca 3000 	str.w	r3, [sl]
 800886c:	f04f 30ff 	mov.w	r0, #4294967295
 8008870:	f000 bf95 	b.w	800979e <_svfprintf_r+0xf76>
 8008874:	2340      	movs	r3, #64	; 0x40
 8008876:	f8cb 3014 	str.w	r3, [fp, #20]
 800887a:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8008ae0 <_svfprintf_r+0x2b8>
 800887e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008882:	2300      	movs	r3, #0
 8008884:	ac2c      	add	r4, sp, #176	; 0xb0
 8008886:	941f      	str	r4, [sp, #124]	; 0x7c
 8008888:	9321      	str	r3, [sp, #132]	; 0x84
 800888a:	9320      	str	r3, [sp, #128]	; 0x80
 800888c:	9304      	str	r3, [sp, #16]
 800888e:	9311      	str	r3, [sp, #68]	; 0x44
 8008890:	9310      	str	r3, [sp, #64]	; 0x40
 8008892:	930a      	str	r3, [sp, #40]	; 0x28
 8008894:	9d05      	ldr	r5, [sp, #20]
 8008896:	462b      	mov	r3, r5
 8008898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800889c:	b11a      	cbz	r2, 80088a6 <_svfprintf_r+0x7e>
 800889e:	2a25      	cmp	r2, #37	; 0x25
 80088a0:	d001      	beq.n	80088a6 <_svfprintf_r+0x7e>
 80088a2:	461d      	mov	r5, r3
 80088a4:	e7f7      	b.n	8008896 <_svfprintf_r+0x6e>
 80088a6:	9b05      	ldr	r3, [sp, #20]
 80088a8:	1aee      	subs	r6, r5, r3
 80088aa:	d017      	beq.n	80088dc <_svfprintf_r+0xb4>
 80088ac:	e884 0048 	stmia.w	r4, {r3, r6}
 80088b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088b2:	4433      	add	r3, r6
 80088b4:	9321      	str	r3, [sp, #132]	; 0x84
 80088b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80088b8:	3301      	adds	r3, #1
 80088ba:	2b07      	cmp	r3, #7
 80088bc:	9320      	str	r3, [sp, #128]	; 0x80
 80088be:	dc01      	bgt.n	80088c4 <_svfprintf_r+0x9c>
 80088c0:	3408      	adds	r4, #8
 80088c2:	e008      	b.n	80088d6 <_svfprintf_r+0xae>
 80088c4:	aa1f      	add	r2, sp, #124	; 0x7c
 80088c6:	4659      	mov	r1, fp
 80088c8:	4650      	mov	r0, sl
 80088ca:	f002 f98f 	bl	800abec <__ssprint_r>
 80088ce:	2800      	cmp	r0, #0
 80088d0:	f040 862c 	bne.w	800952c <_svfprintf_r+0xd04>
 80088d4:	ac2c      	add	r4, sp, #176	; 0xb0
 80088d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d8:	4433      	add	r3, r6
 80088da:	930a      	str	r3, [sp, #40]	; 0x28
 80088dc:	782b      	ldrb	r3, [r5, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f000 861d 	beq.w	800951e <_svfprintf_r+0xcf6>
 80088e4:	2200      	movs	r2, #0
 80088e6:	1c6b      	adds	r3, r5, #1
 80088e8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80088ec:	4611      	mov	r1, r2
 80088ee:	f04f 39ff 	mov.w	r9, #4294967295
 80088f2:	9209      	str	r2, [sp, #36]	; 0x24
 80088f4:	4615      	mov	r5, r2
 80088f6:	200a      	movs	r0, #10
 80088f8:	1c5e      	adds	r6, r3, #1
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	9605      	str	r6, [sp, #20]
 80088fe:	9302      	str	r3, [sp, #8]
 8008900:	9b02      	ldr	r3, [sp, #8]
 8008902:	3b20      	subs	r3, #32
 8008904:	2b58      	cmp	r3, #88	; 0x58
 8008906:	f200 8263 	bhi.w	8008dd0 <_svfprintf_r+0x5a8>
 800890a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800890e:	005c      	.short	0x005c
 8008910:	02610261 	.word	0x02610261
 8008914:	0261006b 	.word	0x0261006b
 8008918:	02610261 	.word	0x02610261
 800891c:	02610261 	.word	0x02610261
 8008920:	006e0261 	.word	0x006e0261
 8008924:	02610059 	.word	0x02610059
 8008928:	007c0079 	.word	0x007c0079
 800892c:	00a30261 	.word	0x00a30261
 8008930:	00a600a6 	.word	0x00a600a6
 8008934:	00a600a6 	.word	0x00a600a6
 8008938:	00a600a6 	.word	0x00a600a6
 800893c:	00a600a6 	.word	0x00a600a6
 8008940:	026100a6 	.word	0x026100a6
 8008944:	02610261 	.word	0x02610261
 8008948:	02610261 	.word	0x02610261
 800894c:	02610261 	.word	0x02610261
 8008950:	02610261 	.word	0x02610261
 8008954:	00d60261 	.word	0x00d60261
 8008958:	0261010b 	.word	0x0261010b
 800895c:	0261010b 	.word	0x0261010b
 8008960:	02610261 	.word	0x02610261
 8008964:	00b90261 	.word	0x00b90261
 8008968:	02610261 	.word	0x02610261
 800896c:	02610152 	.word	0x02610152
 8008970:	02610261 	.word	0x02610261
 8008974:	02610261 	.word	0x02610261
 8008978:	02610199 	.word	0x02610199
 800897c:	00660261 	.word	0x00660261
 8008980:	02610261 	.word	0x02610261
 8008984:	02610261 	.word	0x02610261
 8008988:	02610261 	.word	0x02610261
 800898c:	02610261 	.word	0x02610261
 8008990:	02610261 	.word	0x02610261
 8008994:	006100cd 	.word	0x006100cd
 8008998:	010b010b 	.word	0x010b010b
 800899c:	00bc010b 	.word	0x00bc010b
 80089a0:	02610061 	.word	0x02610061
 80089a4:	00bf0261 	.word	0x00bf0261
 80089a8:	01340261 	.word	0x01340261
 80089ac:	016f0154 	.word	0x016f0154
 80089b0:	026100ca 	.word	0x026100ca
 80089b4:	02610180 	.word	0x02610180
 80089b8:	0261019b 	.word	0x0261019b
 80089bc:	01b30261 	.word	0x01b30261
 80089c0:	2201      	movs	r2, #1
 80089c2:	212b      	movs	r1, #43	; 0x2b
 80089c4:	e002      	b.n	80089cc <_svfprintf_r+0x1a4>
 80089c6:	b909      	cbnz	r1, 80089cc <_svfprintf_r+0x1a4>
 80089c8:	2201      	movs	r2, #1
 80089ca:	2120      	movs	r1, #32
 80089cc:	9b05      	ldr	r3, [sp, #20]
 80089ce:	e793      	b.n	80088f8 <_svfprintf_r+0xd0>
 80089d0:	2a00      	cmp	r2, #0
 80089d2:	d077      	beq.n	8008ac4 <_svfprintf_r+0x29c>
 80089d4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80089d8:	e074      	b.n	8008ac4 <_svfprintf_r+0x29c>
 80089da:	b10a      	cbz	r2, 80089e0 <_svfprintf_r+0x1b8>
 80089dc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80089e0:	4b41      	ldr	r3, [pc, #260]	; (8008ae8 <_svfprintf_r+0x2c0>)
 80089e2:	e14b      	b.n	8008c7c <_svfprintf_r+0x454>
 80089e4:	f045 0501 	orr.w	r5, r5, #1
 80089e8:	e7f0      	b.n	80089cc <_svfprintf_r+0x1a4>
 80089ea:	683e      	ldr	r6, [r7, #0]
 80089ec:	9609      	str	r6, [sp, #36]	; 0x24
 80089ee:	2e00      	cmp	r6, #0
 80089f0:	f107 0304 	add.w	r3, r7, #4
 80089f4:	db01      	blt.n	80089fa <_svfprintf_r+0x1d2>
 80089f6:	461f      	mov	r7, r3
 80089f8:	e7e8      	b.n	80089cc <_svfprintf_r+0x1a4>
 80089fa:	4276      	negs	r6, r6
 80089fc:	9609      	str	r6, [sp, #36]	; 0x24
 80089fe:	461f      	mov	r7, r3
 8008a00:	f045 0504 	orr.w	r5, r5, #4
 8008a04:	e7e2      	b.n	80089cc <_svfprintf_r+0x1a4>
 8008a06:	9e05      	ldr	r6, [sp, #20]
 8008a08:	9b05      	ldr	r3, [sp, #20]
 8008a0a:	7836      	ldrb	r6, [r6, #0]
 8008a0c:	9602      	str	r6, [sp, #8]
 8008a0e:	2e2a      	cmp	r6, #42	; 0x2a
 8008a10:	f103 0301 	add.w	r3, r3, #1
 8008a14:	d002      	beq.n	8008a1c <_svfprintf_r+0x1f4>
 8008a16:	f04f 0900 	mov.w	r9, #0
 8008a1a:	e00a      	b.n	8008a32 <_svfprintf_r+0x20a>
 8008a1c:	f8d7 9000 	ldr.w	r9, [r7]
 8008a20:	9305      	str	r3, [sp, #20]
 8008a22:	1d3e      	adds	r6, r7, #4
 8008a24:	f1b9 0f00 	cmp.w	r9, #0
 8008a28:	4637      	mov	r7, r6
 8008a2a:	dacf      	bge.n	80089cc <_svfprintf_r+0x1a4>
 8008a2c:	f04f 39ff 	mov.w	r9, #4294967295
 8008a30:	e7cc      	b.n	80089cc <_svfprintf_r+0x1a4>
 8008a32:	9305      	str	r3, [sp, #20]
 8008a34:	9b02      	ldr	r3, [sp, #8]
 8008a36:	3b30      	subs	r3, #48	; 0x30
 8008a38:	2b09      	cmp	r3, #9
 8008a3a:	d808      	bhi.n	8008a4e <_svfprintf_r+0x226>
 8008a3c:	fb00 3909 	mla	r9, r0, r9, r3
 8008a40:	9b05      	ldr	r3, [sp, #20]
 8008a42:	461e      	mov	r6, r3
 8008a44:	f816 3b01 	ldrb.w	r3, [r6], #1
 8008a48:	9302      	str	r3, [sp, #8]
 8008a4a:	4633      	mov	r3, r6
 8008a4c:	e7f1      	b.n	8008a32 <_svfprintf_r+0x20a>
 8008a4e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8008a52:	e755      	b.n	8008900 <_svfprintf_r+0xd8>
 8008a54:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8008a58:	e7b8      	b.n	80089cc <_svfprintf_r+0x1a4>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a5e:	9b02      	ldr	r3, [sp, #8]
 8008a60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008a62:	3b30      	subs	r3, #48	; 0x30
 8008a64:	fb00 3306 	mla	r3, r0, r6, r3
 8008a68:	9309      	str	r3, [sp, #36]	; 0x24
 8008a6a:	9b05      	ldr	r3, [sp, #20]
 8008a6c:	461e      	mov	r6, r3
 8008a6e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8008a72:	9302      	str	r3, [sp, #8]
 8008a74:	9b02      	ldr	r3, [sp, #8]
 8008a76:	9605      	str	r6, [sp, #20]
 8008a78:	3b30      	subs	r3, #48	; 0x30
 8008a7a:	2b09      	cmp	r3, #9
 8008a7c:	d9ef      	bls.n	8008a5e <_svfprintf_r+0x236>
 8008a7e:	e73f      	b.n	8008900 <_svfprintf_r+0xd8>
 8008a80:	f045 0508 	orr.w	r5, r5, #8
 8008a84:	e7a2      	b.n	80089cc <_svfprintf_r+0x1a4>
 8008a86:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8008a8a:	e79f      	b.n	80089cc <_svfprintf_r+0x1a4>
 8008a8c:	9b05      	ldr	r3, [sp, #20]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2b6c      	cmp	r3, #108	; 0x6c
 8008a92:	d103      	bne.n	8008a9c <_svfprintf_r+0x274>
 8008a94:	9b05      	ldr	r3, [sp, #20]
 8008a96:	3301      	adds	r3, #1
 8008a98:	9305      	str	r3, [sp, #20]
 8008a9a:	e002      	b.n	8008aa2 <_svfprintf_r+0x27a>
 8008a9c:	f045 0510 	orr.w	r5, r5, #16
 8008aa0:	e794      	b.n	80089cc <_svfprintf_r+0x1a4>
 8008aa2:	f045 0520 	orr.w	r5, r5, #32
 8008aa6:	e791      	b.n	80089cc <_svfprintf_r+0x1a4>
 8008aa8:	1d3b      	adds	r3, r7, #4
 8008aaa:	9303      	str	r3, [sp, #12]
 8008aac:	2600      	movs	r6, #0
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8008ab4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008ab8:	e199      	b.n	8008dee <_svfprintf_r+0x5c6>
 8008aba:	b10a      	cbz	r2, 8008ac0 <_svfprintf_r+0x298>
 8008abc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8008ac0:	f045 0510 	orr.w	r5, r5, #16
 8008ac4:	06aa      	lsls	r2, r5, #26
 8008ac6:	d511      	bpl.n	8008aec <_svfprintf_r+0x2c4>
 8008ac8:	3707      	adds	r7, #7
 8008aca:	f027 0707 	bic.w	r7, r7, #7
 8008ace:	f107 0308 	add.w	r3, r7, #8
 8008ad2:	9303      	str	r3, [sp, #12]
 8008ad4:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008ad8:	e017      	b.n	8008b0a <_svfprintf_r+0x2e2>
 8008ada:	bf00      	nop
 8008adc:	f3af 8000 	nop.w
	...
 8008ae8:	0800b1e0 	.word	0x0800b1e0
 8008aec:	f015 0f10 	tst.w	r5, #16
 8008af0:	f107 0304 	add.w	r3, r7, #4
 8008af4:	d002      	beq.n	8008afc <_svfprintf_r+0x2d4>
 8008af6:	9303      	str	r3, [sp, #12]
 8008af8:	683e      	ldr	r6, [r7, #0]
 8008afa:	e005      	b.n	8008b08 <_svfprintf_r+0x2e0>
 8008afc:	683e      	ldr	r6, [r7, #0]
 8008afe:	9303      	str	r3, [sp, #12]
 8008b00:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008b04:	bf18      	it	ne
 8008b06:	b236      	sxthne	r6, r6
 8008b08:	17f7      	asrs	r7, r6, #31
 8008b0a:	2e00      	cmp	r6, #0
 8008b0c:	f177 0300 	sbcs.w	r3, r7, #0
 8008b10:	f280 80de 	bge.w	8008cd0 <_svfprintf_r+0x4a8>
 8008b14:	4276      	negs	r6, r6
 8008b16:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8008b1a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8008b1e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8008b22:	e0d5      	b.n	8008cd0 <_svfprintf_r+0x4a8>
 8008b24:	b10a      	cbz	r2, 8008b2a <_svfprintf_r+0x302>
 8008b26:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8008b2a:	3707      	adds	r7, #7
 8008b2c:	f027 0707 	bic.w	r7, r7, #7
 8008b30:	f107 0308 	add.w	r3, r7, #8
 8008b34:	9303      	str	r3, [sp, #12]
 8008b36:	ed97 7b00 	vldr	d7, [r7]
 8008b3a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b3e:	9b06      	ldr	r3, [sp, #24]
 8008b40:	9312      	str	r3, [sp, #72]	; 0x48
 8008b42:	9b07      	ldr	r3, [sp, #28]
 8008b44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b48:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b4e:	4bab      	ldr	r3, [pc, #684]	; (8008dfc <_svfprintf_r+0x5d4>)
 8008b50:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008b54:	f7f7 ffe6 	bl	8000b24 <__aeabi_dcmpun>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	f040 84f1 	bne.w	8009540 <_svfprintf_r+0xd18>
 8008b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b62:	4ba6      	ldr	r3, [pc, #664]	; (8008dfc <_svfprintf_r+0x5d4>)
 8008b64:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008b68:	f7f7 ffbe 	bl	8000ae8 <__aeabi_dcmple>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	f040 84e7 	bne.w	8009540 <_svfprintf_r+0xd18>
 8008b72:	f000 bdfd 	b.w	8009770 <_svfprintf_r+0xf48>
 8008b76:	b10a      	cbz	r2, 8008b7c <_svfprintf_r+0x354>
 8008b78:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8008b7c:	f015 0f20 	tst.w	r5, #32
 8008b80:	f107 0304 	add.w	r3, r7, #4
 8008b84:	d007      	beq.n	8008b96 <_svfprintf_r+0x36e>
 8008b86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	17ce      	asrs	r6, r1, #31
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	4631      	mov	r1, r6
 8008b90:	e9c2 0100 	strd	r0, r1, [r2]
 8008b94:	e00b      	b.n	8008bae <_svfprintf_r+0x386>
 8008b96:	06e9      	lsls	r1, r5, #27
 8008b98:	d406      	bmi.n	8008ba8 <_svfprintf_r+0x380>
 8008b9a:	066a      	lsls	r2, r5, #25
 8008b9c:	d504      	bpl.n	8008ba8 <_svfprintf_r+0x380>
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8008ba4:	8011      	strh	r1, [r2, #0]
 8008ba6:	e002      	b.n	8008bae <_svfprintf_r+0x386>
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008bac:	6011      	str	r1, [r2, #0]
 8008bae:	461f      	mov	r7, r3
 8008bb0:	e670      	b.n	8008894 <_svfprintf_r+0x6c>
 8008bb2:	f045 0510 	orr.w	r5, r5, #16
 8008bb6:	f015 0320 	ands.w	r3, r5, #32
 8008bba:	d009      	beq.n	8008bd0 <_svfprintf_r+0x3a8>
 8008bbc:	3707      	adds	r7, #7
 8008bbe:	f027 0707 	bic.w	r7, r7, #7
 8008bc2:	f107 0308 	add.w	r3, r7, #8
 8008bc6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008bca:	9303      	str	r3, [sp, #12]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	e07b      	b.n	8008cc8 <_svfprintf_r+0x4a0>
 8008bd0:	1d3a      	adds	r2, r7, #4
 8008bd2:	f015 0110 	ands.w	r1, r5, #16
 8008bd6:	9203      	str	r2, [sp, #12]
 8008bd8:	d105      	bne.n	8008be6 <_svfprintf_r+0x3be>
 8008bda:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8008bde:	d002      	beq.n	8008be6 <_svfprintf_r+0x3be>
 8008be0:	883e      	ldrh	r6, [r7, #0]
 8008be2:	2700      	movs	r7, #0
 8008be4:	e7f2      	b.n	8008bcc <_svfprintf_r+0x3a4>
 8008be6:	683e      	ldr	r6, [r7, #0]
 8008be8:	2700      	movs	r7, #0
 8008bea:	e06d      	b.n	8008cc8 <_svfprintf_r+0x4a0>
 8008bec:	1d3b      	adds	r3, r7, #4
 8008bee:	9303      	str	r3, [sp, #12]
 8008bf0:	2330      	movs	r3, #48	; 0x30
 8008bf2:	2278      	movs	r2, #120	; 0x78
 8008bf4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8008bf8:	4b81      	ldr	r3, [pc, #516]	; (8008e00 <_svfprintf_r+0x5d8>)
 8008bfa:	683e      	ldr	r6, [r7, #0]
 8008bfc:	9311      	str	r3, [sp, #68]	; 0x44
 8008bfe:	2700      	movs	r7, #0
 8008c00:	f045 0502 	orr.w	r5, r5, #2
 8008c04:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8008c08:	2302      	movs	r3, #2
 8008c0a:	9202      	str	r2, [sp, #8]
 8008c0c:	e05c      	b.n	8008cc8 <_svfprintf_r+0x4a0>
 8008c0e:	2600      	movs	r6, #0
 8008c10:	1d3b      	adds	r3, r7, #4
 8008c12:	45b1      	cmp	r9, r6
 8008c14:	9303      	str	r3, [sp, #12]
 8008c16:	f8d7 8000 	ldr.w	r8, [r7]
 8008c1a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008c1e:	db0a      	blt.n	8008c36 <_svfprintf_r+0x40e>
 8008c20:	464a      	mov	r2, r9
 8008c22:	4631      	mov	r1, r6
 8008c24:	4640      	mov	r0, r8
 8008c26:	f7f7 fad3 	bl	80001d0 <memchr>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	f000 80ea 	beq.w	8008e04 <_svfprintf_r+0x5dc>
 8008c30:	ebc8 0900 	rsb	r9, r8, r0
 8008c34:	e0e7      	b.n	8008e06 <_svfprintf_r+0x5de>
 8008c36:	4640      	mov	r0, r8
 8008c38:	f7f7 fb1a 	bl	8000270 <strlen>
 8008c3c:	4681      	mov	r9, r0
 8008c3e:	e0e2      	b.n	8008e06 <_svfprintf_r+0x5de>
 8008c40:	f045 0510 	orr.w	r5, r5, #16
 8008c44:	06ae      	lsls	r6, r5, #26
 8008c46:	d508      	bpl.n	8008c5a <_svfprintf_r+0x432>
 8008c48:	3707      	adds	r7, #7
 8008c4a:	f027 0707 	bic.w	r7, r7, #7
 8008c4e:	f107 0308 	add.w	r3, r7, #8
 8008c52:	9303      	str	r3, [sp, #12]
 8008c54:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008c58:	e00a      	b.n	8008c70 <_svfprintf_r+0x448>
 8008c5a:	1d3b      	adds	r3, r7, #4
 8008c5c:	f015 0f10 	tst.w	r5, #16
 8008c60:	9303      	str	r3, [sp, #12]
 8008c62:	d103      	bne.n	8008c6c <_svfprintf_r+0x444>
 8008c64:	0668      	lsls	r0, r5, #25
 8008c66:	d501      	bpl.n	8008c6c <_svfprintf_r+0x444>
 8008c68:	883e      	ldrh	r6, [r7, #0]
 8008c6a:	e000      	b.n	8008c6e <_svfprintf_r+0x446>
 8008c6c:	683e      	ldr	r6, [r7, #0]
 8008c6e:	2700      	movs	r7, #0
 8008c70:	2301      	movs	r3, #1
 8008c72:	e029      	b.n	8008cc8 <_svfprintf_r+0x4a0>
 8008c74:	b10a      	cbz	r2, 8008c7a <_svfprintf_r+0x452>
 8008c76:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8008c7a:	4b61      	ldr	r3, [pc, #388]	; (8008e00 <_svfprintf_r+0x5d8>)
 8008c7c:	9311      	str	r3, [sp, #68]	; 0x44
 8008c7e:	06a9      	lsls	r1, r5, #26
 8008c80:	d508      	bpl.n	8008c94 <_svfprintf_r+0x46c>
 8008c82:	3707      	adds	r7, #7
 8008c84:	f027 0707 	bic.w	r7, r7, #7
 8008c88:	f107 0308 	add.w	r3, r7, #8
 8008c8c:	9303      	str	r3, [sp, #12]
 8008c8e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008c92:	e00a      	b.n	8008caa <_svfprintf_r+0x482>
 8008c94:	1d3b      	adds	r3, r7, #4
 8008c96:	f015 0f10 	tst.w	r5, #16
 8008c9a:	9303      	str	r3, [sp, #12]
 8008c9c:	d103      	bne.n	8008ca6 <_svfprintf_r+0x47e>
 8008c9e:	066a      	lsls	r2, r5, #25
 8008ca0:	d501      	bpl.n	8008ca6 <_svfprintf_r+0x47e>
 8008ca2:	883e      	ldrh	r6, [r7, #0]
 8008ca4:	e000      	b.n	8008ca8 <_svfprintf_r+0x480>
 8008ca6:	683e      	ldr	r6, [r7, #0]
 8008ca8:	2700      	movs	r7, #0
 8008caa:	07eb      	lsls	r3, r5, #31
 8008cac:	d50b      	bpl.n	8008cc6 <_svfprintf_r+0x49e>
 8008cae:	ea56 0307 	orrs.w	r3, r6, r7
 8008cb2:	d008      	beq.n	8008cc6 <_svfprintf_r+0x49e>
 8008cb4:	2330      	movs	r3, #48	; 0x30
 8008cb6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8008cba:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008cbe:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8008cc2:	f045 0502 	orr.w	r5, r5, #2
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008cce:	e000      	b.n	8008cd2 <_svfprintf_r+0x4aa>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	f1b9 0f00 	cmp.w	r9, #0
 8008cd6:	f2c0 855c 	blt.w	8009792 <_svfprintf_r+0xf6a>
 8008cda:	ea56 0207 	orrs.w	r2, r6, r7
 8008cde:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8008ce2:	d103      	bne.n	8008cec <_svfprintf_r+0x4c4>
 8008ce4:	f1b9 0f00 	cmp.w	r9, #0
 8008ce8:	d05f      	beq.n	8008daa <_svfprintf_r+0x582>
 8008cea:	e006      	b.n	8008cfa <_svfprintf_r+0x4d2>
 8008cec:	460d      	mov	r5, r1
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d025      	beq.n	8008d3e <_svfprintf_r+0x516>
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d046      	beq.n	8008d84 <_svfprintf_r+0x55c>
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	e007      	b.n	8008d0a <_svfprintf_r+0x4e2>
 8008cfa:	460d      	mov	r5, r1
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d022      	beq.n	8008d46 <_svfprintf_r+0x51e>
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d03d      	beq.n	8008d80 <_svfprintf_r+0x558>
 8008d04:	4629      	mov	r1, r5
 8008d06:	2600      	movs	r6, #0
 8008d08:	2700      	movs	r7, #0
 8008d0a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8008d0e:	08f2      	lsrs	r2, r6, #3
 8008d10:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8008d14:	08f8      	lsrs	r0, r7, #3
 8008d16:	f006 0307 	and.w	r3, r6, #7
 8008d1a:	4607      	mov	r7, r0
 8008d1c:	4616      	mov	r6, r2
 8008d1e:	3330      	adds	r3, #48	; 0x30
 8008d20:	ea56 0207 	orrs.w	r2, r6, r7
 8008d24:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8008d28:	d1f1      	bne.n	8008d0e <_svfprintf_r+0x4e6>
 8008d2a:	07e8      	lsls	r0, r5, #31
 8008d2c:	d548      	bpl.n	8008dc0 <_svfprintf_r+0x598>
 8008d2e:	2b30      	cmp	r3, #48	; 0x30
 8008d30:	d046      	beq.n	8008dc0 <_svfprintf_r+0x598>
 8008d32:	2330      	movs	r3, #48	; 0x30
 8008d34:	f808 3c01 	strb.w	r3, [r8, #-1]
 8008d38:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d3c:	e040      	b.n	8008dc0 <_svfprintf_r+0x598>
 8008d3e:	2f00      	cmp	r7, #0
 8008d40:	bf08      	it	eq
 8008d42:	2e0a      	cmpeq	r6, #10
 8008d44:	d205      	bcs.n	8008d52 <_svfprintf_r+0x52a>
 8008d46:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8008d4a:	3630      	adds	r6, #48	; 0x30
 8008d4c:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8008d50:	e029      	b.n	8008da6 <_svfprintf_r+0x57e>
 8008d52:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8008d56:	4630      	mov	r0, r6
 8008d58:	4639      	mov	r1, r7
 8008d5a:	220a      	movs	r2, #10
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f7f7 ff1f 	bl	8000ba0 <__aeabi_uldivmod>
 8008d62:	3230      	adds	r2, #48	; 0x30
 8008d64:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8008d68:	2300      	movs	r3, #0
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	220a      	movs	r2, #10
 8008d70:	f7f7 ff16 	bl	8000ba0 <__aeabi_uldivmod>
 8008d74:	4606      	mov	r6, r0
 8008d76:	460f      	mov	r7, r1
 8008d78:	ea56 0307 	orrs.w	r3, r6, r7
 8008d7c:	d1eb      	bne.n	8008d56 <_svfprintf_r+0x52e>
 8008d7e:	e012      	b.n	8008da6 <_svfprintf_r+0x57e>
 8008d80:	2600      	movs	r6, #0
 8008d82:	2700      	movs	r7, #0
 8008d84:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8008d88:	f006 030f 	and.w	r3, r6, #15
 8008d8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d8e:	5cd3      	ldrb	r3, [r2, r3]
 8008d90:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8008d94:	0933      	lsrs	r3, r6, #4
 8008d96:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8008d9a:	093a      	lsrs	r2, r7, #4
 8008d9c:	461e      	mov	r6, r3
 8008d9e:	4617      	mov	r7, r2
 8008da0:	ea56 0307 	orrs.w	r3, r6, r7
 8008da4:	d1f0      	bne.n	8008d88 <_svfprintf_r+0x560>
 8008da6:	4629      	mov	r1, r5
 8008da8:	e00a      	b.n	8008dc0 <_svfprintf_r+0x598>
 8008daa:	b93b      	cbnz	r3, 8008dbc <_svfprintf_r+0x594>
 8008dac:	07ea      	lsls	r2, r5, #31
 8008dae:	d505      	bpl.n	8008dbc <_svfprintf_r+0x594>
 8008db0:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8008db4:	2330      	movs	r3, #48	; 0x30
 8008db6:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8008dba:	e001      	b.n	8008dc0 <_svfprintf_r+0x598>
 8008dbc:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8008dc0:	464e      	mov	r6, r9
 8008dc2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8008dc6:	ebc8 0909 	rsb	r9, r8, r9
 8008dca:	460d      	mov	r5, r1
 8008dcc:	2700      	movs	r7, #0
 8008dce:	e01b      	b.n	8008e08 <_svfprintf_r+0x5e0>
 8008dd0:	b10a      	cbz	r2, 8008dd6 <_svfprintf_r+0x5ae>
 8008dd2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8008dd6:	9b02      	ldr	r3, [sp, #8]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 83a0 	beq.w	800951e <_svfprintf_r+0xcf6>
 8008dde:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008de2:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8008de6:	2600      	movs	r6, #0
 8008de8:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008dec:	9703      	str	r7, [sp, #12]
 8008dee:	f04f 0901 	mov.w	r9, #1
 8008df2:	4637      	mov	r7, r6
 8008df4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8008df8:	e006      	b.n	8008e08 <_svfprintf_r+0x5e0>
 8008dfa:	bf00      	nop
 8008dfc:	7fefffff 	.word	0x7fefffff
 8008e00:	0800b1f1 	.word	0x0800b1f1
 8008e04:	4606      	mov	r6, r0
 8008e06:	4637      	mov	r7, r6
 8008e08:	454e      	cmp	r6, r9
 8008e0a:	4633      	mov	r3, r6
 8008e0c:	bfb8      	it	lt
 8008e0e:	464b      	movlt	r3, r9
 8008e10:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e12:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8008e16:	b113      	cbz	r3, 8008e1e <_svfprintf_r+0x5f6>
 8008e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e1e:	f015 0302 	ands.w	r3, r5, #2
 8008e22:	9314      	str	r3, [sp, #80]	; 0x50
 8008e24:	bf1e      	ittt	ne
 8008e26:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8008e28:	3302      	addne	r3, #2
 8008e2a:	930b      	strne	r3, [sp, #44]	; 0x2c
 8008e2c:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8008e30:	9315      	str	r3, [sp, #84]	; 0x54
 8008e32:	d139      	bne.n	8008ea8 <_svfprintf_r+0x680>
 8008e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e38:	1a9b      	subs	r3, r3, r2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	930c      	str	r3, [sp, #48]	; 0x30
 8008e3e:	dd33      	ble.n	8008ea8 <_svfprintf_r+0x680>
 8008e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e42:	2b10      	cmp	r3, #16
 8008e44:	4ba6      	ldr	r3, [pc, #664]	; (80090e0 <_svfprintf_r+0x8b8>)
 8008e46:	6023      	str	r3, [r4, #0]
 8008e48:	dd18      	ble.n	8008e7c <_svfprintf_r+0x654>
 8008e4a:	2310      	movs	r3, #16
 8008e4c:	6063      	str	r3, [r4, #4]
 8008e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e50:	3310      	adds	r3, #16
 8008e52:	9321      	str	r3, [sp, #132]	; 0x84
 8008e54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008e56:	3301      	adds	r3, #1
 8008e58:	2b07      	cmp	r3, #7
 8008e5a:	9320      	str	r3, [sp, #128]	; 0x80
 8008e5c:	dc01      	bgt.n	8008e62 <_svfprintf_r+0x63a>
 8008e5e:	3408      	adds	r4, #8
 8008e60:	e008      	b.n	8008e74 <_svfprintf_r+0x64c>
 8008e62:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e64:	4659      	mov	r1, fp
 8008e66:	4650      	mov	r0, sl
 8008e68:	f001 fec0 	bl	800abec <__ssprint_r>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	f040 835d 	bne.w	800952c <_svfprintf_r+0xd04>
 8008e72:	ac2c      	add	r4, sp, #176	; 0xb0
 8008e74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e76:	3b10      	subs	r3, #16
 8008e78:	930c      	str	r3, [sp, #48]	; 0x30
 8008e7a:	e7e1      	b.n	8008e40 <_svfprintf_r+0x618>
 8008e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e7e:	6063      	str	r3, [r4, #4]
 8008e80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e84:	4413      	add	r3, r2
 8008e86:	9321      	str	r3, [sp, #132]	; 0x84
 8008e88:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	2b07      	cmp	r3, #7
 8008e8e:	9320      	str	r3, [sp, #128]	; 0x80
 8008e90:	dc01      	bgt.n	8008e96 <_svfprintf_r+0x66e>
 8008e92:	3408      	adds	r4, #8
 8008e94:	e008      	b.n	8008ea8 <_svfprintf_r+0x680>
 8008e96:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e98:	4659      	mov	r1, fp
 8008e9a:	4650      	mov	r0, sl
 8008e9c:	f001 fea6 	bl	800abec <__ssprint_r>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	f040 8343 	bne.w	800952c <_svfprintf_r+0xd04>
 8008ea6:	ac2c      	add	r4, sp, #176	; 0xb0
 8008ea8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8008eac:	b1bb      	cbz	r3, 8008ede <_svfprintf_r+0x6b6>
 8008eae:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8008eb2:	6023      	str	r3, [r4, #0]
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	6063      	str	r3, [r4, #4]
 8008eb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eba:	3301      	adds	r3, #1
 8008ebc:	9321      	str	r3, [sp, #132]	; 0x84
 8008ebe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	2b07      	cmp	r3, #7
 8008ec4:	9320      	str	r3, [sp, #128]	; 0x80
 8008ec6:	dc01      	bgt.n	8008ecc <_svfprintf_r+0x6a4>
 8008ec8:	3408      	adds	r4, #8
 8008eca:	e008      	b.n	8008ede <_svfprintf_r+0x6b6>
 8008ecc:	aa1f      	add	r2, sp, #124	; 0x7c
 8008ece:	4659      	mov	r1, fp
 8008ed0:	4650      	mov	r0, sl
 8008ed2:	f001 fe8b 	bl	800abec <__ssprint_r>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	f040 8328 	bne.w	800952c <_svfprintf_r+0xd04>
 8008edc:	ac2c      	add	r4, sp, #176	; 0xb0
 8008ede:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ee0:	b1b3      	cbz	r3, 8008f10 <_svfprintf_r+0x6e8>
 8008ee2:	ab18      	add	r3, sp, #96	; 0x60
 8008ee4:	6023      	str	r3, [r4, #0]
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	6063      	str	r3, [r4, #4]
 8008eea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eec:	3302      	adds	r3, #2
 8008eee:	9321      	str	r3, [sp, #132]	; 0x84
 8008ef0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	2b07      	cmp	r3, #7
 8008ef6:	9320      	str	r3, [sp, #128]	; 0x80
 8008ef8:	dc01      	bgt.n	8008efe <_svfprintf_r+0x6d6>
 8008efa:	3408      	adds	r4, #8
 8008efc:	e008      	b.n	8008f10 <_svfprintf_r+0x6e8>
 8008efe:	aa1f      	add	r2, sp, #124	; 0x7c
 8008f00:	4659      	mov	r1, fp
 8008f02:	4650      	mov	r0, sl
 8008f04:	f001 fe72 	bl	800abec <__ssprint_r>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	f040 830f 	bne.w	800952c <_svfprintf_r+0xd04>
 8008f0e:	ac2c      	add	r4, sp, #176	; 0xb0
 8008f10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f12:	2b80      	cmp	r3, #128	; 0x80
 8008f14:	d135      	bne.n	8008f82 <_svfprintf_r+0x75a>
 8008f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f1a:	1a9b      	subs	r3, r3, r2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dd30      	ble.n	8008f82 <_svfprintf_r+0x75a>
 8008f20:	4a70      	ldr	r2, [pc, #448]	; (80090e4 <_svfprintf_r+0x8bc>)
 8008f22:	6022      	str	r2, [r4, #0]
 8008f24:	2b10      	cmp	r3, #16
 8008f26:	dd18      	ble.n	8008f5a <_svfprintf_r+0x732>
 8008f28:	2210      	movs	r2, #16
 8008f2a:	6062      	str	r2, [r4, #4]
 8008f2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f2e:	3210      	adds	r2, #16
 8008f30:	9221      	str	r2, [sp, #132]	; 0x84
 8008f32:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008f34:	3201      	adds	r2, #1
 8008f36:	2a07      	cmp	r2, #7
 8008f38:	9220      	str	r2, [sp, #128]	; 0x80
 8008f3a:	dc01      	bgt.n	8008f40 <_svfprintf_r+0x718>
 8008f3c:	3408      	adds	r4, #8
 8008f3e:	e00a      	b.n	8008f56 <_svfprintf_r+0x72e>
 8008f40:	aa1f      	add	r2, sp, #124	; 0x7c
 8008f42:	4659      	mov	r1, fp
 8008f44:	4650      	mov	r0, sl
 8008f46:	930c      	str	r3, [sp, #48]	; 0x30
 8008f48:	f001 fe50 	bl	800abec <__ssprint_r>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	f040 82ed 	bne.w	800952c <_svfprintf_r+0xd04>
 8008f52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f54:	ac2c      	add	r4, sp, #176	; 0xb0
 8008f56:	3b10      	subs	r3, #16
 8008f58:	e7e2      	b.n	8008f20 <_svfprintf_r+0x6f8>
 8008f5a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f5c:	6063      	str	r3, [r4, #4]
 8008f5e:	4413      	add	r3, r2
 8008f60:	9321      	str	r3, [sp, #132]	; 0x84
 8008f62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008f64:	3301      	adds	r3, #1
 8008f66:	2b07      	cmp	r3, #7
 8008f68:	9320      	str	r3, [sp, #128]	; 0x80
 8008f6a:	dc01      	bgt.n	8008f70 <_svfprintf_r+0x748>
 8008f6c:	3408      	adds	r4, #8
 8008f6e:	e008      	b.n	8008f82 <_svfprintf_r+0x75a>
 8008f70:	aa1f      	add	r2, sp, #124	; 0x7c
 8008f72:	4659      	mov	r1, fp
 8008f74:	4650      	mov	r0, sl
 8008f76:	f001 fe39 	bl	800abec <__ssprint_r>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	f040 82d6 	bne.w	800952c <_svfprintf_r+0xd04>
 8008f80:	ac2c      	add	r4, sp, #176	; 0xb0
 8008f82:	ebc9 0606 	rsb	r6, r9, r6
 8008f86:	2e00      	cmp	r6, #0
 8008f88:	dd2e      	ble.n	8008fe8 <_svfprintf_r+0x7c0>
 8008f8a:	4b56      	ldr	r3, [pc, #344]	; (80090e4 <_svfprintf_r+0x8bc>)
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	2e10      	cmp	r6, #16
 8008f90:	dd16      	ble.n	8008fc0 <_svfprintf_r+0x798>
 8008f92:	2310      	movs	r3, #16
 8008f94:	6063      	str	r3, [r4, #4]
 8008f96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f98:	3310      	adds	r3, #16
 8008f9a:	9321      	str	r3, [sp, #132]	; 0x84
 8008f9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	2b07      	cmp	r3, #7
 8008fa2:	9320      	str	r3, [sp, #128]	; 0x80
 8008fa4:	dc01      	bgt.n	8008faa <_svfprintf_r+0x782>
 8008fa6:	3408      	adds	r4, #8
 8008fa8:	e008      	b.n	8008fbc <_svfprintf_r+0x794>
 8008faa:	aa1f      	add	r2, sp, #124	; 0x7c
 8008fac:	4659      	mov	r1, fp
 8008fae:	4650      	mov	r0, sl
 8008fb0:	f001 fe1c 	bl	800abec <__ssprint_r>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	f040 82b9 	bne.w	800952c <_svfprintf_r+0xd04>
 8008fba:	ac2c      	add	r4, sp, #176	; 0xb0
 8008fbc:	3e10      	subs	r6, #16
 8008fbe:	e7e4      	b.n	8008f8a <_svfprintf_r+0x762>
 8008fc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008fc2:	9821      	ldr	r0, [sp, #132]	; 0x84
 8008fc4:	6066      	str	r6, [r4, #4]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	4406      	add	r6, r0
 8008fca:	2b07      	cmp	r3, #7
 8008fcc:	9621      	str	r6, [sp, #132]	; 0x84
 8008fce:	9320      	str	r3, [sp, #128]	; 0x80
 8008fd0:	dc01      	bgt.n	8008fd6 <_svfprintf_r+0x7ae>
 8008fd2:	3408      	adds	r4, #8
 8008fd4:	e008      	b.n	8008fe8 <_svfprintf_r+0x7c0>
 8008fd6:	aa1f      	add	r2, sp, #124	; 0x7c
 8008fd8:	4659      	mov	r1, fp
 8008fda:	4650      	mov	r0, sl
 8008fdc:	f001 fe06 	bl	800abec <__ssprint_r>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	f040 82a3 	bne.w	800952c <_svfprintf_r+0xd04>
 8008fe6:	ac2c      	add	r4, sp, #176	; 0xb0
 8008fe8:	05eb      	lsls	r3, r5, #23
 8008fea:	d414      	bmi.n	8009016 <_svfprintf_r+0x7ee>
 8008fec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fee:	e884 0300 	stmia.w	r4, {r8, r9}
 8008ff2:	444b      	add	r3, r9
 8008ff4:	9321      	str	r3, [sp, #132]	; 0x84
 8008ff6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	2b07      	cmp	r3, #7
 8008ffc:	9320      	str	r3, [sp, #128]	; 0x80
 8008ffe:	f340 8244 	ble.w	800948a <_svfprintf_r+0xc62>
 8009002:	aa1f      	add	r2, sp, #124	; 0x7c
 8009004:	4659      	mov	r1, fp
 8009006:	4650      	mov	r0, sl
 8009008:	f001 fdf0 	bl	800abec <__ssprint_r>
 800900c:	2800      	cmp	r0, #0
 800900e:	f040 828d 	bne.w	800952c <_svfprintf_r+0xd04>
 8009012:	ac2c      	add	r4, sp, #176	; 0xb0
 8009014:	e23a      	b.n	800948c <_svfprintf_r+0xc64>
 8009016:	9b02      	ldr	r3, [sp, #8]
 8009018:	2b65      	cmp	r3, #101	; 0x65
 800901a:	f340 81ad 	ble.w	8009378 <_svfprintf_r+0xb50>
 800901e:	2200      	movs	r2, #0
 8009020:	2300      	movs	r3, #0
 8009022:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009026:	f7f7 fd4b 	bl	8000ac0 <__aeabi_dcmpeq>
 800902a:	2800      	cmp	r0, #0
 800902c:	d05e      	beq.n	80090ec <_svfprintf_r+0x8c4>
 800902e:	4b2e      	ldr	r3, [pc, #184]	; (80090e8 <_svfprintf_r+0x8c0>)
 8009030:	6023      	str	r3, [r4, #0]
 8009032:	2301      	movs	r3, #1
 8009034:	6063      	str	r3, [r4, #4]
 8009036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009038:	3301      	adds	r3, #1
 800903a:	9321      	str	r3, [sp, #132]	; 0x84
 800903c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800903e:	3301      	adds	r3, #1
 8009040:	2b07      	cmp	r3, #7
 8009042:	9320      	str	r3, [sp, #128]	; 0x80
 8009044:	dc01      	bgt.n	800904a <_svfprintf_r+0x822>
 8009046:	3408      	adds	r4, #8
 8009048:	e008      	b.n	800905c <_svfprintf_r+0x834>
 800904a:	aa1f      	add	r2, sp, #124	; 0x7c
 800904c:	4659      	mov	r1, fp
 800904e:	4650      	mov	r0, sl
 8009050:	f001 fdcc 	bl	800abec <__ssprint_r>
 8009054:	2800      	cmp	r0, #0
 8009056:	f040 8269 	bne.w	800952c <_svfprintf_r+0xd04>
 800905a:	ac2c      	add	r4, sp, #176	; 0xb0
 800905c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800905e:	9a04      	ldr	r2, [sp, #16]
 8009060:	4293      	cmp	r3, r2
 8009062:	db02      	blt.n	800906a <_svfprintf_r+0x842>
 8009064:	07ee      	lsls	r6, r5, #31
 8009066:	f140 8211 	bpl.w	800948c <_svfprintf_r+0xc64>
 800906a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	9b08      	ldr	r3, [sp, #32]
 8009070:	6063      	str	r3, [r4, #4]
 8009072:	9a08      	ldr	r2, [sp, #32]
 8009074:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009076:	4413      	add	r3, r2
 8009078:	9321      	str	r3, [sp, #132]	; 0x84
 800907a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800907c:	3301      	adds	r3, #1
 800907e:	2b07      	cmp	r3, #7
 8009080:	9320      	str	r3, [sp, #128]	; 0x80
 8009082:	dc01      	bgt.n	8009088 <_svfprintf_r+0x860>
 8009084:	3408      	adds	r4, #8
 8009086:	e008      	b.n	800909a <_svfprintf_r+0x872>
 8009088:	aa1f      	add	r2, sp, #124	; 0x7c
 800908a:	4659      	mov	r1, fp
 800908c:	4650      	mov	r0, sl
 800908e:	f001 fdad 	bl	800abec <__ssprint_r>
 8009092:	2800      	cmp	r0, #0
 8009094:	f040 824a 	bne.w	800952c <_svfprintf_r+0xd04>
 8009098:	ac2c      	add	r4, sp, #176	; 0xb0
 800909a:	9b04      	ldr	r3, [sp, #16]
 800909c:	1e5e      	subs	r6, r3, #1
 800909e:	2e00      	cmp	r6, #0
 80090a0:	f340 81f4 	ble.w	800948c <_svfprintf_r+0xc64>
 80090a4:	4f0f      	ldr	r7, [pc, #60]	; (80090e4 <_svfprintf_r+0x8bc>)
 80090a6:	f04f 0810 	mov.w	r8, #16
 80090aa:	2e10      	cmp	r6, #16
 80090ac:	f340 8159 	ble.w	8009362 <_svfprintf_r+0xb3a>
 80090b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090b2:	3310      	adds	r3, #16
 80090b4:	9321      	str	r3, [sp, #132]	; 0x84
 80090b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80090b8:	3301      	adds	r3, #1
 80090ba:	2b07      	cmp	r3, #7
 80090bc:	e884 0180 	stmia.w	r4, {r7, r8}
 80090c0:	9320      	str	r3, [sp, #128]	; 0x80
 80090c2:	dc01      	bgt.n	80090c8 <_svfprintf_r+0x8a0>
 80090c4:	3408      	adds	r4, #8
 80090c6:	e008      	b.n	80090da <_svfprintf_r+0x8b2>
 80090c8:	aa1f      	add	r2, sp, #124	; 0x7c
 80090ca:	4659      	mov	r1, fp
 80090cc:	4650      	mov	r0, sl
 80090ce:	f001 fd8d 	bl	800abec <__ssprint_r>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	f040 822a 	bne.w	800952c <_svfprintf_r+0xd04>
 80090d8:	ac2c      	add	r4, sp, #176	; 0xb0
 80090da:	3e10      	subs	r6, #16
 80090dc:	e7e5      	b.n	80090aa <_svfprintf_r+0x882>
 80090de:	bf00      	nop
 80090e0:	0800b204 	.word	0x0800b204
 80090e4:	0800b1c0 	.word	0x0800b1c0
 80090e8:	0800b202 	.word	0x0800b202
 80090ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	dc7c      	bgt.n	80091ec <_svfprintf_r+0x9c4>
 80090f2:	4b9f      	ldr	r3, [pc, #636]	; (8009370 <_svfprintf_r+0xb48>)
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	2301      	movs	r3, #1
 80090f8:	6063      	str	r3, [r4, #4]
 80090fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090fc:	3301      	adds	r3, #1
 80090fe:	9321      	str	r3, [sp, #132]	; 0x84
 8009100:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009102:	3301      	adds	r3, #1
 8009104:	2b07      	cmp	r3, #7
 8009106:	9320      	str	r3, [sp, #128]	; 0x80
 8009108:	dc01      	bgt.n	800910e <_svfprintf_r+0x8e6>
 800910a:	3408      	adds	r4, #8
 800910c:	e008      	b.n	8009120 <_svfprintf_r+0x8f8>
 800910e:	aa1f      	add	r2, sp, #124	; 0x7c
 8009110:	4659      	mov	r1, fp
 8009112:	4650      	mov	r0, sl
 8009114:	f001 fd6a 	bl	800abec <__ssprint_r>
 8009118:	2800      	cmp	r0, #0
 800911a:	f040 8207 	bne.w	800952c <_svfprintf_r+0xd04>
 800911e:	ac2c      	add	r4, sp, #176	; 0xb0
 8009120:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009122:	b923      	cbnz	r3, 800912e <_svfprintf_r+0x906>
 8009124:	9b04      	ldr	r3, [sp, #16]
 8009126:	b913      	cbnz	r3, 800912e <_svfprintf_r+0x906>
 8009128:	07e8      	lsls	r0, r5, #31
 800912a:	f140 81af 	bpl.w	800948c <_svfprintf_r+0xc64>
 800912e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	9b08      	ldr	r3, [sp, #32]
 8009134:	6063      	str	r3, [r4, #4]
 8009136:	9a08      	ldr	r2, [sp, #32]
 8009138:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800913a:	4413      	add	r3, r2
 800913c:	9321      	str	r3, [sp, #132]	; 0x84
 800913e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009140:	3301      	adds	r3, #1
 8009142:	2b07      	cmp	r3, #7
 8009144:	9320      	str	r3, [sp, #128]	; 0x80
 8009146:	dc02      	bgt.n	800914e <_svfprintf_r+0x926>
 8009148:	f104 0308 	add.w	r3, r4, #8
 800914c:	e008      	b.n	8009160 <_svfprintf_r+0x938>
 800914e:	aa1f      	add	r2, sp, #124	; 0x7c
 8009150:	4659      	mov	r1, fp
 8009152:	4650      	mov	r0, sl
 8009154:	f001 fd4a 	bl	800abec <__ssprint_r>
 8009158:	2800      	cmp	r0, #0
 800915a:	f040 81e7 	bne.w	800952c <_svfprintf_r+0xd04>
 800915e:	ab2c      	add	r3, sp, #176	; 0xb0
 8009160:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009162:	4276      	negs	r6, r6
 8009164:	2e00      	cmp	r6, #0
 8009166:	dd30      	ble.n	80091ca <_svfprintf_r+0x9a2>
 8009168:	4f82      	ldr	r7, [pc, #520]	; (8009374 <_svfprintf_r+0xb4c>)
 800916a:	2410      	movs	r4, #16
 800916c:	2e10      	cmp	r6, #16
 800916e:	dd16      	ble.n	800919e <_svfprintf_r+0x976>
 8009170:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009172:	601f      	str	r7, [r3, #0]
 8009174:	3210      	adds	r2, #16
 8009176:	9221      	str	r2, [sp, #132]	; 0x84
 8009178:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800917a:	605c      	str	r4, [r3, #4]
 800917c:	3201      	adds	r2, #1
 800917e:	2a07      	cmp	r2, #7
 8009180:	9220      	str	r2, [sp, #128]	; 0x80
 8009182:	dc01      	bgt.n	8009188 <_svfprintf_r+0x960>
 8009184:	3308      	adds	r3, #8
 8009186:	e008      	b.n	800919a <_svfprintf_r+0x972>
 8009188:	aa1f      	add	r2, sp, #124	; 0x7c
 800918a:	4659      	mov	r1, fp
 800918c:	4650      	mov	r0, sl
 800918e:	f001 fd2d 	bl	800abec <__ssprint_r>
 8009192:	2800      	cmp	r0, #0
 8009194:	f040 81ca 	bne.w	800952c <_svfprintf_r+0xd04>
 8009198:	ab2c      	add	r3, sp, #176	; 0xb0
 800919a:	3e10      	subs	r6, #16
 800919c:	e7e6      	b.n	800916c <_svfprintf_r+0x944>
 800919e:	4a75      	ldr	r2, [pc, #468]	; (8009374 <_svfprintf_r+0xb4c>)
 80091a0:	e883 0044 	stmia.w	r3, {r2, r6}
 80091a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091a6:	4416      	add	r6, r2
 80091a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80091aa:	9621      	str	r6, [sp, #132]	; 0x84
 80091ac:	3201      	adds	r2, #1
 80091ae:	2a07      	cmp	r2, #7
 80091b0:	9220      	str	r2, [sp, #128]	; 0x80
 80091b2:	dc01      	bgt.n	80091b8 <_svfprintf_r+0x990>
 80091b4:	3308      	adds	r3, #8
 80091b6:	e008      	b.n	80091ca <_svfprintf_r+0x9a2>
 80091b8:	aa1f      	add	r2, sp, #124	; 0x7c
 80091ba:	4659      	mov	r1, fp
 80091bc:	4650      	mov	r0, sl
 80091be:	f001 fd15 	bl	800abec <__ssprint_r>
 80091c2:	2800      	cmp	r0, #0
 80091c4:	f040 81b2 	bne.w	800952c <_svfprintf_r+0xd04>
 80091c8:	ab2c      	add	r3, sp, #176	; 0xb0
 80091ca:	9a04      	ldr	r2, [sp, #16]
 80091cc:	605a      	str	r2, [r3, #4]
 80091ce:	9904      	ldr	r1, [sp, #16]
 80091d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091d2:	f8c3 8000 	str.w	r8, [r3]
 80091d6:	440a      	add	r2, r1
 80091d8:	9221      	str	r2, [sp, #132]	; 0x84
 80091da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80091dc:	3201      	adds	r2, #1
 80091de:	2a07      	cmp	r2, #7
 80091e0:	9220      	str	r2, [sp, #128]	; 0x80
 80091e2:	f73f af0e 	bgt.w	8009002 <_svfprintf_r+0x7da>
 80091e6:	f103 0408 	add.w	r4, r3, #8
 80091ea:	e14f      	b.n	800948c <_svfprintf_r+0xc64>
 80091ec:	9b04      	ldr	r3, [sp, #16]
 80091ee:	42bb      	cmp	r3, r7
 80091f0:	bfa8      	it	ge
 80091f2:	463b      	movge	r3, r7
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	461e      	mov	r6, r3
 80091f8:	dd15      	ble.n	8009226 <_svfprintf_r+0x9fe>
 80091fa:	6063      	str	r3, [r4, #4]
 80091fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091fe:	f8c4 8000 	str.w	r8, [r4]
 8009202:	4433      	add	r3, r6
 8009204:	9321      	str	r3, [sp, #132]	; 0x84
 8009206:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009208:	3301      	adds	r3, #1
 800920a:	2b07      	cmp	r3, #7
 800920c:	9320      	str	r3, [sp, #128]	; 0x80
 800920e:	dc01      	bgt.n	8009214 <_svfprintf_r+0x9ec>
 8009210:	3408      	adds	r4, #8
 8009212:	e008      	b.n	8009226 <_svfprintf_r+0x9fe>
 8009214:	aa1f      	add	r2, sp, #124	; 0x7c
 8009216:	4659      	mov	r1, fp
 8009218:	4650      	mov	r0, sl
 800921a:	f001 fce7 	bl	800abec <__ssprint_r>
 800921e:	2800      	cmp	r0, #0
 8009220:	f040 8184 	bne.w	800952c <_svfprintf_r+0xd04>
 8009224:	ac2c      	add	r4, sp, #176	; 0xb0
 8009226:	2e00      	cmp	r6, #0
 8009228:	bfac      	ite	ge
 800922a:	1bbe      	subge	r6, r7, r6
 800922c:	463e      	movlt	r6, r7
 800922e:	2e00      	cmp	r6, #0
 8009230:	dd30      	ble.n	8009294 <_svfprintf_r+0xa6c>
 8009232:	f04f 0910 	mov.w	r9, #16
 8009236:	4b4f      	ldr	r3, [pc, #316]	; (8009374 <_svfprintf_r+0xb4c>)
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	2e10      	cmp	r6, #16
 800923c:	dd16      	ble.n	800926c <_svfprintf_r+0xa44>
 800923e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009240:	f8c4 9004 	str.w	r9, [r4, #4]
 8009244:	3310      	adds	r3, #16
 8009246:	9321      	str	r3, [sp, #132]	; 0x84
 8009248:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800924a:	3301      	adds	r3, #1
 800924c:	2b07      	cmp	r3, #7
 800924e:	9320      	str	r3, [sp, #128]	; 0x80
 8009250:	dc01      	bgt.n	8009256 <_svfprintf_r+0xa2e>
 8009252:	3408      	adds	r4, #8
 8009254:	e008      	b.n	8009268 <_svfprintf_r+0xa40>
 8009256:	aa1f      	add	r2, sp, #124	; 0x7c
 8009258:	4659      	mov	r1, fp
 800925a:	4650      	mov	r0, sl
 800925c:	f001 fcc6 	bl	800abec <__ssprint_r>
 8009260:	2800      	cmp	r0, #0
 8009262:	f040 8163 	bne.w	800952c <_svfprintf_r+0xd04>
 8009266:	ac2c      	add	r4, sp, #176	; 0xb0
 8009268:	3e10      	subs	r6, #16
 800926a:	e7e4      	b.n	8009236 <_svfprintf_r+0xa0e>
 800926c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800926e:	6066      	str	r6, [r4, #4]
 8009270:	441e      	add	r6, r3
 8009272:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009274:	9621      	str	r6, [sp, #132]	; 0x84
 8009276:	3301      	adds	r3, #1
 8009278:	2b07      	cmp	r3, #7
 800927a:	9320      	str	r3, [sp, #128]	; 0x80
 800927c:	dc01      	bgt.n	8009282 <_svfprintf_r+0xa5a>
 800927e:	3408      	adds	r4, #8
 8009280:	e008      	b.n	8009294 <_svfprintf_r+0xa6c>
 8009282:	aa1f      	add	r2, sp, #124	; 0x7c
 8009284:	4659      	mov	r1, fp
 8009286:	4650      	mov	r0, sl
 8009288:	f001 fcb0 	bl	800abec <__ssprint_r>
 800928c:	2800      	cmp	r0, #0
 800928e:	f040 814d 	bne.w	800952c <_svfprintf_r+0xd04>
 8009292:	ac2c      	add	r4, sp, #176	; 0xb0
 8009294:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009296:	9a04      	ldr	r2, [sp, #16]
 8009298:	4293      	cmp	r3, r2
 800929a:	4447      	add	r7, r8
 800929c:	db01      	blt.n	80092a2 <_svfprintf_r+0xa7a>
 800929e:	07e9      	lsls	r1, r5, #31
 80092a0:	d517      	bpl.n	80092d2 <_svfprintf_r+0xaaa>
 80092a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	9b08      	ldr	r3, [sp, #32]
 80092a8:	6063      	str	r3, [r4, #4]
 80092aa:	9a08      	ldr	r2, [sp, #32]
 80092ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092ae:	4413      	add	r3, r2
 80092b0:	9321      	str	r3, [sp, #132]	; 0x84
 80092b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80092b4:	3301      	adds	r3, #1
 80092b6:	2b07      	cmp	r3, #7
 80092b8:	9320      	str	r3, [sp, #128]	; 0x80
 80092ba:	dc01      	bgt.n	80092c0 <_svfprintf_r+0xa98>
 80092bc:	3408      	adds	r4, #8
 80092be:	e008      	b.n	80092d2 <_svfprintf_r+0xaaa>
 80092c0:	aa1f      	add	r2, sp, #124	; 0x7c
 80092c2:	4659      	mov	r1, fp
 80092c4:	4650      	mov	r0, sl
 80092c6:	f001 fc91 	bl	800abec <__ssprint_r>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	f040 812e 	bne.w	800952c <_svfprintf_r+0xd04>
 80092d0:	ac2c      	add	r4, sp, #176	; 0xb0
 80092d2:	9b04      	ldr	r3, [sp, #16]
 80092d4:	9a04      	ldr	r2, [sp, #16]
 80092d6:	eb08 0603 	add.w	r6, r8, r3
 80092da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092dc:	1bf6      	subs	r6, r6, r7
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	429e      	cmp	r6, r3
 80092e2:	bfa8      	it	ge
 80092e4:	461e      	movge	r6, r3
 80092e6:	2e00      	cmp	r6, #0
 80092e8:	dd14      	ble.n	8009314 <_svfprintf_r+0xaec>
 80092ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092ec:	6027      	str	r7, [r4, #0]
 80092ee:	4433      	add	r3, r6
 80092f0:	9321      	str	r3, [sp, #132]	; 0x84
 80092f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80092f4:	6066      	str	r6, [r4, #4]
 80092f6:	3301      	adds	r3, #1
 80092f8:	2b07      	cmp	r3, #7
 80092fa:	9320      	str	r3, [sp, #128]	; 0x80
 80092fc:	dc01      	bgt.n	8009302 <_svfprintf_r+0xada>
 80092fe:	3408      	adds	r4, #8
 8009300:	e008      	b.n	8009314 <_svfprintf_r+0xaec>
 8009302:	aa1f      	add	r2, sp, #124	; 0x7c
 8009304:	4659      	mov	r1, fp
 8009306:	4650      	mov	r0, sl
 8009308:	f001 fc70 	bl	800abec <__ssprint_r>
 800930c:	2800      	cmp	r0, #0
 800930e:	f040 810d 	bne.w	800952c <_svfprintf_r+0xd04>
 8009312:	ac2c      	add	r4, sp, #176	; 0xb0
 8009314:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009316:	9a04      	ldr	r2, [sp, #16]
 8009318:	2e00      	cmp	r6, #0
 800931a:	eba2 0303 	sub.w	r3, r2, r3
 800931e:	bfac      	ite	ge
 8009320:	1b9e      	subge	r6, r3, r6
 8009322:	461e      	movlt	r6, r3
 8009324:	2e00      	cmp	r6, #0
 8009326:	f340 80b1 	ble.w	800948c <_svfprintf_r+0xc64>
 800932a:	4f12      	ldr	r7, [pc, #72]	; (8009374 <_svfprintf_r+0xb4c>)
 800932c:	f04f 0810 	mov.w	r8, #16
 8009330:	2e10      	cmp	r6, #16
 8009332:	dd16      	ble.n	8009362 <_svfprintf_r+0xb3a>
 8009334:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009336:	3310      	adds	r3, #16
 8009338:	9321      	str	r3, [sp, #132]	; 0x84
 800933a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800933c:	3301      	adds	r3, #1
 800933e:	2b07      	cmp	r3, #7
 8009340:	e884 0180 	stmia.w	r4, {r7, r8}
 8009344:	9320      	str	r3, [sp, #128]	; 0x80
 8009346:	dc01      	bgt.n	800934c <_svfprintf_r+0xb24>
 8009348:	3408      	adds	r4, #8
 800934a:	e008      	b.n	800935e <_svfprintf_r+0xb36>
 800934c:	aa1f      	add	r2, sp, #124	; 0x7c
 800934e:	4659      	mov	r1, fp
 8009350:	4650      	mov	r0, sl
 8009352:	f001 fc4b 	bl	800abec <__ssprint_r>
 8009356:	2800      	cmp	r0, #0
 8009358:	f040 80e8 	bne.w	800952c <_svfprintf_r+0xd04>
 800935c:	ac2c      	add	r4, sp, #176	; 0xb0
 800935e:	3e10      	subs	r6, #16
 8009360:	e7e6      	b.n	8009330 <_svfprintf_r+0xb08>
 8009362:	4b04      	ldr	r3, [pc, #16]	; (8009374 <_svfprintf_r+0xb4c>)
 8009364:	e884 0048 	stmia.w	r4, {r3, r6}
 8009368:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800936a:	441e      	add	r6, r3
 800936c:	9621      	str	r6, [sp, #132]	; 0x84
 800936e:	e642      	b.n	8008ff6 <_svfprintf_r+0x7ce>
 8009370:	0800b202 	.word	0x0800b202
 8009374:	0800b1c0 	.word	0x0800b1c0
 8009378:	9b04      	ldr	r3, [sp, #16]
 800937a:	2b01      	cmp	r3, #1
 800937c:	dc01      	bgt.n	8009382 <_svfprintf_r+0xb5a>
 800937e:	07ea      	lsls	r2, r5, #31
 8009380:	d573      	bpl.n	800946a <_svfprintf_r+0xc42>
 8009382:	2301      	movs	r3, #1
 8009384:	6063      	str	r3, [r4, #4]
 8009386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009388:	f8c4 8000 	str.w	r8, [r4]
 800938c:	3301      	adds	r3, #1
 800938e:	9321      	str	r3, [sp, #132]	; 0x84
 8009390:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009392:	3301      	adds	r3, #1
 8009394:	2b07      	cmp	r3, #7
 8009396:	9320      	str	r3, [sp, #128]	; 0x80
 8009398:	dc01      	bgt.n	800939e <_svfprintf_r+0xb76>
 800939a:	3408      	adds	r4, #8
 800939c:	e008      	b.n	80093b0 <_svfprintf_r+0xb88>
 800939e:	aa1f      	add	r2, sp, #124	; 0x7c
 80093a0:	4659      	mov	r1, fp
 80093a2:	4650      	mov	r0, sl
 80093a4:	f001 fc22 	bl	800abec <__ssprint_r>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	f040 80bf 	bne.w	800952c <_svfprintf_r+0xd04>
 80093ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80093b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093b2:	6023      	str	r3, [r4, #0]
 80093b4:	9b08      	ldr	r3, [sp, #32]
 80093b6:	6063      	str	r3, [r4, #4]
 80093b8:	9a08      	ldr	r2, [sp, #32]
 80093ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093bc:	4413      	add	r3, r2
 80093be:	9321      	str	r3, [sp, #132]	; 0x84
 80093c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80093c2:	3301      	adds	r3, #1
 80093c4:	2b07      	cmp	r3, #7
 80093c6:	9320      	str	r3, [sp, #128]	; 0x80
 80093c8:	dc01      	bgt.n	80093ce <_svfprintf_r+0xba6>
 80093ca:	3408      	adds	r4, #8
 80093cc:	e008      	b.n	80093e0 <_svfprintf_r+0xbb8>
 80093ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80093d0:	4659      	mov	r1, fp
 80093d2:	4650      	mov	r0, sl
 80093d4:	f001 fc0a 	bl	800abec <__ssprint_r>
 80093d8:	2800      	cmp	r0, #0
 80093da:	f040 80a7 	bne.w	800952c <_svfprintf_r+0xd04>
 80093de:	ac2c      	add	r4, sp, #176	; 0xb0
 80093e0:	2300      	movs	r3, #0
 80093e2:	2200      	movs	r2, #0
 80093e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093e8:	f7f7 fb6a 	bl	8000ac0 <__aeabi_dcmpeq>
 80093ec:	9b04      	ldr	r3, [sp, #16]
 80093ee:	1e5e      	subs	r6, r3, #1
 80093f0:	b9b8      	cbnz	r0, 8009422 <_svfprintf_r+0xbfa>
 80093f2:	f108 0301 	add.w	r3, r8, #1
 80093f6:	e884 0048 	stmia.w	r4, {r3, r6}
 80093fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093fc:	9a04      	ldr	r2, [sp, #16]
 80093fe:	3b01      	subs	r3, #1
 8009400:	4413      	add	r3, r2
 8009402:	9321      	str	r3, [sp, #132]	; 0x84
 8009404:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009406:	3301      	adds	r3, #1
 8009408:	2b07      	cmp	r3, #7
 800940a:	9320      	str	r3, [sp, #128]	; 0x80
 800940c:	dd34      	ble.n	8009478 <_svfprintf_r+0xc50>
 800940e:	aa1f      	add	r2, sp, #124	; 0x7c
 8009410:	4659      	mov	r1, fp
 8009412:	4650      	mov	r0, sl
 8009414:	f001 fbea 	bl	800abec <__ssprint_r>
 8009418:	2800      	cmp	r0, #0
 800941a:	f040 8087 	bne.w	800952c <_svfprintf_r+0xd04>
 800941e:	ac2c      	add	r4, sp, #176	; 0xb0
 8009420:	e02b      	b.n	800947a <_svfprintf_r+0xc52>
 8009422:	2e00      	cmp	r6, #0
 8009424:	dd29      	ble.n	800947a <_svfprintf_r+0xc52>
 8009426:	4fa7      	ldr	r7, [pc, #668]	; (80096c4 <_svfprintf_r+0xe9c>)
 8009428:	f04f 0810 	mov.w	r8, #16
 800942c:	2e10      	cmp	r6, #16
 800942e:	dd15      	ble.n	800945c <_svfprintf_r+0xc34>
 8009430:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009432:	3310      	adds	r3, #16
 8009434:	9321      	str	r3, [sp, #132]	; 0x84
 8009436:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009438:	3301      	adds	r3, #1
 800943a:	2b07      	cmp	r3, #7
 800943c:	e884 0180 	stmia.w	r4, {r7, r8}
 8009440:	9320      	str	r3, [sp, #128]	; 0x80
 8009442:	dc01      	bgt.n	8009448 <_svfprintf_r+0xc20>
 8009444:	3408      	adds	r4, #8
 8009446:	e007      	b.n	8009458 <_svfprintf_r+0xc30>
 8009448:	aa1f      	add	r2, sp, #124	; 0x7c
 800944a:	4659      	mov	r1, fp
 800944c:	4650      	mov	r0, sl
 800944e:	f001 fbcd 	bl	800abec <__ssprint_r>
 8009452:	2800      	cmp	r0, #0
 8009454:	d16a      	bne.n	800952c <_svfprintf_r+0xd04>
 8009456:	ac2c      	add	r4, sp, #176	; 0xb0
 8009458:	3e10      	subs	r6, #16
 800945a:	e7e7      	b.n	800942c <_svfprintf_r+0xc04>
 800945c:	4b99      	ldr	r3, [pc, #612]	; (80096c4 <_svfprintf_r+0xe9c>)
 800945e:	e884 0048 	stmia.w	r4, {r3, r6}
 8009462:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009464:	441e      	add	r6, r3
 8009466:	9621      	str	r6, [sp, #132]	; 0x84
 8009468:	e7cc      	b.n	8009404 <_svfprintf_r+0xbdc>
 800946a:	2301      	movs	r3, #1
 800946c:	6063      	str	r3, [r4, #4]
 800946e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009470:	f8c4 8000 	str.w	r8, [r4]
 8009474:	3301      	adds	r3, #1
 8009476:	e7c4      	b.n	8009402 <_svfprintf_r+0xbda>
 8009478:	3408      	adds	r4, #8
 800947a:	ab1b      	add	r3, sp, #108	; 0x6c
 800947c:	6023      	str	r3, [r4, #0]
 800947e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009480:	6063      	str	r3, [r4, #4]
 8009482:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009484:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009486:	4413      	add	r3, r2
 8009488:	e5b4      	b.n	8008ff4 <_svfprintf_r+0x7cc>
 800948a:	3408      	adds	r4, #8
 800948c:	076b      	lsls	r3, r5, #29
 800948e:	d40b      	bmi.n	80094a8 <_svfprintf_r+0xc80>
 8009490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009496:	428a      	cmp	r2, r1
 8009498:	bfac      	ite	ge
 800949a:	189b      	addge	r3, r3, r2
 800949c:	185b      	addlt	r3, r3, r1
 800949e:	930a      	str	r3, [sp, #40]	; 0x28
 80094a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d035      	beq.n	8009512 <_svfprintf_r+0xcea>
 80094a6:	e02e      	b.n	8009506 <_svfprintf_r+0xcde>
 80094a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094ac:	1a9d      	subs	r5, r3, r2
 80094ae:	2d00      	cmp	r5, #0
 80094b0:	ddee      	ble.n	8009490 <_svfprintf_r+0xc68>
 80094b2:	2610      	movs	r6, #16
 80094b4:	4b84      	ldr	r3, [pc, #528]	; (80096c8 <_svfprintf_r+0xea0>)
 80094b6:	6023      	str	r3, [r4, #0]
 80094b8:	2d10      	cmp	r5, #16
 80094ba:	dd13      	ble.n	80094e4 <_svfprintf_r+0xcbc>
 80094bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094be:	6066      	str	r6, [r4, #4]
 80094c0:	3310      	adds	r3, #16
 80094c2:	9321      	str	r3, [sp, #132]	; 0x84
 80094c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80094c6:	3301      	adds	r3, #1
 80094c8:	2b07      	cmp	r3, #7
 80094ca:	9320      	str	r3, [sp, #128]	; 0x80
 80094cc:	dc01      	bgt.n	80094d2 <_svfprintf_r+0xcaa>
 80094ce:	3408      	adds	r4, #8
 80094d0:	e006      	b.n	80094e0 <_svfprintf_r+0xcb8>
 80094d2:	aa1f      	add	r2, sp, #124	; 0x7c
 80094d4:	4659      	mov	r1, fp
 80094d6:	4650      	mov	r0, sl
 80094d8:	f001 fb88 	bl	800abec <__ssprint_r>
 80094dc:	bb30      	cbnz	r0, 800952c <_svfprintf_r+0xd04>
 80094de:	ac2c      	add	r4, sp, #176	; 0xb0
 80094e0:	3d10      	subs	r5, #16
 80094e2:	e7e7      	b.n	80094b4 <_svfprintf_r+0xc8c>
 80094e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094e6:	6065      	str	r5, [r4, #4]
 80094e8:	441d      	add	r5, r3
 80094ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80094ec:	9521      	str	r5, [sp, #132]	; 0x84
 80094ee:	3301      	adds	r3, #1
 80094f0:	2b07      	cmp	r3, #7
 80094f2:	9320      	str	r3, [sp, #128]	; 0x80
 80094f4:	ddcc      	ble.n	8009490 <_svfprintf_r+0xc68>
 80094f6:	aa1f      	add	r2, sp, #124	; 0x7c
 80094f8:	4659      	mov	r1, fp
 80094fa:	4650      	mov	r0, sl
 80094fc:	f001 fb76 	bl	800abec <__ssprint_r>
 8009500:	2800      	cmp	r0, #0
 8009502:	d0c5      	beq.n	8009490 <_svfprintf_r+0xc68>
 8009504:	e012      	b.n	800952c <_svfprintf_r+0xd04>
 8009506:	aa1f      	add	r2, sp, #124	; 0x7c
 8009508:	4659      	mov	r1, fp
 800950a:	4650      	mov	r0, sl
 800950c:	f001 fb6e 	bl	800abec <__ssprint_r>
 8009510:	b960      	cbnz	r0, 800952c <_svfprintf_r+0xd04>
 8009512:	2300      	movs	r3, #0
 8009514:	9320      	str	r3, [sp, #128]	; 0x80
 8009516:	9f03      	ldr	r7, [sp, #12]
 8009518:	ac2c      	add	r4, sp, #176	; 0xb0
 800951a:	f7ff b9bb 	b.w	8008894 <_svfprintf_r+0x6c>
 800951e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009520:	b123      	cbz	r3, 800952c <_svfprintf_r+0xd04>
 8009522:	aa1f      	add	r2, sp, #124	; 0x7c
 8009524:	4659      	mov	r1, fp
 8009526:	4650      	mov	r0, sl
 8009528:	f001 fb60 	bl	800abec <__ssprint_r>
 800952c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8009530:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009536:	bf18      	it	ne
 8009538:	f04f 33ff 	movne.w	r3, #4294967295
 800953c:	4618      	mov	r0, r3
 800953e:	e12e      	b.n	800979e <_svfprintf_r+0xf76>
 8009540:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009544:	4610      	mov	r0, r2
 8009546:	4619      	mov	r1, r3
 8009548:	f7f7 faec 	bl	8000b24 <__aeabi_dcmpun>
 800954c:	b160      	cbz	r0, 8009568 <_svfprintf_r+0xd40>
 800954e:	4b5f      	ldr	r3, [pc, #380]	; (80096cc <_svfprintf_r+0xea4>)
 8009550:	4a5f      	ldr	r2, [pc, #380]	; (80096d0 <_svfprintf_r+0xea8>)
 8009552:	9902      	ldr	r1, [sp, #8]
 8009554:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8009558:	2947      	cmp	r1, #71	; 0x47
 800955a:	bfcc      	ite	gt
 800955c:	4690      	movgt	r8, r2
 800955e:	4698      	movle	r8, r3
 8009560:	f04f 0903 	mov.w	r9, #3
 8009564:	2600      	movs	r6, #0
 8009566:	e44e      	b.n	8008e06 <_svfprintf_r+0x5de>
 8009568:	f1b9 3fff 	cmp.w	r9, #4294967295
 800956c:	d00a      	beq.n	8009584 <_svfprintf_r+0xd5c>
 800956e:	9b02      	ldr	r3, [sp, #8]
 8009570:	f023 0320 	bic.w	r3, r3, #32
 8009574:	2b47      	cmp	r3, #71	; 0x47
 8009576:	d107      	bne.n	8009588 <_svfprintf_r+0xd60>
 8009578:	f1b9 0f00 	cmp.w	r9, #0
 800957c:	bf08      	it	eq
 800957e:	f04f 0901 	moveq.w	r9, #1
 8009582:	e001      	b.n	8009588 <_svfprintf_r+0xd60>
 8009584:	f04f 0906 	mov.w	r9, #6
 8009588:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800958c:	930c      	str	r3, [sp, #48]	; 0x30
 800958e:	9b07      	ldr	r3, [sp, #28]
 8009590:	2b00      	cmp	r3, #0
 8009592:	da07      	bge.n	80095a4 <_svfprintf_r+0xd7c>
 8009594:	9b06      	ldr	r3, [sp, #24]
 8009596:	930e      	str	r3, [sp, #56]	; 0x38
 8009598:	9b07      	ldr	r3, [sp, #28]
 800959a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800959e:	930f      	str	r3, [sp, #60]	; 0x3c
 80095a0:	232d      	movs	r3, #45	; 0x2d
 80095a2:	e004      	b.n	80095ae <_svfprintf_r+0xd86>
 80095a4:	ed9d 7b06 	vldr	d7, [sp, #24]
 80095a8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80095ac:	2300      	movs	r3, #0
 80095ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80095b0:	9b02      	ldr	r3, [sp, #8]
 80095b2:	f023 0720 	bic.w	r7, r3, #32
 80095b6:	2f46      	cmp	r7, #70	; 0x46
 80095b8:	d004      	beq.n	80095c4 <_svfprintf_r+0xd9c>
 80095ba:	2f45      	cmp	r7, #69	; 0x45
 80095bc:	d105      	bne.n	80095ca <_svfprintf_r+0xda2>
 80095be:	f109 0601 	add.w	r6, r9, #1
 80095c2:	e003      	b.n	80095cc <_svfprintf_r+0xda4>
 80095c4:	464e      	mov	r6, r9
 80095c6:	2103      	movs	r1, #3
 80095c8:	e001      	b.n	80095ce <_svfprintf_r+0xda6>
 80095ca:	464e      	mov	r6, r9
 80095cc:	2102      	movs	r1, #2
 80095ce:	ab1d      	add	r3, sp, #116	; 0x74
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	ab1a      	add	r3, sp, #104	; 0x68
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	4632      	mov	r2, r6
 80095d8:	ab19      	add	r3, sp, #100	; 0x64
 80095da:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80095de:	4650      	mov	r0, sl
 80095e0:	f000 f976 	bl	80098d0 <_dtoa_r>
 80095e4:	2f47      	cmp	r7, #71	; 0x47
 80095e6:	4680      	mov	r8, r0
 80095e8:	d102      	bne.n	80095f0 <_svfprintf_r+0xdc8>
 80095ea:	07eb      	lsls	r3, r5, #31
 80095ec:	f140 80cd 	bpl.w	800978a <_svfprintf_r+0xf62>
 80095f0:	eb08 0306 	add.w	r3, r8, r6
 80095f4:	2f46      	cmp	r7, #70	; 0x46
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	d111      	bne.n	800961e <_svfprintf_r+0xdf6>
 80095fa:	f898 3000 	ldrb.w	r3, [r8]
 80095fe:	2b30      	cmp	r3, #48	; 0x30
 8009600:	d109      	bne.n	8009616 <_svfprintf_r+0xdee>
 8009602:	2200      	movs	r2, #0
 8009604:	2300      	movs	r3, #0
 8009606:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800960a:	f7f7 fa59 	bl	8000ac0 <__aeabi_dcmpeq>
 800960e:	b910      	cbnz	r0, 8009616 <_svfprintf_r+0xdee>
 8009610:	f1c6 0601 	rsb	r6, r6, #1
 8009614:	9619      	str	r6, [sp, #100]	; 0x64
 8009616:	9a04      	ldr	r2, [sp, #16]
 8009618:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800961a:	441a      	add	r2, r3
 800961c:	9204      	str	r2, [sp, #16]
 800961e:	2200      	movs	r2, #0
 8009620:	2300      	movs	r3, #0
 8009622:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009626:	f7f7 fa4b 	bl	8000ac0 <__aeabi_dcmpeq>
 800962a:	b908      	cbnz	r0, 8009630 <_svfprintf_r+0xe08>
 800962c:	2230      	movs	r2, #48	; 0x30
 800962e:	e002      	b.n	8009636 <_svfprintf_r+0xe0e>
 8009630:	9b04      	ldr	r3, [sp, #16]
 8009632:	931d      	str	r3, [sp, #116]	; 0x74
 8009634:	e007      	b.n	8009646 <_svfprintf_r+0xe1e>
 8009636:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009638:	9904      	ldr	r1, [sp, #16]
 800963a:	4299      	cmp	r1, r3
 800963c:	d903      	bls.n	8009646 <_svfprintf_r+0xe1e>
 800963e:	1c59      	adds	r1, r3, #1
 8009640:	911d      	str	r1, [sp, #116]	; 0x74
 8009642:	701a      	strb	r2, [r3, #0]
 8009644:	e7f7      	b.n	8009636 <_svfprintf_r+0xe0e>
 8009646:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009648:	2f47      	cmp	r7, #71	; 0x47
 800964a:	ebc8 0303 	rsb	r3, r8, r3
 800964e:	9304      	str	r3, [sp, #16]
 8009650:	d108      	bne.n	8009664 <_svfprintf_r+0xe3c>
 8009652:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009654:	1cdf      	adds	r7, r3, #3
 8009656:	db01      	blt.n	800965c <_svfprintf_r+0xe34>
 8009658:	4599      	cmp	r9, r3
 800965a:	da68      	bge.n	800972e <_svfprintf_r+0xf06>
 800965c:	9b02      	ldr	r3, [sp, #8]
 800965e:	3b02      	subs	r3, #2
 8009660:	9302      	str	r3, [sp, #8]
 8009662:	e002      	b.n	800966a <_svfprintf_r+0xe42>
 8009664:	9b02      	ldr	r3, [sp, #8]
 8009666:	2b65      	cmp	r3, #101	; 0x65
 8009668:	dc4a      	bgt.n	8009700 <_svfprintf_r+0xed8>
 800966a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800966c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8009670:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8009674:	3b01      	subs	r3, #1
 8009676:	2b00      	cmp	r3, #0
 8009678:	9319      	str	r3, [sp, #100]	; 0x64
 800967a:	bfba      	itte	lt
 800967c:	425b      	neglt	r3, r3
 800967e:	222d      	movlt	r2, #45	; 0x2d
 8009680:	222b      	movge	r2, #43	; 0x2b
 8009682:	2b09      	cmp	r3, #9
 8009684:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8009688:	dd24      	ble.n	80096d4 <_svfprintf_r+0xeac>
 800968a:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800968e:	200a      	movs	r0, #10
 8009690:	fb93 f1f0 	sdiv	r1, r3, r0
 8009694:	fb00 3311 	mls	r3, r0, r1, r3
 8009698:	3330      	adds	r3, #48	; 0x30
 800969a:	2909      	cmp	r1, #9
 800969c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80096a0:	460b      	mov	r3, r1
 80096a2:	dcf5      	bgt.n	8009690 <_svfprintf_r+0xe68>
 80096a4:	3330      	adds	r3, #48	; 0x30
 80096a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80096aa:	1e51      	subs	r1, r2, #1
 80096ac:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80096b0:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80096b4:	4281      	cmp	r1, r0
 80096b6:	461a      	mov	r2, r3
 80096b8:	d213      	bcs.n	80096e2 <_svfprintf_r+0xeba>
 80096ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096be:	f803 2b01 	strb.w	r2, [r3], #1
 80096c2:	e7f7      	b.n	80096b4 <_svfprintf_r+0xe8c>
 80096c4:	0800b1c0 	.word	0x0800b1c0
 80096c8:	0800b204 	.word	0x0800b204
 80096cc:	0800b1d8 	.word	0x0800b1d8
 80096d0:	0800b1dc 	.word	0x0800b1dc
 80096d4:	2230      	movs	r2, #48	; 0x30
 80096d6:	4413      	add	r3, r2
 80096d8:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80096dc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80096e0:	aa1c      	add	r2, sp, #112	; 0x70
 80096e2:	ab1b      	add	r3, sp, #108	; 0x6c
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	9a04      	ldr	r2, [sp, #16]
 80096e8:	9310      	str	r3, [sp, #64]	; 0x40
 80096ea:	2a01      	cmp	r2, #1
 80096ec:	eb03 0902 	add.w	r9, r3, r2
 80096f0:	dc02      	bgt.n	80096f8 <_svfprintf_r+0xed0>
 80096f2:	f015 0701 	ands.w	r7, r5, #1
 80096f6:	d032      	beq.n	800975e <_svfprintf_r+0xf36>
 80096f8:	9b08      	ldr	r3, [sp, #32]
 80096fa:	2700      	movs	r7, #0
 80096fc:	4499      	add	r9, r3
 80096fe:	e02e      	b.n	800975e <_svfprintf_r+0xf36>
 8009700:	9b02      	ldr	r3, [sp, #8]
 8009702:	2b66      	cmp	r3, #102	; 0x66
 8009704:	d113      	bne.n	800972e <_svfprintf_r+0xf06>
 8009706:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009708:	2b00      	cmp	r3, #0
 800970a:	dd07      	ble.n	800971c <_svfprintf_r+0xef4>
 800970c:	f1b9 0f00 	cmp.w	r9, #0
 8009710:	d101      	bne.n	8009716 <_svfprintf_r+0xeee>
 8009712:	07ee      	lsls	r6, r5, #31
 8009714:	d521      	bpl.n	800975a <_svfprintf_r+0xf32>
 8009716:	9a08      	ldr	r2, [sp, #32]
 8009718:	4413      	add	r3, r2
 800971a:	e006      	b.n	800972a <_svfprintf_r+0xf02>
 800971c:	f1b9 0f00 	cmp.w	r9, #0
 8009720:	d101      	bne.n	8009726 <_svfprintf_r+0xefe>
 8009722:	07ed      	lsls	r5, r5, #31
 8009724:	d514      	bpl.n	8009750 <_svfprintf_r+0xf28>
 8009726:	9b08      	ldr	r3, [sp, #32]
 8009728:	3301      	adds	r3, #1
 800972a:	444b      	add	r3, r9
 800972c:	e015      	b.n	800975a <_svfprintf_r+0xf32>
 800972e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009730:	9a04      	ldr	r2, [sp, #16]
 8009732:	4293      	cmp	r3, r2
 8009734:	db03      	blt.n	800973e <_svfprintf_r+0xf16>
 8009736:	07e8      	lsls	r0, r5, #31
 8009738:	d50d      	bpl.n	8009756 <_svfprintf_r+0xf2e>
 800973a:	9a08      	ldr	r2, [sp, #32]
 800973c:	e006      	b.n	800974c <_svfprintf_r+0xf24>
 800973e:	9a04      	ldr	r2, [sp, #16]
 8009740:	9908      	ldr	r1, [sp, #32]
 8009742:	2b00      	cmp	r3, #0
 8009744:	440a      	add	r2, r1
 8009746:	dc05      	bgt.n	8009754 <_svfprintf_r+0xf2c>
 8009748:	f1c3 0301 	rsb	r3, r3, #1
 800974c:	4413      	add	r3, r2
 800974e:	e002      	b.n	8009756 <_svfprintf_r+0xf2e>
 8009750:	2301      	movs	r3, #1
 8009752:	e002      	b.n	800975a <_svfprintf_r+0xf32>
 8009754:	4613      	mov	r3, r2
 8009756:	2267      	movs	r2, #103	; 0x67
 8009758:	9202      	str	r2, [sp, #8]
 800975a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800975c:	4699      	mov	r9, r3
 800975e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009760:	b113      	cbz	r3, 8009768 <_svfprintf_r+0xf40>
 8009762:	232d      	movs	r3, #45	; 0x2d
 8009764:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8009768:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800976a:	2600      	movs	r6, #0
 800976c:	f7ff bb4c 	b.w	8008e08 <_svfprintf_r+0x5e0>
 8009770:	2200      	movs	r2, #0
 8009772:	2300      	movs	r3, #0
 8009774:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009778:	f7f7 f9ac 	bl	8000ad4 <__aeabi_dcmplt>
 800977c:	b110      	cbz	r0, 8009784 <_svfprintf_r+0xf5c>
 800977e:	232d      	movs	r3, #45	; 0x2d
 8009780:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8009784:	4b07      	ldr	r3, [pc, #28]	; (80097a4 <_svfprintf_r+0xf7c>)
 8009786:	4a08      	ldr	r2, [pc, #32]	; (80097a8 <_svfprintf_r+0xf80>)
 8009788:	e6e3      	b.n	8009552 <_svfprintf_r+0xd2a>
 800978a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800978c:	1a1b      	subs	r3, r3, r0
 800978e:	9304      	str	r3, [sp, #16]
 8009790:	e75f      	b.n	8009652 <_svfprintf_r+0xe2a>
 8009792:	ea56 0207 	orrs.w	r2, r6, r7
 8009796:	f47f aaaa 	bne.w	8008cee <_svfprintf_r+0x4c6>
 800979a:	f7ff baaf 	b.w	8008cfc <_svfprintf_r+0x4d4>
 800979e:	b03d      	add	sp, #244	; 0xf4
 80097a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a4:	0800b1d0 	.word	0x0800b1d0
 80097a8:	0800b1d4 	.word	0x0800b1d4

080097ac <quorem>:
 80097ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b0:	6903      	ldr	r3, [r0, #16]
 80097b2:	690c      	ldr	r4, [r1, #16]
 80097b4:	429c      	cmp	r4, r3
 80097b6:	4680      	mov	r8, r0
 80097b8:	f300 8083 	bgt.w	80098c2 <quorem+0x116>
 80097bc:	3c01      	subs	r4, #1
 80097be:	f101 0714 	add.w	r7, r1, #20
 80097c2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80097c6:	f100 0614 	add.w	r6, r0, #20
 80097ca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80097ce:	eb06 030e 	add.w	r3, r6, lr
 80097d2:	9301      	str	r3, [sp, #4]
 80097d4:	3501      	adds	r5, #1
 80097d6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80097da:	fbb3 f5f5 	udiv	r5, r3, r5
 80097de:	eb07 090e 	add.w	r9, r7, lr
 80097e2:	2d00      	cmp	r5, #0
 80097e4:	d039      	beq.n	800985a <quorem+0xae>
 80097e6:	f04f 0a00 	mov.w	sl, #0
 80097ea:	4638      	mov	r0, r7
 80097ec:	46b4      	mov	ip, r6
 80097ee:	46d3      	mov	fp, sl
 80097f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80097f4:	b293      	uxth	r3, r2
 80097f6:	fb05 a303 	mla	r3, r5, r3, sl
 80097fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097fe:	b29b      	uxth	r3, r3
 8009800:	ebc3 030b 	rsb	r3, r3, fp
 8009804:	0c12      	lsrs	r2, r2, #16
 8009806:	f8bc b000 	ldrh.w	fp, [ip]
 800980a:	fb05 a202 	mla	r2, r5, r2, sl
 800980e:	fa13 f38b 	uxtah	r3, r3, fp
 8009812:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009816:	fa1f fb82 	uxth.w	fp, r2
 800981a:	f8dc 2000 	ldr.w	r2, [ip]
 800981e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009822:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009826:	b29b      	uxth	r3, r3
 8009828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800982c:	4581      	cmp	r9, r0
 800982e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009832:	f84c 3b04 	str.w	r3, [ip], #4
 8009836:	d2db      	bcs.n	80097f0 <quorem+0x44>
 8009838:	f856 300e 	ldr.w	r3, [r6, lr]
 800983c:	b96b      	cbnz	r3, 800985a <quorem+0xae>
 800983e:	9b01      	ldr	r3, [sp, #4]
 8009840:	3b04      	subs	r3, #4
 8009842:	429e      	cmp	r6, r3
 8009844:	461a      	mov	r2, r3
 8009846:	d302      	bcc.n	800984e <quorem+0xa2>
 8009848:	f8c8 4010 	str.w	r4, [r8, #16]
 800984c:	e005      	b.n	800985a <quorem+0xae>
 800984e:	6812      	ldr	r2, [r2, #0]
 8009850:	3b04      	subs	r3, #4
 8009852:	2a00      	cmp	r2, #0
 8009854:	d1f8      	bne.n	8009848 <quorem+0x9c>
 8009856:	3c01      	subs	r4, #1
 8009858:	e7f3      	b.n	8009842 <quorem+0x96>
 800985a:	4640      	mov	r0, r8
 800985c:	f001 f8fd 	bl	800aa5a <__mcmp>
 8009860:	2800      	cmp	r0, #0
 8009862:	db2c      	blt.n	80098be <quorem+0x112>
 8009864:	3501      	adds	r5, #1
 8009866:	4630      	mov	r0, r6
 8009868:	f04f 0e00 	mov.w	lr, #0
 800986c:	f857 1b04 	ldr.w	r1, [r7], #4
 8009870:	f8d0 c000 	ldr.w	ip, [r0]
 8009874:	b28a      	uxth	r2, r1
 8009876:	ebc2 030e 	rsb	r3, r2, lr
 800987a:	0c09      	lsrs	r1, r1, #16
 800987c:	fa13 f38c 	uxtah	r3, r3, ip
 8009880:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8009884:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009888:	b29b      	uxth	r3, r3
 800988a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800988e:	45b9      	cmp	r9, r7
 8009890:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009894:	f840 3b04 	str.w	r3, [r0], #4
 8009898:	d2e8      	bcs.n	800986c <quorem+0xc0>
 800989a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800989e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80098a2:	b962      	cbnz	r2, 80098be <quorem+0x112>
 80098a4:	3b04      	subs	r3, #4
 80098a6:	429e      	cmp	r6, r3
 80098a8:	461a      	mov	r2, r3
 80098aa:	d302      	bcc.n	80098b2 <quorem+0x106>
 80098ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80098b0:	e005      	b.n	80098be <quorem+0x112>
 80098b2:	6812      	ldr	r2, [r2, #0]
 80098b4:	3b04      	subs	r3, #4
 80098b6:	2a00      	cmp	r2, #0
 80098b8:	d1f8      	bne.n	80098ac <quorem+0x100>
 80098ba:	3c01      	subs	r4, #1
 80098bc:	e7f3      	b.n	80098a6 <quorem+0xfa>
 80098be:	4628      	mov	r0, r5
 80098c0:	e000      	b.n	80098c4 <quorem+0x118>
 80098c2:	2000      	movs	r0, #0
 80098c4:	b003      	add	sp, #12
 80098c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ca:	0000      	movs	r0, r0
 80098cc:	0000      	movs	r0, r0
	...

080098d0 <_dtoa_r>:
 80098d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d4:	ec59 8b10 	vmov	r8, r9, d0
 80098d8:	b097      	sub	sp, #92	; 0x5c
 80098da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80098dc:	9106      	str	r1, [sp, #24]
 80098de:	4682      	mov	sl, r0
 80098e0:	9209      	str	r2, [sp, #36]	; 0x24
 80098e2:	9310      	str	r3, [sp, #64]	; 0x40
 80098e4:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80098e6:	e9cd 8900 	strd	r8, r9, [sp]
 80098ea:	b945      	cbnz	r5, 80098fe <_dtoa_r+0x2e>
 80098ec:	2010      	movs	r0, #16
 80098ee:	f7fe fcc5 	bl	800827c <malloc>
 80098f2:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80098f6:	6045      	str	r5, [r0, #4]
 80098f8:	6085      	str	r5, [r0, #8]
 80098fa:	6005      	str	r5, [r0, #0]
 80098fc:	60c5      	str	r5, [r0, #12]
 80098fe:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8009902:	6819      	ldr	r1, [r3, #0]
 8009904:	b159      	cbz	r1, 800991e <_dtoa_r+0x4e>
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	604a      	str	r2, [r1, #4]
 800990a:	2301      	movs	r3, #1
 800990c:	4093      	lsls	r3, r2
 800990e:	608b      	str	r3, [r1, #8]
 8009910:	4650      	mov	r0, sl
 8009912:	f000 feca 	bl	800a6aa <_Bfree>
 8009916:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]
 800991e:	9b01      	ldr	r3, [sp, #4]
 8009920:	4a9f      	ldr	r2, [pc, #636]	; (8009ba0 <_dtoa_r+0x2d0>)
 8009922:	2b00      	cmp	r3, #0
 8009924:	bfbf      	itttt	lt
 8009926:	2301      	movlt	r3, #1
 8009928:	6023      	strlt	r3, [r4, #0]
 800992a:	9b01      	ldrlt	r3, [sp, #4]
 800992c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009930:	bfb8      	it	lt
 8009932:	9301      	strlt	r3, [sp, #4]
 8009934:	9f01      	ldr	r7, [sp, #4]
 8009936:	bfa4      	itt	ge
 8009938:	2300      	movge	r3, #0
 800993a:	6023      	strge	r3, [r4, #0]
 800993c:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8009940:	0d1b      	lsrs	r3, r3, #20
 8009942:	051b      	lsls	r3, r3, #20
 8009944:	4293      	cmp	r3, r2
 8009946:	d11d      	bne.n	8009984 <_dtoa_r+0xb4>
 8009948:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800994a:	f242 730f 	movw	r3, #9999	; 0x270f
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	9b00      	ldr	r3, [sp, #0]
 8009952:	b943      	cbnz	r3, 8009966 <_dtoa_r+0x96>
 8009954:	4a93      	ldr	r2, [pc, #588]	; (8009ba4 <_dtoa_r+0x2d4>)
 8009956:	4b94      	ldr	r3, [pc, #592]	; (8009ba8 <_dtoa_r+0x2d8>)
 8009958:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800995c:	2800      	cmp	r0, #0
 800995e:	bf14      	ite	ne
 8009960:	4618      	movne	r0, r3
 8009962:	4610      	moveq	r0, r2
 8009964:	e000      	b.n	8009968 <_dtoa_r+0x98>
 8009966:	4890      	ldr	r0, [pc, #576]	; (8009ba8 <_dtoa_r+0x2d8>)
 8009968:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800996a:	2b00      	cmp	r3, #0
 800996c:	f000 854a 	beq.w	800a404 <_dtoa_r+0xb34>
 8009970:	78c3      	ldrb	r3, [r0, #3]
 8009972:	b113      	cbz	r3, 800997a <_dtoa_r+0xaa>
 8009974:	f100 0308 	add.w	r3, r0, #8
 8009978:	e000      	b.n	800997c <_dtoa_r+0xac>
 800997a:	1cc3      	adds	r3, r0, #3
 800997c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	f000 bd40 	b.w	800a404 <_dtoa_r+0xb34>
 8009984:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009988:	2200      	movs	r2, #0
 800998a:	2300      	movs	r3, #0
 800998c:	4620      	mov	r0, r4
 800998e:	4629      	mov	r1, r5
 8009990:	f7f7 f896 	bl	8000ac0 <__aeabi_dcmpeq>
 8009994:	4680      	mov	r8, r0
 8009996:	b158      	cbz	r0, 80099b0 <_dtoa_r+0xe0>
 8009998:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800999a:	2301      	movs	r3, #1
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 8522 	beq.w	800a3ea <_dtoa_r+0xb1a>
 80099a6:	4881      	ldr	r0, [pc, #516]	; (8009bac <_dtoa_r+0x2dc>)
 80099a8:	6018      	str	r0, [r3, #0]
 80099aa:	3801      	subs	r0, #1
 80099ac:	f000 bd2a 	b.w	800a404 <_dtoa_r+0xb34>
 80099b0:	aa14      	add	r2, sp, #80	; 0x50
 80099b2:	a915      	add	r1, sp, #84	; 0x54
 80099b4:	ec45 4b10 	vmov	d0, r4, r5
 80099b8:	4650      	mov	r0, sl
 80099ba:	f001 f8c9 	bl	800ab50 <__d2b>
 80099be:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80099c2:	9002      	str	r0, [sp, #8]
 80099c4:	b15e      	cbz	r6, 80099de <_dtoa_r+0x10e>
 80099c6:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80099ca:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80099ce:	4620      	mov	r0, r4
 80099d0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80099d4:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80099d8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80099dc:	e01d      	b.n	8009a1a <_dtoa_r+0x14a>
 80099de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099e0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80099e2:	441e      	add	r6, r3
 80099e4:	f206 4332 	addw	r3, r6, #1074	; 0x432
 80099e8:	2b20      	cmp	r3, #32
 80099ea:	dd0a      	ble.n	8009a02 <_dtoa_r+0x132>
 80099ec:	9a00      	ldr	r2, [sp, #0]
 80099ee:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80099f2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80099f6:	fa22 f000 	lsr.w	r0, r2, r0
 80099fa:	fa07 f303 	lsl.w	r3, r7, r3
 80099fe:	4318      	orrs	r0, r3
 8009a00:	e004      	b.n	8009a0c <_dtoa_r+0x13c>
 8009a02:	f1c3 0020 	rsb	r0, r3, #32
 8009a06:	9b00      	ldr	r3, [sp, #0]
 8009a08:	fa03 f000 	lsl.w	r0, r3, r0
 8009a0c:	f7f6 fd7a 	bl	8000504 <__aeabi_ui2d>
 8009a10:	2301      	movs	r3, #1
 8009a12:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009a16:	3e01      	subs	r6, #1
 8009a18:	9311      	str	r3, [sp, #68]	; 0x44
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	4b64      	ldr	r3, [pc, #400]	; (8009bb0 <_dtoa_r+0x2e0>)
 8009a1e:	f7f6 fc33 	bl	8000288 <__aeabi_dsub>
 8009a22:	a359      	add	r3, pc, #356	; (adr r3, 8009b88 <_dtoa_r+0x2b8>)
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	f7f6 fde2 	bl	80005f0 <__aeabi_dmul>
 8009a2c:	a358      	add	r3, pc, #352	; (adr r3, 8009b90 <_dtoa_r+0x2c0>)
 8009a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a32:	f7f6 fc2b 	bl	800028c <__adddf3>
 8009a36:	4604      	mov	r4, r0
 8009a38:	4630      	mov	r0, r6
 8009a3a:	460d      	mov	r5, r1
 8009a3c:	f7f6 fd72 	bl	8000524 <__aeabi_i2d>
 8009a40:	a355      	add	r3, pc, #340	; (adr r3, 8009b98 <_dtoa_r+0x2c8>)
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	f7f6 fdd3 	bl	80005f0 <__aeabi_dmul>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4620      	mov	r0, r4
 8009a50:	4629      	mov	r1, r5
 8009a52:	f7f6 fc1b 	bl	800028c <__adddf3>
 8009a56:	4604      	mov	r4, r0
 8009a58:	460d      	mov	r5, r1
 8009a5a:	f7f7 f879 	bl	8000b50 <__aeabi_d2iz>
 8009a5e:	2200      	movs	r2, #0
 8009a60:	4683      	mov	fp, r0
 8009a62:	2300      	movs	r3, #0
 8009a64:	4620      	mov	r0, r4
 8009a66:	4629      	mov	r1, r5
 8009a68:	f7f7 f834 	bl	8000ad4 <__aeabi_dcmplt>
 8009a6c:	b158      	cbz	r0, 8009a86 <_dtoa_r+0x1b6>
 8009a6e:	4658      	mov	r0, fp
 8009a70:	f7f6 fd58 	bl	8000524 <__aeabi_i2d>
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	4620      	mov	r0, r4
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	f7f7 f820 	bl	8000ac0 <__aeabi_dcmpeq>
 8009a80:	b908      	cbnz	r0, 8009a86 <_dtoa_r+0x1b6>
 8009a82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a86:	f1bb 0f16 	cmp.w	fp, #22
 8009a8a:	d80d      	bhi.n	8009aa8 <_dtoa_r+0x1d8>
 8009a8c:	4949      	ldr	r1, [pc, #292]	; (8009bb4 <_dtoa_r+0x2e4>)
 8009a8e:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009a92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a9a:	f7f7 f839 	bl	8000b10 <__aeabi_dcmpgt>
 8009a9e:	b130      	cbz	r0, 8009aae <_dtoa_r+0x1de>
 8009aa0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	e000      	b.n	8009aaa <_dtoa_r+0x1da>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	930d      	str	r3, [sp, #52]	; 0x34
 8009aac:	e000      	b.n	8009ab0 <_dtoa_r+0x1e0>
 8009aae:	900d      	str	r0, [sp, #52]	; 0x34
 8009ab0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ab2:	1b9e      	subs	r6, r3, r6
 8009ab4:	1e73      	subs	r3, r6, #1
 8009ab6:	9305      	str	r3, [sp, #20]
 8009ab8:	bf43      	ittte	mi
 8009aba:	f1c3 0900 	rsbmi	r9, r3, #0
 8009abe:	2300      	movmi	r3, #0
 8009ac0:	9305      	strmi	r3, [sp, #20]
 8009ac2:	f04f 0900 	movpl.w	r9, #0
 8009ac6:	f1bb 0f00 	cmp.w	fp, #0
 8009aca:	db07      	blt.n	8009adc <_dtoa_r+0x20c>
 8009acc:	9b05      	ldr	r3, [sp, #20]
 8009ace:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8009ad2:	445b      	add	r3, fp
 8009ad4:	9305      	str	r3, [sp, #20]
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	9307      	str	r3, [sp, #28]
 8009ada:	e006      	b.n	8009aea <_dtoa_r+0x21a>
 8009adc:	f1cb 0300 	rsb	r3, fp, #0
 8009ae0:	9307      	str	r3, [sp, #28]
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	ebcb 0909 	rsb	r9, fp, r9
 8009ae8:	930c      	str	r3, [sp, #48]	; 0x30
 8009aea:	9b06      	ldr	r3, [sp, #24]
 8009aec:	2b09      	cmp	r3, #9
 8009aee:	d827      	bhi.n	8009b40 <_dtoa_r+0x270>
 8009af0:	2b05      	cmp	r3, #5
 8009af2:	bfc4      	itt	gt
 8009af4:	3b04      	subgt	r3, #4
 8009af6:	9306      	strgt	r3, [sp, #24]
 8009af8:	9b06      	ldr	r3, [sp, #24]
 8009afa:	f1a3 0302 	sub.w	r3, r3, #2
 8009afe:	bfcc      	ite	gt
 8009b00:	2500      	movgt	r5, #0
 8009b02:	2501      	movle	r5, #1
 8009b04:	2b03      	cmp	r3, #3
 8009b06:	d820      	bhi.n	8009b4a <_dtoa_r+0x27a>
 8009b08:	e8df f003 	tbb	[pc, r3]
 8009b0c:	04020e06 	.word	0x04020e06
 8009b10:	2301      	movs	r3, #1
 8009b12:	e002      	b.n	8009b1a <_dtoa_r+0x24a>
 8009b14:	2301      	movs	r3, #1
 8009b16:	e008      	b.n	8009b2a <_dtoa_r+0x25a>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	9308      	str	r3, [sp, #32]
 8009b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	dd1c      	ble.n	8009b5c <_dtoa_r+0x28c>
 8009b22:	9303      	str	r3, [sp, #12]
 8009b24:	4698      	mov	r8, r3
 8009b26:	e01e      	b.n	8009b66 <_dtoa_r+0x296>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	9308      	str	r3, [sp, #32]
 8009b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b2e:	445b      	add	r3, fp
 8009b30:	f103 0801 	add.w	r8, r3, #1
 8009b34:	9303      	str	r3, [sp, #12]
 8009b36:	4643      	mov	r3, r8
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	bfb8      	it	lt
 8009b3c:	2301      	movlt	r3, #1
 8009b3e:	e012      	b.n	8009b66 <_dtoa_r+0x296>
 8009b40:	2501      	movs	r5, #1
 8009b42:	2300      	movs	r3, #0
 8009b44:	9306      	str	r3, [sp, #24]
 8009b46:	9508      	str	r5, [sp, #32]
 8009b48:	e001      	b.n	8009b4e <_dtoa_r+0x27e>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	9308      	str	r3, [sp, #32]
 8009b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b52:	9303      	str	r3, [sp, #12]
 8009b54:	4698      	mov	r8, r3
 8009b56:	2200      	movs	r2, #0
 8009b58:	2312      	movs	r3, #18
 8009b5a:	e003      	b.n	8009b64 <_dtoa_r+0x294>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	9303      	str	r3, [sp, #12]
 8009b60:	4698      	mov	r8, r3
 8009b62:	461a      	mov	r2, r3
 8009b64:	9209      	str	r2, [sp, #36]	; 0x24
 8009b66:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	6062      	str	r2, [r4, #4]
 8009b6e:	2104      	movs	r1, #4
 8009b70:	f101 0214 	add.w	r2, r1, #20
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d81f      	bhi.n	8009bb8 <_dtoa_r+0x2e8>
 8009b78:	6862      	ldr	r2, [r4, #4]
 8009b7a:	3201      	adds	r2, #1
 8009b7c:	6062      	str	r2, [r4, #4]
 8009b7e:	0049      	lsls	r1, r1, #1
 8009b80:	e7f6      	b.n	8009b70 <_dtoa_r+0x2a0>
 8009b82:	bf00      	nop
 8009b84:	f3af 8000 	nop.w
 8009b88:	636f4361 	.word	0x636f4361
 8009b8c:	3fd287a7 	.word	0x3fd287a7
 8009b90:	8b60c8b3 	.word	0x8b60c8b3
 8009b94:	3fc68a28 	.word	0x3fc68a28
 8009b98:	509f79fb 	.word	0x509f79fb
 8009b9c:	3fd34413 	.word	0x3fd34413
 8009ba0:	7ff00000 	.word	0x7ff00000
 8009ba4:	0800b214 	.word	0x0800b214
 8009ba8:	0800b21d 	.word	0x0800b21d
 8009bac:	0800b203 	.word	0x0800b203
 8009bb0:	3ff80000 	.word	0x3ff80000
 8009bb4:	0800b230 	.word	0x0800b230
 8009bb8:	6861      	ldr	r1, [r4, #4]
 8009bba:	4650      	mov	r0, sl
 8009bbc:	f000 fd40 	bl	800a640 <_Balloc>
 8009bc0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8009bc4:	6020      	str	r0, [r4, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	9304      	str	r3, [sp, #16]
 8009bca:	f1b8 0f0e 	cmp.w	r8, #14
 8009bce:	f200 815d 	bhi.w	8009e8c <_dtoa_r+0x5bc>
 8009bd2:	2d00      	cmp	r5, #0
 8009bd4:	f000 815a 	beq.w	8009e8c <_dtoa_r+0x5bc>
 8009bd8:	ed9d 7b00 	vldr	d7, [sp]
 8009bdc:	f1bb 0f00 	cmp.w	fp, #0
 8009be0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8009be4:	dd31      	ble.n	8009c4a <_dtoa_r+0x37a>
 8009be6:	4aa0      	ldr	r2, [pc, #640]	; (8009e68 <_dtoa_r+0x598>)
 8009be8:	f00b 030f 	and.w	r3, fp, #15
 8009bec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009bf0:	ed93 7b00 	vldr	d7, [r3]
 8009bf4:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009bf8:	06e2      	lsls	r2, r4, #27
 8009bfa:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009bfe:	d50c      	bpl.n	8009c1a <_dtoa_r+0x34a>
 8009c00:	4b9a      	ldr	r3, [pc, #616]	; (8009e6c <_dtoa_r+0x59c>)
 8009c02:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009c06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c0a:	f7f6 fe1b 	bl	8000844 <__aeabi_ddiv>
 8009c0e:	f004 040f 	and.w	r4, r4, #15
 8009c12:	e9cd 0100 	strd	r0, r1, [sp]
 8009c16:	2603      	movs	r6, #3
 8009c18:	e000      	b.n	8009c1c <_dtoa_r+0x34c>
 8009c1a:	2602      	movs	r6, #2
 8009c1c:	4d93      	ldr	r5, [pc, #588]	; (8009e6c <_dtoa_r+0x59c>)
 8009c1e:	b16c      	cbz	r4, 8009c3c <_dtoa_r+0x36c>
 8009c20:	07e3      	lsls	r3, r4, #31
 8009c22:	d508      	bpl.n	8009c36 <_dtoa_r+0x366>
 8009c24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c2c:	f7f6 fce0 	bl	80005f0 <__aeabi_dmul>
 8009c30:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009c34:	3601      	adds	r6, #1
 8009c36:	1064      	asrs	r4, r4, #1
 8009c38:	3508      	adds	r5, #8
 8009c3a:	e7f0      	b.n	8009c1e <_dtoa_r+0x34e>
 8009c3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c44:	f7f6 fdfe 	bl	8000844 <__aeabi_ddiv>
 8009c48:	e020      	b.n	8009c8c <_dtoa_r+0x3bc>
 8009c4a:	f1cb 0400 	rsb	r4, fp, #0
 8009c4e:	b304      	cbz	r4, 8009c92 <_dtoa_r+0x3c2>
 8009c50:	4b85      	ldr	r3, [pc, #532]	; (8009e68 <_dtoa_r+0x598>)
 8009c52:	4d86      	ldr	r5, [pc, #536]	; (8009e6c <_dtoa_r+0x59c>)
 8009c54:	f004 020f 	and.w	r2, r4, #15
 8009c58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c60:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009c64:	f7f6 fcc4 	bl	80005f0 <__aeabi_dmul>
 8009c68:	e9cd 0100 	strd	r0, r1, [sp]
 8009c6c:	1124      	asrs	r4, r4, #4
 8009c6e:	2300      	movs	r3, #0
 8009c70:	2602      	movs	r6, #2
 8009c72:	b154      	cbz	r4, 8009c8a <_dtoa_r+0x3ba>
 8009c74:	07e7      	lsls	r7, r4, #31
 8009c76:	d505      	bpl.n	8009c84 <_dtoa_r+0x3b4>
 8009c78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c7c:	f7f6 fcb8 	bl	80005f0 <__aeabi_dmul>
 8009c80:	3601      	adds	r6, #1
 8009c82:	2301      	movs	r3, #1
 8009c84:	1064      	asrs	r4, r4, #1
 8009c86:	3508      	adds	r5, #8
 8009c88:	e7f3      	b.n	8009c72 <_dtoa_r+0x3a2>
 8009c8a:	b11b      	cbz	r3, 8009c94 <_dtoa_r+0x3c4>
 8009c8c:	e9cd 0100 	strd	r0, r1, [sp]
 8009c90:	e000      	b.n	8009c94 <_dtoa_r+0x3c4>
 8009c92:	2602      	movs	r6, #2
 8009c94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c96:	b1eb      	cbz	r3, 8009cd4 <_dtoa_r+0x404>
 8009c98:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	4b74      	ldr	r3, [pc, #464]	; (8009e70 <_dtoa_r+0x5a0>)
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	4629      	mov	r1, r5
 8009ca4:	f7f6 ff16 	bl	8000ad4 <__aeabi_dcmplt>
 8009ca8:	b1a0      	cbz	r0, 8009cd4 <_dtoa_r+0x404>
 8009caa:	f1b8 0f00 	cmp.w	r8, #0
 8009cae:	d011      	beq.n	8009cd4 <_dtoa_r+0x404>
 8009cb0:	9b03      	ldr	r3, [sp, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f340 80e6 	ble.w	8009e84 <_dtoa_r+0x5b4>
 8009cb8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009cbc:	930a      	str	r3, [sp, #40]	; 0x28
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	4b6c      	ldr	r3, [pc, #432]	; (8009e74 <_dtoa_r+0x5a4>)
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	f7f6 fc93 	bl	80005f0 <__aeabi_dmul>
 8009cca:	3601      	adds	r6, #1
 8009ccc:	e9cd 0100 	strd	r0, r1, [sp]
 8009cd0:	9f03      	ldr	r7, [sp, #12]
 8009cd2:	e002      	b.n	8009cda <_dtoa_r+0x40a>
 8009cd4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009cd8:	4647      	mov	r7, r8
 8009cda:	4630      	mov	r0, r6
 8009cdc:	f7f6 fc22 	bl	8000524 <__aeabi_i2d>
 8009ce0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ce4:	f7f6 fc84 	bl	80005f0 <__aeabi_dmul>
 8009ce8:	2200      	movs	r2, #0
 8009cea:	4b63      	ldr	r3, [pc, #396]	; (8009e78 <_dtoa_r+0x5a8>)
 8009cec:	f7f6 face 	bl	800028c <__adddf3>
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8009cf6:	b9cf      	cbnz	r7, 8009d2c <_dtoa_r+0x45c>
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	4b60      	ldr	r3, [pc, #384]	; (8009e7c <_dtoa_r+0x5ac>)
 8009cfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d00:	f7f6 fac2 	bl	8000288 <__aeabi_dsub>
 8009d04:	4622      	mov	r2, r4
 8009d06:	462b      	mov	r3, r5
 8009d08:	e9cd 0100 	strd	r0, r1, [sp]
 8009d0c:	f7f6 ff00 	bl	8000b10 <__aeabi_dcmpgt>
 8009d10:	2800      	cmp	r0, #0
 8009d12:	f040 8241 	bne.w	800a198 <_dtoa_r+0x8c8>
 8009d16:	4622      	mov	r2, r4
 8009d18:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009d1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d20:	f7f6 fed8 	bl	8000ad4 <__aeabi_dcmplt>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	f040 822e 	bne.w	800a186 <_dtoa_r+0x8b6>
 8009d2a:	e0ab      	b.n	8009e84 <_dtoa_r+0x5b4>
 8009d2c:	9a08      	ldr	r2, [sp, #32]
 8009d2e:	4b4e      	ldr	r3, [pc, #312]	; (8009e68 <_dtoa_r+0x598>)
 8009d30:	1e79      	subs	r1, r7, #1
 8009d32:	2a00      	cmp	r2, #0
 8009d34:	d04a      	beq.n	8009dcc <_dtoa_r+0x4fc>
 8009d36:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	2000      	movs	r0, #0
 8009d40:	494f      	ldr	r1, [pc, #316]	; (8009e80 <_dtoa_r+0x5b0>)
 8009d42:	f7f6 fd7f 	bl	8000844 <__aeabi_ddiv>
 8009d46:	4622      	mov	r2, r4
 8009d48:	462b      	mov	r3, r5
 8009d4a:	f7f6 fa9d 	bl	8000288 <__aeabi_dsub>
 8009d4e:	9c04      	ldr	r4, [sp, #16]
 8009d50:	4605      	mov	r5, r0
 8009d52:	460e      	mov	r6, r1
 8009d54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d58:	f7f6 fefa 	bl	8000b50 <__aeabi_d2iz>
 8009d5c:	9012      	str	r0, [sp, #72]	; 0x48
 8009d5e:	f7f6 fbe1 	bl	8000524 <__aeabi_i2d>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d6a:	f7f6 fa8d 	bl	8000288 <__aeabi_dsub>
 8009d6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d70:	3330      	adds	r3, #48	; 0x30
 8009d72:	f804 3b01 	strb.w	r3, [r4], #1
 8009d76:	462a      	mov	r2, r5
 8009d78:	4633      	mov	r3, r6
 8009d7a:	e9cd 0100 	strd	r0, r1, [sp]
 8009d7e:	f7f6 fea9 	bl	8000ad4 <__aeabi_dcmplt>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	f040 8321 	bne.w	800a3ca <_dtoa_r+0xafa>
 8009d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	4938      	ldr	r1, [pc, #224]	; (8009e70 <_dtoa_r+0x5a0>)
 8009d90:	f7f6 fa7a 	bl	8000288 <__aeabi_dsub>
 8009d94:	462a      	mov	r2, r5
 8009d96:	4633      	mov	r3, r6
 8009d98:	f7f6 fe9c 	bl	8000ad4 <__aeabi_dcmplt>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	f040 80d2 	bne.w	8009f46 <_dtoa_r+0x676>
 8009da2:	9b04      	ldr	r3, [sp, #16]
 8009da4:	1ae3      	subs	r3, r4, r3
 8009da6:	42bb      	cmp	r3, r7
 8009da8:	da6c      	bge.n	8009e84 <_dtoa_r+0x5b4>
 8009daa:	2200      	movs	r2, #0
 8009dac:	4b31      	ldr	r3, [pc, #196]	; (8009e74 <_dtoa_r+0x5a4>)
 8009dae:	4628      	mov	r0, r5
 8009db0:	4631      	mov	r1, r6
 8009db2:	f7f6 fc1d 	bl	80005f0 <__aeabi_dmul>
 8009db6:	2200      	movs	r2, #0
 8009db8:	4605      	mov	r5, r0
 8009dba:	460e      	mov	r6, r1
 8009dbc:	4b2d      	ldr	r3, [pc, #180]	; (8009e74 <_dtoa_r+0x5a4>)
 8009dbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dc2:	f7f6 fc15 	bl	80005f0 <__aeabi_dmul>
 8009dc6:	e9cd 0100 	strd	r0, r1, [sp]
 8009dca:	e7c3      	b.n	8009d54 <_dtoa_r+0x484>
 8009dcc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009dd0:	4622      	mov	r2, r4
 8009dd2:	462b      	mov	r3, r5
 8009dd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dd8:	f7f6 fc0a 	bl	80005f0 <__aeabi_dmul>
 8009ddc:	9b04      	ldr	r3, [sp, #16]
 8009dde:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8009de2:	19dc      	adds	r4, r3, r7
 8009de4:	461d      	mov	r5, r3
 8009de6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dea:	f7f6 feb1 	bl	8000b50 <__aeabi_d2iz>
 8009dee:	4606      	mov	r6, r0
 8009df0:	f7f6 fb98 	bl	8000524 <__aeabi_i2d>
 8009df4:	3630      	adds	r6, #48	; 0x30
 8009df6:	4602      	mov	r2, r0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dfe:	f7f6 fa43 	bl	8000288 <__aeabi_dsub>
 8009e02:	f805 6b01 	strb.w	r6, [r5], #1
 8009e06:	42ac      	cmp	r4, r5
 8009e08:	e9cd 0100 	strd	r0, r1, [sp]
 8009e0c:	f04f 0200 	mov.w	r2, #0
 8009e10:	d123      	bne.n	8009e5a <_dtoa_r+0x58a>
 8009e12:	4b1b      	ldr	r3, [pc, #108]	; (8009e80 <_dtoa_r+0x5b0>)
 8009e14:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8009e18:	f7f6 fa38 	bl	800028c <__adddf3>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e24:	f7f6 fe74 	bl	8000b10 <__aeabi_dcmpgt>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	f040 808c 	bne.w	8009f46 <_dtoa_r+0x676>
 8009e2e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009e32:	2000      	movs	r0, #0
 8009e34:	4912      	ldr	r1, [pc, #72]	; (8009e80 <_dtoa_r+0x5b0>)
 8009e36:	f7f6 fa27 	bl	8000288 <__aeabi_dsub>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e42:	f7f6 fe47 	bl	8000ad4 <__aeabi_dcmplt>
 8009e46:	b1e8      	cbz	r0, 8009e84 <_dtoa_r+0x5b4>
 8009e48:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8009e4c:	2b30      	cmp	r3, #48	; 0x30
 8009e4e:	f104 32ff 	add.w	r2, r4, #4294967295
 8009e52:	f040 82ba 	bne.w	800a3ca <_dtoa_r+0xafa>
 8009e56:	4614      	mov	r4, r2
 8009e58:	e7f6      	b.n	8009e48 <_dtoa_r+0x578>
 8009e5a:	4b06      	ldr	r3, [pc, #24]	; (8009e74 <_dtoa_r+0x5a4>)
 8009e5c:	f7f6 fbc8 	bl	80005f0 <__aeabi_dmul>
 8009e60:	e9cd 0100 	strd	r0, r1, [sp]
 8009e64:	e7bf      	b.n	8009de6 <_dtoa_r+0x516>
 8009e66:	bf00      	nop
 8009e68:	0800b230 	.word	0x0800b230
 8009e6c:	0800b2f8 	.word	0x0800b2f8
 8009e70:	3ff00000 	.word	0x3ff00000
 8009e74:	40240000 	.word	0x40240000
 8009e78:	401c0000 	.word	0x401c0000
 8009e7c:	40140000 	.word	0x40140000
 8009e80:	3fe00000 	.word	0x3fe00000
 8009e84:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8009e88:	e88d 0018 	stmia.w	sp, {r3, r4}
 8009e8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	db7c      	blt.n	8009f8c <_dtoa_r+0x6bc>
 8009e92:	f1bb 0f0e 	cmp.w	fp, #14
 8009e96:	dc79      	bgt.n	8009f8c <_dtoa_r+0x6bc>
 8009e98:	4b8f      	ldr	r3, [pc, #572]	; (800a0d8 <_dtoa_r+0x808>)
 8009e9a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e9e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	da14      	bge.n	8009ed2 <_dtoa_r+0x602>
 8009ea8:	f1b8 0f00 	cmp.w	r8, #0
 8009eac:	dc11      	bgt.n	8009ed2 <_dtoa_r+0x602>
 8009eae:	f040 816c 	bne.w	800a18a <_dtoa_r+0x8ba>
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	4b89      	ldr	r3, [pc, #548]	; (800a0dc <_dtoa_r+0x80c>)
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	4639      	mov	r1, r7
 8009eba:	f7f6 fb99 	bl	80005f0 <__aeabi_dmul>
 8009ebe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ec2:	f7f6 fe1b 	bl	8000afc <__aeabi_dcmpge>
 8009ec6:	4645      	mov	r5, r8
 8009ec8:	4646      	mov	r6, r8
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	f040 815f 	bne.w	800a18e <_dtoa_r+0x8be>
 8009ed0:	e166      	b.n	800a1a0 <_dtoa_r+0x8d0>
 8009ed2:	9c04      	ldr	r4, [sp, #16]
 8009ed4:	4632      	mov	r2, r6
 8009ed6:	463b      	mov	r3, r7
 8009ed8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009edc:	f7f6 fcb2 	bl	8000844 <__aeabi_ddiv>
 8009ee0:	f7f6 fe36 	bl	8000b50 <__aeabi_d2iz>
 8009ee4:	4605      	mov	r5, r0
 8009ee6:	f7f6 fb1d 	bl	8000524 <__aeabi_i2d>
 8009eea:	4632      	mov	r2, r6
 8009eec:	463b      	mov	r3, r7
 8009eee:	f7f6 fb7f 	bl	80005f0 <__aeabi_dmul>
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009efa:	f7f6 f9c5 	bl	8000288 <__aeabi_dsub>
 8009efe:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8009f02:	f804 eb01 	strb.w	lr, [r4], #1
 8009f06:	9b04      	ldr	r3, [sp, #16]
 8009f08:	ebc3 0e04 	rsb	lr, r3, r4
 8009f0c:	45f0      	cmp	r8, lr
 8009f0e:	e9cd 0100 	strd	r0, r1, [sp]
 8009f12:	d12e      	bne.n	8009f72 <_dtoa_r+0x6a2>
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	f7f6 f9b8 	bl	800028c <__adddf3>
 8009f1c:	4680      	mov	r8, r0
 8009f1e:	4689      	mov	r9, r1
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4630      	mov	r0, r6
 8009f26:	4639      	mov	r1, r7
 8009f28:	f7f6 fdd4 	bl	8000ad4 <__aeabi_dcmplt>
 8009f2c:	b978      	cbnz	r0, 8009f4e <_dtoa_r+0x67e>
 8009f2e:	4642      	mov	r2, r8
 8009f30:	464b      	mov	r3, r9
 8009f32:	4630      	mov	r0, r6
 8009f34:	4639      	mov	r1, r7
 8009f36:	f7f6 fdc3 	bl	8000ac0 <__aeabi_dcmpeq>
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	f000 8247 	beq.w	800a3ce <_dtoa_r+0xafe>
 8009f40:	07e9      	lsls	r1, r5, #31
 8009f42:	d404      	bmi.n	8009f4e <_dtoa_r+0x67e>
 8009f44:	e243      	b.n	800a3ce <_dtoa_r+0xafe>
 8009f46:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8009f4a:	e000      	b.n	8009f4e <_dtoa_r+0x67e>
 8009f4c:	461c      	mov	r4, r3
 8009f4e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8009f52:	2a39      	cmp	r2, #57	; 0x39
 8009f54:	f104 33ff 	add.w	r3, r4, #4294967295
 8009f58:	d107      	bne.n	8009f6a <_dtoa_r+0x69a>
 8009f5a:	9a04      	ldr	r2, [sp, #16]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d1f5      	bne.n	8009f4c <_dtoa_r+0x67c>
 8009f60:	9904      	ldr	r1, [sp, #16]
 8009f62:	2230      	movs	r2, #48	; 0x30
 8009f64:	f10b 0b01 	add.w	fp, fp, #1
 8009f68:	700a      	strb	r2, [r1, #0]
 8009f6a:	781a      	ldrb	r2, [r3, #0]
 8009f6c:	3201      	adds	r2, #1
 8009f6e:	701a      	strb	r2, [r3, #0]
 8009f70:	e22d      	b.n	800a3ce <_dtoa_r+0xafe>
 8009f72:	2200      	movs	r2, #0
 8009f74:	4b5a      	ldr	r3, [pc, #360]	; (800a0e0 <_dtoa_r+0x810>)
 8009f76:	f7f6 fb3b 	bl	80005f0 <__aeabi_dmul>
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	e9cd 0100 	strd	r0, r1, [sp]
 8009f82:	f7f6 fd9d 	bl	8000ac0 <__aeabi_dcmpeq>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d0a4      	beq.n	8009ed4 <_dtoa_r+0x604>
 8009f8a:	e220      	b.n	800a3ce <_dtoa_r+0xafe>
 8009f8c:	9a08      	ldr	r2, [sp, #32]
 8009f8e:	2a00      	cmp	r2, #0
 8009f90:	d02d      	beq.n	8009fee <_dtoa_r+0x71e>
 8009f92:	9a06      	ldr	r2, [sp, #24]
 8009f94:	2a01      	cmp	r2, #1
 8009f96:	dc0a      	bgt.n	8009fae <_dtoa_r+0x6de>
 8009f98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f9a:	b112      	cbz	r2, 8009fa2 <_dtoa_r+0x6d2>
 8009f9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009fa0:	e002      	b.n	8009fa8 <_dtoa_r+0x6d8>
 8009fa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fa4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009fa8:	9d07      	ldr	r5, [sp, #28]
 8009faa:	464c      	mov	r4, r9
 8009fac:	e015      	b.n	8009fda <_dtoa_r+0x70a>
 8009fae:	9b07      	ldr	r3, [sp, #28]
 8009fb0:	f108 35ff 	add.w	r5, r8, #4294967295
 8009fb4:	42ab      	cmp	r3, r5
 8009fb6:	bfbf      	itttt	lt
 8009fb8:	9b07      	ldrlt	r3, [sp, #28]
 8009fba:	9507      	strlt	r5, [sp, #28]
 8009fbc:	1aea      	sublt	r2, r5, r3
 8009fbe:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8009fc0:	bfb7      	itett	lt
 8009fc2:	189b      	addlt	r3, r3, r2
 8009fc4:	1b5d      	subge	r5, r3, r5
 8009fc6:	930c      	strlt	r3, [sp, #48]	; 0x30
 8009fc8:	2500      	movlt	r5, #0
 8009fca:	f1b8 0f00 	cmp.w	r8, #0
 8009fce:	bfb9      	ittee	lt
 8009fd0:	ebc8 0409 	rsblt	r4, r8, r9
 8009fd4:	2300      	movlt	r3, #0
 8009fd6:	464c      	movge	r4, r9
 8009fd8:	4643      	movge	r3, r8
 8009fda:	9a05      	ldr	r2, [sp, #20]
 8009fdc:	2101      	movs	r1, #1
 8009fde:	441a      	add	r2, r3
 8009fe0:	4650      	mov	r0, sl
 8009fe2:	4499      	add	r9, r3
 8009fe4:	9205      	str	r2, [sp, #20]
 8009fe6:	f000 fbff 	bl	800a7e8 <__i2b>
 8009fea:	4606      	mov	r6, r0
 8009fec:	e002      	b.n	8009ff4 <_dtoa_r+0x724>
 8009fee:	9d07      	ldr	r5, [sp, #28]
 8009ff0:	9e08      	ldr	r6, [sp, #32]
 8009ff2:	464c      	mov	r4, r9
 8009ff4:	b15c      	cbz	r4, 800a00e <_dtoa_r+0x73e>
 8009ff6:	9b05      	ldr	r3, [sp, #20]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	dd08      	ble.n	800a00e <_dtoa_r+0x73e>
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	9a05      	ldr	r2, [sp, #20]
 800a000:	bfa8      	it	ge
 800a002:	4623      	movge	r3, r4
 800a004:	ebc3 0909 	rsb	r9, r3, r9
 800a008:	1ae4      	subs	r4, r4, r3
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	9305      	str	r3, [sp, #20]
 800a00e:	9b07      	ldr	r3, [sp, #28]
 800a010:	2b00      	cmp	r3, #0
 800a012:	dd1d      	ble.n	800a050 <_dtoa_r+0x780>
 800a014:	9b08      	ldr	r3, [sp, #32]
 800a016:	b1ab      	cbz	r3, 800a044 <_dtoa_r+0x774>
 800a018:	b185      	cbz	r5, 800a03c <_dtoa_r+0x76c>
 800a01a:	4631      	mov	r1, r6
 800a01c:	462a      	mov	r2, r5
 800a01e:	4650      	mov	r0, sl
 800a020:	f000 fc7c 	bl	800a91c <__pow5mult>
 800a024:	9a02      	ldr	r2, [sp, #8]
 800a026:	4601      	mov	r1, r0
 800a028:	4606      	mov	r6, r0
 800a02a:	4650      	mov	r0, sl
 800a02c:	f000 fbe5 	bl	800a7fa <__multiply>
 800a030:	9902      	ldr	r1, [sp, #8]
 800a032:	4607      	mov	r7, r0
 800a034:	4650      	mov	r0, sl
 800a036:	f000 fb38 	bl	800a6aa <_Bfree>
 800a03a:	9702      	str	r7, [sp, #8]
 800a03c:	9b07      	ldr	r3, [sp, #28]
 800a03e:	1b5a      	subs	r2, r3, r5
 800a040:	d006      	beq.n	800a050 <_dtoa_r+0x780>
 800a042:	e000      	b.n	800a046 <_dtoa_r+0x776>
 800a044:	9a07      	ldr	r2, [sp, #28]
 800a046:	9902      	ldr	r1, [sp, #8]
 800a048:	4650      	mov	r0, sl
 800a04a:	f000 fc67 	bl	800a91c <__pow5mult>
 800a04e:	9002      	str	r0, [sp, #8]
 800a050:	2101      	movs	r1, #1
 800a052:	4650      	mov	r0, sl
 800a054:	f000 fbc8 	bl	800a7e8 <__i2b>
 800a058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a05a:	4605      	mov	r5, r0
 800a05c:	b35b      	cbz	r3, 800a0b6 <_dtoa_r+0x7e6>
 800a05e:	461a      	mov	r2, r3
 800a060:	4601      	mov	r1, r0
 800a062:	4650      	mov	r0, sl
 800a064:	f000 fc5a 	bl	800a91c <__pow5mult>
 800a068:	9b06      	ldr	r3, [sp, #24]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	4605      	mov	r5, r0
 800a06e:	dc18      	bgt.n	800a0a2 <_dtoa_r+0x7d2>
 800a070:	9b00      	ldr	r3, [sp, #0]
 800a072:	b983      	cbnz	r3, 800a096 <_dtoa_r+0x7c6>
 800a074:	9b01      	ldr	r3, [sp, #4]
 800a076:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a07a:	b973      	cbnz	r3, 800a09a <_dtoa_r+0x7ca>
 800a07c:	9b01      	ldr	r3, [sp, #4]
 800a07e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800a082:	0d3f      	lsrs	r7, r7, #20
 800a084:	053f      	lsls	r7, r7, #20
 800a086:	b14f      	cbz	r7, 800a09c <_dtoa_r+0x7cc>
 800a088:	9b05      	ldr	r3, [sp, #20]
 800a08a:	3301      	adds	r3, #1
 800a08c:	f109 0901 	add.w	r9, r9, #1
 800a090:	9305      	str	r3, [sp, #20]
 800a092:	2701      	movs	r7, #1
 800a094:	e002      	b.n	800a09c <_dtoa_r+0x7cc>
 800a096:	2700      	movs	r7, #0
 800a098:	e000      	b.n	800a09c <_dtoa_r+0x7cc>
 800a09a:	9f00      	ldr	r7, [sp, #0]
 800a09c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a09e:	b173      	cbz	r3, 800a0be <_dtoa_r+0x7ee>
 800a0a0:	e000      	b.n	800a0a4 <_dtoa_r+0x7d4>
 800a0a2:	2700      	movs	r7, #0
 800a0a4:	692b      	ldr	r3, [r5, #16]
 800a0a6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a0aa:	6918      	ldr	r0, [r3, #16]
 800a0ac:	f000 fb4f 	bl	800a74e <__hi0bits>
 800a0b0:	f1c0 0020 	rsb	r0, r0, #32
 800a0b4:	e004      	b.n	800a0c0 <_dtoa_r+0x7f0>
 800a0b6:	9b06      	ldr	r3, [sp, #24]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	ddd9      	ble.n	800a070 <_dtoa_r+0x7a0>
 800a0bc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800a0be:	2001      	movs	r0, #1
 800a0c0:	9b05      	ldr	r3, [sp, #20]
 800a0c2:	4418      	add	r0, r3
 800a0c4:	f010 001f 	ands.w	r0, r0, #31
 800a0c8:	d00e      	beq.n	800a0e8 <_dtoa_r+0x818>
 800a0ca:	f1c0 0320 	rsb	r3, r0, #32
 800a0ce:	2b04      	cmp	r3, #4
 800a0d0:	dd08      	ble.n	800a0e4 <_dtoa_r+0x814>
 800a0d2:	f1c0 001c 	rsb	r0, r0, #28
 800a0d6:	e008      	b.n	800a0ea <_dtoa_r+0x81a>
 800a0d8:	0800b230 	.word	0x0800b230
 800a0dc:	40140000 	.word	0x40140000
 800a0e0:	40240000 	.word	0x40240000
 800a0e4:	d006      	beq.n	800a0f4 <_dtoa_r+0x824>
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	301c      	adds	r0, #28
 800a0ea:	9b05      	ldr	r3, [sp, #20]
 800a0ec:	4403      	add	r3, r0
 800a0ee:	4481      	add	r9, r0
 800a0f0:	4404      	add	r4, r0
 800a0f2:	9305      	str	r3, [sp, #20]
 800a0f4:	f1b9 0f00 	cmp.w	r9, #0
 800a0f8:	dd05      	ble.n	800a106 <_dtoa_r+0x836>
 800a0fa:	464a      	mov	r2, r9
 800a0fc:	9902      	ldr	r1, [sp, #8]
 800a0fe:	4650      	mov	r0, sl
 800a100:	f000 fc5a 	bl	800a9b8 <__lshift>
 800a104:	9002      	str	r0, [sp, #8]
 800a106:	9b05      	ldr	r3, [sp, #20]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	dd05      	ble.n	800a118 <_dtoa_r+0x848>
 800a10c:	4629      	mov	r1, r5
 800a10e:	461a      	mov	r2, r3
 800a110:	4650      	mov	r0, sl
 800a112:	f000 fc51 	bl	800a9b8 <__lshift>
 800a116:	4605      	mov	r5, r0
 800a118:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a11a:	b1eb      	cbz	r3, 800a158 <_dtoa_r+0x888>
 800a11c:	4629      	mov	r1, r5
 800a11e:	9802      	ldr	r0, [sp, #8]
 800a120:	f000 fc9b 	bl	800aa5a <__mcmp>
 800a124:	2800      	cmp	r0, #0
 800a126:	da17      	bge.n	800a158 <_dtoa_r+0x888>
 800a128:	2300      	movs	r3, #0
 800a12a:	220a      	movs	r2, #10
 800a12c:	9902      	ldr	r1, [sp, #8]
 800a12e:	4650      	mov	r0, sl
 800a130:	f000 fad2 	bl	800a6d8 <__multadd>
 800a134:	9b08      	ldr	r3, [sp, #32]
 800a136:	9002      	str	r0, [sp, #8]
 800a138:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f000 8158 	beq.w	800a3f2 <_dtoa_r+0xb22>
 800a142:	2300      	movs	r3, #0
 800a144:	4631      	mov	r1, r6
 800a146:	220a      	movs	r2, #10
 800a148:	4650      	mov	r0, sl
 800a14a:	f000 fac5 	bl	800a6d8 <__multadd>
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	2b00      	cmp	r3, #0
 800a152:	4606      	mov	r6, r0
 800a154:	dc37      	bgt.n	800a1c6 <_dtoa_r+0x8f6>
 800a156:	e033      	b.n	800a1c0 <_dtoa_r+0x8f0>
 800a158:	f1b8 0f00 	cmp.w	r8, #0
 800a15c:	dc2a      	bgt.n	800a1b4 <_dtoa_r+0x8e4>
 800a15e:	9b06      	ldr	r3, [sp, #24]
 800a160:	2b02      	cmp	r3, #2
 800a162:	dd27      	ble.n	800a1b4 <_dtoa_r+0x8e4>
 800a164:	f8cd 800c 	str.w	r8, [sp, #12]
 800a168:	9b03      	ldr	r3, [sp, #12]
 800a16a:	b983      	cbnz	r3, 800a18e <_dtoa_r+0x8be>
 800a16c:	4629      	mov	r1, r5
 800a16e:	2205      	movs	r2, #5
 800a170:	4650      	mov	r0, sl
 800a172:	f000 fab1 	bl	800a6d8 <__multadd>
 800a176:	4601      	mov	r1, r0
 800a178:	4605      	mov	r5, r0
 800a17a:	9802      	ldr	r0, [sp, #8]
 800a17c:	f000 fc6d 	bl	800aa5a <__mcmp>
 800a180:	2800      	cmp	r0, #0
 800a182:	dc0d      	bgt.n	800a1a0 <_dtoa_r+0x8d0>
 800a184:	e003      	b.n	800a18e <_dtoa_r+0x8be>
 800a186:	463d      	mov	r5, r7
 800a188:	e000      	b.n	800a18c <_dtoa_r+0x8bc>
 800a18a:	2500      	movs	r5, #0
 800a18c:	462e      	mov	r6, r5
 800a18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a190:	9c04      	ldr	r4, [sp, #16]
 800a192:	ea6f 0b03 	mvn.w	fp, r3
 800a196:	e00a      	b.n	800a1ae <_dtoa_r+0x8de>
 800a198:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a19c:	463d      	mov	r5, r7
 800a19e:	463e      	mov	r6, r7
 800a1a0:	9b04      	ldr	r3, [sp, #16]
 800a1a2:	9a04      	ldr	r2, [sp, #16]
 800a1a4:	1c5c      	adds	r4, r3, #1
 800a1a6:	2331      	movs	r3, #49	; 0x31
 800a1a8:	7013      	strb	r3, [r2, #0]
 800a1aa:	f10b 0b01 	add.w	fp, fp, #1
 800a1ae:	46b0      	mov	r8, r6
 800a1b0:	2600      	movs	r6, #0
 800a1b2:	e0f7      	b.n	800a3a4 <_dtoa_r+0xad4>
 800a1b4:	9b08      	ldr	r3, [sp, #32]
 800a1b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1ba:	b923      	cbnz	r3, 800a1c6 <_dtoa_r+0x8f6>
 800a1bc:	9c04      	ldr	r4, [sp, #16]
 800a1be:	e0b1      	b.n	800a324 <_dtoa_r+0xa54>
 800a1c0:	9b06      	ldr	r3, [sp, #24]
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	dcd0      	bgt.n	800a168 <_dtoa_r+0x898>
 800a1c6:	2c00      	cmp	r4, #0
 800a1c8:	dd05      	ble.n	800a1d6 <_dtoa_r+0x906>
 800a1ca:	4631      	mov	r1, r6
 800a1cc:	4622      	mov	r2, r4
 800a1ce:	4650      	mov	r0, sl
 800a1d0:	f000 fbf2 	bl	800a9b8 <__lshift>
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	b19f      	cbz	r7, 800a200 <_dtoa_r+0x930>
 800a1d8:	6871      	ldr	r1, [r6, #4]
 800a1da:	4650      	mov	r0, sl
 800a1dc:	f000 fa30 	bl	800a640 <_Balloc>
 800a1e0:	6932      	ldr	r2, [r6, #16]
 800a1e2:	3202      	adds	r2, #2
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	0092      	lsls	r2, r2, #2
 800a1e8:	f106 010c 	add.w	r1, r6, #12
 800a1ec:	300c      	adds	r0, #12
 800a1ee:	f7fe fa75 	bl	80086dc <memcpy>
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	4650      	mov	r0, sl
 800a1f8:	f000 fbde 	bl	800a9b8 <__lshift>
 800a1fc:	4680      	mov	r8, r0
 800a1fe:	e000      	b.n	800a202 <_dtoa_r+0x932>
 800a200:	46b0      	mov	r8, r6
 800a202:	9b00      	ldr	r3, [sp, #0]
 800a204:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800a208:	f003 0301 	and.w	r3, r3, #1
 800a20c:	9305      	str	r3, [sp, #20]
 800a20e:	4629      	mov	r1, r5
 800a210:	9802      	ldr	r0, [sp, #8]
 800a212:	f7ff facb 	bl	80097ac <quorem>
 800a216:	4631      	mov	r1, r6
 800a218:	4604      	mov	r4, r0
 800a21a:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800a21e:	9802      	ldr	r0, [sp, #8]
 800a220:	f000 fc1b 	bl	800aa5a <__mcmp>
 800a224:	4642      	mov	r2, r8
 800a226:	9000      	str	r0, [sp, #0]
 800a228:	4629      	mov	r1, r5
 800a22a:	4650      	mov	r0, sl
 800a22c:	f000 fc31 	bl	800aa92 <__mdiff>
 800a230:	68c3      	ldr	r3, [r0, #12]
 800a232:	4602      	mov	r2, r0
 800a234:	b93b      	cbnz	r3, 800a246 <_dtoa_r+0x976>
 800a236:	4601      	mov	r1, r0
 800a238:	9007      	str	r0, [sp, #28]
 800a23a:	9802      	ldr	r0, [sp, #8]
 800a23c:	f000 fc0d 	bl	800aa5a <__mcmp>
 800a240:	9a07      	ldr	r2, [sp, #28]
 800a242:	4603      	mov	r3, r0
 800a244:	e000      	b.n	800a248 <_dtoa_r+0x978>
 800a246:	2301      	movs	r3, #1
 800a248:	4611      	mov	r1, r2
 800a24a:	4650      	mov	r0, sl
 800a24c:	9307      	str	r3, [sp, #28]
 800a24e:	f000 fa2c 	bl	800a6aa <_Bfree>
 800a252:	9b07      	ldr	r3, [sp, #28]
 800a254:	b94b      	cbnz	r3, 800a26a <_dtoa_r+0x99a>
 800a256:	9a06      	ldr	r2, [sp, #24]
 800a258:	b93a      	cbnz	r2, 800a26a <_dtoa_r+0x99a>
 800a25a:	9a05      	ldr	r2, [sp, #20]
 800a25c:	b92a      	cbnz	r2, 800a26a <_dtoa_r+0x99a>
 800a25e:	2f39      	cmp	r7, #57	; 0x39
 800a260:	d028      	beq.n	800a2b4 <_dtoa_r+0x9e4>
 800a262:	9b00      	ldr	r3, [sp, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	dc1a      	bgt.n	800a29e <_dtoa_r+0x9ce>
 800a268:	e01b      	b.n	800a2a2 <_dtoa_r+0x9d2>
 800a26a:	9a00      	ldr	r2, [sp, #0]
 800a26c:	2a00      	cmp	r2, #0
 800a26e:	db04      	blt.n	800a27a <_dtoa_r+0x9aa>
 800a270:	d11a      	bne.n	800a2a8 <_dtoa_r+0x9d8>
 800a272:	9a06      	ldr	r2, [sp, #24]
 800a274:	b9c2      	cbnz	r2, 800a2a8 <_dtoa_r+0x9d8>
 800a276:	9a05      	ldr	r2, [sp, #20]
 800a278:	b9b2      	cbnz	r2, 800a2a8 <_dtoa_r+0x9d8>
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	dd11      	ble.n	800a2a2 <_dtoa_r+0x9d2>
 800a27e:	2201      	movs	r2, #1
 800a280:	9902      	ldr	r1, [sp, #8]
 800a282:	4650      	mov	r0, sl
 800a284:	f000 fb98 	bl	800a9b8 <__lshift>
 800a288:	4629      	mov	r1, r5
 800a28a:	9002      	str	r0, [sp, #8]
 800a28c:	f000 fbe5 	bl	800aa5a <__mcmp>
 800a290:	2800      	cmp	r0, #0
 800a292:	dc02      	bgt.n	800a29a <_dtoa_r+0x9ca>
 800a294:	d105      	bne.n	800a2a2 <_dtoa_r+0x9d2>
 800a296:	07fa      	lsls	r2, r7, #31
 800a298:	d503      	bpl.n	800a2a2 <_dtoa_r+0x9d2>
 800a29a:	2f39      	cmp	r7, #57	; 0x39
 800a29c:	d00a      	beq.n	800a2b4 <_dtoa_r+0x9e4>
 800a29e:	f104 0731 	add.w	r7, r4, #49	; 0x31
 800a2a2:	f109 0401 	add.w	r4, r9, #1
 800a2a6:	e00c      	b.n	800a2c2 <_dtoa_r+0x9f2>
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f109 0401 	add.w	r4, r9, #1
 800a2ae:	dd0b      	ble.n	800a2c8 <_dtoa_r+0x9f8>
 800a2b0:	2f39      	cmp	r7, #57	; 0x39
 800a2b2:	d105      	bne.n	800a2c0 <_dtoa_r+0x9f0>
 800a2b4:	2339      	movs	r3, #57	; 0x39
 800a2b6:	f889 3000 	strb.w	r3, [r9]
 800a2ba:	f109 0901 	add.w	r9, r9, #1
 800a2be:	e054      	b.n	800a36a <_dtoa_r+0xa9a>
 800a2c0:	3701      	adds	r7, #1
 800a2c2:	f889 7000 	strb.w	r7, [r9]
 800a2c6:	e06d      	b.n	800a3a4 <_dtoa_r+0xad4>
 800a2c8:	9b04      	ldr	r3, [sp, #16]
 800a2ca:	9a03      	ldr	r2, [sp, #12]
 800a2cc:	f804 7c01 	strb.w	r7, [r4, #-1]
 800a2d0:	1ae3      	subs	r3, r4, r3
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	46a1      	mov	r9, r4
 800a2d6:	d03a      	beq.n	800a34e <_dtoa_r+0xa7e>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	220a      	movs	r2, #10
 800a2dc:	9902      	ldr	r1, [sp, #8]
 800a2de:	4650      	mov	r0, sl
 800a2e0:	f000 f9fa 	bl	800a6d8 <__multadd>
 800a2e4:	4546      	cmp	r6, r8
 800a2e6:	9002      	str	r0, [sp, #8]
 800a2e8:	f04f 0300 	mov.w	r3, #0
 800a2ec:	f04f 020a 	mov.w	r2, #10
 800a2f0:	4631      	mov	r1, r6
 800a2f2:	4650      	mov	r0, sl
 800a2f4:	d104      	bne.n	800a300 <_dtoa_r+0xa30>
 800a2f6:	f000 f9ef 	bl	800a6d8 <__multadd>
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	4680      	mov	r8, r0
 800a2fe:	e786      	b.n	800a20e <_dtoa_r+0x93e>
 800a300:	f000 f9ea 	bl	800a6d8 <__multadd>
 800a304:	4641      	mov	r1, r8
 800a306:	4606      	mov	r6, r0
 800a308:	2300      	movs	r3, #0
 800a30a:	220a      	movs	r2, #10
 800a30c:	4650      	mov	r0, sl
 800a30e:	f000 f9e3 	bl	800a6d8 <__multadd>
 800a312:	4680      	mov	r8, r0
 800a314:	e77b      	b.n	800a20e <_dtoa_r+0x93e>
 800a316:	2300      	movs	r3, #0
 800a318:	220a      	movs	r2, #10
 800a31a:	9902      	ldr	r1, [sp, #8]
 800a31c:	4650      	mov	r0, sl
 800a31e:	f000 f9db 	bl	800a6d8 <__multadd>
 800a322:	9002      	str	r0, [sp, #8]
 800a324:	4629      	mov	r1, r5
 800a326:	9802      	ldr	r0, [sp, #8]
 800a328:	f7ff fa40 	bl	80097ac <quorem>
 800a32c:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800a330:	f804 7b01 	strb.w	r7, [r4], #1
 800a334:	9b04      	ldr	r3, [sp, #16]
 800a336:	9a03      	ldr	r2, [sp, #12]
 800a338:	1ae3      	subs	r3, r4, r3
 800a33a:	4293      	cmp	r3, r2
 800a33c:	dbeb      	blt.n	800a316 <_dtoa_r+0xa46>
 800a33e:	9b04      	ldr	r3, [sp, #16]
 800a340:	2a01      	cmp	r2, #1
 800a342:	bfac      	ite	ge
 800a344:	189b      	addge	r3, r3, r2
 800a346:	3301      	addlt	r3, #1
 800a348:	46b0      	mov	r8, r6
 800a34a:	4699      	mov	r9, r3
 800a34c:	2600      	movs	r6, #0
 800a34e:	2201      	movs	r2, #1
 800a350:	9902      	ldr	r1, [sp, #8]
 800a352:	4650      	mov	r0, sl
 800a354:	f000 fb30 	bl	800a9b8 <__lshift>
 800a358:	4629      	mov	r1, r5
 800a35a:	9002      	str	r0, [sp, #8]
 800a35c:	f000 fb7d 	bl	800aa5a <__mcmp>
 800a360:	2800      	cmp	r0, #0
 800a362:	dc02      	bgt.n	800a36a <_dtoa_r+0xa9a>
 800a364:	d115      	bne.n	800a392 <_dtoa_r+0xac2>
 800a366:	07fb      	lsls	r3, r7, #31
 800a368:	d513      	bpl.n	800a392 <_dtoa_r+0xac2>
 800a36a:	464c      	mov	r4, r9
 800a36c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800a370:	2b39      	cmp	r3, #57	; 0x39
 800a372:	f104 32ff 	add.w	r2, r4, #4294967295
 800a376:	d109      	bne.n	800a38c <_dtoa_r+0xabc>
 800a378:	9b04      	ldr	r3, [sp, #16]
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d104      	bne.n	800a388 <_dtoa_r+0xab8>
 800a37e:	f10b 0b01 	add.w	fp, fp, #1
 800a382:	2331      	movs	r3, #49	; 0x31
 800a384:	9a04      	ldr	r2, [sp, #16]
 800a386:	e002      	b.n	800a38e <_dtoa_r+0xabe>
 800a388:	4614      	mov	r4, r2
 800a38a:	e7ef      	b.n	800a36c <_dtoa_r+0xa9c>
 800a38c:	3301      	adds	r3, #1
 800a38e:	7013      	strb	r3, [r2, #0]
 800a390:	e008      	b.n	800a3a4 <_dtoa_r+0xad4>
 800a392:	464c      	mov	r4, r9
 800a394:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800a398:	2b30      	cmp	r3, #48	; 0x30
 800a39a:	f104 32ff 	add.w	r2, r4, #4294967295
 800a39e:	d101      	bne.n	800a3a4 <_dtoa_r+0xad4>
 800a3a0:	4614      	mov	r4, r2
 800a3a2:	e7f7      	b.n	800a394 <_dtoa_r+0xac4>
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	4650      	mov	r0, sl
 800a3a8:	f000 f97f 	bl	800a6aa <_Bfree>
 800a3ac:	f1b8 0f00 	cmp.w	r8, #0
 800a3b0:	d00d      	beq.n	800a3ce <_dtoa_r+0xafe>
 800a3b2:	b12e      	cbz	r6, 800a3c0 <_dtoa_r+0xaf0>
 800a3b4:	4546      	cmp	r6, r8
 800a3b6:	d003      	beq.n	800a3c0 <_dtoa_r+0xaf0>
 800a3b8:	4631      	mov	r1, r6
 800a3ba:	4650      	mov	r0, sl
 800a3bc:	f000 f975 	bl	800a6aa <_Bfree>
 800a3c0:	4641      	mov	r1, r8
 800a3c2:	4650      	mov	r0, sl
 800a3c4:	f000 f971 	bl	800a6aa <_Bfree>
 800a3c8:	e001      	b.n	800a3ce <_dtoa_r+0xafe>
 800a3ca:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a3ce:	9902      	ldr	r1, [sp, #8]
 800a3d0:	4650      	mov	r0, sl
 800a3d2:	f000 f96a 	bl	800a6aa <_Bfree>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3da:	7023      	strb	r3, [r4, #0]
 800a3dc:	f10b 0301 	add.w	r3, fp, #1
 800a3e0:	6013      	str	r3, [r2, #0]
 800a3e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3e4:	b11b      	cbz	r3, 800a3ee <_dtoa_r+0xb1e>
 800a3e6:	601c      	str	r4, [r3, #0]
 800a3e8:	e001      	b.n	800a3ee <_dtoa_r+0xb1e>
 800a3ea:	4808      	ldr	r0, [pc, #32]	; (800a40c <_dtoa_r+0xb3c>)
 800a3ec:	e00a      	b.n	800a404 <_dtoa_r+0xb34>
 800a3ee:	9804      	ldr	r0, [sp, #16]
 800a3f0:	e008      	b.n	800a404 <_dtoa_r+0xb34>
 800a3f2:	9b03      	ldr	r3, [sp, #12]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f73f aee1 	bgt.w	800a1bc <_dtoa_r+0x8ec>
 800a3fa:	9b06      	ldr	r3, [sp, #24]
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	f77f aedd 	ble.w	800a1bc <_dtoa_r+0x8ec>
 800a402:	e6b1      	b.n	800a168 <_dtoa_r+0x898>
 800a404:	b017      	add	sp, #92	; 0x5c
 800a406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40a:	bf00      	nop
 800a40c:	0800b202 	.word	0x0800b202

0800a410 <_malloc_trim_r>:
 800a410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a414:	4f25      	ldr	r7, [pc, #148]	; (800a4ac <_malloc_trim_r+0x9c>)
 800a416:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800a4b8 <_malloc_trim_r+0xa8>
 800a41a:	4689      	mov	r9, r1
 800a41c:	4606      	mov	r6, r0
 800a41e:	f7fe f968 	bl	80086f2 <__malloc_lock>
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	685d      	ldr	r5, [r3, #4]
 800a426:	f1a8 0411 	sub.w	r4, r8, #17
 800a42a:	f025 0503 	bic.w	r5, r5, #3
 800a42e:	442c      	add	r4, r5
 800a430:	ebc9 0404 	rsb	r4, r9, r4
 800a434:	fbb4 f4f8 	udiv	r4, r4, r8
 800a438:	3c01      	subs	r4, #1
 800a43a:	fb08 f404 	mul.w	r4, r8, r4
 800a43e:	4544      	cmp	r4, r8
 800a440:	da05      	bge.n	800a44e <_malloc_trim_r+0x3e>
 800a442:	4630      	mov	r0, r6
 800a444:	f7fe f956 	bl	80086f4 <__malloc_unlock>
 800a448:	2000      	movs	r0, #0
 800a44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a44e:	2100      	movs	r1, #0
 800a450:	4630      	mov	r0, r6
 800a452:	f7fe f9b3 	bl	80087bc <_sbrk_r>
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	442b      	add	r3, r5
 800a45a:	4298      	cmp	r0, r3
 800a45c:	d1f1      	bne.n	800a442 <_malloc_trim_r+0x32>
 800a45e:	4261      	negs	r1, r4
 800a460:	4630      	mov	r0, r6
 800a462:	f7fe f9ab 	bl	80087bc <_sbrk_r>
 800a466:	3001      	adds	r0, #1
 800a468:	d110      	bne.n	800a48c <_malloc_trim_r+0x7c>
 800a46a:	2100      	movs	r1, #0
 800a46c:	4630      	mov	r0, r6
 800a46e:	f7fe f9a5 	bl	80087bc <_sbrk_r>
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	1a83      	subs	r3, r0, r2
 800a476:	2b0f      	cmp	r3, #15
 800a478:	dde3      	ble.n	800a442 <_malloc_trim_r+0x32>
 800a47a:	490d      	ldr	r1, [pc, #52]	; (800a4b0 <_malloc_trim_r+0xa0>)
 800a47c:	6809      	ldr	r1, [r1, #0]
 800a47e:	1a40      	subs	r0, r0, r1
 800a480:	490c      	ldr	r1, [pc, #48]	; (800a4b4 <_malloc_trim_r+0xa4>)
 800a482:	f043 0301 	orr.w	r3, r3, #1
 800a486:	6008      	str	r0, [r1, #0]
 800a488:	6053      	str	r3, [r2, #4]
 800a48a:	e7da      	b.n	800a442 <_malloc_trim_r+0x32>
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	4a09      	ldr	r2, [pc, #36]	; (800a4b4 <_malloc_trim_r+0xa4>)
 800a490:	1b2d      	subs	r5, r5, r4
 800a492:	f045 0501 	orr.w	r5, r5, #1
 800a496:	605d      	str	r5, [r3, #4]
 800a498:	6813      	ldr	r3, [r2, #0]
 800a49a:	4630      	mov	r0, r6
 800a49c:	1b1c      	subs	r4, r3, r4
 800a49e:	6014      	str	r4, [r2, #0]
 800a4a0:	f7fe f928 	bl	80086f4 <__malloc_unlock>
 800a4a4:	2001      	movs	r0, #1
 800a4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4aa:	bf00      	nop
 800a4ac:	20000158 	.word	0x20000158
 800a4b0:	20000564 	.word	0x20000564
 800a4b4:	200008e4 	.word	0x200008e4
 800a4b8:	00000080 	.word	0x00000080

0800a4bc <_free_r>:
 800a4bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	4688      	mov	r8, r1
 800a4c4:	2900      	cmp	r1, #0
 800a4c6:	f000 80ad 	beq.w	800a624 <_free_r+0x168>
 800a4ca:	f7fe f912 	bl	80086f2 <__malloc_lock>
 800a4ce:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a4d2:	4d55      	ldr	r5, [pc, #340]	; (800a628 <_free_r+0x16c>)
 800a4d4:	f022 0001 	bic.w	r0, r2, #1
 800a4d8:	f1a8 0308 	sub.w	r3, r8, #8
 800a4dc:	181f      	adds	r7, r3, r0
 800a4de:	68a9      	ldr	r1, [r5, #8]
 800a4e0:	687e      	ldr	r6, [r7, #4]
 800a4e2:	428f      	cmp	r7, r1
 800a4e4:	f026 0603 	bic.w	r6, r6, #3
 800a4e8:	f002 0201 	and.w	r2, r2, #1
 800a4ec:	d11b      	bne.n	800a526 <_free_r+0x6a>
 800a4ee:	4430      	add	r0, r6
 800a4f0:	b93a      	cbnz	r2, 800a502 <_free_r+0x46>
 800a4f2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800a4f6:	1a9b      	subs	r3, r3, r2
 800a4f8:	4410      	add	r0, r2
 800a4fa:	6899      	ldr	r1, [r3, #8]
 800a4fc:	68da      	ldr	r2, [r3, #12]
 800a4fe:	60ca      	str	r2, [r1, #12]
 800a500:	6091      	str	r1, [r2, #8]
 800a502:	f040 0201 	orr.w	r2, r0, #1
 800a506:	605a      	str	r2, [r3, #4]
 800a508:	60ab      	str	r3, [r5, #8]
 800a50a:	4b48      	ldr	r3, [pc, #288]	; (800a62c <_free_r+0x170>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4298      	cmp	r0, r3
 800a510:	d304      	bcc.n	800a51c <_free_r+0x60>
 800a512:	4b47      	ldr	r3, [pc, #284]	; (800a630 <_free_r+0x174>)
 800a514:	4620      	mov	r0, r4
 800a516:	6819      	ldr	r1, [r3, #0]
 800a518:	f7ff ff7a 	bl	800a410 <_malloc_trim_r>
 800a51c:	4620      	mov	r0, r4
 800a51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a522:	f7fe b8e7 	b.w	80086f4 <__malloc_unlock>
 800a526:	607e      	str	r6, [r7, #4]
 800a528:	b97a      	cbnz	r2, 800a54a <_free_r+0x8e>
 800a52a:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800a52e:	1a5b      	subs	r3, r3, r1
 800a530:	4408      	add	r0, r1
 800a532:	6899      	ldr	r1, [r3, #8]
 800a534:	f105 0e08 	add.w	lr, r5, #8
 800a538:	4571      	cmp	r1, lr
 800a53a:	d008      	beq.n	800a54e <_free_r+0x92>
 800a53c:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800a540:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a544:	f8ce 1008 	str.w	r1, [lr, #8]
 800a548:	e002      	b.n	800a550 <_free_r+0x94>
 800a54a:	2200      	movs	r2, #0
 800a54c:	e000      	b.n	800a550 <_free_r+0x94>
 800a54e:	2201      	movs	r2, #1
 800a550:	19b9      	adds	r1, r7, r6
 800a552:	6849      	ldr	r1, [r1, #4]
 800a554:	07c9      	lsls	r1, r1, #31
 800a556:	d40e      	bmi.n	800a576 <_free_r+0xba>
 800a558:	4430      	add	r0, r6
 800a55a:	68b9      	ldr	r1, [r7, #8]
 800a55c:	b942      	cbnz	r2, 800a570 <_free_r+0xb4>
 800a55e:	4e35      	ldr	r6, [pc, #212]	; (800a634 <_free_r+0x178>)
 800a560:	42b1      	cmp	r1, r6
 800a562:	d105      	bne.n	800a570 <_free_r+0xb4>
 800a564:	616b      	str	r3, [r5, #20]
 800a566:	612b      	str	r3, [r5, #16]
 800a568:	2201      	movs	r2, #1
 800a56a:	60d9      	str	r1, [r3, #12]
 800a56c:	6099      	str	r1, [r3, #8]
 800a56e:	e002      	b.n	800a576 <_free_r+0xba>
 800a570:	68fe      	ldr	r6, [r7, #12]
 800a572:	60ce      	str	r6, [r1, #12]
 800a574:	60b1      	str	r1, [r6, #8]
 800a576:	f040 0101 	orr.w	r1, r0, #1
 800a57a:	6059      	str	r1, [r3, #4]
 800a57c:	5018      	str	r0, [r3, r0]
 800a57e:	2a00      	cmp	r2, #0
 800a580:	d1cc      	bne.n	800a51c <_free_r+0x60>
 800a582:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a586:	d212      	bcs.n	800a5ae <_free_r+0xf2>
 800a588:	08c0      	lsrs	r0, r0, #3
 800a58a:	1081      	asrs	r1, r0, #2
 800a58c:	2201      	movs	r2, #1
 800a58e:	fa02 f101 	lsl.w	r1, r2, r1
 800a592:	686a      	ldr	r2, [r5, #4]
 800a594:	3001      	adds	r0, #1
 800a596:	430a      	orrs	r2, r1
 800a598:	606a      	str	r2, [r5, #4]
 800a59a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800a59e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800a5a2:	6099      	str	r1, [r3, #8]
 800a5a4:	3a08      	subs	r2, #8
 800a5a6:	60da      	str	r2, [r3, #12]
 800a5a8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800a5ac:	e038      	b.n	800a620 <_free_r+0x164>
 800a5ae:	0a42      	lsrs	r2, r0, #9
 800a5b0:	2a04      	cmp	r2, #4
 800a5b2:	d802      	bhi.n	800a5ba <_free_r+0xfe>
 800a5b4:	0982      	lsrs	r2, r0, #6
 800a5b6:	3238      	adds	r2, #56	; 0x38
 800a5b8:	e015      	b.n	800a5e6 <_free_r+0x12a>
 800a5ba:	2a14      	cmp	r2, #20
 800a5bc:	d801      	bhi.n	800a5c2 <_free_r+0x106>
 800a5be:	325b      	adds	r2, #91	; 0x5b
 800a5c0:	e011      	b.n	800a5e6 <_free_r+0x12a>
 800a5c2:	2a54      	cmp	r2, #84	; 0x54
 800a5c4:	d802      	bhi.n	800a5cc <_free_r+0x110>
 800a5c6:	0b02      	lsrs	r2, r0, #12
 800a5c8:	326e      	adds	r2, #110	; 0x6e
 800a5ca:	e00c      	b.n	800a5e6 <_free_r+0x12a>
 800a5cc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a5d0:	d802      	bhi.n	800a5d8 <_free_r+0x11c>
 800a5d2:	0bc2      	lsrs	r2, r0, #15
 800a5d4:	3277      	adds	r2, #119	; 0x77
 800a5d6:	e006      	b.n	800a5e6 <_free_r+0x12a>
 800a5d8:	f240 5154 	movw	r1, #1364	; 0x554
 800a5dc:	428a      	cmp	r2, r1
 800a5de:	bf9a      	itte	ls
 800a5e0:	0c82      	lsrls	r2, r0, #18
 800a5e2:	327c      	addls	r2, #124	; 0x7c
 800a5e4:	227e      	movhi	r2, #126	; 0x7e
 800a5e6:	1c51      	adds	r1, r2, #1
 800a5e8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800a5ec:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800a5f0:	4f0d      	ldr	r7, [pc, #52]	; (800a628 <_free_r+0x16c>)
 800a5f2:	428e      	cmp	r6, r1
 800a5f4:	d10b      	bne.n	800a60e <_free_r+0x152>
 800a5f6:	2101      	movs	r1, #1
 800a5f8:	1092      	asrs	r2, r2, #2
 800a5fa:	fa01 f202 	lsl.w	r2, r1, r2
 800a5fe:	6879      	ldr	r1, [r7, #4]
 800a600:	4311      	orrs	r1, r2
 800a602:	6079      	str	r1, [r7, #4]
 800a604:	4631      	mov	r1, r6
 800a606:	e008      	b.n	800a61a <_free_r+0x15e>
 800a608:	6889      	ldr	r1, [r1, #8]
 800a60a:	428e      	cmp	r6, r1
 800a60c:	d004      	beq.n	800a618 <_free_r+0x15c>
 800a60e:	684a      	ldr	r2, [r1, #4]
 800a610:	f022 0203 	bic.w	r2, r2, #3
 800a614:	4290      	cmp	r0, r2
 800a616:	d3f7      	bcc.n	800a608 <_free_r+0x14c>
 800a618:	68ce      	ldr	r6, [r1, #12]
 800a61a:	60de      	str	r6, [r3, #12]
 800a61c:	6099      	str	r1, [r3, #8]
 800a61e:	60b3      	str	r3, [r6, #8]
 800a620:	60cb      	str	r3, [r1, #12]
 800a622:	e77b      	b.n	800a51c <_free_r+0x60>
 800a624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a628:	20000158 	.word	0x20000158
 800a62c:	20000560 	.word	0x20000560
 800a630:	200008e0 	.word	0x200008e0
 800a634:	20000160 	.word	0x20000160

0800a638 <_localeconv_r>:
 800a638:	4800      	ldr	r0, [pc, #0]	; (800a63c <_localeconv_r+0x4>)
 800a63a:	4770      	bx	lr
 800a63c:	2000065c 	.word	0x2000065c

0800a640 <_Balloc>:
 800a640:	b570      	push	{r4, r5, r6, lr}
 800a642:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a644:	4604      	mov	r4, r0
 800a646:	460e      	mov	r6, r1
 800a648:	b93d      	cbnz	r5, 800a65a <_Balloc+0x1a>
 800a64a:	2010      	movs	r0, #16
 800a64c:	f7fd fe16 	bl	800827c <malloc>
 800a650:	6260      	str	r0, [r4, #36]	; 0x24
 800a652:	6045      	str	r5, [r0, #4]
 800a654:	6085      	str	r5, [r0, #8]
 800a656:	6005      	str	r5, [r0, #0]
 800a658:	60c5      	str	r5, [r0, #12]
 800a65a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a65c:	68eb      	ldr	r3, [r5, #12]
 800a65e:	b143      	cbz	r3, 800a672 <_Balloc+0x32>
 800a660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a668:	b178      	cbz	r0, 800a68a <_Balloc+0x4a>
 800a66a:	6802      	ldr	r2, [r0, #0]
 800a66c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a670:	e017      	b.n	800a6a2 <_Balloc+0x62>
 800a672:	2221      	movs	r2, #33	; 0x21
 800a674:	2104      	movs	r1, #4
 800a676:	4620      	mov	r0, r4
 800a678:	f000 fb37 	bl	800acea <_calloc_r>
 800a67c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a67e:	60e8      	str	r0, [r5, #12]
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1ec      	bne.n	800a660 <_Balloc+0x20>
 800a686:	2000      	movs	r0, #0
 800a688:	bd70      	pop	{r4, r5, r6, pc}
 800a68a:	2101      	movs	r1, #1
 800a68c:	fa01 f506 	lsl.w	r5, r1, r6
 800a690:	1d6a      	adds	r2, r5, #5
 800a692:	0092      	lsls	r2, r2, #2
 800a694:	4620      	mov	r0, r4
 800a696:	f000 fb28 	bl	800acea <_calloc_r>
 800a69a:	2800      	cmp	r0, #0
 800a69c:	d0f3      	beq.n	800a686 <_Balloc+0x46>
 800a69e:	6046      	str	r6, [r0, #4]
 800a6a0:	6085      	str	r5, [r0, #8]
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	6103      	str	r3, [r0, #16]
 800a6a6:	60c3      	str	r3, [r0, #12]
 800a6a8:	bd70      	pop	{r4, r5, r6, pc}

0800a6aa <_Bfree>:
 800a6aa:	b570      	push	{r4, r5, r6, lr}
 800a6ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	460d      	mov	r5, r1
 800a6b2:	b93c      	cbnz	r4, 800a6c4 <_Bfree+0x1a>
 800a6b4:	2010      	movs	r0, #16
 800a6b6:	f7fd fde1 	bl	800827c <malloc>
 800a6ba:	6270      	str	r0, [r6, #36]	; 0x24
 800a6bc:	6044      	str	r4, [r0, #4]
 800a6be:	6084      	str	r4, [r0, #8]
 800a6c0:	6004      	str	r4, [r0, #0]
 800a6c2:	60c4      	str	r4, [r0, #12]
 800a6c4:	b13d      	cbz	r5, 800a6d6 <_Bfree+0x2c>
 800a6c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a6c8:	686a      	ldr	r2, [r5, #4]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6d0:	6029      	str	r1, [r5, #0]
 800a6d2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a6d6:	bd70      	pop	{r4, r5, r6, pc}

0800a6d8 <__multadd>:
 800a6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6dc:	690d      	ldr	r5, [r1, #16]
 800a6de:	461f      	mov	r7, r3
 800a6e0:	4606      	mov	r6, r0
 800a6e2:	460c      	mov	r4, r1
 800a6e4:	f101 0e14 	add.w	lr, r1, #20
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	f8de 0000 	ldr.w	r0, [lr]
 800a6ee:	b281      	uxth	r1, r0
 800a6f0:	fb02 7101 	mla	r1, r2, r1, r7
 800a6f4:	0c0f      	lsrs	r7, r1, #16
 800a6f6:	0c00      	lsrs	r0, r0, #16
 800a6f8:	fb02 7000 	mla	r0, r2, r0, r7
 800a6fc:	b289      	uxth	r1, r1
 800a6fe:	3301      	adds	r3, #1
 800a700:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a704:	429d      	cmp	r5, r3
 800a706:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a70a:	f84e 1b04 	str.w	r1, [lr], #4
 800a70e:	dcec      	bgt.n	800a6ea <__multadd+0x12>
 800a710:	b1d7      	cbz	r7, 800a748 <__multadd+0x70>
 800a712:	68a3      	ldr	r3, [r4, #8]
 800a714:	429d      	cmp	r5, r3
 800a716:	db12      	blt.n	800a73e <__multadd+0x66>
 800a718:	6861      	ldr	r1, [r4, #4]
 800a71a:	4630      	mov	r0, r6
 800a71c:	3101      	adds	r1, #1
 800a71e:	f7ff ff8f 	bl	800a640 <_Balloc>
 800a722:	6922      	ldr	r2, [r4, #16]
 800a724:	3202      	adds	r2, #2
 800a726:	f104 010c 	add.w	r1, r4, #12
 800a72a:	4680      	mov	r8, r0
 800a72c:	0092      	lsls	r2, r2, #2
 800a72e:	300c      	adds	r0, #12
 800a730:	f7fd ffd4 	bl	80086dc <memcpy>
 800a734:	4621      	mov	r1, r4
 800a736:	4630      	mov	r0, r6
 800a738:	f7ff ffb7 	bl	800a6aa <_Bfree>
 800a73c:	4644      	mov	r4, r8
 800a73e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a742:	3501      	adds	r5, #1
 800a744:	615f      	str	r7, [r3, #20]
 800a746:	6125      	str	r5, [r4, #16]
 800a748:	4620      	mov	r0, r4
 800a74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a74e <__hi0bits>:
 800a74e:	0c03      	lsrs	r3, r0, #16
 800a750:	041b      	lsls	r3, r3, #16
 800a752:	b913      	cbnz	r3, 800a75a <__hi0bits+0xc>
 800a754:	0400      	lsls	r0, r0, #16
 800a756:	2310      	movs	r3, #16
 800a758:	e000      	b.n	800a75c <__hi0bits+0xe>
 800a75a:	2300      	movs	r3, #0
 800a75c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a760:	bf04      	itt	eq
 800a762:	0200      	lsleq	r0, r0, #8
 800a764:	3308      	addeq	r3, #8
 800a766:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a76a:	bf04      	itt	eq
 800a76c:	0100      	lsleq	r0, r0, #4
 800a76e:	3304      	addeq	r3, #4
 800a770:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a774:	bf04      	itt	eq
 800a776:	0080      	lsleq	r0, r0, #2
 800a778:	3302      	addeq	r3, #2
 800a77a:	2800      	cmp	r0, #0
 800a77c:	db03      	blt.n	800a786 <__hi0bits+0x38>
 800a77e:	0042      	lsls	r2, r0, #1
 800a780:	d503      	bpl.n	800a78a <__hi0bits+0x3c>
 800a782:	1c58      	adds	r0, r3, #1
 800a784:	4770      	bx	lr
 800a786:	4618      	mov	r0, r3
 800a788:	4770      	bx	lr
 800a78a:	2020      	movs	r0, #32
 800a78c:	4770      	bx	lr

0800a78e <__lo0bits>:
 800a78e:	6803      	ldr	r3, [r0, #0]
 800a790:	f013 0207 	ands.w	r2, r3, #7
 800a794:	d00b      	beq.n	800a7ae <__lo0bits+0x20>
 800a796:	07d9      	lsls	r1, r3, #31
 800a798:	d422      	bmi.n	800a7e0 <__lo0bits+0x52>
 800a79a:	079a      	lsls	r2, r3, #30
 800a79c:	bf4b      	itete	mi
 800a79e:	085b      	lsrmi	r3, r3, #1
 800a7a0:	089b      	lsrpl	r3, r3, #2
 800a7a2:	6003      	strmi	r3, [r0, #0]
 800a7a4:	6003      	strpl	r3, [r0, #0]
 800a7a6:	bf4c      	ite	mi
 800a7a8:	2001      	movmi	r0, #1
 800a7aa:	2002      	movpl	r0, #2
 800a7ac:	4770      	bx	lr
 800a7ae:	b299      	uxth	r1, r3
 800a7b0:	b909      	cbnz	r1, 800a7b6 <__lo0bits+0x28>
 800a7b2:	0c1b      	lsrs	r3, r3, #16
 800a7b4:	2210      	movs	r2, #16
 800a7b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a7ba:	bf04      	itt	eq
 800a7bc:	0a1b      	lsreq	r3, r3, #8
 800a7be:	3208      	addeq	r2, #8
 800a7c0:	0719      	lsls	r1, r3, #28
 800a7c2:	bf04      	itt	eq
 800a7c4:	091b      	lsreq	r3, r3, #4
 800a7c6:	3204      	addeq	r2, #4
 800a7c8:	0799      	lsls	r1, r3, #30
 800a7ca:	bf04      	itt	eq
 800a7cc:	089b      	lsreq	r3, r3, #2
 800a7ce:	3202      	addeq	r2, #2
 800a7d0:	07d9      	lsls	r1, r3, #31
 800a7d2:	d402      	bmi.n	800a7da <__lo0bits+0x4c>
 800a7d4:	085b      	lsrs	r3, r3, #1
 800a7d6:	d005      	beq.n	800a7e4 <__lo0bits+0x56>
 800a7d8:	3201      	adds	r2, #1
 800a7da:	6003      	str	r3, [r0, #0]
 800a7dc:	4610      	mov	r0, r2
 800a7de:	4770      	bx	lr
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	4770      	bx	lr
 800a7e4:	2020      	movs	r0, #32
 800a7e6:	4770      	bx	lr

0800a7e8 <__i2b>:
 800a7e8:	b510      	push	{r4, lr}
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	2101      	movs	r1, #1
 800a7ee:	f7ff ff27 	bl	800a640 <_Balloc>
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	6144      	str	r4, [r0, #20]
 800a7f6:	6102      	str	r2, [r0, #16]
 800a7f8:	bd10      	pop	{r4, pc}

0800a7fa <__multiply>:
 800a7fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fe:	4614      	mov	r4, r2
 800a800:	690a      	ldr	r2, [r1, #16]
 800a802:	6923      	ldr	r3, [r4, #16]
 800a804:	429a      	cmp	r2, r3
 800a806:	bfb8      	it	lt
 800a808:	460b      	movlt	r3, r1
 800a80a:	4688      	mov	r8, r1
 800a80c:	bfbc      	itt	lt
 800a80e:	46a0      	movlt	r8, r4
 800a810:	461c      	movlt	r4, r3
 800a812:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a816:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a81a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a81e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a822:	eb07 0609 	add.w	r6, r7, r9
 800a826:	429e      	cmp	r6, r3
 800a828:	bfc8      	it	gt
 800a82a:	3101      	addgt	r1, #1
 800a82c:	f7ff ff08 	bl	800a640 <_Balloc>
 800a830:	f100 0514 	add.w	r5, r0, #20
 800a834:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800a838:	462b      	mov	r3, r5
 800a83a:	2200      	movs	r2, #0
 800a83c:	4563      	cmp	r3, ip
 800a83e:	d202      	bcs.n	800a846 <__multiply+0x4c>
 800a840:	f843 2b04 	str.w	r2, [r3], #4
 800a844:	e7fa      	b.n	800a83c <__multiply+0x42>
 800a846:	f104 0214 	add.w	r2, r4, #20
 800a84a:	f108 0114 	add.w	r1, r8, #20
 800a84e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a852:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	9b00      	ldr	r3, [sp, #0]
 800a85a:	9201      	str	r2, [sp, #4]
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d957      	bls.n	800a910 <__multiply+0x116>
 800a860:	f8b2 b000 	ldrh.w	fp, [r2]
 800a864:	f1bb 0f00 	cmp.w	fp, #0
 800a868:	d023      	beq.n	800a8b2 <__multiply+0xb8>
 800a86a:	4689      	mov	r9, r1
 800a86c:	46ae      	mov	lr, r5
 800a86e:	f04f 0800 	mov.w	r8, #0
 800a872:	f859 4b04 	ldr.w	r4, [r9], #4
 800a876:	f8be a000 	ldrh.w	sl, [lr]
 800a87a:	b2a3      	uxth	r3, r4
 800a87c:	fb0b a303 	mla	r3, fp, r3, sl
 800a880:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a884:	f8de 4000 	ldr.w	r4, [lr]
 800a888:	4443      	add	r3, r8
 800a88a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a88e:	fb0b 840a 	mla	r4, fp, sl, r8
 800a892:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a896:	46f2      	mov	sl, lr
 800a898:	b29b      	uxth	r3, r3
 800a89a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a89e:	454f      	cmp	r7, r9
 800a8a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a8a4:	f84a 3b04 	str.w	r3, [sl], #4
 800a8a8:	d901      	bls.n	800a8ae <__multiply+0xb4>
 800a8aa:	46d6      	mov	lr, sl
 800a8ac:	e7e1      	b.n	800a872 <__multiply+0x78>
 800a8ae:	f8ce 8004 	str.w	r8, [lr, #4]
 800a8b2:	9b01      	ldr	r3, [sp, #4]
 800a8b4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a8b8:	3204      	adds	r2, #4
 800a8ba:	f1ba 0f00 	cmp.w	sl, #0
 800a8be:	d021      	beq.n	800a904 <__multiply+0x10a>
 800a8c0:	682b      	ldr	r3, [r5, #0]
 800a8c2:	462c      	mov	r4, r5
 800a8c4:	4689      	mov	r9, r1
 800a8c6:	f04f 0800 	mov.w	r8, #0
 800a8ca:	f8b9 e000 	ldrh.w	lr, [r9]
 800a8ce:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 800a8d2:	fb0a be0e 	mla	lr, sl, lr, fp
 800a8d6:	44f0      	add	r8, lr
 800a8d8:	46a3      	mov	fp, r4
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800a8e0:	f84b 3b04 	str.w	r3, [fp], #4
 800a8e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a8e8:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 800a8ec:	0c1b      	lsrs	r3, r3, #16
 800a8ee:	fb0a e303 	mla	r3, sl, r3, lr
 800a8f2:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 800a8f6:	454f      	cmp	r7, r9
 800a8f8:	ea4f 4813 	mov.w	r8, r3, lsr #16
 800a8fc:	d901      	bls.n	800a902 <__multiply+0x108>
 800a8fe:	465c      	mov	r4, fp
 800a900:	e7e3      	b.n	800a8ca <__multiply+0xd0>
 800a902:	6063      	str	r3, [r4, #4]
 800a904:	3504      	adds	r5, #4
 800a906:	e7a7      	b.n	800a858 <__multiply+0x5e>
 800a908:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 800a90c:	b913      	cbnz	r3, 800a914 <__multiply+0x11a>
 800a90e:	3e01      	subs	r6, #1
 800a910:	2e00      	cmp	r6, #0
 800a912:	dcf9      	bgt.n	800a908 <__multiply+0x10e>
 800a914:	6106      	str	r6, [r0, #16]
 800a916:	b003      	add	sp, #12
 800a918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a91c <__pow5mult>:
 800a91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a920:	4615      	mov	r5, r2
 800a922:	f012 0203 	ands.w	r2, r2, #3
 800a926:	4606      	mov	r6, r0
 800a928:	460f      	mov	r7, r1
 800a92a:	d007      	beq.n	800a93c <__pow5mult+0x20>
 800a92c:	3a01      	subs	r2, #1
 800a92e:	4c21      	ldr	r4, [pc, #132]	; (800a9b4 <__pow5mult+0x98>)
 800a930:	2300      	movs	r3, #0
 800a932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a936:	f7ff fecf 	bl	800a6d8 <__multadd>
 800a93a:	4607      	mov	r7, r0
 800a93c:	10ad      	asrs	r5, r5, #2
 800a93e:	d036      	beq.n	800a9ae <__pow5mult+0x92>
 800a940:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a942:	b93c      	cbnz	r4, 800a954 <__pow5mult+0x38>
 800a944:	2010      	movs	r0, #16
 800a946:	f7fd fc99 	bl	800827c <malloc>
 800a94a:	6270      	str	r0, [r6, #36]	; 0x24
 800a94c:	6044      	str	r4, [r0, #4]
 800a94e:	6084      	str	r4, [r0, #8]
 800a950:	6004      	str	r4, [r0, #0]
 800a952:	60c4      	str	r4, [r0, #12]
 800a954:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a958:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a95c:	b94c      	cbnz	r4, 800a972 <__pow5mult+0x56>
 800a95e:	f240 2171 	movw	r1, #625	; 0x271
 800a962:	4630      	mov	r0, r6
 800a964:	f7ff ff40 	bl	800a7e8 <__i2b>
 800a968:	2300      	movs	r3, #0
 800a96a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a96e:	4604      	mov	r4, r0
 800a970:	6003      	str	r3, [r0, #0]
 800a972:	f04f 0800 	mov.w	r8, #0
 800a976:	07eb      	lsls	r3, r5, #31
 800a978:	d50a      	bpl.n	800a990 <__pow5mult+0x74>
 800a97a:	4639      	mov	r1, r7
 800a97c:	4622      	mov	r2, r4
 800a97e:	4630      	mov	r0, r6
 800a980:	f7ff ff3b 	bl	800a7fa <__multiply>
 800a984:	4639      	mov	r1, r7
 800a986:	4681      	mov	r9, r0
 800a988:	4630      	mov	r0, r6
 800a98a:	f7ff fe8e 	bl	800a6aa <_Bfree>
 800a98e:	464f      	mov	r7, r9
 800a990:	106d      	asrs	r5, r5, #1
 800a992:	d00c      	beq.n	800a9ae <__pow5mult+0x92>
 800a994:	6820      	ldr	r0, [r4, #0]
 800a996:	b108      	cbz	r0, 800a99c <__pow5mult+0x80>
 800a998:	4604      	mov	r4, r0
 800a99a:	e7ec      	b.n	800a976 <__pow5mult+0x5a>
 800a99c:	4622      	mov	r2, r4
 800a99e:	4621      	mov	r1, r4
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f7ff ff2a 	bl	800a7fa <__multiply>
 800a9a6:	6020      	str	r0, [r4, #0]
 800a9a8:	f8c0 8000 	str.w	r8, [r0]
 800a9ac:	e7f4      	b.n	800a998 <__pow5mult+0x7c>
 800a9ae:	4638      	mov	r0, r7
 800a9b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9b4:	0800b320 	.word	0x0800b320

0800a9b8 <__lshift>:
 800a9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9bc:	460c      	mov	r4, r1
 800a9be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9c2:	6926      	ldr	r6, [r4, #16]
 800a9c4:	6849      	ldr	r1, [r1, #4]
 800a9c6:	68a3      	ldr	r3, [r4, #8]
 800a9c8:	4456      	add	r6, sl
 800a9ca:	4607      	mov	r7, r0
 800a9cc:	4691      	mov	r9, r2
 800a9ce:	1c75      	adds	r5, r6, #1
 800a9d0:	42ab      	cmp	r3, r5
 800a9d2:	da02      	bge.n	800a9da <__lshift+0x22>
 800a9d4:	3101      	adds	r1, #1
 800a9d6:	005b      	lsls	r3, r3, #1
 800a9d8:	e7fa      	b.n	800a9d0 <__lshift+0x18>
 800a9da:	4638      	mov	r0, r7
 800a9dc:	f7ff fe30 	bl	800a640 <_Balloc>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	4680      	mov	r8, r0
 800a9e4:	f100 0114 	add.w	r1, r0, #20
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	4553      	cmp	r3, sl
 800a9ec:	da03      	bge.n	800a9f6 <__lshift+0x3e>
 800a9ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	e7f9      	b.n	800a9ea <__lshift+0x32>
 800a9f6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800a9fa:	6920      	ldr	r0, [r4, #16]
 800a9fc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800aa00:	f019 091f 	ands.w	r9, r9, #31
 800aa04:	f104 0114 	add.w	r1, r4, #20
 800aa08:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800aa0c:	d014      	beq.n	800aa38 <__lshift+0x80>
 800aa0e:	f1c9 0c20 	rsb	ip, r9, #32
 800aa12:	2200      	movs	r2, #0
 800aa14:	6808      	ldr	r0, [r1, #0]
 800aa16:	fa00 f009 	lsl.w	r0, r0, r9
 800aa1a:	4302      	orrs	r2, r0
 800aa1c:	469a      	mov	sl, r3
 800aa1e:	f843 2b04 	str.w	r2, [r3], #4
 800aa22:	f851 2b04 	ldr.w	r2, [r1], #4
 800aa26:	458e      	cmp	lr, r1
 800aa28:	fa22 f20c 	lsr.w	r2, r2, ip
 800aa2c:	d8f2      	bhi.n	800aa14 <__lshift+0x5c>
 800aa2e:	f8ca 2004 	str.w	r2, [sl, #4]
 800aa32:	b142      	cbz	r2, 800aa46 <__lshift+0x8e>
 800aa34:	1cb5      	adds	r5, r6, #2
 800aa36:	e006      	b.n	800aa46 <__lshift+0x8e>
 800aa38:	3b04      	subs	r3, #4
 800aa3a:	f851 2b04 	ldr.w	r2, [r1], #4
 800aa3e:	f843 2f04 	str.w	r2, [r3, #4]!
 800aa42:	458e      	cmp	lr, r1
 800aa44:	d8f9      	bhi.n	800aa3a <__lshift+0x82>
 800aa46:	3d01      	subs	r5, #1
 800aa48:	4638      	mov	r0, r7
 800aa4a:	f8c8 5010 	str.w	r5, [r8, #16]
 800aa4e:	4621      	mov	r1, r4
 800aa50:	f7ff fe2b 	bl	800a6aa <_Bfree>
 800aa54:	4640      	mov	r0, r8
 800aa56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800aa5a <__mcmp>:
 800aa5a:	6903      	ldr	r3, [r0, #16]
 800aa5c:	690a      	ldr	r2, [r1, #16]
 800aa5e:	1a9b      	subs	r3, r3, r2
 800aa60:	b510      	push	{r4, lr}
 800aa62:	d111      	bne.n	800aa88 <__mcmp+0x2e>
 800aa64:	0092      	lsls	r2, r2, #2
 800aa66:	3014      	adds	r0, #20
 800aa68:	3114      	adds	r1, #20
 800aa6a:	1883      	adds	r3, r0, r2
 800aa6c:	440a      	add	r2, r1
 800aa6e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800aa72:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800aa76:	428c      	cmp	r4, r1
 800aa78:	d002      	beq.n	800aa80 <__mcmp+0x26>
 800aa7a:	d307      	bcc.n	800aa8c <__mcmp+0x32>
 800aa7c:	2001      	movs	r0, #1
 800aa7e:	bd10      	pop	{r4, pc}
 800aa80:	4298      	cmp	r0, r3
 800aa82:	d3f4      	bcc.n	800aa6e <__mcmp+0x14>
 800aa84:	2000      	movs	r0, #0
 800aa86:	bd10      	pop	{r4, pc}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	bd10      	pop	{r4, pc}
 800aa8c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa90:	bd10      	pop	{r4, pc}

0800aa92 <__mdiff>:
 800aa92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa96:	460c      	mov	r4, r1
 800aa98:	4607      	mov	r7, r0
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	4615      	mov	r5, r2
 800aaa0:	f7ff ffdb 	bl	800aa5a <__mcmp>
 800aaa4:	1e06      	subs	r6, r0, #0
 800aaa6:	d108      	bne.n	800aaba <__mdiff+0x28>
 800aaa8:	4631      	mov	r1, r6
 800aaaa:	4638      	mov	r0, r7
 800aaac:	f7ff fdc8 	bl	800a640 <_Balloc>
 800aab0:	2301      	movs	r3, #1
 800aab2:	6103      	str	r3, [r0, #16]
 800aab4:	6146      	str	r6, [r0, #20]
 800aab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaba:	bfbc      	itt	lt
 800aabc:	4623      	movlt	r3, r4
 800aabe:	462c      	movlt	r4, r5
 800aac0:	4638      	mov	r0, r7
 800aac2:	6861      	ldr	r1, [r4, #4]
 800aac4:	bfba      	itte	lt
 800aac6:	461d      	movlt	r5, r3
 800aac8:	2601      	movlt	r6, #1
 800aaca:	2600      	movge	r6, #0
 800aacc:	f7ff fdb8 	bl	800a640 <_Balloc>
 800aad0:	692b      	ldr	r3, [r5, #16]
 800aad2:	60c6      	str	r6, [r0, #12]
 800aad4:	6926      	ldr	r6, [r4, #16]
 800aad6:	f105 0914 	add.w	r9, r5, #20
 800aada:	3414      	adds	r4, #20
 800aadc:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800aae0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800aae4:	f100 0514 	add.w	r5, r0, #20
 800aae8:	f04f 0c00 	mov.w	ip, #0
 800aaec:	f854 3b04 	ldr.w	r3, [r4], #4
 800aaf0:	f859 2b04 	ldr.w	r2, [r9], #4
 800aaf4:	fa1c f183 	uxtah	r1, ip, r3
 800aaf8:	fa1f fe82 	uxth.w	lr, r2
 800aafc:	0c12      	lsrs	r2, r2, #16
 800aafe:	ebce 0101 	rsb	r1, lr, r1
 800ab02:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800ab06:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ab0a:	b289      	uxth	r1, r1
 800ab0c:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ab10:	45c8      	cmp	r8, r9
 800ab12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ab16:	46a6      	mov	lr, r4
 800ab18:	f845 3b04 	str.w	r3, [r5], #4
 800ab1c:	d8e6      	bhi.n	800aaec <__mdiff+0x5a>
 800ab1e:	45be      	cmp	lr, r7
 800ab20:	d20e      	bcs.n	800ab40 <__mdiff+0xae>
 800ab22:	f85e 1b04 	ldr.w	r1, [lr], #4
 800ab26:	fa1c f281 	uxtah	r2, ip, r1
 800ab2a:	1413      	asrs	r3, r2, #16
 800ab2c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800ab30:	b292      	uxth	r2, r2
 800ab32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ab36:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ab3a:	f845 2b04 	str.w	r2, [r5], #4
 800ab3e:	e7ee      	b.n	800ab1e <__mdiff+0x8c>
 800ab40:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ab44:	b90b      	cbnz	r3, 800ab4a <__mdiff+0xb8>
 800ab46:	3e01      	subs	r6, #1
 800ab48:	e7fa      	b.n	800ab40 <__mdiff+0xae>
 800ab4a:	6106      	str	r6, [r0, #16]
 800ab4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ab50 <__d2b>:
 800ab50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab54:	460e      	mov	r6, r1
 800ab56:	2101      	movs	r1, #1
 800ab58:	ec59 8b10 	vmov	r8, r9, d0
 800ab5c:	4615      	mov	r5, r2
 800ab5e:	f7ff fd6f 	bl	800a640 <_Balloc>
 800ab62:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ab66:	4607      	mov	r7, r0
 800ab68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab6c:	b10c      	cbz	r4, 800ab72 <__d2b+0x22>
 800ab6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab72:	9301      	str	r3, [sp, #4]
 800ab74:	f1b8 0f00 	cmp.w	r8, #0
 800ab78:	d019      	beq.n	800abae <__d2b+0x5e>
 800ab7a:	a802      	add	r0, sp, #8
 800ab7c:	f840 8d08 	str.w	r8, [r0, #-8]!
 800ab80:	f7ff fe05 	bl	800a78e <__lo0bits>
 800ab84:	9b00      	ldr	r3, [sp, #0]
 800ab86:	b148      	cbz	r0, 800ab9c <__d2b+0x4c>
 800ab88:	9a01      	ldr	r2, [sp, #4]
 800ab8a:	f1c0 0120 	rsb	r1, r0, #32
 800ab8e:	fa02 f101 	lsl.w	r1, r2, r1
 800ab92:	430b      	orrs	r3, r1
 800ab94:	40c2      	lsrs	r2, r0
 800ab96:	617b      	str	r3, [r7, #20]
 800ab98:	9201      	str	r2, [sp, #4]
 800ab9a:	e000      	b.n	800ab9e <__d2b+0x4e>
 800ab9c:	617b      	str	r3, [r7, #20]
 800ab9e:	9b01      	ldr	r3, [sp, #4]
 800aba0:	61bb      	str	r3, [r7, #24]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	bf14      	ite	ne
 800aba6:	2102      	movne	r1, #2
 800aba8:	2101      	moveq	r1, #1
 800abaa:	6139      	str	r1, [r7, #16]
 800abac:	e007      	b.n	800abbe <__d2b+0x6e>
 800abae:	a801      	add	r0, sp, #4
 800abb0:	f7ff fded 	bl	800a78e <__lo0bits>
 800abb4:	9b01      	ldr	r3, [sp, #4]
 800abb6:	617b      	str	r3, [r7, #20]
 800abb8:	2101      	movs	r1, #1
 800abba:	6139      	str	r1, [r7, #16]
 800abbc:	3020      	adds	r0, #32
 800abbe:	b134      	cbz	r4, 800abce <__d2b+0x7e>
 800abc0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800abc4:	4404      	add	r4, r0
 800abc6:	6034      	str	r4, [r6, #0]
 800abc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800abcc:	e009      	b.n	800abe2 <__d2b+0x92>
 800abce:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800abd2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800abd6:	6030      	str	r0, [r6, #0]
 800abd8:	6918      	ldr	r0, [r3, #16]
 800abda:	f7ff fdb8 	bl	800a74e <__hi0bits>
 800abde:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800abe2:	6028      	str	r0, [r5, #0]
 800abe4:	4638      	mov	r0, r7
 800abe6:	b003      	add	sp, #12
 800abe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800abec <__ssprint_r>:
 800abec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf0:	4693      	mov	fp, r2
 800abf2:	6892      	ldr	r2, [r2, #8]
 800abf4:	4681      	mov	r9, r0
 800abf6:	460c      	mov	r4, r1
 800abf8:	b34a      	cbz	r2, 800ac4e <__ssprint_r+0x62>
 800abfa:	2300      	movs	r3, #0
 800abfc:	f8db a000 	ldr.w	sl, [fp]
 800ac00:	9301      	str	r3, [sp, #4]
 800ac02:	461f      	mov	r7, r3
 800ac04:	e006      	b.n	800ac14 <__ssprint_r+0x28>
 800ac06:	f8da 3000 	ldr.w	r3, [sl]
 800ac0a:	f8da 7004 	ldr.w	r7, [sl, #4]
 800ac0e:	9301      	str	r3, [sp, #4]
 800ac10:	f10a 0a08 	add.w	sl, sl, #8
 800ac14:	2f00      	cmp	r7, #0
 800ac16:	d0f6      	beq.n	800ac06 <__ssprint_r+0x1a>
 800ac18:	68a6      	ldr	r6, [r4, #8]
 800ac1a:	42b7      	cmp	r7, r6
 800ac1c:	d360      	bcc.n	800ace0 <__ssprint_r+0xf4>
 800ac1e:	89a0      	ldrh	r0, [r4, #12]
 800ac20:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800ac24:	d117      	bne.n	800ac56 <__ssprint_r+0x6a>
 800ac26:	42b7      	cmp	r7, r6
 800ac28:	d35a      	bcc.n	800ace0 <__ssprint_r+0xf4>
 800ac2a:	4632      	mov	r2, r6
 800ac2c:	9901      	ldr	r1, [sp, #4]
 800ac2e:	6820      	ldr	r0, [r4, #0]
 800ac30:	f000 f888 	bl	800ad44 <memmove>
 800ac34:	68a2      	ldr	r2, [r4, #8]
 800ac36:	1b92      	subs	r2, r2, r6
 800ac38:	60a2      	str	r2, [r4, #8]
 800ac3a:	6822      	ldr	r2, [r4, #0]
 800ac3c:	4416      	add	r6, r2
 800ac3e:	f8db 2008 	ldr.w	r2, [fp, #8]
 800ac42:	6026      	str	r6, [r4, #0]
 800ac44:	1bd7      	subs	r7, r2, r7
 800ac46:	f8cb 7008 	str.w	r7, [fp, #8]
 800ac4a:	2f00      	cmp	r7, #0
 800ac4c:	d1db      	bne.n	800ac06 <__ssprint_r+0x1a>
 800ac4e:	2000      	movs	r0, #0
 800ac50:	f8cb 0004 	str.w	r0, [fp, #4]
 800ac54:	e046      	b.n	800ace4 <__ssprint_r+0xf8>
 800ac56:	6825      	ldr	r5, [r4, #0]
 800ac58:	6921      	ldr	r1, [r4, #16]
 800ac5a:	ebc1 0805 	rsb	r8, r1, r5
 800ac5e:	f108 0201 	add.w	r2, r8, #1
 800ac62:	6965      	ldr	r5, [r4, #20]
 800ac64:	443a      	add	r2, r7
 800ac66:	2302      	movs	r3, #2
 800ac68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac6c:	fb95 f5f3 	sdiv	r5, r5, r3
 800ac70:	4295      	cmp	r5, r2
 800ac72:	bf38      	it	cc
 800ac74:	4615      	movcc	r5, r2
 800ac76:	0543      	lsls	r3, r0, #21
 800ac78:	d510      	bpl.n	800ac9c <__ssprint_r+0xb0>
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	4648      	mov	r0, r9
 800ac7e:	f7fd fb0d 	bl	800829c <_malloc_r>
 800ac82:	4606      	mov	r6, r0
 800ac84:	b1a0      	cbz	r0, 800acb0 <__ssprint_r+0xc4>
 800ac86:	4642      	mov	r2, r8
 800ac88:	6921      	ldr	r1, [r4, #16]
 800ac8a:	f7fd fd27 	bl	80086dc <memcpy>
 800ac8e:	89a2      	ldrh	r2, [r4, #12]
 800ac90:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ac94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ac98:	81a2      	strh	r2, [r4, #12]
 800ac9a:	e018      	b.n	800acce <__ssprint_r+0xe2>
 800ac9c:	462a      	mov	r2, r5
 800ac9e:	4648      	mov	r0, r9
 800aca0:	f000 f874 	bl	800ad8c <_realloc_r>
 800aca4:	4606      	mov	r6, r0
 800aca6:	b990      	cbnz	r0, 800acce <__ssprint_r+0xe2>
 800aca8:	6921      	ldr	r1, [r4, #16]
 800acaa:	4648      	mov	r0, r9
 800acac:	f7ff fc06 	bl	800a4bc <_free_r>
 800acb0:	220c      	movs	r2, #12
 800acb2:	f8c9 2000 	str.w	r2, [r9]
 800acb6:	89a2      	ldrh	r2, [r4, #12]
 800acb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acbc:	81a2      	strh	r2, [r4, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f8cb 2008 	str.w	r2, [fp, #8]
 800acc4:	f8cb 2004 	str.w	r2, [fp, #4]
 800acc8:	f04f 30ff 	mov.w	r0, #4294967295
 800accc:	e00a      	b.n	800ace4 <__ssprint_r+0xf8>
 800acce:	6126      	str	r6, [r4, #16]
 800acd0:	6165      	str	r5, [r4, #20]
 800acd2:	4446      	add	r6, r8
 800acd4:	ebc8 0505 	rsb	r5, r8, r5
 800acd8:	6026      	str	r6, [r4, #0]
 800acda:	60a5      	str	r5, [r4, #8]
 800acdc:	463e      	mov	r6, r7
 800acde:	e7a2      	b.n	800ac26 <__ssprint_r+0x3a>
 800ace0:	463e      	mov	r6, r7
 800ace2:	e7a2      	b.n	800ac2a <__ssprint_r+0x3e>
 800ace4:	b003      	add	sp, #12
 800ace6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800acea <_calloc_r>:
 800acea:	b510      	push	{r4, lr}
 800acec:	4351      	muls	r1, r2
 800acee:	f7fd fad5 	bl	800829c <_malloc_r>
 800acf2:	4604      	mov	r4, r0
 800acf4:	b320      	cbz	r0, 800ad40 <_calloc_r+0x56>
 800acf6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800acfa:	f022 0203 	bic.w	r2, r2, #3
 800acfe:	3a04      	subs	r2, #4
 800ad00:	2a24      	cmp	r2, #36	; 0x24
 800ad02:	d81a      	bhi.n	800ad3a <_calloc_r+0x50>
 800ad04:	2a13      	cmp	r2, #19
 800ad06:	d912      	bls.n	800ad2e <_calloc_r+0x44>
 800ad08:	2100      	movs	r1, #0
 800ad0a:	2a1b      	cmp	r2, #27
 800ad0c:	6001      	str	r1, [r0, #0]
 800ad0e:	6041      	str	r1, [r0, #4]
 800ad10:	d802      	bhi.n	800ad18 <_calloc_r+0x2e>
 800ad12:	f100 0308 	add.w	r3, r0, #8
 800ad16:	e00b      	b.n	800ad30 <_calloc_r+0x46>
 800ad18:	2a24      	cmp	r2, #36	; 0x24
 800ad1a:	6081      	str	r1, [r0, #8]
 800ad1c:	60c1      	str	r1, [r0, #12]
 800ad1e:	bf11      	iteee	ne
 800ad20:	f100 0310 	addne.w	r3, r0, #16
 800ad24:	6101      	streq	r1, [r0, #16]
 800ad26:	f100 0318 	addeq.w	r3, r0, #24
 800ad2a:	6141      	streq	r1, [r0, #20]
 800ad2c:	e000      	b.n	800ad30 <_calloc_r+0x46>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2200      	movs	r2, #0
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	605a      	str	r2, [r3, #4]
 800ad36:	609a      	str	r2, [r3, #8]
 800ad38:	e002      	b.n	800ad40 <_calloc_r+0x56>
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	f000 f81d 	bl	800ad7a <memset>
 800ad40:	4620      	mov	r0, r4
 800ad42:	bd10      	pop	{r4, pc}

0800ad44 <memmove>:
 800ad44:	4288      	cmp	r0, r1
 800ad46:	b510      	push	{r4, lr}
 800ad48:	eb01 0302 	add.w	r3, r1, r2
 800ad4c:	d801      	bhi.n	800ad52 <memmove+0xe>
 800ad4e:	1e42      	subs	r2, r0, #1
 800ad50:	e00b      	b.n	800ad6a <memmove+0x26>
 800ad52:	4298      	cmp	r0, r3
 800ad54:	d2fb      	bcs.n	800ad4e <memmove+0xa>
 800ad56:	1881      	adds	r1, r0, r2
 800ad58:	1ad2      	subs	r2, r2, r3
 800ad5a:	42d3      	cmn	r3, r2
 800ad5c:	d004      	beq.n	800ad68 <memmove+0x24>
 800ad5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad62:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ad66:	e7f8      	b.n	800ad5a <memmove+0x16>
 800ad68:	bd10      	pop	{r4, pc}
 800ad6a:	4299      	cmp	r1, r3
 800ad6c:	d004      	beq.n	800ad78 <memmove+0x34>
 800ad6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad72:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ad76:	e7f8      	b.n	800ad6a <memmove+0x26>
 800ad78:	bd10      	pop	{r4, pc}

0800ad7a <memset>:
 800ad7a:	4402      	add	r2, r0
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d002      	beq.n	800ad88 <memset+0xe>
 800ad82:	f803 1b01 	strb.w	r1, [r3], #1
 800ad86:	e7fa      	b.n	800ad7e <memset+0x4>
 800ad88:	4770      	bx	lr
	...

0800ad8c <_realloc_r>:
 800ad8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad90:	4681      	mov	r9, r0
 800ad92:	460c      	mov	r4, r1
 800ad94:	b929      	cbnz	r1, 800ada2 <_realloc_r+0x16>
 800ad96:	4611      	mov	r1, r2
 800ad98:	b003      	add	sp, #12
 800ad9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9e:	f7fd ba7d 	b.w	800829c <_malloc_r>
 800ada2:	9201      	str	r2, [sp, #4]
 800ada4:	f7fd fca5 	bl	80086f2 <__malloc_lock>
 800ada8:	9a01      	ldr	r2, [sp, #4]
 800adaa:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800adae:	f102 080b 	add.w	r8, r2, #11
 800adb2:	f1b8 0f16 	cmp.w	r8, #22
 800adb6:	f1a4 0b08 	sub.w	fp, r4, #8
 800adba:	f02e 0503 	bic.w	r5, lr, #3
 800adbe:	d903      	bls.n	800adc8 <_realloc_r+0x3c>
 800adc0:	f038 0807 	bics.w	r8, r8, #7
 800adc4:	d502      	bpl.n	800adcc <_realloc_r+0x40>
 800adc6:	e003      	b.n	800add0 <_realloc_r+0x44>
 800adc8:	f04f 0810 	mov.w	r8, #16
 800adcc:	4590      	cmp	r8, r2
 800adce:	d204      	bcs.n	800adda <_realloc_r+0x4e>
 800add0:	230c      	movs	r3, #12
 800add2:	f8c9 3000 	str.w	r3, [r9]
 800add6:	2000      	movs	r0, #0
 800add8:	e17d      	b.n	800b0d6 <_realloc_r+0x34a>
 800adda:	45a8      	cmp	r8, r5
 800addc:	f340 8150 	ble.w	800b080 <_realloc_r+0x2f4>
 800ade0:	4ba6      	ldr	r3, [pc, #664]	; (800b07c <_realloc_r+0x2f0>)
 800ade2:	6898      	ldr	r0, [r3, #8]
 800ade4:	eb0b 0105 	add.w	r1, fp, r5
 800ade8:	4281      	cmp	r1, r0
 800adea:	684f      	ldr	r7, [r1, #4]
 800adec:	d005      	beq.n	800adfa <_realloc_r+0x6e>
 800adee:	f027 0601 	bic.w	r6, r7, #1
 800adf2:	440e      	add	r6, r1
 800adf4:	6876      	ldr	r6, [r6, #4]
 800adf6:	07f6      	lsls	r6, r6, #31
 800adf8:	d426      	bmi.n	800ae48 <_realloc_r+0xbc>
 800adfa:	f027 0a03 	bic.w	sl, r7, #3
 800adfe:	4281      	cmp	r1, r0
 800ae00:	eb05 070a 	add.w	r7, r5, sl
 800ae04:	d118      	bne.n	800ae38 <_realloc_r+0xac>
 800ae06:	f108 0610 	add.w	r6, r8, #16
 800ae0a:	42b7      	cmp	r7, r6
 800ae0c:	db1f      	blt.n	800ae4e <_realloc_r+0xc2>
 800ae0e:	eb0b 0008 	add.w	r0, fp, r8
 800ae12:	ebc8 0707 	rsb	r7, r8, r7
 800ae16:	f047 0701 	orr.w	r7, r7, #1
 800ae1a:	6098      	str	r0, [r3, #8]
 800ae1c:	6047      	str	r7, [r0, #4]
 800ae1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	ea43 0308 	orr.w	r3, r3, r8
 800ae2a:	4648      	mov	r0, r9
 800ae2c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae30:	f7fd fc60 	bl	80086f4 <__malloc_unlock>
 800ae34:	4620      	mov	r0, r4
 800ae36:	e14e      	b.n	800b0d6 <_realloc_r+0x34a>
 800ae38:	45b8      	cmp	r8, r7
 800ae3a:	dc08      	bgt.n	800ae4e <_realloc_r+0xc2>
 800ae3c:	68cb      	ldr	r3, [r1, #12]
 800ae3e:	688a      	ldr	r2, [r1, #8]
 800ae40:	463d      	mov	r5, r7
 800ae42:	60d3      	str	r3, [r2, #12]
 800ae44:	609a      	str	r2, [r3, #8]
 800ae46:	e11b      	b.n	800b080 <_realloc_r+0x2f4>
 800ae48:	f04f 0a00 	mov.w	sl, #0
 800ae4c:	4651      	mov	r1, sl
 800ae4e:	f01e 0f01 	tst.w	lr, #1
 800ae52:	f040 80c3 	bne.w	800afdc <_realloc_r+0x250>
 800ae56:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800ae5a:	ebc7 070b 	rsb	r7, r7, fp
 800ae5e:	687e      	ldr	r6, [r7, #4]
 800ae60:	f026 0603 	bic.w	r6, r6, #3
 800ae64:	442e      	add	r6, r5
 800ae66:	2900      	cmp	r1, #0
 800ae68:	f000 8083 	beq.w	800af72 <_realloc_r+0x1e6>
 800ae6c:	4281      	cmp	r1, r0
 800ae6e:	44b2      	add	sl, r6
 800ae70:	d147      	bne.n	800af02 <_realloc_r+0x176>
 800ae72:	f108 0110 	add.w	r1, r8, #16
 800ae76:	458a      	cmp	sl, r1
 800ae78:	db7b      	blt.n	800af72 <_realloc_r+0x1e6>
 800ae7a:	463e      	mov	r6, r7
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	f856 1f08 	ldr.w	r1, [r6, #8]!
 800ae82:	60ca      	str	r2, [r1, #12]
 800ae84:	6091      	str	r1, [r2, #8]
 800ae86:	1f2a      	subs	r2, r5, #4
 800ae88:	2a24      	cmp	r2, #36	; 0x24
 800ae8a:	d825      	bhi.n	800aed8 <_realloc_r+0x14c>
 800ae8c:	2a13      	cmp	r2, #19
 800ae8e:	d91b      	bls.n	800aec8 <_realloc_r+0x13c>
 800ae90:	6821      	ldr	r1, [r4, #0]
 800ae92:	60b9      	str	r1, [r7, #8]
 800ae94:	6861      	ldr	r1, [r4, #4]
 800ae96:	60f9      	str	r1, [r7, #12]
 800ae98:	2a1b      	cmp	r2, #27
 800ae9a:	d803      	bhi.n	800aea4 <_realloc_r+0x118>
 800ae9c:	f107 0210 	add.w	r2, r7, #16
 800aea0:	3408      	adds	r4, #8
 800aea2:	e012      	b.n	800aeca <_realloc_r+0x13e>
 800aea4:	68a1      	ldr	r1, [r4, #8]
 800aea6:	6139      	str	r1, [r7, #16]
 800aea8:	68e1      	ldr	r1, [r4, #12]
 800aeaa:	6179      	str	r1, [r7, #20]
 800aeac:	2a24      	cmp	r2, #36	; 0x24
 800aeae:	bf01      	itttt	eq
 800aeb0:	6922      	ldreq	r2, [r4, #16]
 800aeb2:	61ba      	streq	r2, [r7, #24]
 800aeb4:	6961      	ldreq	r1, [r4, #20]
 800aeb6:	61f9      	streq	r1, [r7, #28]
 800aeb8:	bf19      	ittee	ne
 800aeba:	f107 0218 	addne.w	r2, r7, #24
 800aebe:	3410      	addne	r4, #16
 800aec0:	f107 0220 	addeq.w	r2, r7, #32
 800aec4:	3418      	addeq	r4, #24
 800aec6:	e000      	b.n	800aeca <_realloc_r+0x13e>
 800aec8:	4632      	mov	r2, r6
 800aeca:	6821      	ldr	r1, [r4, #0]
 800aecc:	6011      	str	r1, [r2, #0]
 800aece:	6861      	ldr	r1, [r4, #4]
 800aed0:	6051      	str	r1, [r2, #4]
 800aed2:	68a1      	ldr	r1, [r4, #8]
 800aed4:	6091      	str	r1, [r2, #8]
 800aed6:	e005      	b.n	800aee4 <_realloc_r+0x158>
 800aed8:	4621      	mov	r1, r4
 800aeda:	4630      	mov	r0, r6
 800aedc:	9301      	str	r3, [sp, #4]
 800aede:	f7ff ff31 	bl	800ad44 <memmove>
 800aee2:	9b01      	ldr	r3, [sp, #4]
 800aee4:	eb07 0208 	add.w	r2, r7, r8
 800aee8:	ebc8 0a0a 	rsb	sl, r8, sl
 800aeec:	609a      	str	r2, [r3, #8]
 800aeee:	f04a 0301 	orr.w	r3, sl, #1
 800aef2:	6053      	str	r3, [r2, #4]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f003 0301 	and.w	r3, r3, #1
 800aefa:	ea43 0308 	orr.w	r3, r3, r8
 800aefe:	607b      	str	r3, [r7, #4]
 800af00:	e0b6      	b.n	800b070 <_realloc_r+0x2e4>
 800af02:	45d0      	cmp	r8, sl
 800af04:	dc35      	bgt.n	800af72 <_realloc_r+0x1e6>
 800af06:	68cb      	ldr	r3, [r1, #12]
 800af08:	688a      	ldr	r2, [r1, #8]
 800af0a:	4638      	mov	r0, r7
 800af0c:	60d3      	str	r3, [r2, #12]
 800af0e:	609a      	str	r2, [r3, #8]
 800af10:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	60d3      	str	r3, [r2, #12]
 800af18:	609a      	str	r2, [r3, #8]
 800af1a:	1f2a      	subs	r2, r5, #4
 800af1c:	2a24      	cmp	r2, #36	; 0x24
 800af1e:	d823      	bhi.n	800af68 <_realloc_r+0x1dc>
 800af20:	2a13      	cmp	r2, #19
 800af22:	d91a      	bls.n	800af5a <_realloc_r+0x1ce>
 800af24:	6823      	ldr	r3, [r4, #0]
 800af26:	60bb      	str	r3, [r7, #8]
 800af28:	6863      	ldr	r3, [r4, #4]
 800af2a:	60fb      	str	r3, [r7, #12]
 800af2c:	2a1b      	cmp	r2, #27
 800af2e:	d803      	bhi.n	800af38 <_realloc_r+0x1ac>
 800af30:	f107 0010 	add.w	r0, r7, #16
 800af34:	3408      	adds	r4, #8
 800af36:	e010      	b.n	800af5a <_realloc_r+0x1ce>
 800af38:	68a3      	ldr	r3, [r4, #8]
 800af3a:	613b      	str	r3, [r7, #16]
 800af3c:	68e3      	ldr	r3, [r4, #12]
 800af3e:	617b      	str	r3, [r7, #20]
 800af40:	2a24      	cmp	r2, #36	; 0x24
 800af42:	bf01      	itttt	eq
 800af44:	6923      	ldreq	r3, [r4, #16]
 800af46:	61bb      	streq	r3, [r7, #24]
 800af48:	6963      	ldreq	r3, [r4, #20]
 800af4a:	61fb      	streq	r3, [r7, #28]
 800af4c:	bf19      	ittee	ne
 800af4e:	f107 0018 	addne.w	r0, r7, #24
 800af52:	3410      	addne	r4, #16
 800af54:	f107 0020 	addeq.w	r0, r7, #32
 800af58:	3418      	addeq	r4, #24
 800af5a:	6823      	ldr	r3, [r4, #0]
 800af5c:	6003      	str	r3, [r0, #0]
 800af5e:	6863      	ldr	r3, [r4, #4]
 800af60:	6043      	str	r3, [r0, #4]
 800af62:	68a3      	ldr	r3, [r4, #8]
 800af64:	6083      	str	r3, [r0, #8]
 800af66:	e002      	b.n	800af6e <_realloc_r+0x1e2>
 800af68:	4621      	mov	r1, r4
 800af6a:	f7ff feeb 	bl	800ad44 <memmove>
 800af6e:	4655      	mov	r5, sl
 800af70:	e02e      	b.n	800afd0 <_realloc_r+0x244>
 800af72:	45b0      	cmp	r8, r6
 800af74:	dc32      	bgt.n	800afdc <_realloc_r+0x250>
 800af76:	4638      	mov	r0, r7
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800af7e:	60d3      	str	r3, [r2, #12]
 800af80:	609a      	str	r2, [r3, #8]
 800af82:	1f2a      	subs	r2, r5, #4
 800af84:	2a24      	cmp	r2, #36	; 0x24
 800af86:	d825      	bhi.n	800afd4 <_realloc_r+0x248>
 800af88:	2a13      	cmp	r2, #19
 800af8a:	d91a      	bls.n	800afc2 <_realloc_r+0x236>
 800af8c:	6823      	ldr	r3, [r4, #0]
 800af8e:	60bb      	str	r3, [r7, #8]
 800af90:	6863      	ldr	r3, [r4, #4]
 800af92:	60fb      	str	r3, [r7, #12]
 800af94:	2a1b      	cmp	r2, #27
 800af96:	d803      	bhi.n	800afa0 <_realloc_r+0x214>
 800af98:	f107 0010 	add.w	r0, r7, #16
 800af9c:	3408      	adds	r4, #8
 800af9e:	e010      	b.n	800afc2 <_realloc_r+0x236>
 800afa0:	68a3      	ldr	r3, [r4, #8]
 800afa2:	613b      	str	r3, [r7, #16]
 800afa4:	68e3      	ldr	r3, [r4, #12]
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	2a24      	cmp	r2, #36	; 0x24
 800afaa:	bf01      	itttt	eq
 800afac:	6923      	ldreq	r3, [r4, #16]
 800afae:	61bb      	streq	r3, [r7, #24]
 800afb0:	6963      	ldreq	r3, [r4, #20]
 800afb2:	61fb      	streq	r3, [r7, #28]
 800afb4:	bf19      	ittee	ne
 800afb6:	f107 0018 	addne.w	r0, r7, #24
 800afba:	3410      	addne	r4, #16
 800afbc:	f107 0020 	addeq.w	r0, r7, #32
 800afc0:	3418      	addeq	r4, #24
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	6003      	str	r3, [r0, #0]
 800afc6:	6863      	ldr	r3, [r4, #4]
 800afc8:	6043      	str	r3, [r0, #4]
 800afca:	68a3      	ldr	r3, [r4, #8]
 800afcc:	6083      	str	r3, [r0, #8]
 800afce:	4635      	mov	r5, r6
 800afd0:	46bb      	mov	fp, r7
 800afd2:	e055      	b.n	800b080 <_realloc_r+0x2f4>
 800afd4:	4621      	mov	r1, r4
 800afd6:	f7ff feb5 	bl	800ad44 <memmove>
 800afda:	e7f8      	b.n	800afce <_realloc_r+0x242>
 800afdc:	4611      	mov	r1, r2
 800afde:	4648      	mov	r0, r9
 800afe0:	f7fd f95c 	bl	800829c <_malloc_r>
 800afe4:	4606      	mov	r6, r0
 800afe6:	2800      	cmp	r0, #0
 800afe8:	d042      	beq.n	800b070 <_realloc_r+0x2e4>
 800afea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800afee:	f023 0301 	bic.w	r3, r3, #1
 800aff2:	f1a0 0208 	sub.w	r2, r0, #8
 800aff6:	445b      	add	r3, fp
 800aff8:	429a      	cmp	r2, r3
 800affa:	d105      	bne.n	800b008 <_realloc_r+0x27c>
 800affc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b000:	f023 0303 	bic.w	r3, r3, #3
 800b004:	441d      	add	r5, r3
 800b006:	e03b      	b.n	800b080 <_realloc_r+0x2f4>
 800b008:	1f2a      	subs	r2, r5, #4
 800b00a:	2a24      	cmp	r2, #36	; 0x24
 800b00c:	d829      	bhi.n	800b062 <_realloc_r+0x2d6>
 800b00e:	2a13      	cmp	r2, #19
 800b010:	d91e      	bls.n	800b050 <_realloc_r+0x2c4>
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	6003      	str	r3, [r0, #0]
 800b016:	6863      	ldr	r3, [r4, #4]
 800b018:	6043      	str	r3, [r0, #4]
 800b01a:	2a1b      	cmp	r2, #27
 800b01c:	d804      	bhi.n	800b028 <_realloc_r+0x29c>
 800b01e:	f100 0308 	add.w	r3, r0, #8
 800b022:	f104 0208 	add.w	r2, r4, #8
 800b026:	e015      	b.n	800b054 <_realloc_r+0x2c8>
 800b028:	68a3      	ldr	r3, [r4, #8]
 800b02a:	6083      	str	r3, [r0, #8]
 800b02c:	68e3      	ldr	r3, [r4, #12]
 800b02e:	60c3      	str	r3, [r0, #12]
 800b030:	2a24      	cmp	r2, #36	; 0x24
 800b032:	bf01      	itttt	eq
 800b034:	6923      	ldreq	r3, [r4, #16]
 800b036:	6103      	streq	r3, [r0, #16]
 800b038:	6961      	ldreq	r1, [r4, #20]
 800b03a:	6141      	streq	r1, [r0, #20]
 800b03c:	bf19      	ittee	ne
 800b03e:	f100 0310 	addne.w	r3, r0, #16
 800b042:	f104 0210 	addne.w	r2, r4, #16
 800b046:	f100 0318 	addeq.w	r3, r0, #24
 800b04a:	f104 0218 	addeq.w	r2, r4, #24
 800b04e:	e001      	b.n	800b054 <_realloc_r+0x2c8>
 800b050:	4603      	mov	r3, r0
 800b052:	4622      	mov	r2, r4
 800b054:	6811      	ldr	r1, [r2, #0]
 800b056:	6019      	str	r1, [r3, #0]
 800b058:	6851      	ldr	r1, [r2, #4]
 800b05a:	6059      	str	r1, [r3, #4]
 800b05c:	6892      	ldr	r2, [r2, #8]
 800b05e:	609a      	str	r2, [r3, #8]
 800b060:	e002      	b.n	800b068 <_realloc_r+0x2dc>
 800b062:	4621      	mov	r1, r4
 800b064:	f7ff fe6e 	bl	800ad44 <memmove>
 800b068:	4621      	mov	r1, r4
 800b06a:	4648      	mov	r0, r9
 800b06c:	f7ff fa26 	bl	800a4bc <_free_r>
 800b070:	4648      	mov	r0, r9
 800b072:	f7fd fb3f 	bl	80086f4 <__malloc_unlock>
 800b076:	4630      	mov	r0, r6
 800b078:	e02d      	b.n	800b0d6 <_realloc_r+0x34a>
 800b07a:	bf00      	nop
 800b07c:	20000158 	.word	0x20000158
 800b080:	ebc8 0205 	rsb	r2, r8, r5
 800b084:	2a0f      	cmp	r2, #15
 800b086:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b08a:	d914      	bls.n	800b0b6 <_realloc_r+0x32a>
 800b08c:	f003 0301 	and.w	r3, r3, #1
 800b090:	eb0b 0108 	add.w	r1, fp, r8
 800b094:	ea43 0308 	orr.w	r3, r3, r8
 800b098:	f8cb 3004 	str.w	r3, [fp, #4]
 800b09c:	f042 0301 	orr.w	r3, r2, #1
 800b0a0:	440a      	add	r2, r1
 800b0a2:	604b      	str	r3, [r1, #4]
 800b0a4:	6853      	ldr	r3, [r2, #4]
 800b0a6:	f043 0301 	orr.w	r3, r3, #1
 800b0aa:	6053      	str	r3, [r2, #4]
 800b0ac:	3108      	adds	r1, #8
 800b0ae:	4648      	mov	r0, r9
 800b0b0:	f7ff fa04 	bl	800a4bc <_free_r>
 800b0b4:	e00a      	b.n	800b0cc <_realloc_r+0x340>
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	432b      	orrs	r3, r5
 800b0bc:	eb0b 0205 	add.w	r2, fp, r5
 800b0c0:	f8cb 3004 	str.w	r3, [fp, #4]
 800b0c4:	6853      	ldr	r3, [r2, #4]
 800b0c6:	f043 0301 	orr.w	r3, r3, #1
 800b0ca:	6053      	str	r3, [r2, #4]
 800b0cc:	4648      	mov	r0, r9
 800b0ce:	f7fd fb11 	bl	80086f4 <__malloc_unlock>
 800b0d2:	f10b 0008 	add.w	r0, fp, #8
 800b0d6:	b003      	add	sp, #12
 800b0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0dc <_sbrk>:
 800b0dc:	4b04      	ldr	r3, [pc, #16]	; (800b0f0 <_sbrk+0x14>)
 800b0de:	6819      	ldr	r1, [r3, #0]
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	b909      	cbnz	r1, 800b0e8 <_sbrk+0xc>
 800b0e4:	4903      	ldr	r1, [pc, #12]	; (800b0f4 <_sbrk+0x18>)
 800b0e6:	6019      	str	r1, [r3, #0]
 800b0e8:	6818      	ldr	r0, [r3, #0]
 800b0ea:	4402      	add	r2, r0
 800b0ec:	601a      	str	r2, [r3, #0]
 800b0ee:	4770      	bx	lr
 800b0f0:	2000090c 	.word	0x2000090c
 800b0f4:	2000117c 	.word	0x2000117c

0800b0f8 <_init>:
 800b0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fa:	bf00      	nop
 800b0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0fe:	bc08      	pop	{r3}
 800b100:	469e      	mov	lr, r3
 800b102:	4770      	bx	lr

0800b104 <_fini>:
 800b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b106:	bf00      	nop
 800b108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b10a:	bc08      	pop	{r3}
 800b10c:	469e      	mov	lr, r3
 800b10e:	4770      	bx	lr
